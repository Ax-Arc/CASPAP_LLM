{
    "id": "TA0006",
    "name_eng": "Credential Access",
    "name_jp": "クレデンシャル・アクセス",
    "description_eng": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
    "description_jp": "敵はアカウント名とパスワードを盗もうとしている。\n\nクレデンシャル・アクセスは、アカウント名やパスワードのようなクレデンシャルを盗む技術で構成される。クレデンシャルを取得するために使用される技法には、キーロギングまたはクレデンシャル・ダンピングが含まれる。正当なクレデンシャルを使用することで、敵対者はシステムにアクセスできるようになり、検出が難しくなり、目的達成のためにさらにアカウントを作成する機会を得ることができます。",
    "ckc_map_info": [
        {
            "ckc_id": "ckc-005",
            "ckc_phase_number": 5,
            "ckc_phase_name_en": "Installation",
            "ckc_description_en": "Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.",
            "ckc_phase_name_jp": "インストール",
            "ckc_description_jp": "攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。"
        },
        {
            "ckc_id": "ckc-006",
            "ckc_phase_number": 6,
            "ckc_phase_name_en": "Command and Control (C2)",
            "ckc_description_en": "Attacker establishes a communication channel with the compromised system to remotely control it, exfiltrate data, or issue further commands.",
            "ckc_phase_name_jp": "コマンド＆コントロール (C2)",
            "ckc_description_jp": "攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。"
        }
    ],
    "ckc_mapping_rational": "アカウント名やパスワードを窃取する活動。永続化のための認証情報窃取（インストール）や、C2後の横展開のための情報収集として行われる。",
    "techniques": [
        {
            "id": "T1557",
            "name_eng": "Adversary-in-the-Middle",
            "name_jp": "中間敵対者",
            "description_eng": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
            "description_jp": "敵対者は、[ネットワーク・スニッフィング](https://attack.mitre.org/techniques/T1040)、[送信データ操作](https://attack.mitre.org/techniques/T1565/002)、またはリプレイ攻撃([クレデンシャル・アクセスのための搾取](https://attack.mitre.org/techniques/T1212))などの後続動作をサポートするために、敵対者の中間(AiTM)技術を使用して 2 つ以上のネットワーク接続されたデバイスの間に自分自身を位置付けようとするかもしれない。ネットワーク・トラフィックのフローを決定できる一般的なネットワーキング・プロトコルの機能(ARP、DNS、LLMNR など)を悪用することで、敵対者はデバイスに敵対者が制御するシステムを介して通信するよう強制し、情報収集や追加のアクションを実行することができる(引用：Rapid7 MiTM Basics)。\n\n例えば、敵対者は被害者の DNS 設定を操作して、ユーザが合法的なサイトにアクセスするのを阻止/リダイレクトしたり、追加のマルウェアをプッシュしたりするなどの他の悪意ある活動を可能にするかもしれません(引用：ttint_rat)(引用：dns_changer_trojans)(引用：ad_blocker_with_miner) また、敵対者は DNS を操作し、その立場を利用して、アクセストークンを含むユーザの認証情報を傍受する可能性もあります([Steal Application Access Token](https://attack.mitre.org/techniques/T1528))やセッションクッキー([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) を含む。(引用：volexity_0day_sophos_FW)(引用：トークン戦術) [ダウングレード攻撃](https://attack.mitre.org/techniques/T1562/010)通信プロトコル(SSL/TLS)や暗号化アルゴリズムの、より安全性の低い、非推奨の、またはより弱いバージョンを交渉することなどによって、AiTMの立場を確立するために使用することもできる(引用：mitm_tls_downgrade_att)(引用：taxonomy_downgrade_att_tls)(引用：tlseminar_downgrade_att)\n\n攻撃者はまた、AiTM の立場を利用して、[Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002)のように、トラフィックの監視や変更を試みることもできる。攻撃者は AiTM と同じようなポジションをセットアップして、トラフィックが適切な宛先に流れ ないようにすることができる。これは潜在的には[Impair Defenses](https://attack.mitre.org/techniques/T1562)、[Network Denial of Service](https://attack.mitre.org/techniques/T1498)をサポートするためである。",
            "subtechniques": [
                {
                    "id": "T1557.003",
                    "name_eng": "DHCP Spoofing",
                    "name_jp": "DHCPスプーフィング",
                    "description_eng": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.(Citation: rfc2131) The typical server-client interaction is as follows: \n\n1. The client broadcasts a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which includes an available network address. \n\n3. The client broadcasts a `REQUEST` message, which includes the network address offered. \n\n4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.(Citation: new_rogue_DHCP_serv_malware)(Citation: w32.tidserv.g) Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\n\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address.(Citation: rfc3315) Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\n\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002)) by generating many broadcast DISCOVER messages to exhaust a network’s DHCP allocation pool.",
                    "description_jp": "敵対者は、DHCP（Dynamic Host Configuration Protocol）トラフィックを偽装し、被害者ネットワーク上で悪意のあるDHCPサーバとして振る舞うことで、ネットワークトラフィックを敵対者が所有するシステムにリダイレクトする可能性があります。敵対者は、中間者（AiTM）の立場を獲得することで、特に安全でない暗号化されていないプロトコルで送信された、渡された認証情報を含むネットワーク通信を収集することができます。これにより、[ネットワーク・スニッフィング](https://attack.mitre.org/techniques/T1040) や [送信データ操作](https://attack.mitre.org/techniques/T1565/002) のような後続の動作も可能になるかもしれません。\n\nDHCPはクライアント・サーバ・モデルに基づいており、DHCPサーバからク ライアントにネットワーク・コンフィグレーション設定を提供するプロトコルと、 クライアントにネットワーク・アドレスを割り当てるメカニズムという2つの機能を持ってい ます：\n\n1.クライアントは「DISCOVER」メッセージをブロードキャストする。\n\n2.サーバーは利用可能なネットワークアドレスを含む `OFFER` メッセージで応答する。\n\n3.クライアントは`REQUEST`メッセージをブロードキャストする。\n\n4.サーバは`ACK`メッセージで確認し、クライアントはネットワーク設定パラメータを受信する。\n\n攻撃者は被害者ネットワーク上で不正なDHCPサーバになりすまし、そこから正当なホストが悪意のあるネットワーク設定を受け取るかもしれません。例えば、マルウェアは DHCP サーバとして動作し、敵が所有する DNS サーバを被害コンピュータに提供することができる。(引用：new_rogue_DHCP_serv_malware)(引用：w32.tidserv.g) 悪意のあるネットワーク・コンフィギュレーションを通して、敵は AiTM の位置を獲得し、クライアントのトラフィックを敵が制御するシステムにルーティングし、クライアント・ネットワークから情報を収集することができる。\n\nDHCPv6クライアントは、<code>All_DHCP_Relay_Agents_and_Servers</code>マルチキャストアドレスに<code>INFORMATION-REQUEST(code 11)</code>メッセージを送信することで、IPアドレスを割り当てられることなくネットワーク設定情報を受け取ることができます(引用：rfc3315)。\n\nまた、DHCPスプーフィングを悪用して、ブロードキャストDISCOVERメッセー ジを多数生成し、ネットワークのDHCP割り当てプールを使い果たす攻撃(Service Exhaustion Flood)(https://attack.mitre.org/techniques/T1499/002)を行うこともあります。"
                },
                {
                    "id": "T1557.002",
                    "name_eng": "ARP Cache Poisoning",
                    "name_jp": "ARPキャッシュポイズニング",
                    "description_eng": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)",
                    "description_jp": "攻撃者はアドレス解決プロトコル(ARP)キャッシュを汚染し、2つ以上のネットワークデバイスの通信の間に位置する。この活動は、[ネットワーク・スニッフィング](https://attack.mitre.org/techniques/T1040)や[送信データ操作](https://attack.mitre.org/techniques/T1565/002)などの後続の行動を可能にするために使用されるかもしれない。\n\nARPプロトコルは、IPv4アドレスをメディアアクセス制御（MAC）アドレスなどのリンク層アドレスに解決するために使用される（引用：RFC826 ARP）。ネットワークデバイスが特定のネットワークデバイスのリンクレイヤーアドレスを持たない場合、IPアドレスをMACアドレスに変換するために、ローカルネットワークにブロードキャストARPリクエストを送信することがあります。関連するIPアドレスを持つデバイスは、直接そのMACアドレスを返信します。ARPリクエストを行ったネットワークデバイスは、その情報をARPキャッシュに保存するだけでなく、使用します。\n\n敵対者はARPリクエストを受動的に待ち、リクエストしたデバイスのARPキャッシュを汚染するかもしれない。敵対者は自分のMACアドレスで返信し、被害者に意図したネットワークデバイスと通信していると思わせて欺くかもしれない。敵対者がARPキャッシュをポイズニングするには、その返信が正当なIPアドレスの所有者が行うものより速くなければならない。敵はまた、特定のIPアドレスの所有者をローカルネットワークセグメント内のすべてのデバイスに悪意を持って公表する、無償のARPリプライを送信する可能性があります。\n\nARPプロトコルはステートレスであり、認証を必要としない。そのため、デバイスは、ARPキャッシュ内のIPアドレスのMACアドレスを誤って追加または更新する可能性がある(引用：Sans ARP Spoofing Aug 2003)(引用：Cylance Cleaver)\n\n攻撃者は、ネットワークトラフィックを傍受する手段としてARPキャッシュポイズニングを使用する可能性があります。この行為は、特に安全でない暗号化されていないプロトコルで送信された認証情報などのデータを収集したり、中継したりするために使用される可能性がある(引用：Sans ARP Spoofing Aug 2003)"
                },
                {
                    "id": "T1557.001",
                    "name_eng": "LLMNR/NBT-NS Poisoning and SMB Relay",
                    "name_jp": "LLMNR/NBT-NSポイズニングとSMBリレー",
                    "description_eng": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. \n\nLink-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR)(Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords.\n\nIn some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it.(Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay) Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response. \n\nSeveral tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174).(Citation: GitHub NBNSpoof)(Citation: Rapid7 LLMNR Spoofer)(Citation: GitHub Responder)",
                    "description_jp": "LLMNR/NBT-NSネットワークトラフィックに応答することで、敵対者は名前解決のための権威ソースを偽装し、敵対者が制御するシステムとの通信を強制することができる。この活動は、認証材料を収集または中継するために使用される可能性がある。\n\nLink-Local Multicast Name Resolution (LLMNR) および NetBIOS Name Service (NBT-NS) は、ホスト識別の代替方法として機能する Microsoft Windows コンポーネントです。LLMNRはドメインネームシステム（DNS）形式に基づいており、同じローカルリンク上のホストが他のホストの名前解決を実行できるようにする。NBT-NSは、NetBIOS名によってローカルネットワーク上のシステムを識別する。(引用：Wikipedia LLMNR)(引用：TechNet NetBIOS)\n\n攻撃者は、LLMNR (UDP 5355)/NBT-NS (UDP 137)トラフィックに対して、要求されたホストの身元を知っているかのように応答することで、被害者ネットワーク上の名前解決の権威ソースを偽装することができます。リクエストされたホストが識別/認証を必要とするリソースに属している場合、ユーザ名と NTLMv2 ハッシュが敵対者の制御下にあるシステムに送信される。そして敵対者は、ポートのトラフィックを監視するツールや[Network Sniffing](https://attack.mitre.org/techniques/T1040)を用いて有線で送信されたハッシュ情報を収集し、[Brute Force](https://attack.mitre.org/techniques/T1110)を用いてオフラインでハッシュをクラックし、平文のパスワードを入手することができる。\n\n敵対者がシステム間の認証経路にあるシステムにアクセスできる場合や、認証情報を使用する自動スキャンが敵対者の制御下にあるシステムに対して認証を行おうとする場合、NTLMv1/v2 ハッシュを傍受し、ターゲットシステムに対してアクセスしコードを実行するために中継することができる。リレーのステップはポイズニングと連動して行われることもあるが、それとは無関係に行われることもある(引用: byt3bl33d3r NTLM Relaying)(引用: Secure Ideas SMB Relay) さらに、敵対者は NTLMv1/v2 ハッシュを LDAP、SMB、MSSQL、HTTP などの様々なプロトコルにカプセル化し、有効な NTLM レスポンスを用いて複数のサービスを拡張し、利用することができる。\n\nNBNSpoof や Metasploit、[Responder](https://attack.mitre.org/software/S0174) など、ローカルネットワーク内のネームサービスを汚染するためにいくつかのツールが使用されている。"
                },
                {
                    "id": "T1557.004",
                    "name_eng": "Evil Twin",
                    "name_jp": "邪悪な双子",
                    "description_eng": "Adversaries may host seemingly genuine Wi-Fi access points to deceive users into connecting to malicious networks as a way of supporting follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or [Input Capture](https://attack.mitre.org/techniques/T1056).(Citation: Australia ‘Evil Twin’)\n\nBy using a Service Set Identifier (SSID) of a legitimate Wi-Fi network, fraudulent Wi-Fi access points may trick devices or users into connecting to malicious Wi-Fi networks.(Citation: Kaspersky evil twin)(Citation: medium evil twin)  Adversaries may provide a stronger signal strength or block access to Wi-Fi access points to coerce or entice victim devices into connecting to malicious networks.(Citation: specter ops evil twin)  A Wi-Fi Pineapple – a network security auditing and penetration testing tool – may be deployed in Evil Twin attacks for ease of use and broader range. Custom certificates may be used in an attempt to intercept HTTPS traffic. \n\nSimilarly, adversaries may also listen for client devices sending probe requests for known or previously connected networks (Preferred Network Lists or PNLs). When a malicious access point receives a probe request, adversaries can respond with the same SSID to imitate the trusted, known network.(Citation: specter ops evil twin)  Victim devices are led to believe the responding access point is from their PNL and initiate a connection to the fraudulent network.\n\nUpon logging into the malicious Wi-Fi access point, a user may be directed to a fake login page or captive portal webpage to capture the victim’s credentials. Once a user is logged into the fraudulent Wi-Fi network, the adversary may able to monitor network activity, manipulate data, or steal additional credentials. Locations with high concentrations of public Wi-Fi access, such as airports, coffee shops, or libraries, may be targets for adversaries to set up illegitimate Wi-Fi access points.",
                    "description_jp": "攻撃者は、[ネットワーク・スニッフィング](https://attack.mitre.org/techniques/T1040)、[送信データ操作](https://attack.mitre.org/techniques/T1565/002)、[入力キャプチャ](https://attack.mitre.org/techniques/T1056)などの後続行為をサポートする方法として、一見本物のWi-Fiアクセスポイントをホストしてユーザーを欺き、悪意のあるネットワークに接続させることがあります。(引用：オーストラリア「イービル・ツイン」)\n\n正規のWi-Fiネットワークのサービスセット識別子(SSID)を使用することで、不正なWi-Fiアクセスポイントはデバイスやユーザーを騙し、悪意のあるWi-Fiネットワークに接続させる可能性があります(引用：Kaspersky evil twin)(引用：medium evil twin) 敵対者は、被害者のデバイスを悪意のあるネットワークに接続するよう強要または誘惑するために、より強い信号強度を提供したり、Wi-Fiアクセスポイントへのアクセスをブロックしたりする可能性があります。(引用：specter ops evil twin） ネットワーク・セキュリティ監査および侵入テスト・ツールであるWi-Fi Pineappleは、使いやすさと範囲の広さを目的として、Evil Twin攻撃に導入されることがあります。HTTPS トラフィックを傍受するために、カスタム証明書が使用されることもある。\n\n同様に、敵対者は既知の、あるいは以前に接続されたネットワーク（Preferred Network Lists：PNL）に対するプローブ要求を送信するクライアント・デバイスをリッスンすることもあります。悪意のあるアクセス・ポイントがプローブ・リクエストを受信すると、敵対者は同じ SSID で応答し、信頼できる既知のネットワークを模倣することができます（引用：specter ops evil twin）。被害者デバイスは、応答したアクセス・ポイントが自分の PNL のものであると信じ込まされ、不正なネットワークへの接続を開始します。\n\n悪意のあるWi-Fiアクセス・ポイントにログインすると、ユーザーは偽のログイン・ページやキャプティブ・ポータル・ウェブページに誘導され、被害者の認証情報を取得します。ユーザーが不正なWi-Fiネットワークにログインすると、敵対者はネットワーク・アクティビティを監視したり、データを操作したり、追加の認証情報を盗んだりすることができます。空港、喫茶店、図書館など、公衆Wi-Fiアクセスが集中している場所は、敵対者が不正なWi-Fiアクセス・ポイントを設置するターゲットになる可能性があります。"
                }
            ]
        },
        {
            "id": "T1003",
            "name_eng": "OS Credential Dumping",
            "name_jp": "OS クレデンシャルのダンプ",
            "description_eng": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures.(Citation: Brining MimiKatz to Unix) Credentials can then be used to perform [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and access restricted information.\n\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.",
            "description_jp": "攻撃者はクレデンシャルをダンプして、通常はハッシュまたはクリアテキストのパスワードの形で、アカウントのログインとクレデンシャルの材料を得ようとするかもしれない。クレデンシャルは、OS のキャッシュ、メモリ、または構造体から取得することができる。(引用：Bringing MimiKatz to Unix) その後、クレデンシャルは [Lateral Movement](https://attack.mitre.org/tactics/TA0008) を実行したり、制限された情報にアクセスしたりするために使用することができる。\n\n関連するサブテクニックで言及されたいくつかのツールは、敵対者とプロのセキュリティテスターの両方によって使用されるかもしれません。その他のカスタムツールも存在すると思われます。",
            "subtechniques": [
                {
                    "id": "T1003.002",
                    "name_eng": "Security Account Manager",
                    "name_jp": "セキュリティ・アカウント・マネージャー",
                    "description_eng": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* [gsecdump](https://attack.mitre.org/software/S0008)\n* [Mimikatz](https://attack.mitre.org/software/S0002)\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.(Citation: GitHub Creddump7)\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.",
                    "description_jp": "攻撃者は、インメモリ技術または SAM データベースが格納されている Windows レジストリを通して、Security Account Manager (SAM) データベースからクレデンシャル情報を抽出しようとするかもしれない。SAM はホストのローカルアカウントを含むデータベースファイルであり、典型的には <code>net user</code> コマンドで見つかるものである。SAMデータベースを列挙するには、SYSTEMレベルのアクセスが必要である。\n\nインメモリ技術を使って SAM ファイルを取り出すには、 多くのツールを使うことができる：\n\n* pwdumpx.exe\npwdumpx.exe * [gsecdump](https://attack.mitre.org/software/S0008)\n* Mimikatz](https://attack.mitre.org/software/S0002)\n* secretsdump.py\n\nあるいは、レジストリからReg：\n\n<code>reg save HKLMsam sam</code> とする。\n<code>reg save HKLMsystem system</code> を実行する。\n\nその後、Creddump7を使用してローカルでSAMデータベースを処理し、ハッシュを取得することができる(引用: GitHub Creddump7)\n\n注釈\n\n* RID 500 のアカウントは、ローカルのビルトイン管理者である。\n* RID 501はゲストアカウントである。\n* ユーザー・アカウントはRID 1,000以上で始まります。"
                },
                {
                    "id": "T1003.004",
                    "name_eng": "LSA Secrets",
                    "name_jp": "LSAの秘密",
                    "description_eng": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.(Citation: Passcape LSA Secrets)(Citation: Microsoft AD Admin Tier Model)(Citation: Tilbury Windows Credentials) LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory.(Citation: ired Dumping LSA Secrets)\n\n[Reg](https://attack.mitre.org/software/S0075) can be used to extract from the Registry. [Mimikatz](https://attack.mitre.org/software/S0002) can be used to extract secrets from memory.(Citation: ired Dumping LSA Secrets)",
                    "description_jp": "ホストへのSYSTEMアクセス権を持つ攻撃者は、サービスアカウントの資格情報など、さまざまな資格情報を含む可能性のあるLSA（Local Security Authority）秘密へのアクセスを試みる可能性があります。(引用：Passcape LSA Secrets)(引用：Microsoft AD Admin Tier Model)(Citation：Tilbury Windows Credentials) LSA秘密は、レジストリの<code>HKEY_LOCAL_MACHINE</code>に格納されます。LSAシークレットはメモリからダンプすることもできる。\n\n[Reg](https://attack.mitre.org/software/S0075)を使ってレジストリから取り出すことができる。[Mimikatz](https://attack.mitre.org/software/S0002)はメモリから秘密を取り出すのに使える。(引用: ired Dumping LSA Secrets)"
                },
                {
                    "id": "T1003.006",
                    "name_eng": "DCSync",
                    "name_jp": "DCSync",
                    "description_eng": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) (Citation: Wine API samlib.dll) to simulate the replication process from a remote domain controller using a technique called DCSync.\n\nMembers of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data(Citation: ADSecurity Mimikatz DCSync) from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) for use in [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)(Citation: Harmj0y Mimikatz and DCSync) or change an account's password as noted in [Account Manipulation](https://attack.mitre.org/techniques/T1098).(Citation: InsiderThreat ChangeNTLM July 2017)\n\nDCSync functionality has been included in the \"lsadump\" module in [Mimikatz](https://attack.mitre.org/software/S0002).(Citation: GitHub Mimikatz lsadump Module) Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.(Citation: Microsoft NRPC Dec 2017)",
                    "description_jp": "攻撃者は、Windowsドメインコントローラのアプリケーションプログラミングインターフェース（API）（引用：Microsoft DRSR Dec 2017）（引用：Microsoft GetNCCChanges）（引用：Samba DRSUAPI）（引用：Wine API samlib.dll）を悪用し、DCSyncと呼ばれる技法を使用してリモートドメインコントローラからのレプリケーションプロセスをシミュレートすることで、認証情報やその他の機密情報へのアクセスを試みる可能性があります。\n\nドメインコントローラ上のAdministrators、Domain Admins、Enterprise Adminの各グループまたはコンピュータアカウントのメンバーは、DCSyncを実行してActive Directoryからパスワードデータ(引用：ADSecurity Mimikatz DCSync)を引き出すことができる。このハッシュは次に、[Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)(Citation: Harmj0y Mimikatz and DCSync)で使用するための[Golden Ticket](https://attack.mitre.org/techniques/T1558/001)(Citation: InsiderThreat ChangeNTLM July 2017)を作成したり、[Account Manipulation](https://attack.mitre.org/techniques/T1098)(Citation: InsiderThreat ChangeNTLM July 2017)に記載されているように、アカウントのパスワードを変更したりするために使用することができる。\n\nDCSync機能は、[Mimikatz](https://attack.mitre.org/software/S0002)の \"lsadump \"モジュールに含まれている(引用: GitHub Mimikatz lsadump Module) Lsadumpには、レガシーレプリケーションプロトコル上でDCSyncを実行するNetSyncも含まれている(引用: Microsoft NRPC Dec 2017)"
                },
                {
                    "id": "T1003.007",
                    "name_eng": "Proc Filesystem",
                    "name_jp": "Proc ファイルシステム",
                    "description_eng": "Adversaries may gather credentials from the proc filesystem or `/proc`. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the `/proc/<PID>/maps` file shows how memory is mapped within the process’s virtual address space. And `/proc/<PID>/mem`, exposed for debugging purposes, provides access to the process’s virtual address space.(Citation: Picus Labs Proc cump 2022)(Citation: baeldung Linux proc map 2022)\n\nWhen executing with root privileges, adversaries can search these memory locations for all processes on a system that contain patterns indicative of credentials. Adversaries may use regex patterns, such as <code>grep -E \"^[0-9a-f-]* r\" /proc/\"$pid\"/maps | cut -d' ' -f 1</code>, to look for fixed strings in memory structures or cached hashes.(Citation: atomic-red proc file system) When running without privileged access, processes can still view their own virtual memory locations. Some services or programs may save credentials in clear text inside the process’s memory.(Citation: MimiPenguin GitHub May 2017)(Citation: Polop Linux PrivEsc Gitbook)\n\nIf running as or with the permissions of a web browser, a process can search the `/maps` & `/mem` locations for common website credential patterns (that can also be used to find adjacent memory within the same structure) in which hashes or cleartext credentials may be located.",
                    "description_jp": "攻撃者は proc ファイルシステムまたは `/proc` から認証情報を収集する可能性がある。proc ファイルシステムは、仮想メモリを管理する Linux ベースのシステムで、カーネルデータ構造へのインターフェースとして使用される擬似ファイルシステムである。各プロセスの `/proc/<PID>/maps` ファイルは、プロセスの仮想アドレス空間内でメモリがどのようにマッピングされているかを示す。また、デバッグ目的で公開される `/proc/<PID>/mem` ファイルは、プロセスの仮想アドレス空間へのアクセスを提供する。(引用: Picus Labs Proc cump 2022)(引用: baeldung Linux proc map 2022)\n\nroot権限で実行する場合、敵対者はこれらのメモリロケーションを検索して、資格情報を示すパターンを含むシステム上のすべてのプロセスを探すことができる。敵は、<code>grep -E \"^[0-9a-f-]* r \"のような正規表現パターンを使用することができます。/proc/\"$pid\"/maps | cut -d' ' -f 1</code>のような正規表現パターンを使って、メモリ構造やキャッシュされたハッシュ内の固定文字列を探すことができる。（引用：atomic-red proc ファイルシステム）特権アクセスなしで実行されている場合でも、プロセスは自分自身の仮想メモリロケーションを見ることができる。サービスやプログラムによっては、プロセスのメモリ内に認証情報を平文で保存することがある(引用: MimiPenguin GitHub 2017年5月)(引用: Polop Linux PrivEsc Gitbook)\n\nウェブブラウザとして、またはウェブブラウザの権限で実行されている場合、プロセスは `/maps` と `/mem` ロケーションを検索して、ハッシュまたはクリアテキストの認証情報が置かれている可能性のある一般的なウェブサイトの認証情報パターン（同じ構造内の隣接するメモリを見つけるのにも使用できる）を探すことができる。"
                },
                {
                    "id": "T1003.003",
                    "name_eng": "NTDS",
                    "name_jp": "NTDS",
                    "description_eng": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in <code>%SystemRoot%\\NTDS\\Ntds.dit</code> of a domain controller.(Citation: Wikipedia Active Directory)\n\nIn addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information.(Citation: Metcalf 2015)\n\nThe following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.\n\n* Volume Shadow Copy\n* secretsdump.py\n* Using the in-built Windows tool, ntdsutil.exe\n* Invoke-NinjaCopy",
                    "description_jp": "攻撃者は、デバイス、ユーザー、アクセス権などのドメインメンバーに関する他の情報だけでなく、クレデンシャル情報を盗むために、Active Directoryドメインデータベースにアクセスしたり、そのコピーを作成しようとすることがある。デフォルトでは、NTDSファイル(NTDS.dit)はドメインコントローラの<code>%SystemRoot%NTDS</code>にある(引用: Wikipedia Active Directory)。\n\n敵対者は、アクティブなドメインコントローラーのNTDSファイルを探すことに加えて、同じまたは類似の情報を含むバックアップを検索する可能性がある(引用：Metcalf 2015)\n\nNTDSファイルとActive Directory全体のハッシュの内容を列挙するには、以下のツールやテクニックを使用できます。\n\n* ボリュームシャドウコピー\n* secretsdump.py\n* Windows内蔵ツールのntdsutil.exeを使用する。\n* Invoke-NinjaCopy"
                },
                {
                    "id": "T1003.005",
                    "name_eng": "Cached Domain Credentials",
                    "name_jp": "キャッシュされたドメイン認証情報",
                    "description_eng": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.(Citation: Microsoft - Cached Creds)\n\nOn Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash.(Citation: PassLib mscache) The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires [Password Cracking](https://attack.mitre.org/techniques/T1110/002) to recover the plaintext password.(Citation: ired mscache)\n\nOn Linux systems, Active Directory credentials can be accessed through caches maintained by software like System Security Services Daemon (SSSD) or Quest Authentication Services (formerly VAS). Cached credential hashes are typically located at `/var/lib/sss/db/cache.[domain].ldb` for SSSD or `/var/opt/quest/vas/authcache/vas_auth.vdb` for Quest. Adversaries can use utilities, such as `tdbdump`, on these database files to dump the cached hashes and use [Password Cracking](https://attack.mitre.org/techniques/T1110/002) to obtain the plaintext password.(Citation: Brining MimiKatz to Unix) \n\nWith SYSTEM or sudo access, the tools/utilities such as [Mimikatz](https://attack.mitre.org/software/S0002), [Reg](https://attack.mitre.org/software/S0075), and secretsdump.py for Windows or Linikatz for Linux can be used to extract the cached credentials.(Citation: Brining MimiKatz to Unix)\n\nNote: Cached credentials for Windows Vista are derived using PBKDF2.(Citation: PassLib mscache)",
                    "description_jp": "攻撃者は、ドメインコントローラーが使用できない場合に認証を行うために使用される、キャッシュされたドメイン認証情報へのアクセスを試みる可能性があります。\n\nWindows Vista 以降では、ハッシュ形式は DCC2 (Domain Cached Credentials version 2) ハッシュで、MS-Cache v2 ハッシュとしても知られています(引用: PassLib mscache)。デフォルトでキャッシュされる資格情報の数はさまざまで、システムごとに変更できます。このハッシュはパスザハッシュスタイルの攻撃を許さず、代わりに平文のパスワードを回復するために[パスワードクラッキング](https://attack.mitre.org/techniques/T1110/002)を必要とする(引用: ired mscache)。\n\nLinux システムでは、Active Directory 認証情報は System Security Services Daemon (SSSD) や Quest Authentication Services (旧 VAS) のようなソフトウェアが保持するキャッシュからアクセスできる。キャッシュされた認証情報のハッシュは通常、SSSD の場合は `/var/lib/sss/db/cache.[domain].ldb` に、Quest の場合は `/var/opt/quest/vas/authcache/vas_auth.vdb` にある。攻撃者はこれらのデータベースファイルに対して`tdbdump`のようなユーティリティを使ってキャッシュされたハッシュをダンプし、[Password Cracking](https://attack.mitre.org/techniques/T1110/002)を使って平文のパスワードを得ることができる(引用: Brining MimiKatz to Unix)\n\nSYSTEMまたはsudoアクセスがあれば、[Mimikatz](https://attack.mitre.org/software/S0002)、[Reg](https://attack.mitre.org/software/S0075)、Windows用のsecretsdump.pyまたはLinux用のLinikatzなどのツール/ユーティリティを使用して、キャッシュされた認証情報を抽出できる(引用：Bringing MimiKatz to Unix)\n\n注：Windows Vista 用のキャッシュされた資格情報は、PBKDF2 を使用して導き出される(引用：PassLib mscache)"
                },
                {
                    "id": "T1003.001",
                    "name_eng": "LSASS Memory",
                    "name_jp": "LSASSメモリー",
                    "description_eng": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct [Lateral Movement](https://attack.mitre.org/tactics/TA0008) using [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550).\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as `comsvcs.dll` can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>(Citation: Volexity Exchange Marauder March 2021)(Citation: Symantec Attacks Against Government Sector)\n\nSimilar to [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012), the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`).(Citation: Deep Instinct LSASS)\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.(Citation: TechNet Blogs Credential Protection)\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.(Citation: TechNet Blogs Credential Protection)",
                    "description_jp": "攻撃者は、LSASS（Local Security Authority Subsystem Service）のプロセスメモリに格納されたクレデンシャル資料へのアクセスを試みる可能性がある。ユーザがログオンすると、システムはさまざまなクレデンシャル資料を生成し、LSASSプロセス・メモリに保存する。これらのクレデンシャル資料は、管理ユーザーまたはSYSTEMによって採取され、[代替認証資料の使用](https://attack.mitre.org/techniques/T1550)を使用して[横移動](https://attack.mitre.org/tactics/TA0008)を実行するために使用される可能性がある。\n\nインメモリ技術と同様に、LSASSプロセス・メモリをターゲット・ホストからダンプし、ローカル・システム上で分析することもできます。\n\n例えば、ターゲットホスト上で procdump を使用します：\n\n<code>procdump -ma lsass.exe lsass_dump</code> を使用します。\n\nローカルでは、mimikatz を次のように実行します：\n\n<code>sekurlsa::Minidump lsassdump.dmp</code> を使用して実行できます。\n<code>sekurlsa::logonPasswords</code> を使用します。\n\ncomsvcs.dll`のようなWindowsの組み込みツールも使用できる：\n\n<code>rundll32.exe C:\\WindowsSystem32\\comsvcs.dll MiniDump PID lsass.dmp full</code>(Volexity Exchange Marauder March 2021)(Citation: Symantec Attacks Against Government Sector)\n\nイメージファイル実行オプションインジェクション](https://attack.mitre.org/techniques/T1546/012)と同様に、サイレントプロセス終了メカニズムを悪用し、Windowsエラーレポート(`WerFault.exe`)を通じて`lsass.exe`のメモリダンプを作成することができます(引用: Deep Instinct LSASS)。\n\nWindows Security Support Provider (SSP) DLLは、システム起動時にLSASSプロセスにロードされます。LSAにロードされると、SSP DLLは、ログオンしているユーザーのドメインパスワードやスマートカードPINなど、Windowsに保存されている暗号化パスワードや平文パスワードにアクセスできる。SSP 構成は、2つのレジストリ・キーに格納される：<Code>HKLMSYSTEM\\CurrentControlSetControlLsaSecurity Packages</code> と <Code>HKLMSYSTEM\\CurrentControlSetControlLsaOSConfig\\Security Packages</code> である。敵対者は、これらのレジストリ・キーを変更して新しいSSPを追加し、次回システム起動時、またはAddSecurityPackage Windows API関数が呼び出されたときにロードする可能性がある(Citation: Graeber 2014)。\n\n以下の SSP は認証情報へのアクセスに使用できる：\n\n* Msv: インタラクティブ・ログオン、バッチ・ログオン、サービス・ログオンは MSV 認証パッケージを通して行われる。\n* Wdigest：Wdigest: ダイジェスト認証プロトコルは、ハイパーテキスト転送プロトコル(HTTP)と単純認証セキュ リティ・レイヤ(SASL)交換で使用するために設計されている。\n* Kerberos：Kerberos：Windows 2000 以降で、クライアントとサーバーの相互ドメイン認証に使用される。\n* CredSSP：リモートデスクトップサービスの SSO およびネットワークレベル認証を提供する(引用：TechNet Blogs Credential Protection)。"
                },
                {
                    "id": "T1003.008",
                    "name_eng": "/etc/passwd and /etc/shadow",
                    "name_jp": "/etc/passwdと/etc/shadow",
                    "description_eng": "Adversaries may attempt to dump the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> to enable offline password cracking. Most modern Linux operating systems use a combination of <code>/etc/passwd</code> and <code>/etc/shadow</code> to store user account information, including password hashes in <code>/etc/shadow</code>. By default, <code>/etc/shadow</code> is only readable by the root user.(Citation: Linux Password and Shadow File Formats)\n\nLinux stores user information such as user ID, group ID, home directory path, and login shell in <code>/etc/passwd</code>. A \"user\" on the system may belong to a person or a service. All password hashes are stored in <code>/etc/shadow</code> - including entries for users with no passwords and users with locked or disabled accounts.(Citation: Linux Password and Shadow File Formats)\n\nAdversaries may attempt to read or dump the <code>/etc/passwd</code> and <code>/etc/shadow</code> files on Linux systems via command line utilities such as the <code>cat</code> command.(Citation: Arctic Wolf) Additionally, the Linux utility <code>unshadow</code> can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper - for example, via the command <code>/usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>(Citation: nixCraft - John the Ripper). Since the user information stored in <code>/etc/passwd</code> are linked to the password hashes in <code>/etc/shadow</code>, an adversary would need to have access to both.",
                    "description_jp": "攻撃者は、<code>/etc/passwd</code>と<code>/etc/shadow</code>の内容をダンプして、オフラインでのパスワード・クラッキングを可能にしようとするかもしれません。最近のほとんどの Linux オペレーティングシステムでは、<code>/etc/passwd</code> と <code>/etc/shadow<//code> の組み合わせを使って、<code>/etc/shadow</code> にパスワードハッシュを含むユーザーアカウント情報を保存しています。デフォルトでは、<code>/etc/shadow</code>はrootユーザーのみが読むことができる(引用: Linux Password and Shadow File Formats)\n\nLinuxは、<code>/etc/passwd</code>にユーザーID、グループID、ホーム・ディレクトリ・パス、ログイン・シェルなどのユーザー情報を保存する。システム上の \"ユーザー \"は、個人またはサービスに属する。すべてのパスワードハッシュは<code>/etc/shadow</code>に格納され、パスワードのないユーザーや、ロックされたり無効化されたアカウントのユーザーのエントリも含まれる(引用：Linux Password and Shadow File Formats)\n\n攻撃者は、<code>/etc/passwd</code> および <code>/etc/shadow</code> ファイルを、<code>/cat</code> コマンドなどのコマンドライン ユーティリティを使用して、Linux システム上で読み取ったりダンプしようとしたりする可能性があります。(引用: Arctic Wolf) さらに、Linux ユーティリティ <code>unshadow</code> を使用して、John the Ripper のようなパスワードクラッキングユーティリティに適した形式で 2 つのファイルを結合することができます - たとえば、<code>/usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code> というコマンドを実行します (引用: nixCraft - John the Ripper)。<code>/etc/passwd</code>に保存されているユーザー情報は、<code>/etc/shadow</code>のパスワードハッシュとリンクしているため、敵対者は両方にアクセスする必要がある。"
                }
            ]
        },
        {
            "id": "T1539",
            "name_eng": "Steal Web Session Cookie",
            "name_jp": "ウェブセッションクッキーを盗む",
            "description_eng": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
            "description_jp": "敵対者はウェブ・アプリケーションやサービスのセッション・クッキーを盗み、それを使ってウェブ・アプリケーションやイ ンターネット・サービスに認証されたユーザとして、認証情報を必要とせずにアクセスすることができます。ウェブ・アプリケーションやサービスは、ユーザがウェブサイトに認証された後の認証トークンとしてセッション・クッキーを使うことがよくあります。\n\nクッキーは多くの場合、ウェブアプリケーションがアクティブに使用されていなくても、長期間有効です。クッキーはディスク、ブラウザのプロセス・メモリ、及びリモート・システムへのネットワーク・トラフィックの中に見つかります。さらに、ターゲット・マシン上の他のアプリケーションは機密性の高い認証クッキーをメモリに保存するかもしれません(例えばクラウドサ ービスへの認証を行うアプリケーション)。セッションクッキーは、いくつかの多要素認証プロトコルをバイパスするために使用することができます（引用：Pass The Cookie）。\n\n(引用: Kaspersky TajMahal 2019 年 4 月)(引用: Unit 42 Mac Crypto Cookies 2019 年 1 月) 敵はまた、ウェブサイトに悪意のある JavaScript コンテンツを注入したり、被害者を騙してブラウザで悪意のある JavaScript を実行させることで [User Execution](https://attack.mitre.org/techniques/T1204) に依存して Cookie を盗むこともあります(引用: Talos Roblox Scam 2023 年)(引用: Krebs Discord Bookmarks 2023 年)。\n\nまた、`Evilginx2` や `Muraena` のようなオープンソースのフレームワークもあり、悪意のあるプロキシ(例えば、[Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557))を通じてセッションクッキーを収集することができます。このフレームワークは敵対者によって設定され、フィッシングキャンペーンで使用される可能性があります。(引用: Github evilginx2)(Citation: GitHub Mauraena)\n\n敵対者が有効なクッキーを獲得した後、対応するウェブ・アプリケーションにログインするために[ウェブ・セッション・クッキー](https://attack.mitre.org/techniques/T1550/004)の技法を実行することができます。",
            "subtechniques": []
        },
        {
            "id": "T1040",
            "name_eng": "Network Sniffing",
            "name_jp": "ネットワーク・スニッフィング",
            "description_eng": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
            "description_jp": "攻撃者は、受動的にネットワーク・トラフィックをスニッフィングして、ネットワーク上を通過する認証材料など、環境に関する情報をキャプチャすることがある。ネットワーク・スニッフィングとは、システムのネットワーク・インタフェースを使用して、有線または無線接続を介して送信される情報を監視またはキャプチャすることを指す。敵は、ネットワーク・インタフェースをプロミスキャス・モードにして、ネットワーク上を通過するデータに受動的にアクセスしたり、スパン・ポートを使用して大量のデータをキャプチャしたりすることがある。\n\nこのテクニックを使ってキャプチャされたデータには、特に安全でない暗号化されていないプロトコルで送信されたユーザー・クレデンシャルが含まれる可能性があります。LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001)のような名前サービス解決ポイズニングのテクニックも、トラフィックを敵にリダイレクトすることで、ウェブサイト、プロキシ、内部システムへの認証情報をキャプチャするために使用できます。\n\nネットワークスニッフィングは、実行中のサービス、バージョン番号、その他のネットワーク特性（IP アドレス、ホスト名、VLAN ID など）など、その後の [Lateral Movement](https://attack.mitre.org/tactics/TA0008) および/または [Defense Evasion](https://attack.mitre.org/tactics/TA0005) 活動に必要な設定の詳細を明らかにする可能性があります。攻撃者はまた、受動的に環境に関する追加的な知識を得るために、[Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM)の間、ネットワーク・スニッフィングを利用する可能性があります。\n\nクラウドベースの環境では、敵はトラフィックミラーリングサービスを使用して、仮想マシンからのネットワークトラフィックをスニッフィングすることができる。例えば、AWS Traffic Mirroring、GCP Packet Mirroring、Azure vTapでは、トラフィックを収集する特定のインスタンスと、収集したトラフィックを送信する特定のターゲットを定義することができます（引用：AWS Traffic Mirroring）（引用：GCP Packet Mirroring）（引用：Azure Virtual Network TAP）多くの場合、トラフィックの暗号化と復号化の負担を軽減するために、ロードバランサーレベルでTLS終端を使用するため、このトラフィックの多くは平文になります。(引用：Rhino Security Labs AWS VPC Traffic Mirroring)(引用：SpecterOps AWS Traffic Mirroring) 敵対者は、スニッフィングされたトラフィックにアクセスするために、クラウドアカウントにデータを転送するなどの流出テクニックを使用することができます(引用：Rhino Security Labs AWS VPC Traffic Mirroring)\n\nネットワークデバイス上で、敵対者は、`monitor capture` などの [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) コマンドを使用して、ネットワークキャプチャを実行する可能性があります。(引用：US-CERT-TA18-106A)(引用：capture_embedded_packet_on_software)",
            "subtechniques": []
        },
        {
            "id": "T1558",
            "name_eng": "Steal or Forge Kerberos Tickets",
            "name_jp": "ケルベロス・チケットを盗む、または偽造する",
            "description_eng": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as “realms”, there are three basic participants: client, service, and Key Distribution Center (KDC).(Citation: ADSecurity Kerberos Ring Decoder) Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.\n\nOn Windows, the built-in <code>klist</code> utility can be used to list and analyze cached Kerberos tickets.(Citation: Microsoft Klist)",
            "description_jp": "攻撃者は、[Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)を有効にするために、Kerberosチケットを盗んだり偽造したりして、Kerberos認証を破壊しようとするかもしれない。Kerberosは、最新のWindowsドメイン環境で広く使われている認証プロトコルである。レルム」と呼ばれるKerberos環境では、クライアント、サービス、および鍵配布センター（KDC）の3つの基本的な参加者が存在する（引用：ADSecurity Kerberos Ring Decoder）。クライアントはサービスへのアクセスを要求し、KDCから発信されるKerberosチケットの交換を通じて、認証に成功した後にアクセスが許可される。KDCは認証とチケット付与の両方に責任を負う。  攻撃者はチケットを盗んだり、不正アクセスを可能にするためにチケットを偽造したりして、Kerberosを悪用しようとするかもしれない。\n\nWindowsでは、組み込みの<code>klist</code>ユーティリティを使用して、キャッシュされたKerberosチケットを一覧表示し、分析することができる(引用: Microsoft Klist)",
            "subtechniques": [
                {
                    "id": "T1558.003",
                    "name_eng": "Kerberoasting",
                    "name_jp": "ケルベロースティング",
                    "description_eng": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to [Brute Force](https://attack.mitre.org/techniques/T1110).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) \n\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service(Citation: Microsoft Detecting Kerberoasting Feb 2018)).(Citation: Microsoft SPN)(Citation: Microsoft SetSPN)(Citation: SANS Attacking Kerberos Nov 2014)(Citation: Harmj0y Kerberoast Nov 2016)\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline [Brute Force](https://attack.mitre.org/techniques/T1110) attacks that may expose plaintext credentials.(Citation: AdSecurity Cracking Kerberos Dec 2015)(Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)\n\nThis same behavior could be executed using service tickets captured from network traffic.(Citation: AdSecurity Cracking Kerberos Dec 2015)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)",
                    "description_jp": "攻撃者は、有効なKerberosチケット付与チケット(TGT)を悪用したり、ネットワークトラフィックを盗聴して、[ブルートフォース](https://attack.mitre.org/techniques/T1110)に脆弱なチケット付与サービス(TGS)チケットを取得する可能性があります。(引用: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015)\n\nサービスプリンシパル名（SPN）は、Windowsサービスの各インスタンスを一意に識別するために使用される。認証を有効にするために、KerberosはSPNが少なくとも1つのサービスログオンアカウント(サービスを実行することを特に任務とするアカウント(引用: Microsoft Detecting Kerberoasting Feb 2018))に関連付けられていることを要求する(引用: Microsoft SPN)(引用: Microsoft SetSPN)(引用: SANS Attacking Kerberos Nov 2014)(引用: Harmj0y Kerberoast Nov 2016)\n\n有効なKerberosチケット付与チケット(TGT)を所有する攻撃者は、ドメインコントローラー(DC)から任意のSPNに対して1つ以上のKerberosチケット付与サービス(TGS)サービスチケットを要求することができる。(引用: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) これらのチケットの一部は、RC4アルゴリズムで暗号化されている可能性があります。つまり、SPNに関連付けられたサービスアカウントのKerberos 5 TGS-REP etype 23ハッシュが秘密鍵として使用されるため、オフライン[ブルートフォース](https://attack.mitre.org/techniques/T1110)攻撃によって平文の認証情報が暴露される可能性がある。(引用：AdSecurity Cracking Kerberos Dec 2015)(引用：Empire InvokeKerberoast Oct 2016)(Citation：Harmj0y Kerberoast Nov 2016)\n\nこれと同じ動作は、ネットワークトラフィックからキャプチャされたサービスチケットを使用して実行される可能性がある(引用: AdSecurity Cracking Kerberos Dec 2015)\n\nクラックされたハッシュは、[有効なアカウント](https://attack.mitre.org/techniques/T1078)へのアクセスを通じて、[永続性](https://attack.mitre.org/tactics/TA0003)、[特権のエスカレーション](https://attack.mitre.org/tactics/TA0004)、[横移動](https://attack.mitre.org/tactics/TA0008)を可能にする可能性がある(引用: SANS Attacking Kerberos Nov 2014)"
                },
                {
                    "id": "T1558.002",
                    "name_eng": "Silver Ticket",
                    "name_jp": "シルバーチケット",
                    "description_eng": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.(Citation: ADSecurity Silver Tickets)\n\nSilver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.(Citation: ADSecurity Detecting Forged Tickets)\n\nPassword hashes for target services may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) or [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).",
                    "description_jp": "対象となるサービスアカウント（SharePointやMSSQLなど）のパスワードハッシュを持つ攻撃者は、シルバーチケットとも呼ばれるKerberosチケット付与サービス（TGS）チケットを偽造する可能性がある。KerberosのTGSチケットは、サービスチケットとしても知られている(引用：ADSecurity Silver Tickets)\n\nシルバー・チケットは、敵対者が特定のリソース（MSSQLなど）とリソースをホストするシステムにアクセスできるようにするだけという点で、ゴールデン・チケットよりも範囲が限定されています。しかし、ゴールデン・チケットとは異なり、シルバー・チケットを偽造する能力を持つ敵対者は、鍵配布センター（KDC）とやり取りすることなくTGSチケットを作成できるため、潜在的に検出が難しくなります。\n\n対象サービスのパスワード・ハッシュは、[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)または[Kerberoasting](https://attack.mitre.org/techniques/T1558/003)を使用して取得することができる。"
                },
                {
                    "id": "T1558.005",
                    "name_eng": "Ccache Files",
                    "name_jp": "キャッシュファイル",
                    "description_eng": "Adversaries may attempt to steal Kerberos tickets stored in credential cache files (or ccache). These files are used for short term storage of a user's active session credentials. The ccache file is created upon user authentication and allows for access to multiple services without the user having to re-enter credentials. \n\nThe <code>/etc/krb5.conf</code> configuration file and the <code>KRB5CCNAME</code> environment variable are used to set the storage location for ccache entries. On Linux, credentials are typically stored in the `/tmp` directory with a naming format of `krb5cc_%UID%` or `krb5.ccache`. On macOS, ccache entries are stored by default in memory with an `API:{uuid}` naming scheme. Typically, users interact with ticket storage using <code>kinit</code>, which obtains a Ticket-Granting-Ticket (TGT) for the principal; <code>klist</code>, which lists obtained tickets currently held in the credentials cache; and other built-in binaries.(Citation: Kerberos GNU/Linux)(Citation: Binary Defense Kerberos Linux)\n\nAdversaries can collect tickets from ccache files stored on disk and authenticate as the current user without their password to perform [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003) attacks. Adversaries can also use these tickets to impersonate legitimate users with elevated privileges to perform [Privilege Escalation](https://attack.mitre.org/tactics/TA0004). Tools like Kekeo can also be used by adversaries to convert ccache files to Windows format for further [Lateral Movement](https://attack.mitre.org/tactics/TA0008). On macOS, adversaries may use open-source tools or the Kerberos framework to interact with ccache files and extract TGTs or Service Tickets via lower-level APIs.(Citation: SpectorOps Bifrost Kerberos macOS 2019)(Citation: Linux Kerberos Tickets)(Citation: Brining MimiKatz to Unix)(Citation: Kekeo)",
                    "description_jp": "攻撃者は、クレデンシャル・キャッシュ・ファイル（または ccache）に保存されている Kerberos チケットを盗もうとする可能性がある。これらのファイルは、ユーザーのアクティブなセッション認証情報を短期間保存するために使用される。ccacheファイルはユーザー認証時に作成され、ユーザーがクレデンシャルを再入力することなく複数のサービスにアクセスできるようにする。\n\n<code>/etc/krb5.conf</code>設定ファイルと<code>KRB5CCNAME</code>環境変数は、ccacheエントリの保存場所を設定するために使用される。Linuxでは、認証情報は通常、`krb5cc_%UID%`または`krb5.ccache`という命名形式で、`/tmp`ディレクトリに格納される。macOSでは、ccacheのエントリはデフォルトで`API:{uuid}`の命名スキームでメモリに保存されます。一般的に、ユーザは<code>kinit</code>を使ってチケットストレージとやりとりする。<code>kinit</code>はプリンシパルのチケット付与チケット(TGT)を取得し、<code>klist</code>は資格情報キャッシュに現在保持されている取得済みチケットを一覧表示する。\n\n攻撃者はディスクに保存されたccacheファイルからチケットを収集し、パスワードなしで現在のユーザーとして認証して[Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)攻撃を行うことができる。攻撃者はまた、これらのチケットを使用して、昇格した特権を持つ正当なユーザーになりすまし、[特権のエスカレーション](https://attack.mitre.org/tactics/TA0004)を実行することもできます。Kekeoのようなツールは、さらに[横移動](https://attack.mitre.org/tactics/TA0008)を行うためにccacheファイルをWindowsフォーマットに変換するために敵対者によって使用されることもある。macOSでは、敵対者はオープンソースツールまたはKerberosフレームワークを使用してccacheファイルと対話し、低レベルのAPIを介してTGTまたはサービスチケットを抽出することができる(引用: SpectorOps Bifrost Kerberos macOS 2019)(引用: Linux Kerberos Tickets)(引用: Brining MimiKatz to Unix)(引用: Kekeo)"
                },
                {
                    "id": "T1558.004",
                    "name_eng": "AS-REP Roasting",
                    "name_jp": "AS-REP焙煎",
                    "description_eng": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by [Password Cracking](https://attack.mitre.org/techniques/T1110/002) Kerberos messages.(Citation: Harmj0y Roasting AS-REPs Jan 2017) \n\nPreauthentication offers protection against offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002). When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user’s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user’s password.(Citation: Microsoft Kerberos Preauth 2014)\n\nFor each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002) attacks similarly to [Kerberoasting](https://attack.mitre.org/techniques/T1558/003) and expose plaintext credentials. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019) \n\nAn account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like [PowerShell](https://attack.mitre.org/techniques/T1059/001) with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)",
                    "description_jp": "攻撃者は、[パスワードクラッキング](https://attack.mitre.org/techniques/T1110/002) Kerberos メッセージによって、Kerberos 事前認証を無効にしているアカウントの認証情報を明らかにする可能性がある(引用: Harmj0y Roasting AS-REPs Jan 2017)。\n\n事前認証は、オフラインの[パスワードクラッキング](https://attack.mitre.org/techniques/T1110/002)に対する保護を提供する。有効にすると、リソースへのアクセスを要求するユーザーは、パスワードのハッシュで暗号化されたタイムスタンプ付きの認証サーバー要求（AS-REQ）メッセージを送信することで、ドメインコントローラー（DC）との通信を開始する。DCがユーザーのパスワードのハッシュでタイムスタンプの復号化に成功した場合のみ、DCはユーザーにチケット付与チケット（TGT）を含む認証サーバー応答（AS-REP）メッセージを送信する。AS-REPメッセージの一部は、ユーザーのパスワードで署名される(引用：Microsoft Kerberos Preauth 2014)\n\n事前認証なしで発見された各アカウントについて、敵対者は暗号化されたタイムスタンプなしでAS-REQメッセージを送信し、RC4などの安全でないアルゴリズムで暗号化されている可能性のあるTGTデータを含むAS-REPメッセージを受信する可能性があります。復元された暗号化されたデータは、[Kerberoasting](https://attack.mitre.org/techniques/T1558/003)と同様にオフラインの[Password Cracking](https://attack.mitre.org/techniques/T1110/002)攻撃に対して脆弱であり、平文の認証情報を暴露する可能性がある。(引用：Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\n特別な権限の有無にかかわらず、ドメインに登録されたアカウントを悪用して、[PowerShell](https://attack.mitre.org/techniques/T1059/001)のようなWindowsツールをLDAPフィルタとともに利用することで、事前認証が無効になっているすべてのドメインアカウントをリストアップすることができる。あるいは、敵対者は各ユーザにAS-REQメッセージを送信することもできる。DC がエラーなしで応答した場合、そのアカウントは事前認証を必要とせず、AS-REP メッセージにはすでに暗号化されたデータが含まれている。(引用：Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\nクラックされたハッシュは、[有効なアカウント](https://attack.mitre.org/techniques/T1078)へのアクセスを通じて、[永続性](https://attack.mitre.org/tactics/TA0003)、[特権のエスカレーション](https://attack.mitre.org/tactics/TA0004)、[横移動](https://attack.mitre.org/tactics/TA0008)を可能にする可能性がある(引用: SANS Attacking Kerberos Nov 2014)"
                },
                {
                    "id": "T1558.001",
                    "name_eng": "Golden Ticket",
                    "name_jp": "ゴールデン・チケット",
                    "description_eng": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket.(Citation: AdSecurity Kerberos GT Aug 2015) Golden tickets enable adversaries to generate authentication material for any account in Active Directory.(Citation: CERT-EU Golden Ticket Protection) \n\nUsing a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.(Citation: ADSecurity Detecting Forged Tickets)\n\nThe KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets.(Citation: ADSecurity Kerberos and KRBTGT) The KRBTGT password hash may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) and privileged access to a domain controller.",
                    "description_jp": "KRBTGTアカウントパスワードハッシュを持つ敵対者は、ゴールデンチケットとしても知られるKerberosチケット付与チケット(TGT)を偽造することができる(引用：AdSecurity Kerberos GT Aug 2015) ゴールデンチケットは、敵対者がActive Directoryのあらゆるアカウントの認証材料を生成することを可能にする(引用：CERT-EU Golden Ticket Protection)\n\nゴールデンチケットを使用すると、敵対者は特定のリソースへのアクセスを可能にするチケット付与サービス（TGS）チケットを要求できるようになります。ゴールデンチケットは、敵対者がTGSを取得するために鍵配布センター(KDC)と対話することを必要とする(引用：ADSecurity Detecting Forged Tickets)\n\nKDCサービスは、Active Directoryドメインの一部であるドメイン・コントローラー上ですべて実行される。KRBTGTはKerberos Key Distribution Center (KDC)サービスアカウントであり、すべてのKerberosチケットの暗号化と署名を担当する(引用：ADSecurity Kerberos and KRBTGT)。KRBTGTパスワードハッシュは、[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)とドメインコントローラへの特権アクセスを使用して取得できる。"
                }
            ]
        },
        {
            "id": "T1555",
            "name_eng": "Credentials from Password Stores",
            "name_jp": "パスワードストアからのクレデンシャル",
            "description_eng": "Adversaries may search for common password storage locations to obtain user credentials.(Citation: F-Secure The Dukes) Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
            "description_jp": "攻撃者は、ユーザのクレデンシャルを入手するために、パスワードの一般的な保存場所を探索する可能性がある。 引用：F-Secure The Dukes） パスワードは、クレデンシャルを保持するオペレーティングシステムやアプリケーションに応じて、システム上のいくつかの場所に保存される。また、パスワード・マネージャやクラウド秘密保管庫など、ユーザがパスワードを管理・維持しやすくするためにパスワードを保管する特定のアプリケーションやサービスもある。いったんクレデンシャルを取得すると、それを使って横の動きを実行し、制限された情報にアクセスすることができる。",
            "subtechniques": [
                {
                    "id": "T1555.004",
                    "name_eng": "Windows Credential Manager",
                    "name_jp": "Windowsクレデンシャルマネージャ",
                    "description_eng": "Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).(Citation: Microsoft Credential Manager store)(Citation: Microsoft Credential Locker)\n\nThe Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of [Credentials from Web Browsers](https://attack.mitre.org/techniques/T1555/003), Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.\n\nCredential Lockers store credentials in encrypted `.vcrd` files, located under `%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\`. The encryption key can be found in a file named <code>Policy.vpol</code>, typically located in the same folder as the credentials.(Citation: passcape Windows Vault)(Citation: Malwarebytes The Windows Vault)\n\nAdversaries may list credentials managed by the Windows Credential Manager through several mechanisms. <code>vaultcmd.exe</code> is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as <code>CredEnumerateA</code>, may also be absued to list credentials managed by the Credential Manager.(Citation: Microsoft CredEnumerate)(Citation: Delpy Mimikatz Crendential Manager)\n\nAdversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running <code>rundll32.exe keymgr.dll KRShowKeyMgr</code> then selecting the “Back up...” button on the “Stored User Names and Passwords” GUI.\n\nPassword recovery tools may also obtain plain text passwords from the Credential Manager.(Citation: Malwarebytes The Windows Vault)",
                    "description_jp": "攻撃者は Windows クレデンシャルマネージャからクレデンシャルを取得する可能性がある。クレデンシャルマネージャは、NTLM または Kerberos による認証を要求する Web サイト、アプリケーション、および/またはデバイスにサインインするためのクレデンシャルをクレデンシャルロッカ(以前は Windows Vaults と呼ばれていた)に格納する。 (引用: Microsoft Credential Manager store)(引用: Microsoft Credential Locker)\n\nWindows クレデンシャルマネージャは、2 つのロッカーで Web サイトのクレデンシャルとアプリケーションまたはネットワークのクレデンシャルを分離する。Web ブラウザからのクレデンシャル](https://attack.mitre.org/techniques/T1555/003) の一部として、Internet Explorer と Microsoft Edge の Web サイトクレデンシャルはクレデンシャルマネージャによって管理され、Web クレデンシャルロッカに格納されます。アプリケーションおよびネットワークのクレデンシャルは、Windows クレデンシャルロッカーに格納されます。\n\n資格情報ロッカーは、`%Systemdrive%Users[Username]﹑AppData﹑ Local﹑Microsoft﹑[Vault/Credentials]﹑の下にある暗号化された `.vcrd` ファイルに資格情報を格納する。暗号化キーは、<code>Policy.vpol</code>という名前のファイルにあり、通常は資格情報と同じフォルダにあります。\n\n攻撃者は、Windows Credential Manager が管理するクレデンシャルをいくつかのメカニズムでリストすることができます。<code>vaultcmd.exe</code>は Windows ネイティブの実行可能ファイルであり、コマンドライン インターフェイスを介してクレデンシャル ロッカーに格納されているクレデンシャルを列挙するために使用できます。攻撃者は、クレデンシャルロッカー内のファイルを直接読み取ってクレデンシャルを収集することもできます。また、<code>CredEnumerateA</code> などの Windows API を使用して、クレデンシャルマネージャが管理するクレデンシャルをリストすることもできる。 (引用: Microsoft CredEnumerate)(Citation: Delpy Mimikatz Crendential Manager)\n\n攻撃者はクレデンシャルのバックアップからクレデンシャルを取得することもできる。クレデンシャルのバックアップと復元は、<code>rundll32.exe keymgr.dll KRShowKeyMgr</code> を実行し、[Stored User Names and Passwords] GUI で [Back up...] ボタンを選択することで実行できる。\n\nパスワード回復ツールは、クレデンシャルマネージャからプレーンテキストのパスワードを取得することもできます。 (引用: Malwarebytes The Windows Vault)"
                },
                {
                    "id": "T1555.001",
                    "name_eng": "Keychain",
                    "name_jp": "キーホルダー",
                    "description_eng": "Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple’s iCloud service. \n\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.(Citation: Keychain Services Apple)(Citation: Keychain Decryption Passware)(Citation: OSX Keychain Schaumann)\n\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain –d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user’s password to login to the macOS host.(Citation: External to DA, the OS X Way)(Citation: Empire Keychain Decrypt)",
                    "description_jp": "攻撃者は Keychain からクレデンシャルを取得する可能性がある。Keychain（またはKeychain Services）はmacOSのクレデンシャル管理システムで、アカウント名、パスワード、秘密鍵、証明書、機密アプリケーションデータ、支払いデータ、セキュアノートを保存する。キーチェーンには3つのタイプがあります：ログインキーチェーン、システムキーチェーン、ローカルアイテム（iCloud）キーチェーンです。デフォルトのキーチェーンはログインキーチェーンで、ユーザーのパスワードと情報を保存します。システムキーチェーンには、ホスト上のユーザー間で共有されるアイテムなど、オペレーティングシステムからアクセスされるアイテムが保存されます。ローカルアイテム（iCloud）キーチェーンは、AppleのiCloudサービスと同期されたアイテムに使用されます。\n\nキーチェーンは、Keychain Accessアプリケーションまたはコマンドラインユーティリティ<code>security</code>を使用して表示および編集できます。キーチェーンファイルは、<code>~/Library/Keychains/</code>、<code>/Library/Keychains/</code>、<code>/Network/Library/Keychains/</code>にあります。(引用：キーチェーンサービスApple)(引用：キーチェーン復号パスウェア)(引用：OSX Keychain Schaumann)\n\n攻撃者はKeychainストレージ/メモリからユーザー認証情報を収集する可能性があります。例えば、<code>security dump-keychain -d</code>コマンドは、<code>~/Library/Keychains/login.keychain-db</code>からすべてのLogin Keychain認証情報をダンプします。攻撃者は、<code>~/Library/Keychains/login.keychain</code>ファイルから直接Login Keychain認証情報を読み取ることもできます。どちらの方法もパスワードが必要で、Login Keychainのデフォルトのパスワードは、macOSホストにログインするための現在のユーザーのパスワードである。(引用：External to DA, the OS X Way)(Citation: Empire Keychain Decrypt)"
                },
                {
                    "id": "T1555.005",
                    "name_eng": "Password Managers",
                    "name_jp": "パスワード管理",
                    "description_eng": "Adversaries may acquire user credentials from third-party password managers.(Citation: ise Password Manager February 2019) Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.(Citation: ise Password Manager February 2019)\n\nAdversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory.(Citation: FoxIT Wocao December 2019)(Citation: Github KeeThief) Adversaries may extract credentials from memory via [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212).(Citation: NVD CVE-2019-3610)\n Adversaries may also try brute forcing via [Password Guessing](https://attack.mitre.org/techniques/T1110/001) to obtain the master password of a password manager.(Citation: Cyberreason Anchor December 2019)",
                    "description_jp": "攻撃者は、サードパーティのパスワードマネージャからユーザー認証情報を取得する可能性がある。 引用：ise Password Manager February 2019） パスワードマネージャは、通常暗号化されたデータベースにユーザー認証情報を保存するように設計されたアプリケーションである。認証情報は通常、ユーザがデータベースのロックを解除するマスターパスワードを提供した後にアクセスできる。データベースのロックが解除された後、これらのクレデンシャルはメモリにコピーすることができる。これらのデータベースは、ディスク上のファイルとして保存することができる(引用：ise Password Manager 2019年2月号)\n\n攻撃者は、マスターパスワードおよび/または平文の認証情報をメモリから抽出することによって、パスワードマネージャからユーザー認証情報を取得する可能性があります(引用: FoxIT Wocao 2019年12月)(引用: Github KeeThief) 攻撃者は、[Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)を介してメモリから認証情報を抽出する可能性があります(引用: NVD CVE-2019-3610)。\n また、パスワードマネージャのマスターパスワードを取得するために、[Password Guessing](https://attack.mitre.org/techniques/T1110/001)を介してブルートフォース(総当たり)を試みる可能性もある。(引用：Cyberreason Anchor 2019年12月号)"
                },
                {
                    "id": "T1555.006",
                    "name_eng": "Cloud Secrets Management Stores",
                    "name_jp": "クラウド秘密管理ストア",
                    "description_eng": "Adversaries may acquire credentials from cloud-native secret management solutions such as AWS Secrets Manager, GCP Secret Manager, Azure Key Vault, and Terraform Vault.  \n\nSecrets managers support the secure centralized management of passwords, API keys, and other credential material. Where secrets managers are in use, cloud services can dynamically acquire credentials via API requests rather than accessing secrets insecurely stored in plain text files or environment variables.  \n\nIf an adversary is able to gain sufficient privileges in a cloud environment – for example, by obtaining the credentials of high-privileged [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004) or compromising a service that has permission to retrieve secrets – they may be able to request secrets from the secrets manager. This can be accomplished via commands such as `get-secret-value` in AWS, `gcloud secrets describe` in GCP, and `az key vault secret show` in Azure.(Citation: Permiso Scattered Spider 2023)(Citation: Sysdig ScarletEel 2.0 2023)(Citation: AWS Secrets Manager)(Citation: Google Cloud Secrets)(Citation: Microsoft Azure Key Vault)\n\n**Note:** this technique is distinct from [Cloud Instance Metadata API](https://attack.mitre.org/techniques/T1552/005) in that the credentials are being directly requested from the cloud secrets manager, rather than through the medium of the instance metadata API.",
                    "description_jp": "攻撃者は、AWS Secrets Manager、GCP Secret Manager、Azure Key Vault、Terraform Vaultなどのクラウドネイティブな秘密管理ソリューションから認証情報を取得する可能性がある。  \n\nシークレットマネージャーは、パスワード、APIキー、およびその他のクレデンシャルの安全な集中管理をサポートする。シークレットマネージャーが使用されている場合、クラウドサービスは、プレーンテキストファイルや環境変数に安全に保存されたシークレットにアクセスするのではなく、APIリクエストを介して動的にクレデンシャルを取得することができる。  \n\n敵対者がクラウド環境で十分な特権を得ることができた場合、例えば高特権の[Cloud Accounts](https://attack.mitre.org/techniques/T1078/004)のクレデンシャルを取得したり、シークレットを取得する権限を持っているサービスを侵害したりすることで、シークレットマネージャにシークレットを要求することができるかもしれない。これは、AWSでは`get-secret-value`、GCPでは`gcloud secrets describe`、Azureでは`az key vault secret show`といったコマンドで実現できる。(引用：Permiso Scattered Spider 2023)(引用：Sysdig ScarletEel 2.0 2023)(引用：AWS Secrets Manager)(引用：Google Cloud Secrets)(引用：Microsoft Azure Key Vault)\n\n**注意:**このテクニックは、インスタンスメタデータAPIという媒体を通してではなく、クラウドシークレットマネージャーから直接認証情報を要求するという点で、[Cloud Instance Metadata API](https://attack.mitre.org/techniques/T1552/005)とは異なる。"
                },
                {
                    "id": "T1555.003",
                    "name_eng": "Credentials from Web Browsers",
                    "name_jp": "ウェブブラウザからの認証情報",
                    "description_eng": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.(Citation: Talos Olympic Destroyer 2018) Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim’s cached logon credentials as the decryption key.(Citation: Microsoft CryptUnprotectData April 2018)\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.(Citation: Proofpoint Vega Credential Stealer May 2018)(Citation: FireEye HawkEye Malware July 2017) Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the [Windows Credential Manager](https://attack.mitre.org/techniques/T1555/004).\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.(Citation: GitHub Mimikittenz July 2016)\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
                    "description_jp": "攻撃者は、ターゲットとなるブラウザに固有のファイルを読み取ることで、ウェブブラウザから認証情報を取得する可能性があります。(引用: Talos Olympic Destroyer 2018) ウェブブラウザは一般的に、ウェブサイトのユーザー名やパスワードなどの認証情報を保存し、将来手動で入力する必要がないようにします。ウェブブラウザは通常、クレデンシャルストア内に暗号化された形式でクレデンシャルを保存しますが、ウェブブラウザから平文のクレデンシャルを抽出する方法も存在します。\n\n例えば、Windowsシステムでは、データベースファイル<code>AppDataLocal\\GoogleChrome\\User Data</code> を読み取り、SQLクエリを実行することで、暗号化された認証情報をGoogle Chromeから取得できます：<code>SELECT action_url, username_value, password_value FROM logins;</code>。平文のパスワードは、暗号化された認証情報を Windows API 関数 <code>CryptUnprotectData</code> に渡すことで取得できます。\n \nAdversariesは、FireFox、Safari、Edgeなどの一般的なWebブラウザに対しても同様の手順を実行しています(引用: Proofpoint Vega Credential Stealer 2018年5月)(引用: FireEye HawkEye Malware 2017年7月) Windowsは、Internet ExplorerとMicrosoft Edgeの認証情報を[Windows Credential Manager](https://attack.mitre.org/techniques/T1555/004)が管理するCredential Lockersに保存します。\n\nまた、ウェブブラウザのプロセスメモリを検索し、一般的にクレデンシャルと一致するパターンを検索することで、攻撃者がクレデンシャルを取得することもあります(引用: GitHub Mimikittenz July 2016)\n\nウェブブラウザから認証情報を取得した後、敵対者はアクセスを拡大するために、異なるシステムやアカウント間で認証情報を再利用しようとする可能性があります。これは、ウェブブラウザから得た認証情報が特権アカウント（例えばドメイン管理者）と重複している場合に、敵の目的を著しく推進する結果となり得る。"
                },
                {
                    "id": "T1555.002",
                    "name_eng": "Securityd Memory",
                    "name_jp": "セキュリティー・メモリー",
                    "description_eng": "An adversary with root access may gather credentials by reading `securityd`’s memory. `securityd` is a service/daemon responsible for implementing security protocols such as encryption and authorization.(Citation: Apple Dev SecurityD) A privileged adversary may be able to scan through `securityd`'s memory to find the correct sequence of keys to decrypt the user’s logon keychain. This may provide the adversary with various plaintext passwords, such as those for users, WiFi, mail, browsers, certificates, secure notes, etc.(Citation: OS X Keychain)(Citation: OSX Keydnap malware)\n\nIn OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple’s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords.(Citation: OS X Keychain)(Citation: External to DA, the OS X Way) Apple’s `securityd` utility takes the user’s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user’s password, but once the master key is found, an adversary need only iterate over the other values to unlock the final password.(Citation: OS X Keychain)",
                    "description_jp": "rootアクセス権を持つ敵対者は、`securityd`のメモリを読み取ることで認証情報を収集することができる。(Citation: Apple Dev SecurityD) 特権を持った敵対者は `securityd` のメモリをスキャンして、ユーザのログオンキーチェインを解読するための正しい鍵のシーケンスを見つけることができるかもしれません。これにより、ユーザー、WiFi、メール、ブラウザ、証明書、セキュアノートなど、さまざまな平文のパスワードが敵対者に提供される可能性がある(引用: OS X Keychain)(Citation: OSX Keydnap malware)\n\nEl Capitan以前のOS Xでは、rootアクセス権を持つユーザーは、ログインしているユーザーのプレーンテキストのキーチェーンパスワードを読むことができる。(引用：OS X Keychain)(引用：External to DA, the OS X Way) Appleの`securityd`ユーティリティは、ユーザーのログオンパスワードを取得し、PBKDF2で暗号化し、このマスターキーをメモリに保存する。Appleはまた、ユーザーのパスワードを暗号化するために一連のキーとアルゴリズムを使用するが、一度マスターキーが見つかれば、敵は最終的なパスワードを解除するために他の値を反復するだけでよい(引用：OS X Keychain)"
                }
            ]
        },
        {
            "id": "T1552",
            "name_eng": "Unsecured Credentials",
            "name_jp": "無担保クレデンシャル",
            "description_eng": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. [Bash History](https://attack.mitre.org/techniques/T1552/003)), operating system or application-specific repositories (e.g. [Credentials in Registry](https://attack.mitre.org/techniques/T1552/002)),  or other specialized files/artifacts (e.g. [Private Keys](https://attack.mitre.org/techniques/T1552/004)).(Citation: Brining MimiKatz to Unix)",
            "description_jp": "攻撃者は侵害されたシステムを検索して、安全に保存されていないクレデンシャルを見つけ、入手することができる。これらの認証情報は、プレーンテキストファイル（[Bash History](https://attack.mitre.org/techniques/T1552/003)など）、オペレーティングシステムやアプリケーション固有のリポジトリ（[Credentials in Registry](https://attack.mitre.org/techniques/T1552/002)など）、その他の特殊なファイル/アーティファクト（[Private Keys](https://attack.mitre.org/techniques/T1552/004)など）など、システム上のさまざまな場所に保存されたり、誤って配置されたりする可能性がある（引用：Bringing MimiKatz to Unix）。",
            "subtechniques": [
                {
                    "id": "T1552.006",
                    "name_eng": "Group Policy Preferences",
                    "name_jp": "グループポリシーの環境設定",
                    "description_eng": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.(Citation: Microsoft GPP 2016)\n\nThese group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).(Citation: Microsoft GPP Key)\n\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:\n\n* Metasploit’s post exploitation module: <code>post/windows/gather/credentials/gpp</code>\n* Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)\n* gpprefdecrypt.py\n\nOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: <code>dir /s * .xml</code>",
                    "description_jp": "攻撃者はグループポリシー環境設定(GPP)で安全でない認証情報を見つけようとするかもしれない。GPP は、管理者が認証情報を埋め込んだドメインポリシーを作成できるようにするツールです。これらのポリシーにより、管理者はローカルアカウントを設定することができます。(引用：Microsoft GPP 2016)\n\nこれらのグループポリシーはドメインコントローラー上のSYSVOLに保存される。これは、ドメインユーザーであれば誰でもSYSVOL共有を閲覧し、パスワードを復号化できることを意味する(公開されているAESキーを使用)(引用: Microsoft GPP Key)\n\n以下のツールとスクリプトを使用して、グループポリシー設定XMLファイルからパスワードファイルを収集し、復号化することができる：\n\n* Metasploit の post exploitation モジュール：<code>post/windows/gather/credentials/gpp</code>。\n* Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)\n* gpprefdecrypt.py\n\nSYSVOL共有上で、敵対者は以下のコマンドを使って潜在的なGPP XMLファイルを列挙することができます：<code>dir /s * .xml</code>."
                },
                {
                    "id": "T1552.004",
                    "name_eng": "Private Keys",
                    "name_jp": "プライベート・キー",
                    "description_eng": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.(Citation: Wikipedia Public Key Crypto) Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.(Citation: Kaspersky Careto)(Citation: Palo Alto Prince of Persia)\n\nWhen a device is registered to Entra ID, a device key and a transport key are generated and used to verify the device’s identity.(Citation: Microsoft Primary Refresh Token) An adversary with access to the device may be able to export the keys in order to impersonate the device.(Citation: AADInternals Azure AD Device Identities)\n\nOn network devices, private keys may be exported via [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `crypto pki export`.(Citation: cisco_deploy_rsa_keys) \n\nSome private keys require a password or passphrase for operation, so an adversary may also use [Input Capture](https://attack.mitre.org/techniques/T1056) for keylogging or attempt to [Brute Force](https://attack.mitre.org/techniques/T1110) the passphrase off-line. These private keys can be used to authenticate to [Remote Services](https://attack.mitre.org/techniques/T1021) like SSH or for use in decrypting other collected files such as email.",
                    "description_jp": "攻撃者は、危殆化したシステム上の秘密鍵証明書ファイルを検索して、安全に保存されていない証明書を探すことがある。秘密鍵および証明書は、認証、暗号化/復号化、およびデジタル署名に使用される。 (引用: Wikipedia Public Key Crypto) 一般的な鍵および証明書のファイル拡張子には、以下のものがある：.key、.pgp、.gpg、.ppk、.p12、.pem、.pfx、.cer、.p7b、.asc。\n\n攻撃者はまた、一般的な鍵ディレクトリ、例えば* nixベースのシステムではSSH鍵の<code>~/.ssh</code>、Windowsでは<code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code>を探すかもしれない。攻撃ツールはまた、暗号鍵や証明書に関連するファイル拡張子を侵害されたシステムで検索する可能性があります。(引用：Kaspersky Careto)(引用：Palo Alto Prince of Persia)\n\nデバイスが Entra ID に登録されると、デバイス鍵とトランスポート鍵が生成され、デバイスの ID を検証するために使用されます（引用：Microsoft Primary Refresh Token）。デバイスにアクセスできる敵対者は、デバイスになりすますために鍵をエクスポートできる可能性があります（引用：AADInternals Azure AD Device Identities）。\n\nネットワークデバイスでは、`crypto pki export`などの[Network Device CLI](https://attack.mitre.org/techniques/T1059/008)コマンドを使用して秘密鍵をエクスポートできる。(引用：cisco_deploy_rsa_keys)\n\n一部の秘密鍵は操作にパスワードまたはパスフレーズを必要とするため、敵は[Input Capture](https://attack.mitre.org/techniques/T1056)を使用してキーロギングを行ったり、[Brute Force](https://attack.mitre.org/techniques/T1110)を使用してオフラインでパスフレーズを試すこともできる。これらの秘密鍵は、SSHのような[リモートサービス](https://attack.mitre.org/techniques/T1021)への認証や、電子メールのような他の収集されたファイルの復号化に使用することができる。"
                },
                {
                    "id": "T1552.007",
                    "name_eng": "Container API",
                    "name_jp": "コンテナAPI",
                    "description_eng": "Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.(Citation: Docker API)(Citation: Kubernetes API)\n\nAn adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment.(Citation: Unit 42 Unsecured Docker Daemons) An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components.",
                    "description_jp": "攻撃者はコンテナ環境内のAPIを介して認証情報を収集する可能性がある。Docker APIやKubernetes APIなど、これらの環境におけるAPIは、ユーザーがコンテナリソースやクラスタコンポーネントをリモートで管理することを可能にする。 引用：Docker API）（引用：Kubernetes API\n\n敵対者はDocker APIにアクセスして、環境内のクラウド、コンテナ、その他のさまざまなリソースへの認証情報を含むログを収集することができる。 引用：Unit 42 Unsecured Docker Daemons） また、Podのサービスアカウントを介するなどして十分な権限を持つ敵対者は、Kubernetes APIを使用してKubernetes APIサーバーから認証情報を取得することもできる。これらのクレデンシャルには、Docker API認証に必要なものや、Kubernetesクラスタコンポーネントからのシークレットが含まれる可能性がある。"
                },
                {
                    "id": "T1552.001",
                    "name_eng": "Credentials In Files",
                    "name_jp": "ファイル内のクレデンシャル",
                    "description_eng": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003).(Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.(Citation: SRD GPP)\n\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.(Citation: Unit 42 Hildegard Malware) They may also be found as parameters to deployment commands in container logs.(Citation: Unit 42 Unsecured Docker Daemons) In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.(Citation: Specter Ops - Cloud Credential Storage)",
                    "description_jp": "攻撃者は、ローカル・ファイル・システムやリモート・ファイル共有を検索して、安全に保存されていないクレデンシャルを含むファイルを探す可能性がある。これらは、ユーザが自分のクレデンシャルを格納するために作成したファイル、個人グループの共有クレデンシャル格納、システムまたはサービスのパスワードを含む構成ファイル、または埋め込まれたパスワードを含むソース・コード/バイナリ・ファイルである。\n\nOS Credential Dumping](https://attack.mitre.org/techniques/T1003)を使用して、バックアップまたは保存された仮想マシンからパスワードを抽出することが可能である。(引用：CG 2014) パスワードは、Windows ドメインコントローラに保存されたグループポリシーの環境設定からも取得できる。(引用：SRD GPP)\n\nクラウドおよび/またはコンテナ化された環境では、認証されたユーザーおよびサービスアカウントのクレデンシャルが、ローカルの設定ファイルやクレデンシャルファイルに保存されていることがよくあります(引用：Unit 42 Hildegard Malware)。また、コンテナログ内のデプロイコマンドのパラメータとして見つかることもあります(引用：Unit 42 Unsecured Docker Daemons)。場合によっては、これらのファイルをコピーして別のマシンで再利用したり、ファイルをコピーする必要なく内容を読み込んで認証に使用したりすることができます(引用：Specter Ops - Cloud Credential Storage)。"
                },
                {
                    "id": "T1552.002",
                    "name_eng": "Credentials in Registry",
                    "name_jp": "登録資格",
                    "description_eng": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\n\nExample commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)\n\n* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>\n* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>",
                    "description_jp": "攻撃者は、危険にさらされたシステムのレジストリを検索して、安全に保存されていない認証情報を探す可能性がある。Windows レジストリは、システムまたは他のプログラムで使用できる構成情報を格納する。攻撃者はレジストリを照会して、他のプログラムやサービスで使用するために保存されている資格情報やパスワードを探すことがある。これらの認証情報は自動ログオンに使用されることもある。\n\nパスワード情報に関連するレジストリキーを検索するコマンドの例：（引用：Pentestlab Stored Credentials）\n\n* ローカルマシンハイブ：<code>reg query HKLM /f password /t REG_SZZ /s</code> * 現在のユーザー ハイブ: HKLM /f password /t REG_SZZ /s</code\n* 現在のユーザーハイブ：<コード>reg クエリ HKCU /f パスワード /t REG_SZ /s</code> * 現在のユーザー ハイブ"
                },
                {
                    "id": "T1552.003",
                    "name_eng": "Bash History",
                    "name_jp": "バッシュの歴史",
                    "description_eng": "Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user’s <code>.bash_history</code> file. For each user, this file resides at the same location: <code>~/.bash_history</code>. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials. (Citation: External to DA, the OS X Way)",
                    "description_jp": "攻撃者は、危険にさらされたシステム上でbashコマンドの履歴を検索し、安全に保存されていない認証情報を探す可能性がある。Bashは、「history」ユーティリティを使用して、ユーザーがコマンドラインで入力したコマンドを追跡します。ユーザーがログアウトすると、履歴はユーザーの<code>.bash_history</code>ファイルにフラッシュされます。各ユーザのこのファイルは同じ場所に存在します：<code>~/.bash_history</code> です。通常、このファイルにはユーザーの最後の500個のコマンドが記録されています。ユーザーはコマンドラインでユーザー名とパスワードをプログラムのパラメータとして入力することが多く、ログアウト時にこのファイルに保存されます。攻撃者は、このファイルから潜在的な認証情報を探し出すことで、これを悪用することができる。(引用：OS X流DAへの外部アクセス)"
                },
                {
                    "id": "T1552.008",
                    "name_eng": "Chat Messages",
                    "name_jp": "チャットメッセージ",
                    "description_eng": "Adversaries may directly collect unsecured credentials stored or passed through user communication services. Credentials may be sent and stored in user chat communication applications such as email, chat services like Slack or Teams, collaboration tools like Jira or Trello, and any other services that support user communication. Users may share various forms of credentials (such as usernames and passwords, API keys, or authentication tokens) on private or public corporate internal communications channels.\n\nRather than accessing the stored chat logs (i.e., [Credentials In Files](https://attack.mitre.org/techniques/T1552/001)), adversaries may directly access credentials within these services on the user endpoint, through servers hosting the services, or through administrator portals for cloud hosted services. Adversaries may also compromise integration tools like Slack Workflows to automatically search through messages to extract user credentials. These credentials may then be abused to perform follow-on activities such as lateral movement or privilege escalation (Citation: Slack Security Risks).",
                    "description_jp": "攻撃者は、ユーザ通信サービスを通じて保存または渡された安全でないクレデンシャルを直接収集する可能性がある。クレデンシャルは、電子メール、Slack や Teams のようなチャットサービス、Jira や Trello のようなコラボレーションツール、およびユーザーコミュニケーションをサポートするその他のサービスのようなユーザーチャットコミュニケーションアプリケーションで送信および保存される可能性があります。ユーザーは、非公開または公開の企業内コミュニケーションチャネルで、さまざまな形式のクレデンシャル（ユーザー名やパスワード、API キー、認証トークンなど）を共有することができます。\n\n敵対者は、保存されたチャットログ（すなわち[Credentials In Files](https://attack.mitre.org/techniques/T1552/001)）にアクセスするのではなく、ユーザーエンドポイント、サービスをホスティングするサーバー、またはクラウドホスティングサービスの管理者ポータルを通じて、これらのサービス内のクレデンシャルに直接アクセスする可能性があります。また、Slack ワークフローのような統合ツールを侵害し、メッセージを自動的に検索してユーザー認証情報を抽出することもあります。そして、これらの認証情報を悪用して、ラテラルムーブメントや権限昇格などの後続の活動を実行する可能性があります（引用：Slack Security Risks）。"
                },
                {
                    "id": "T1552.005",
                    "name_eng": "Cloud Instance Metadata API",
                    "name_jp": "クラウド・インスタンス・メタデータAPI",
                    "description_eng": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.",
                    "description_jp": "攻撃者は、クラウドインスタンスメタデータAPIにアクセスして、認証情報やその他の機密データを収集しようとする可能性がある。\n\nほとんどのクラウドサービスプロバイダーはクラウドインスタンスメタデータAPIをサポートしています。これは実行中の仮想インスタンスに提供されるサービスで、アプリケーションが実行中の仮想インスタンスに関する情報にアクセスすることを可能にします。利用可能な情報には一般的に、名前、セキュリティグループ、および認証情報やUserDataスクリプトなどの機密データを含む追加のメタデータが含まれます。Instance Metadata APIは、アプリケーションの管理を支援するための利便性として提供されており、インスタンスにアクセスできる人であれば誰でもアクセスできる(引用: AWS Instance Metadata API) クラウドメタデータAPIは、少なくとも1件の注目度の高い侵害で使用されている(引用: Krebs Capital One August 2019)\n\n敵対者が実行中の仮想インスタンス上に存在する場合、追加リソースへのアクセスを許可する認証情報を特定するために、インスタンスメタデータAPIに直接問い合わせる可能性がある。さらに、敵対者は、Instance Metadata APIへのリクエストを経由して機密情報へのアクセスを可能にする、パブリックに面したWebプロキシのSSRF（Server-Side Request Forgery）の脆弱性を悪用する可能性があります（引用：RedLock Instance Metadata API 2018）。\n\nクラウドサービスプロバイダー全体のデファクトスタンダードは、インスタンスメタデータAPIを<code>http[:]//169.254.169.254</code>でホストすることです。"
                }
            ]
        },
        {
            "id": "T1649",
            "name_eng": "Steal or Forge Authentication Certificates",
            "name_jp": "認証証明書の窃盗または偽造",
            "description_eng": "Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Entra ID device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.(Citation: O365 Blog Azure AD Device IDs)(Citation: Microsoft AD CS Overview)\n\nAuthentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files)(Citation: APT29 Deep Look at Credential Roaming), misplaced certificate files (i.e. [Unsecured Credentials](https://attack.mitre.org/techniques/T1552)), or directly from the Windows certificate store via various crypto APIs.(Citation: SpecterOps Certified Pre Owned)(Citation: GitHub CertStealer)(Citation: GitHub GhostPack Certificates) With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate’s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate’s subject alternative name (SAN) values define the certificate owner’s alternate names.(Citation: Medium Certified Pre Owned)\n\nAbusing certificates for authentication credentials may enable other behaviors such as [Lateral Movement](https://attack.mitre.org/tactics/TA0008). Certificate-related misconfigurations may also enable opportunities for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable [Persistence](https://attack.mitre.org/tactics/TA0003) via stealing or forging certificates that can be used as [Valid Accounts](https://attack.mitre.org/techniques/T1078) for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.\n\nAdversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish [Persistence](https://attack.mitre.org/tactics/TA0003) by forging arbitrary authentication certificates for the victim domain (known as “golden” certificates).(Citation: Medium Certified Pre Owned) Adversaries may also target certificates and related services in order to access other forms of credentials, such as [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) ticket-granting tickets (TGT) or NTLM plaintext.(Citation: Medium Certified Pre Owned)",
            "description_jp": "攻撃者は、リモート・システムやリソースにアクセスするための認証に使用される証明書を盗んだり、偽造したりする可能性がある。デジタル証明書は、メッセージやファイルの署名や暗号化によく使用される。証明書は、認証材料としても使用される。たとえば、Entra ID デバイス証明書や Active Directory Certificate Services（AD CS）証明書は、ID にバインドされ、ドメインアカウントの認証情報として使用できる。\n\n認証証明書は、盗まれることも偽造されることもある。たとえば、AD CS 証明書は、暗号化されたストレージ（レジストリまたはファイル）（引用：APT29 Deep Look at Credential Roaming）、置き忘れた証明書ファイル（すなわち [Unsecured Credentials]（https://attack.mitre.org/techniques/T1552））、またはさまざまな暗号 API を介して Windows 証明書ストアから直接盗まれる可能性がある。(引用: SpecterOps Certified Pre Owned)(引用: GitHub CertStealer)(引用: GitHub GhostPack Certificates) 適切な登録権限があれば、ドメイン内のユーザーやマシンも、企業の認証局(CA)に証明書を要求したり、手動で更新したりできる。この登録プロセスによって、証明書に関連するさまざまな設定や権限が定義される。特に、証明書の拡張鍵使用（EKU）値は、署名、暗号化、および認証のユースケースを定義し、証明書のサブジェクト代替名（SAN）値は、証明書の所有者の代替名を定義する(引用：Medium Certified Pre Owned)\n\n証明書を認証に悪用することは、[Lateral Movement](https://attack.mitre.org/tactics/TA0008)などの行為を可能にする可能性がある。証明書に関連する設定の誤りは、ユーザが証明書に関連するアイデンティティ(SAN)を介して特権アカウントや権限になりすましたり、なりすましたりすることを可能にすることによって、[特権のエスカレーション](https://attack.mitre.org/tactics/TA0004)の機会も可能にする可能性がある。これらの悪用は、ユーザ・パスワードのリセットにもかかわらず、証明書の有効期間中「有効なアカウント」(https://attack.mitre.org/techniques/T1078)として使用できる証明書を盗んだり偽造したりすることによって、「永続性」(https://attack.mitre.org/tactics/TA0003)を可能にする可能性もある。認証証明書は、マシン・アカウントのために盗まれたり偽造されたりすることもある。\n\nルート(またはサボーディネート)CA 証明書の秘密鍵(またはこれらの鍵を保護/管理するメカニズム)にアクセスできる攻撃者は、被害者ドメインの任意の認証証明書(「ゴールデン」証明書として知られる)を偽造することで、[Persistence](https://attack.mitre.org/tactics/TA0003)を確立することもできる(引用：Medium Certified Pre Owned)。攻撃者は、[ゴールデンチケット](https://attack.mitre.org/techniques/T1558/001)チケット付与チケット(TGT)や NTLM 平文など、他の形式のクレデンシャルにアクセスするために、証明書や関連サービスを標的にすることもできる(引用：Medium Certified Pre Owned)。",
            "subtechniques": []
        },
        {
            "id": "T1528",
            "name_eng": "Steal Application Access Token",
            "name_jp": "アプリケーション・アクセストークンを盗む",
            "description_eng": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container’s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)  \n\nSimilarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment.(Citation: Cider Security Top 10 CICD Security Risks) If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges. \n\nIn Azure, an adversary who compromises a resource with an attached Managed Identity, such as an Azure VM, can request short-lived tokens through the Azure Instance Metadata Service (IMDS). These tokens can then facilitate unauthorized actions or further access to other Azure services, bypassing typical credential-based authentication.(Citation: Entra Managed Identities 2025)(Citation: SpecterOps Managed Identity 2022)\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.",
            "description_jp": "攻撃者は、リモートシステムやリソースにアクセスするための認証情報を取得する手段として、アプリケーションのアクセストークンを盗むことができる。\n\nアプリケーション・アクセストークンは、ユーザーやサービスに代わって認可されたAPIリクエストを行うために使用され、クラウドやコンテナベースのアプリケーション、SaaS（Software-as-a-Service）のリソースにアクセスする手段として一般的に使用されている（引用：Auth0 - Why Should Always Use Access Tokens to Secure APIs Sept 2019）：Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019）クラウドやコンテナ化された環境でアカウントAPIトークンを盗み出した攻撃者は、これらのアカウントの権限でデータにアクセスしたりアクションを実行したりできる可能性があり、権限の昇格や環境のさらなる侵害につながる可能性がある。\n\n例えば、Kubernetes環境では、コンテナ内で実行されているプロセスがサービスアカウントトークンを使用してKubernetes APIサーバーと通信する可能性があります。コンテナが侵害された場合、敵対者はコンテナのトークンを盗むことができ、それによってKubernetes APIコマンドにアクセスできるようになる可能性がある（引用：Kubernetes Service Accounts）。\n\n同様に、継続的開発/継続的統合（CI/CD）パイプライン内のインスタンスは、テストやデプロイのために他のサービスに認証するためにAPIトークンを使用することがよくあります（引用：Cider Security Top 10 CICD Security Risks） これらのパイプラインが侵害された場合、敵対者はこれらのトークンを盗み、その権限を活用することができる可能性があります。\n\nAzure では、Azure VM などの Managed Identity がアタッチされたリソースを侵害する敵対者は、Azure Instance Metadata Service（IMDS）を介して短命のトークンを要求できます。これらのトークンは、一般的なクレデンシャルベースの認証をバイパスして、不正なアクションや他のAzureサービスへのさらなるアクセスを容易にすることができる。 引用：Entra Managed Identities 2025）（引用：SpecterOps Managed Identity 2022\n\nトークンの盗難はソーシャルエンジニアリングによっても発生する可能性があり、その場合、アクセスを許可するためにユーザーのアクションが必要になることがある。OAuth は、システムへのアクセス用にユーザにトークンを発行する、一般的に実装されているフレームワークの 1 つである。クラウドベースのサービスや保護されたAPIへのアクセスを望むアプリケーションは、OAuth 2.0を使用して、様々な認可プロトコルを介してアクセスすることができます。一般的に使用されるシーケンスの例として、Microsoftの認証コード付与フローがある（引用：Microsoft Identity Platform Protocols May 2019）（Citation: Microsoft - OAuth Code Authorization flow - June 2019） OAuthアクセストークンを使用すると、サードパーティのアプリケーションは、ユーザー認証情報を取得することなく、アプリケーションが要求する方法でユーザーデータを含むリソースと対話できるようになる。\n \n敵対者は、ターゲットユーザーのOAuthトークンでリソースへのアクセスが許可されるように設計された悪意のあるアプリケーションを構築することで、OAuth認可を活用できます(引用: Amnesty OAuth Phishing Attacks, August 2019)(引用: Trend Micro Pawn Storm OAuth 2017) 敵対者は、Azureポータル、Visual Studio IDE、コマンドラインインターフェース、PowerShell、またはREST APIコールを使用して、Microsoft Identity Platformなどの認可サーバーへのアプリケーションの登録を完了する必要があります。(引用: Microsoft - Azure AD App Registration - May 2019) その後、ターゲットユーザーに[Spearphishing Link](https://attack.mitre.org/techniques/T1566/002)を送信して、アプリケーションへのアクセスを許可するように誘導する。OAuthアクセストークンが付与されると、アプリケーションは[Application Access Token](https://attack.mitre.org/techniques/T1550/001)を通じて、ユーザーアカウントの機能への潜在的な長期アクセスを得ることができる。(引用: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nアプリケーション・アクセストークンは、限られた有効期間内で機能し、敵対者が盗んだトークンを利用できる期間を制限することができる。しかし、場合によっては、敵対者はアプリケーションのリフレッシュトークンも盗むことができ（引用：Auth0 Understanding Refresh Tokens）、ユーザーに促すことなく新しいアクセストークンを取得できる。",
            "subtechniques": []
        },
        {
            "id": "T1606",
            "name_eng": "Forge Web Credentials",
            "name_jp": "ウェブ認証情報の偽造",
            "description_eng": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.\n\nAdversaries may generate these credential materials in order to gain access to web resources. This differs from [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539), [Steal Application Access Token](https://attack.mitre.org/techniques/T1528), and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users.\n\nThe generation of web credentials often requires secret values, such as passwords, [Private Keys](https://attack.mitre.org/techniques/T1552/004), or other cryptographic seed values.(Citation: GitHub AWS-ADFS-Credential-Generator) Adversaries may also forge tokens by taking advantage of features such as the `AssumeRole` and `GetFederationToken` APIs in AWS, which allow users to request temporary security credentials (i.e., [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005)), or the `zmprov gdpak` command in Zimbra, which generates a pre-authentication key that can be used to generate tokens for any user in the domain.(Citation: AWS Temporary Security Credentials)(Citation: Zimbra Preauth)\n\nOnce forged, adversaries may use these web credentials to access resources (ex: [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550)), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Pass The Cookie)(Citation: Unit 42 Mac Crypto Cookies January 2019)(Citation: Microsoft SolarWinds Customer Guidance)",
            "description_jp": "攻撃者は、ウェブ・アプリケーションやインターネット・サービスにアクセスするために使用できるクレデンシャ ル資料を偽造する可能性がある。ウェブ・アプリケーションおよびサービス（クラウド SaaS 環境またはオンプレミス・サーバでホストされる）は、多くの場合、セッション・クッキー、トークン、またはその他の材料を使用して、ユーザ・アクセスを認証および承認する。\n\n攻撃者はウェブ・リソースへのアクセスを得るために、これらのクレデンシャル・マテリアルを生成するかもしれません。これは、[Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)、[Steal Application Access Token](https://attack.mitre.org/techniques/T1528)、および他の類似の振る舞いとは、クレデンシャルが正当なユー ザから盗まれたり傍受されたりするのではなく、敵対者によって新しく偽造されるという点で異なります。\n\nウェブ認証情報の生成には、パスワード、[Private Keys](https://attack.mitre.org/techniques/T1552/004)、または他の暗号シード値のような秘密の値を必要とすることが多い。(引用: GitHub AWS-ADFS-Credential-Generator) 敵対者はまた、AWS の `AssumeRole` や `GetFederationToken` API のような機能を利用することで、トークンを偽造することもある、[Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005)）、または Zimbra の `zmprov gdpak` コマンドのような機能を利用することで、トークンを生成するために使用できる事前認証キーを生成することができる。(引用：AWS Temporary Security Credentials)(引用：Zimbra Preauth)\n\nいったん偽造されると、敵対者はこれらの Web 認証情報を使用してリソースにアクセスする可能性があり(例: [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550))、多要素認証やその他の認証保護メカニズムをバイパスする可能性があります(引用: Pass The Cookie)(引用: Unit 42 Mac Crypto Cookies January 2019)(引用: Microsoft SolarWinds Customer Guidance)",
            "subtechniques": [
                {
                    "id": "T1606.001",
                    "name_eng": "Web Cookies",
                    "name_jp": "ウェブクッキー",
                    "description_eng": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.\n\nAdversaries may generate these cookies in order to gain access to web resources. This differs from [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539) and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces.(Citation: Pass The Cookie) The generation of web cookies often requires secret values, such as passwords, [Private Keys](https://attack.mitre.org/techniques/T1552/004), or other cryptographic seed values.\n\nOnce forged, adversaries may use these web cookies to access resources ([Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Volexity SolarWinds)(Citation: Pass The Cookie)(Citation: Unit 42 Mac Crypto Cookies January 2019)",
                    "description_jp": "攻撃者はウェブ・アプリケーションやインターネット・サービスにアクセスするために利用できるウェブ・クッキーを偽造するかもしれません。ウェブ・アプリケーションやサービス（クラウド SaaS 環境やオンプレミス・サーバでホストされる）は、ユーザ・アク セスの認証と認可にセッション・クッキーを使うことがよくあります。\n\n攻撃者はウェブ・リソースへのアクセスを得るためにこれらのクッキーを生成するかもしれません。これは[Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)や他の類似の振る舞いと異なり、クッキーは正当なユー ザから盗まれたり傍受されたりするのではなく、敵対者によって新しく偽造されたものです。ほとんどの一般的なウェブ・アプリケーションは標準化され文書化されたクッキー値を持っており、提供されたツールやインタ フェースを使用して生成することができます(引用: Pass The Cookie)。ウェブ・クッキーの生成はしばしばパスワード、[プライベート・キー](https://attack.mitre.org/techniques/T1552/004)、あるいは他の暗号的なシード値のような秘密の値を必要とします。\n\nいったん偽造されると、敵対者はこれらの Web Cookie を使用してリソースにアクセスし([Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)) 、多要素やその他の認証保護メカニズムをバイパスする可能性があります。(引用：Volexity SolarWinds)(引用：Pass The Cookie)(引用：Unit 42 Mac Crypto Cookies January 2019)"
                },
                {
                    "id": "T1606.002",
                    "name_eng": "SAML Tokens",
                    "name_jp": "SAML トークン",
                    "description_eng": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate.(Citation: Microsoft SolarWinds Steps) The default lifetime of a SAML token is one hour, but the validity period can be specified in the <code>NotOnOrAfter</code> value of the <code>conditions ...</code> element in a token. This value can be changed using the <code>AccessTokenLifetime</code> in a <code>LifetimeTokenPolicy</code>.(Citation: Microsoft SAML Token Lifetimes) Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.(Citation: Cyberark Golden SAML)\n\nAn adversary may utilize [Private Keys](https://attack.mitre.org/techniques/T1552/004) to compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate.(Citation: Microsoft SolarWinds Customer Guidance) This differs from [Steal Application Access Token](https://attack.mitre.org/techniques/T1528) and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.\n\nAn adversary may gain administrative Entra ID privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Microsoft SolarWinds Customer Guidance)",
                    "description_jp": "敵対者は、有効な SAML トークン署名証明書を所有していれば、任意の権限クレームと有効期間を持つ SAML トークンを偽造できる(引用：Microsoft SolarWinds Steps)。SAML トークンのデフォルトの有効期間は 1 時間だが、トークン内の <code>conditions ...</code>要素の <code>NotOnOrAfter</code> 値で有効期間を指定できる。この値は、<code>LifetimeTokenPolicy</code>内の<code>AccessTokenLifetime</code>を使用して変更できる。(引用：Microsoft SAML Token Lifetimes) 偽造 SAML トークンを使用すると、敵対者は SAML 2.0 を SSO (シングルサインオン) メカニズムとして使用するサービス間で認証を行うことができる。(引用：Cyberark Golden SAML)\n\n敵対者は[秘密鍵](https://attack.mitre.org/techniques/T1552/004)を利用して、組織のトークン署名証明書を侵害し、偽造 SAML トークンを作成することができる。敵対者が独自の Active Directory フェデレーション・サービス（AD FS）サーバとの新しいフェデレーション・トラストを確立するのに十分な権限を持っている場合、代わりに独自の信頼されたトークン署名証明書を生成する可能性がある（引用：Microsoft SolarWinds Customer Guidance）。これは、トークンが正当なユーザから盗まれたり傍受されたりするのではなく、敵対者によって新たに偽造されるという点で、[Steal Application Access Token]（https://attack.mitre.org/techniques/T1528）や他の類似の動作とは異なる。\n\nSAML トークンが偽造され、高度な特権アカウントを表すと主張した場合、敵対者は管理用の Entra ID 特権を獲得する可能性がある。これは、[Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550)につながる可能性があり、多要素認証やその他の認証保護メカニズムをバイパスする可能性があります。(引用: Microsoft SolarWinds Customer Guidance)"
                }
            ]
        },
        {
            "id": "T1621",
            "name_eng": "Multi-Factor Authentication Request Generation",
            "name_jp": "多要素認証リクエスト生成",
            "description_eng": "Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.\n\nAdversaries in possession of credentials to [Valid Accounts](https://attack.mitre.org/techniques/T1078) may be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account. If adversaries lack credentials to victim accounts, they may also abuse automatic push notification generation when this option is configured for self-service password reset (SSPR).(Citation: Obsidian SSPR Abuse 2023)\n\nIn some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to “MFA fatigue.”(Citation: Russian 2FA Push Annoyance - Cimpanu)(Citation: MFA Fatigue Attacks - PortSwigger)(Citation: Suspected Russian Activity Targeting Government and Business Entities Around the Globe)",
            "description_jp": "攻撃者は、ユーザーに送信される MFA リクエストを生成することで、多要素認証（MFA）メカニズムを迂回し、アカウントへのアクセスを試みる可能性がある。\n\n有効なアカウント](https://attack.mitre.org/techniques/T1078)へのクレデンシャルを所持している敵対者は、追加のクレデンシャルとセキュリ ティコントロールとして必要な 2FA または MFA メカニズムへのアクセスがない場合、ログインプロセスを完 了することができないかもしれない。これを回避するために、敵対者は Duo Push、Microsoft Authenticator、Okta などの MFA サービスへのプッシュ通知の自動生成を悪用し、ユーザーにアカウントへのアクセスを許可させる可能性がある。敵対者が被害者アカウントの認証情報を持たない場合、このオプションがセルフサービス・パスワード・リセット（SSPR）に設定されているときに、自動プッシュ通知生成を悪用する可能性もある（引用：Obsidian SSPR Abuse 2023）。\n\n場合によっては、敵対者は MFA プッシュ通知、SMS メッセージ、および電話でユーザーを混乱させるためにログイン試行を継続的に繰り返し、「MFA 疲労」に応じてユーザーが最終的に認証要求を受け入れる結果になる可能性があります（引用：Russian 2FA Push Annoyance - Cimpanu）（引用：MFA Fatigue Attacks - PortSwigger）（引用：Russian 2FA Push Annoyance - Cimpanu）（引用：MFA Fatigue Attacks - PortSwigger）：世界中の政府機関および企業体を標的としたロシアの活動の疑い)",
            "subtechniques": []
        },
        {
            "id": "T1212",
            "name_eng": "Exploitation for Credential Access",
            "name_jp": "クレデンシャル・アクセスの悪用",
            "description_eng": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. \n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
            "description_jp": "敵は、クレデンシャルを収集しようとしてソフトウェアの脆弱性を悪用することがある。ソフトウェアの脆弱性の悪用は、敵対者がプログラム、サービス、またはオペレーティング・システム・ソフト ウェアやカーネル自体のプログラミング・エラーを利用して、敵対者が制御するコードを実行する場 合に発生する。\n\nクレデンシャルおよび認証メカニズムは、有用なクレデンシャルにアクセスする手段、または認証されたシステムにアクセスするプロセスを迂回する手段として、敵が悪用の標的にする可能性がある。その一例が `MS14-068` であり、これは Kerberos を標的としており、ドメイン・ユーザー権限を使用して Kerberos チケットを偽造するために使用することができる(引用：Technet MS14-068)(引用：ADSecurity Detecting Forged Tickets)。このもう一つの例がリプレイ攻撃であり、これは敵対者が当事者間で送信されたデータ・パケットを傍受し、後でこれらのパケットを再生するものである。サービスが認証要求を適切に検証しない場合、これらのリプレイされたパケットによって、敵対者が当事者の1人になりすまし、不正なアクセスや特権を得ることができる可能性がある（引用：Bugcrowdリプレイ攻撃）（引用：Comparitechリプレイ攻撃）（引用：Microsoft Midnight Blizzardリプレイ攻撃）。\n\nこのような悪用はクラウド環境でも実証されている。例えば、敵対者は、意図しない認証トークンの作成と更新を可能にするパブリッククラウドインフラストラクチャの脆弱性を悪用している(引用：Storm-0558による不正メールアクセスのテクニック)。\n\nクレデンシャル・アクセスのための悪用は、標的とされたプロセスや取得されたクレデンシャルによっては、特権の昇格につながる可能性もある。",
            "subtechniques": []
        },
        {
            "id": "T1110",
            "name_eng": "Brute Force",
            "name_jp": "ブルート・フォース",
            "description_eng": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained.(Citation: TrendMicro Pawn Storm Dec 2020) Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism.(Citation: Dragos Crashoverride 2018) Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.",
            "description_jp": "(引用: TrendMicro Pawn Storm Dec 2020) アカウントまたは一連のアカウントのパスワードに関する知識がない場合、敵対者は反復的または反復的なメカニズムを使用してパスワードを体系的に推測することができます。(引用: Dragos Crashoverride 2018) ブルートフォースパスワードは、パスワードハッシュなどの以前に取得したクレデンシャルデータに対して、それらのクレデンシャルの有効性またはオフラインをチェックするサービスとの相互作用を介して行われる可能性があります。\n\nクレデンシャルのブルートフォースは、侵害中のさまざまな時点で行われる可能性がある。例えば、敵対者は[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)、[Account Discovery](https://attack.mitre.org/techniques/T1087)、[Password Policy Discovery](https://attack.mitre.org/techniques/T1201)などの侵害後の行動から収集した知識を活用して、被害者環境内の[Valid Accounts](https://attack.mitre.org/techniques/T1078)へのブルートフォースアクセスを試みることがある。攻撃者はまた、ブルートフォース行為を初期アクセスの一部として[外部リモートサービス](https://attack.mitre.org/techniques/T1133)などの行為と組み合わせることもある。",
            "subtechniques": [
                {
                    "id": "T1110.004",
                    "name_eng": "Credential Stuffing",
                    "name_jp": "クレデンシャル・スタッフィング",
                    "description_eng": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.\n\nCredential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.\n\nTypically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)",
                    "description_jp": "攻撃者は、クレデンシャルの重複によってターゲット・アカウントにアクセスするために、無関係なアカウントの侵害ダンプから得たクレデンシャルを使用することがある。時折、ウェブサイトやサービスが侵害され、ユーザ・アカウントのクレデンシャルにアクセスされると、大量の ユーザ名とパスワードのペアがオンラインにダンプされる。この情報は、ユーザが個人アカウントとビジネス・アカウントで同じパスワードを使用する傾向を利用して、アカウントの侵害を試みる敵対者にとって有用である可能性があります。\n\nクレデンシャル・スタッフィングは、組織のログイン失敗ポリシーによっては、多数の認証失敗やアカウントのロックアウトを引き起こす可能性があるため、リスクの高いオプションです。\n\n通常、クレデンシャルのスタッフィングには、一般的に使用されているポート上の管理サービスが使用されます。一般的に標的とされるサービスは以下のとおりです：\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* ldap (389/TCP)\n* ケルベロス（88/TCP）\n* RDP / ターミナルサービス (3389/TCP)\n* HTTP/HTTP 管理サービス (80/TCP & 443/TCP)\n* mssql (1433/tcp)\n* オラクル（1521/TCP）\n* MySQL (3306/TCP)\n* vnc (5900/tcp)\n\n管理サービスに加え、敵対者は「シングルサインオン(SSO)や連携認証プロトコルを利用するクラウドベースのアプリケーション、またOffice 365のような外部向けの電子メールアプリケーションを標的にする」可能性がある(引用：US-CERT TA18-068A 2018)"
                },
                {
                    "id": "T1110.002",
                    "name_eng": "Password Cracking",
                    "name_jp": "パスワード・クラッキング",
                    "description_eng": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) can be used to obtain password hashes, this may only get an adversary so far when [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) is not an option. Further,  adversaries may leverage [Data from Configuration Repository](https://attack.mitre.org/techniques/T1602) in order to obtain hashed credentials for network devices.(Citation: US-CERT-TA18-106A) \n\nTechniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.(Citation: Wikipedia Password cracking) The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
                    "description_jp": "逆境者は、パスワードハッシュのようなクレデンシャル資料が得られると、平文パスワードのような使用可能なクレデンシャルを回復するためにパスワードクラッキングを使用するかもしれない。[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)を使用してパスワードハッシュを取得することができるが、これは[Pass the Hash](https://attack.mitre.org/techniques/T1550/002)がオプションでない場合にのみ敵対者に有効である。さらに、敵対者は、ネットワークデバイスのハッシュ化されたクレデンシャルを取得するために、[構成リポジトリからのデータ](https://attack.mitre.org/techniques/T1602)を活用する可能性がある(引用：US-CERT-TA18-106A)。\n\nハッシュを計算するために使用されるパスワードを系統的に推測する技術が利用可能であり、あるいは敵対者はハッシュをクラックするために事前に計算されたレインボーテーブルを使用するかもしれない。ハッシュのクラックは通常、標的ネットワークの外部にある敵の制御するシステム上で行われる。 引用：Wikipedia パスワードのクラック）ハッシュのクラックに成功した結果得られる平文のパスワードは、そのアカウントがアクセスできるシステム、リソース、サービスにログインするために使用される可能性がある。"
                },
                {
                    "id": "T1110.001",
                    "name_eng": "Password Guessing",
                    "name_jp": "パスワード当て",
                    "description_eng": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                    "description_jp": "システムまたは環境内の正当なクレデンシャルについて事前の知識がない敵対者は、アカウントへのア クセスを試みるためにパスワードを推測する可能性がある。アカウントのパスワードの知識がない場合、敵対者は反復的または反復的なメカニズムを使って組織的にパスワードを推測することを選ぶかもしれない。敵対者は、一般的なパスワードのリストを使用することで、操作中にシステムまたは環境のパスワードを事前に知ることなくログイン認証情報を推測する可能性がある。パスワードの推測は、パスワードの複雑さに関するターゲットのポリシーを考慮に入れるか、試行が何度も失敗した後にア カウントをロックアウトするポリシーを使用するかは問わない。\n\nパスワードの推測は、組織のログイン失敗ポリシーによっては、多数の認証失敗やアカウントのロックアウトを引き起こす可能性があるため、リスクの高いオプションとなり得る。(引用：Cylance Cleaver）\n\n通常、パスワードの推測には、一般的に使用されているポート上の管理サービスが使用される。よく狙われるサービスには以下のようなものがある：\n\n* SSH（22/TCP）\n* テルネット（23/TCP）\n* FTP（21/TCP）。\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* ldap (389/TCP)\n* ケルベロス（88/TCP）\n* RDP / ターミナルサービス (3389/TCP)\n* HTTP/HTTP 管理サービス (80/TCP & 443/TCP)\n* mssql (1433/tcp)\n* オラクル（1521/TCP）\n* MySQL (3306/TCP)\n* vnc (5900/tcp)\n* SNMP (161/UDP および 162/TCP/UDP)\n\n管理サービスに加え、敵対者は「シングルサインオン(SSO)や連携認証プロトコルを利用するクラウドベースのアプリケーション、さらにはOffice 365のような外部向けの電子メールアプリケーションを標的にする」可能性がある(引用：US-CERT TA18-068A 2018)。さらに、敵対者はネットワークデバイスインタフェース(`wlanAPI`など)を悪用して、無線認証プロトコルを介してアクセス可能な無線ルーターを総当たりで攻撃する可能性があります(引用: Trend Micro Emotet 2020)。\n\nデフォルトの環境では、LDAPとKerberosの接続試行がSMB経由でイベントをトリガーする可能性は低く、Windowsの「ログオンの失敗」イベントID 4625が作成されます。"
                },
                {
                    "id": "T1110.003",
                    "name_eng": "Password Spraying",
                    "name_jp": "パスワード・スプレー",
                    "description_eng": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. (Citation: BlackHillsInfosec Password Spraying)\n\nTypically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                    "description_jp": "攻撃者は、有効なアカウント認証情報を取得するために、多くの異なるアカウントに対して単一または少 数のよく使われるパスワードのリストを使うかもしれない。パスワード スプレーは1つのパスワード(例えば'Password01')、またはドメインの複雑さポリシーに一致する、よく使われるパスワードの小さなリストを使用する。多くのパスワードで1つのアカウントをブルートフォースする際に通常発生するアカウントのロックアウトを回避するために、ネットワーク上の多くの異なるアカウントに対してそのパスワードでログインを試みます。(引用：BlackHillsInfosec Password Spraying)\n\n通常、パスワード・スプレーを行う際には、一般的に使用されているポート上の管理サービスが使用される。一般的に狙われるサービスは以下の通りです：\n\n* SSH (22/TCP)\n* テルネット（23/TCP）\n* FTP（21/TCP）。\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* ldap (389/TCP)\n* ケルベロス（88/TCP）\n* RDP / ターミナルサービス (3389/TCP)\n* HTTP/HTTP 管理サービス (80/TCP & 443/TCP)\n* mssql (1433/tcp)\n* オラクル（1521/TCP）\n* MySQL (3306/TCP)\n* vnc (5900/tcp)\n\n管理サービスに加え、敵対者は「シングルサインオン(SSO)や連携認証プロトコルを利用するクラウドベースのアプリケーション、またOffice 365のような外部向けの電子メールアプリケーションを標的にする」可能性がある(引用：US-CERT TA18-068A 2018)\n\nデフォルトの環境では、LDAP および Kerberos 接続の試行が SMB を介してイベントをトリガーする可能性は低く、Windows の「ログオンの失敗」イベント ID 4625 が作成されます。"
                }
            ]
        },
        {
            "id": "T1187",
            "name_eng": "Forced Authentication",
            "name_jp": "強制認証",
            "description_eng": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.\n\nThe Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. (Citation: Wikipedia Server Message Block) This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.\n\nWeb Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. (Citation: Didier Stevens WebDAV Traffic) (Citation: Microsoft Managing WebDAV Security)\n\nAdversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server. (Citation: GitHub Hashjacking) With access to the credential hash, an adversary can perform off-line [Brute Force](https://attack.mitre.org/techniques/T1110) cracking to gain access to plaintext credentials. (Citation: Cylance Redirect to SMB)\n\nThere are several different ways this can occur. (Citation: Osanda Stealing NetNTLM Hashes) Some specifics from in-the-wild use include:\n\n* A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)). The document can include, for example, a request similar to <code>file[:]//[remote address]/Normal.dotm</code> to trigger the SMB request. (Citation: US-CERT APT Energy Oct 2017)\n* A modified .LNK or .SCF file with the icon filename pointing to an external reference such as <code>\\\\[remote address]\\pic.png</code> that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. (Citation: US-CERT APT Energy Oct 2017)",
            "description_jp": "攻撃者は、傍受可能なメカニズムを通じて、認証情報を自動的に提供するようにユーザを 呼び出すか強制することによって、クレデンシャル情報を収集することができる。\n\nサーバー・メッセージ・ブロック(SMB)プロトコルは、リソースへのアクセスやファイル共有のための認証やシステム間の通信のために、Windowsネットワークで一般的に使用されている。WindowsシステムがSMBリソースに接続しようとすると、自動的に認証を試み、現在のユーザーの認証情報をリモートシステムに送信する。(引用: Wikipedia Server Message Block) この動作は、ユーザーがネットワークリソースにアクセスするために認証情報を入力する必要がないように、企業環境では典型的である。\n\nWebDAV（Web Distributed Authoring and Versioning）もまた、SMBがブロックされたり失敗したりした場合のバックアッププロトコルとして、Windowsシステムで一般的に使用されている。WebDAVはHTTPの拡張であり、通常TCPポート80と443で動作する。(引用：Didier Stevens WebDAV Traffic） （引用：Microsoft Managing WebDAV Security）\n\n攻撃者はこの動作を利用して、強制的なSMB/WebDAV認証によってユーザーアカウントのハッシュにアクセスする可能性があります。敵対者は、スピアフィッシングを通じて、敵対者が管理する外部サーバへのリソースリンクを含む添付ファイルをユーザに送信したり(すなわち、[テンプレートインジェクション](https://attack.mitre.org/techniques/T1221))、特権アカウントのナビゲーションパス上に特別に細工したファイルを置いたり(例えば、デスクトップ上に置かれた.SCFファイル)、被害者がアクセスできるように一般にアクセス可能な共有上に置いたりすることができます。ユーザーのシステムが信頼されていないリソースにアクセスすると、認証が試みられ、ユーザーのハッシュ化された認証情報を含む情報がSMB経由で敵のコントロールするサーバーに送信されます。(引用：GitHub Hashjacking) クレデンシャル・ハッシュにアクセスすることで、敵はオフラインで[Brute Force](https://attack.mitre.org/techniques/T1110)クラッキングを実行し、平文のクレデンシャルにアクセスできるようになります。(引用：Cylance Redirect to SMB)\n\nこれにはいくつかの異なる方法がある。(引用：Osanda Stealing NetNTLM Hashes) 実際に使用されている例としては、以下のようなものがある：\n\n* スピアフィッシングの添付ファイルには、ドキュメントを開いたときに自動的に読み込まれるリソースが含まれている(つまり、[テンプレート・インジェクション](https://attack.mitre.org/techniques/T1221))。この文書には、例えば<code>file[:]//[リモートアドレス]/Normal.dotm<//code>のようなSMBリクエストをトリガーするリクエストを含めることができます。(引用：US-CERT APT Energy Oct 2017）\n* アイコンのファイル名が<code>[リモートアドレス]◆pic.png</code>のような外部参照を指している修正された.LNKまたは.SCFファイルは、認証情報を繰り返し収集するためにアイコンがレンダリングされるときにシステムにリソースをロードさせます。(引用：US-CERT APT Energy Oct 2017）",
            "subtechniques": []
        },
        {
            "id": "T1056",
            "name_eng": "Input Capture",
            "name_jp": "入力キャプチャ",
            "description_eng": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004)) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. [Web Portal Capture](https://attack.mitre.org/techniques/T1056/003)).",
            "description_jp": "攻撃者は、クレデンシャルを取得したり情報を収集したりするために、ユーザ入力をキャプチャする方法を使用する可能性がある。通常のシステム使用中、ユーザはログインページ/ポータルやシステムダイアログボックスなど、さまざまな異なる場所にクレデンシャルを提供することが多い。入力キャプチャメカニズムは、ユーザに対して透過的である場合（[Credential API Hooking](https://attack.mitre.org/techniques/T1056/004) など）と、ユーザを欺いて本物のサービスであると思わせる入力に依存する場合（[Web Portal Capture](https://attack.mitre.org/techniques/T1056/003) など）がある。",
            "subtechniques": [
                {
                    "id": "T1056.001",
                    "name_eng": "Keylogging",
                    "name_jp": "キーロギング",
                    "description_eng": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks)",
                    "description_jp": "敵対者は、ユーザが入力するクレデンシャルを傍受するために、ユーザのキーストロークを記録することがある。キーロギングは、[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)の取り組みが効果的でない場合に、新たなアクセス機会のためにクレデンシャルを取得するために使用される可能性が高く、クレデンシャルをうまくキャプチャできるようになるまでに、敵対者がシステム上のキーストロークをかなりの期間傍受する必要がある場合がある。クレデンシャルを迅速に取得する可能性を高めるために、敵対者はブラウザのクッキーをクリアするなどのアクションを実行し、ユーザーにシステムに対する再認証を強制することもあります（引用：Talos Kimsuky Nov 2021）。\n\nキーロギングは、入力キャプチャの最も一般的なタイプであり、キー入力を傍受するさまざまな方法がある(引用: Adventures of a Keystroke)：\n\n* キー入力を処理するAPIコールバックをフックする。Credential API Hooking](https://attack.mitre.org/techniques/T1056/004)とは異なり、これはキーストロークのデータを処理するためのAPI機能のみに焦点を当てている。\n* ハードウェア・バッファからの生のキーストローク・データの読み取り。\n* Windowsレジストリの変更。\n* カスタムドライバー。\n* システム・イメージの修正](https://attack.mitre.org/techniques/T1601)は、ログイン・セッションのための生のキーストロークを読み取るために、ネットワーク・デバイスのオペレーティング・システムへのフックを敵対者に提供する可能性がある(引用: Cisco Blog Legacy Device Attacks)。"
                },
                {
                    "id": "T1056.002",
                    "name_eng": "GUI Input Capture",
                    "name_jp": "GUI入力キャプチャ",
                    "description_eng": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.",
                    "description_jp": "攻撃者は、一般的なオペレーティング・システムの GUI コンポーネントを模倣して、一見正当なプロンプトでユーザに認証情報を要求することがある。現在のユーザー・コンテキストに存在する以上の特権を必要とするプログラムが実行されると、オペレーティング・システムは、タスクのための昇格特権を承認するための適切な認証情報をユーザーに求めるプロンプトを表示するのが一般的です（例：[Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)）。\n\n攻撃者はこの機能を模倣し、追加アクセスを要求する偽のインストーラや偽のマルウェア除去スイートなど、通常の使用方法を模倣したさまざまな理由で、一見正当なプロンプトを表示してユーザに認証情報を要求することがあります。(引用：OSX Malware Exploits MacKeeper）この種のプロンプトは、[AppleScript](https://attack.mitre.org/techniques/T1059/002)(引用：LogRhythm Do You Trust Oct 2014)(引用：OSX Keydnap malware)(引用：Spoofing credential dialogs)や[PowerShell](https://attack.mitre.org/techniques/T1059/001）。（引用：LogRhythm Do You Trust Oct 2014）（引用：Enigma Phishing for Credentials Jan 2015）（引用：Spoofing credential dialogs）Linuxシステムにおいて、敵対者は悪意のあるシェルスクリプトまたはコマンドライン（すなわち[Unix Shell](https://attack.mitre.org/techniques/T1059/004)）から、ユーザーに認証情報を求めるダイアログボックスを起動する可能性があります。（引用：Spoofing credential dialogs）\n\n攻撃者はまた、ブラウザや電子メールクライアントからのものなど、一般的なソフトウェア認証要求を模倣することもある。これは、ユーザが機密性の高いサイト/データに自然にアクセスしているときにプロンプトを偽装するために、ユーザ・アクティビティ・モニタリング（すなわち、[ブラウザ情報ディスカバリ](https://attack.mitre.org/techniques/T1217)および/または[アプリケーション・ウィンドウ・ディスカバリ](https://attack.mitre.org/techniques/T1010)）と組み合わせることもできる。"
                },
                {
                    "id": "T1056.004",
                    "name_eng": "Credential API Hooking",
                    "name_jp": "クレデンシャルAPIフック",
                    "description_eng": "Adversaries may hook into Windows application programming interface (API) functions and Linux system functions to collect user credentials. Malicious hooking mechanisms may capture API or function calls that include parameters that reveal user authentication credentials.(Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) Unlike [Keylogging](https://attack.mitre.org/techniques/T1056/001), this technique focuses specifically on API functions that include parameters that reveal user credentials. \n\nIn Windows, hooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.(Citation: Microsoft Hook Overview)(Citation: Elastic Process Injection July 2017)\n* **Import address table (IAT) hooking**, which use modifications to a process’s IAT, where pointers to imported API functions are stored.(Citation: Elastic Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.(Citation: Elastic Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n\nIn Linux and macOS, adversaries may hook into system functions via the `LD_PRELOAD` (Linux) or `DYLD_INSERT_LIBRARIES` (macOS) environment variables, which enables loading shared libraries into a program’s address space. For example, an adversary may capture credentials by hooking into the `libc read` function leveraged by SSH or SCP.(Citation: Intezer Symbiote 2022)",
                    "description_jp": "攻撃者は、Windowsアプリケーションプログラミングインターフェース(API)関数やLinuxシステム関数にフックして、ユーザー認証情報を収集する可能性があります。悪意のあるフッキングメカニズムは、ユーザー認証クレデンシャルを明らかにするパラメータを含むAPIまたは関数コールをキャプチャする可能性があります。(引用: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) [Keylogging](https://attack.mitre.org/techniques/T1056/001)とは異なり、このテクニックは、ユーザー認証クレデンシャルを明らかにするパラメータを含むAPI関数に特に焦点を当てています。\n\nWindowsでは、フッキングはこれらの関数への呼び出しをリダイレクトすることを含み、以下の方法で実装できる：\n\n* フックプロシージャ**は、メッセージ、キーストローク、マウス入力などのイベントに応答して、指定されたコードをインターセプトして実行する。(引用: Microsoft Hook Overview)(Citation: Elastic Process Injection July 2017)\n* インポートされたAPI関数へのポインタが格納されているプロセスのIATへの変更を使用する(引用: Elastic Process Injection 2017年7月)(引用: Adlice Software IAT Hooks 2014年10月)(引用: MWRInfoSecurity Dynamic Hooking 2015年)\n* コードフローをリダイレクトするためにAPI関数の最初のバイトを上書きする**インラインフッキング**(引用: Elastic Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n\nLinuxとmacOSでは、敵は`LD_PRELOAD`（Linux）または`DYLD_INSERT_LIBRARIES`（macOS）環境変数を介してシステム関数にフックする可能性がある。例えば、敵対者はSSHやSCPで活用される`libc read`関数にフックすることで、認証情報をキャプチャすることができる（引用：Intezer Symbiote 2022）。"
                },
                {
                    "id": "T1056.003",
                    "name_eng": "Web Portal Capture",
                    "name_jp": "ウェブポータル・キャプチャー",
                    "description_eng": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\n\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through [External Remote Services](https://attack.mitre.org/techniques/T1133) and [Valid Accounts](https://attack.mitre.org/techniques/T1078) or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging)",
                    "description_jp": "攻撃者は、VPN ログインページのような外部に面したポータルにコードをインストールし、サービスにログインしようとするユーザの認証情報をキャプチャして送信する可能性があります。例えば、侵害されたログインページは、ユーザーをサービスにログインさせる前に、提供されたユーザー認証情報をログに記録する可能性があります。\n\nこの入力キャプチャのバリエーションは、[外部リモートサービス](https://attack.mitre.org/techniques/T1133) および [有効なアカウント](https://attack.mitre.org/techniques/T1078) を通じてネットワークアクセスを維持するためのバックアップ対策として、または外部向けウェブサービスを悪用した最初の侵害の一部として、正当な管理アクセスを使用して侵害後に実施される可能性があります。(引用：Volexity Virtual Private Keylogging)"
                }
            ]
        },
        {
            "id": "T1111",
            "name_eng": "Multi-Factor Authentication Interception",
            "name_jp": "多要素認証による傍受",
            "description_eng": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. \n\nIf a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. (Citation: Mandiant M Trends 2011)\n\nAdversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). (Citation: GCN RSA June 2011)\n\nOther methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users’ phones.(Citation: Okta Scatter Swine 2022)",
            "description_jp": "攻撃者は、システム、サービス、およびネットワーク・リソースへのアクセスに使用できるクレデンシャルへのア クセスを得るために、多要素認証（MFA）メカニズム（スマートカード、トークン・ジェネレータなど）を標的にす る可能性がある。MFA の使用は推奨され、ユーザ名とパスワードだけよりも高いレベルのセキュリティを提供する が、組織は、これらのセキュリティ・メカニズムを傍受してバイパスするために使用される可能性のある技 術に注意する必要がある。\n\n多要素認証にスマート・カードを使用する場合、通常の使用中にスマート・カードに関連付けら れたパスワードを取得するには、キーロガーを使用する必要がある。挿入されたカードとスマート・カードのパスワードへのアクセスの両方があれば、敵対者は、感染したシステムを使用してネットワーク・リソースに接続し、挿入されたハードウェア・トークンによる認証をプロキシすることができる。(引用：Mandiant M Trends 2011）\n\n敵対者は、RSA SecurID などの他のハードウェア・トークンも同様にキーロガーを使用する可能性があります。トークンの入力（ユーザの個人識別コードを含む）をキャプチャすることで、一時的なアクセス（次 の値のロールオーバーまでワンタイムパスコードを再生すること）が可能になるだけでなく、敵対者が将来の認証 値を確実に予測できるようになる可能性があります（アルゴリズムと、追加された一時的なコードを生成す るために使用されるシード値の両方にアクセスできる場合）。(引用：GCN RSA June 2011）\n\nMFA の他の方法は、敵対者によって傍受され、認証に使用される可能性がある。ワンタイムコードは、帯域外の通信（電子メール、SMS）を介して送信されるのが一般的である。デバイスやサービスがセキュアでない場合、傍受されやすい。例えば、敵対者がユーザーの携帯電話に送信されたMFAコードを盗むために、SMSメッセージングサービスを侵害する可能性があります（引用：Okta Scatter Swine 2022）。",
            "subtechniques": []
        },
        {
            "id": "T1556",
            "name_eng": "Modify Authentication Process",
            "name_jp": "認証プロセスの変更",
            "description_eng": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).\n\nAdversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
            "description_jp": "攻撃者は、認証メカニズムやプロセスを改ざんして、ユーザー認証情報にアクセスしたり、アカウントへの不当なアクセスを可能にしたりする可能性がある。認証プロセスは、Windows の Local Security Authentication Server (LSASS) プロセスや Security Accounts Manager (SAM)、Unix ベースのシステムの Pluggable Authentication Module (PAM)、MacOS システムの Authorization Plugins などのメカニズムによって処理され、認証情報の収集、保存、検証を行う。認証プロセスを変更することで、敵は[Valid Accounts](https://attack.mitre.org/techniques/T1078)を使わずにサービスやシステムを認証できるかもしれない。\n\n敵はこのプロセスの一部を悪意を持って変更し、クレデンシャルを明らかにするか、認証メカニズムをバイパスする。侵害された認証情報またはアクセスは、ネットワーク内のシステム上のさまざまなリソースに配置されたアクセス制御をバイパスするために使用される可能性があり、VPN、Outlook Web Access、リモートデスクトップなどのリモートシステムや外部で利用可能なサービスへの永続的なアクセスに使用される可能性さえある。",
            "subtechniques": [
                {
                    "id": "T1556.004",
                    "name_eng": "Network Device Authentication",
                    "name_jp": "ネットワーク機器認証",
                    "description_eng": "Adversaries may use [Patch System Image](https://attack.mitre.org/techniques/T1601/001) to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.\n\n[Modify System Image](https://attack.mitre.org/techniques/T1601) may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.(Citation: Mandiant - Synful Knock)",
                    "description_jp": "攻撃者は、[Patch System Image](https://attack.mitre.org/techniques/T1601/001)を使用して、オペレーティングシステムにパスワードをハードコードし、ネットワークデバイス上のローカルアカウントのネイティブ認証メカニズムをバイパスする可能性がある。\n\n[システムイメージの修正](https://attack.mitre.org/techniques/T1601)は、ネットワークデバイスのオペレーティングシステムに、特定のパスワードを使用して敵にアクセスを提供するためのコードを埋め込む可能性があります。  この修正には、パッチを介してオペレーティングシステムイメージに埋め込まれる特定のパスワードが含まれます。  認証が試みられると、挿入されたコードはまずユーザー入力がパスワードかどうかをチェックする。もしそうなら、アクセスは許可される。そうでない場合、埋め込まれたコードは潜在的に有効な認証情報を検証するために認証情報を渡す。 引用：Mandiant - Synful Knock"
                },
                {
                    "id": "T1556.001",
                    "name_eng": "Domain Controller Authentication",
                    "name_jp": "ドメインコントローラ認証",
                    "description_eng": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. \n\nMalware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user’s account and/or credentials (ex: [Skeleton Key](https://attack.mitre.org/software/S0007)). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.(Citation: Dell Skeleton)",
                    "description_jp": "攻撃者は、ドメインコントローラの認証プロセスにパッチを当て、典型的な認証メカニズムをバイパスし、アカウントへのアクセスを可能にする可能性がある。\n\nマルウェアは、任意のユーザーのアカウントや認証情報にアクセスするためのバックドアを作成する目的で、ドメインコントローラの認証プロセスに偽の認証情報を注入するために使用される可能性があります（例：[Skeleton Key](https://attack.mitre.org/software/S0007)）。スケルトン・キーは、敵が標準認証システムをバイパスするために使用する可能性のある認証情報を使用して、エンタープライズ・ドメイン・コントローラの認証プロセス(LSASS)にパッチを適用することで機能する。いったんパッチが適用されると、敵対者は注入されたパスワードを使用して、（ドメインコントローラの再起動によってスケルトンキーがメモリから消去されるまで）ドメインユーザーアカウントとして認証に成功することができる。認証されたアクセスは、一要素認証環境内のホストおよび/またはリソースへの自由なアクセスを可能にする可能性がある(引用：Dell Skeleton)"
                },
                {
                    "id": "T1556.009",
                    "name_eng": "Conditional Access Policies",
                    "name_jp": "条件付きアクセス・ポリシー",
                    "description_eng": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Entra ID, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                    "description_jp": "攻撃者は、条件付きアクセス・ポリシーを無効にしたり変更したりして、危殆化したア カウントへの永続的なアクセスを可能にすることがある。条件付きアクセス・ポリシーは、ID プロバイダおよび ID とアクセス管理システムによって使用 される追加の検証であり、リソースへのアクセスをユーザに許可すべきかどうかを決定する。\n\nたとえば、Entra ID、Okta、および JumpCloud では、IP アドレス、デバイスの登録状態、および多要素認証の使用に基づいて、ユー ザのアプリケーションへのアクセスを拒否することができる（引用：Microsoft Conditional Access）（引用：JumpCloud Conditional Access Policies）（引用：Okta Conditional Access Policies） 場合によっては、ID プロバイダは、さまざまな指標に基づいてサインインを拒否するリスクベースの測定 基準の使用もサポートしている。AWS と GCP では、IAM ポリシーに `condition` 属性を含めることができ、ソース IP、リクエストが行われた日付、リクエストされたリソースやリージョンの性質など、任意の制約を検証することができる（引用：AWS IAM Conditions）。\n\n信頼できる IP 範囲の追加、[多要素認証](https://attack.mitre.org/techniques/T1556/006) 要件の削除、[未使用/未サポートのクラウド領域](https://attack.mitre.org/techniques/T1535) の追加許可など、条件付きアクセスポリシーを変更することで、敵対者はアカウントへの永続的なアクセスを確保し、防御策を回避できる可能性がある。"
                },
                {
                    "id": "T1556.008",
                    "name_eng": "Network Provider DLL",
                    "name_jp": "ネットワークプロバイダDLL",
                    "description_eng": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions.(Citation: Network Provider API) During the logon process, Winlogon (the interactive logon module) sends credentials to the local `mpnotify.exe` process via RPC. The `mpnotify.exe` process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.(Citation: NPPSPY - Huntress)(Citation: NPPSPY Video)(Citation: NPLogonNotify) \n\nAdversaries can configure a malicious network provider DLL to receive credentials from `mpnotify.exe`.(Citation: NPPSPY) Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via the `NPLogonNotify()` function.(Citation: NPLogonNotify)\n\nAdversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.(Citation: NPPSPY - Huntress)",
                    "description_jp": "攻撃者は、悪意のあるネットワークプロバイダ・ダイナミックリンク・ライブラリ（DLL）を登録し、認証プロセス中に平文のユーザー認証情報を取得する可能性がある。ネットワークプロバイダーDLLは、Windowsが特定のネットワークプロトコルとインターフェースすることを可能にし、アドオンの資格情報管理機能をサポートすることもできる(引用: Network Provider API)。ログオンプロセス中、Winlogon(対話型ログオンモジュール)はRPCを介してローカルの`mpnotify.exe`プロセスに資格情報を送信する。その後、`mpnotify.exe`プロセスは、ログオンイベントが発生していることを通知する際に、登録されたクレデンシャルマネージャとクレデンシャルをクリアテキストで共有する。 引用：NPPSPY - Huntress）（引用：NPPSPYビデオ）（引用：NPLogonNotify\n\n(引用: NPPSPY) 悪意のあるネットワークプロバイダ DLL は、`mpnotify.exe` から認証情報を受け取るように設定できる。(引用: NPPSPY) 認証情報マネージャとして (レジストリを介して) インストールされると、悪意のある DLL は、`NPLogonNotify()` 関数を介して、ユーザーが Windows ワークステーションまたはドメインにログオンするたびに認証情報を受け取り、保存できる。\n\n攻撃者は、サーバーやドメインコントローラなど、ログオンアクティビティや管理者ログオンアクティビティが増加していることが知られているシステムに、悪意のあるネットワークプロバイダ DLL を植え付けることを標的にする可能性がある(引用：NPPSPY - Huntress)。"
                },
                {
                    "id": "T1556.002",
                    "name_eng": "Password Filter DLL",
                    "name_jp": "パスワードフィルタDLL",
                    "description_eng": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. \n\nWindows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. \n\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.(Citation: Carnal Ownage Password Filters Sept 2013)",
                    "description_jp": "攻撃者は、悪意のあるパスワード・フィルタ・ダイナミック・リンク・ライブラリ（DLL）を認証プロセスに登録し、認証されたユーザー認証情報を取得する可能性がある。\n\nWindows パスワード・フィルタは、ドメイン・アカウントとローカル・アカウントの両方に対するパスワー ド・ポリシー強制メカニズムである。フィルタは、パスワードポリシーに照らして潜在的なパスワードを検証するメソッドを含む DLL として実装されます。フィルターDLLは、ローカルアカウントの場合はローカルコンピューター上に、 ドメインアカウントの場合はドメインコントローラー上に置くことができる。新しいパスワードをSecurity Accounts Manager (SAM)に登録する前に、Local Security Authority (LSA)は登録された各フィルタに検証を要求する。登録されたすべてのフィルターが検証を承認するまで、変更される可能性のある内容は有効にならない。\n\n攻撃者は、ローカルコンピュータやドメイン全体から認証情報を採取するために、悪意のあるパスワードフィルタを登録することができる。適切な検証を行うには、フィルタは LSA からプレーンテキストの認証情報を受け取らなければならない。悪意のあるパスワードフィルタは、パスワード要求が行われるたびに、これらのプレーンテキストの認証情報を受け取ることになる(引用：Carnal Ownage Password Filters Sept 2013)"
                },
                {
                    "id": "T1556.006",
                    "name_eng": "Multi-Factor Authentication",
                    "name_jp": "多要素認証",
                    "description_eng": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.\n\nOnce adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as [Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621), adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.(Citation: Mandiant APT42)(Citation: Azure AD Conditional Access Exclusions)\n\nFor example, modifying the Windows hosts file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA. (Citation: Russians Exploit Default MFA Protocol - CISA March 2022) \n\nDepending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.(Citation: Russians Exploit Default MFA Protocol - CISA March 2022)",
                    "description_jp": "攻撃者は、侵害されたアカウントへの持続的なアクセスを可能にするために、多要素認証（MFA）メカニズムを無効にしたり、変更したりする可能性がある。\n\n敵対者は、MFA を欠くアカウントを侵害するか、[Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621) のような MFA バイパス手法を採用することでネットワークにアクセスできるようになると、そのアクセス権を活用して MFA 防御を変更したり、完全に無効にしたりする可能性があります。これは、Azure ADの条件付きアクセスポリシーからユーザーを除外する、新しいが脆弱である/敵に制御されたMFAメソッドを登録する、または期待される機能をバイパスするためにMFAプログラムや設定ファイルに手動でパッチを適用するなど、正当な機能を悪用することによって達成することができる。 引用：Mandiant APT42）（引用：Azure ADの条件付きアクセス除外について\n\n例えば、MFA 呼び出しを MFA サーバではなく localhost にリダイレクトするように、Windows の hosts ファイル（`C:∕windowssystem∕drivers∕drivers∕cachehosts`）を変更すると、MFA プロセスが失敗する可能性がある。フェイルオープン」ポリシーが設定されている場合、そうでなければ成功した認証の試みは、MFAを実施することなくアクセスが許可される可能性がある。(引用: ロシア人によるデフォルト MFA プロトコルの悪用 - CISA March 2022)\n\n敵対者の範囲、目的、権限によっては、MFA 防御が個々のアカウントに対して無効にされる場合もあれば、被害者のネットワーク環境内のすべてのドメインアカウントなど、より大きなグループに関連付けられたすべてのアカウントに対して無効にされる場合もある（引用：Russians Exploit Default MFA Protocol - CISA March 2022）。"
                },
                {
                    "id": "T1556.007",
                    "name_eng": "Hybrid Identity",
                    "name_jp": "ハイブリッド・アイデンティティ",
                    "description_eng": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.  \n\nMany organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID(Citation: Azure AD Hybrid Identity):\n\n* Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Entra ID, allowing authentication to Entra ID to take place entirely in the cloud \n* Pass Through Authentication (PTA), in which Entra ID authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory \n* Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Entra ID \n\nAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users’ identity and privileges. \n\nBy modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService` process that authorizes all attempts to authenticate to Entra ID, as well as records user credentials.(Citation: Azure AD Connect for Read Teamers)(Citation: AADInternals Azure AD On-Prem to Cloud) In environments using AD FS, an adversary may edit the `Microsoft.IdentityServer.Servicehost` configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.(Citation: MagicWeb)\n\nIn some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.(Citation: Mandiant Azure AD Backdoors)",
                    "description_jp": "攻撃者は、典型的な認証メカニズムを迂回し、クレデンシャルにアクセスし、アカウントへの永続的なアクセスを可能にするために、オンプレミス・ユーザ・アイデンティティに関連付けられたクラウド認証プロセスにパッチを当てたり、修正したり、その他の方法でバックドアを仕掛ける可能性がある。  \n\n多くの組織が、オンプレミスとクラウドベースの環境間で共有されるハイブリッド・ユーザ・ アイデンティティとハイブリッド・デバイス・アイデンティティを維持している。これらは様々な方法で維持することができる。例えば、Microsoft Entra IDには、Active DirectoryとEntra IDの間でIDを同期するための3つのオプションがある（引用：Azure AD Hybrid Identity）：\n\n* オンプレミスの特権アカウントが Active Directory と Entra ID の間でユーザーのパスワードハッシュを同期することで、Entra ID への認証が完全にクラウドで行われるようにする。\n* Entra IDの認証試行がオンプレミスのPTAエージェントに転送され、PTAエージェントがActive Directoryに対して認証情報を検証します。\n* Active DirectoryとEntra IDの間に信頼関係が確立される。\n\nAD FSは、AWSやGCPなどの他のSaaSやクラウドプラットフォームでも使用することができ、認証プロセスをAD FSに渡し、ハイブリッドユーザーのIDと権限を含むトークンを受け取る。\n\nハイブリッド・アイデンティティに関連付けられた認証プロセスを変更することで、敵対者はクラウド・リソースへの永続的な特権アクセスを確立できる可能性があります。たとえば、PTA エージェントを実行しているオンプレミスのサーバーを侵害する敵対者は、Entra ID への認証のすべての試みを承認し、ユーザー資格情報を記録する `AzureADConnectAuthenticationAgentService` プロセスに悪意のある DLL を注入することができます。(引用: Azure AD Connect for Read Teamers)(引用: AADInternals Azure AD On-Prem to Cloud) AD FSを使用する環境では、敵対者が`Microsoft.IdentityServer.Servicehost`構成ファイルを編集して悪意のあるDLLをロードする可能性がある。\n\n場合によっては、敵対者はクラウドからハイブリッド ID 認証プロセスを変更することができる。たとえば、Entra ID テナントのグローバル管理者アカウントを侵害した敵対者は、Web コンソールを介して新しい PTA エージェントを登録できる可能性があり、同様に認証情報を採取して任意のユーザーとして Entra ID 環境にログインできるようになります（引用：Mandiant Azure AD Backdoors）。"
                },
                {
                    "id": "T1556.005",
                    "name_eng": "Reversible Encryption",
                    "name_jp": "可逆暗号化",
                    "description_eng": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The <code>AllowReversiblePasswordEncryption</code> property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.(Citation: store_pwd_rev_enc)\n\nIf the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:\n\n1. Encrypted password (<code>G$RADIUSCHAP</code>) from the Active Directory user-structure <code>userParameters</code>\n2. 16 byte randomly-generated value (<code>G$RADIUSCHAPKEY</code>) also from <code>userParameters</code>\n3. Global LSA secret (<code>G$MSRADIUSCHAPKEY</code>)\n4. Static key hardcoded in the Remote Access Subauthentication DLL (<code>RASSFM.DLL</code>)\n\nWith this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.(Citation: how_pwd_rev_enc_1)(Citation: how_pwd_rev_enc_2)\n\nAn adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory [PowerShell](https://attack.mitre.org/techniques/T1059/001) module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher.(Citation: dump_pwd_dcsync) In PowerShell, an adversary may make associated changes to user settings using commands similar to <code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>.",
                    "description_jp": "敵対者は、Active Directory 認証の暗号化プロパティを悪用して、Windows システム上の資格情報にアクセスする可能性がある。<code>AllowReversiblePasswordEncryption</code> プロパティは、アカウントの可逆パスワード暗号化を有効にするか無効にするかを指定します。デフォルトでは、このプロパティは無効になっており（代わりに一方向ハッシュ関数の出力としてユーザー認証情報を格納する）、レガシーや他のソフトウェアがそれを必要としない限り、有効にすべきではありません。\n\nこのプロパティが有効になっている場合、および/または有効になっている後にユーザーがパスワードを変更した場合、敵対者はプロパティが有効になってから作成/変更されたパスワードの平文を取得できる可能性があります。パスワードを解読するために、敵は4つのコンポーネントを必要とする：\n\n1.Active Directoryのユーザー構造<code>userParameters</code>から暗号化されたパスワード(<code>G$RADIUSCHAP</code>)。\n2.同じく<code>userParameters</code>から16バイトのランダムに生成された値(<code>G$RADIUSCHAPKEY</code>)\n3.グローバルLSAシークレット (<code>G$MSRADIUSCHAPKEY</code>)\n4.リモートアクセス下位認証DLLにハードコードされた静的キー (<code>RASSFM.DLL</code>)\n\nこの情報があれば、敵は暗号化キーを複製し、暗号化されたパスワード値を復号化できる可能性がある(引用：how_pwd_rev_enc_1)(引用：how_pwd_rev_enc_2)\n\n敵対者は、ローカルグループポリシーエディタ、ユーザープロパティ、FGPP(Fine-Grained Password Policy)、または ActiveDirectory [PowerShell](https://attack.mitre.org/techniques/T1059/001) モジュールを通して、様々なスコープでこのプロパティを設定することができる。(引用: dump_pwd_dcsync) PowerShellでは、敵は<code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>のようなコマンドを使用して、ユーザー設定に関連する変更を行うことができます。"
                },
                {
                    "id": "T1556.003",
                    "name_eng": "Pluggable Authentication Modules",
                    "name_jp": "プラガブル認証モジュール",
                    "description_eng": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",
                    "description_jp": "攻撃者は、pluggable authentication modules (PAM)を改変して、ユーザ認証情報にアクセスしたり、アカウントへの不当なアクセスを可能にしたりする可能性がある。PAM は、設定ファイル、ライブラリ、実行ファイルからなるモジュール・システムであり、 多くのサービスの認証を誘導する。最も一般的な認証モジュールは <code>pam_unix.so</code> であり、<code>/etc/passwd</code> と <code>/etc/shadow</code> にあるアカウント認証情報を取得、設定、検証する。(引用: Apple PAM) (引用: Man Pam_Unix) (引用: Red Hat PAM)\n\n攻撃者はバックドアを作成するためにPAMシステムのコンポーネントを変更することができる。<code>pam_unix.so</code> のような PAM コンポーネントは、任意の敵が提供した値を正当な認証情報として受け入れるようにパッチを当てることができる。\n\nPAM システムに対する悪意のある変更も、クレデンシャルを盗むために悪用される可能性がある。PAM はパスワードを保存しないため、PAM コンポーネントと交換される値はプレーンテキストである可能性がある。(引用：PAM Creds)(引用：Apple PAM)"
                }
            ]
        }
    ]
}