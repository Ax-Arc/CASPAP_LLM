{
    "id": "TA0002",
    "name_eng": "Execution",
    "name_jp": "実行",
    "description_eng": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery.",
    "description_jp": "敵は悪意のあるコードを実行しようとしている。\n\n実行は、敵が制御するコードがローカルまたはリモートのシステム上で実行されることになる技術で構成されます。悪意のあるコードを実行するテクニックは、ネットワークの探索やデータの窃取など、より広範な目標を達成するために、他のすべての戦術のテクニックと組み合わされることがよくあります。例えば、敵はリモートアクセスツールを使用して、リモートシステムディスカバリを実行するPowerShellスクリプトを実行するかもしれません。",
    "ckc_map_info": [
        {
            "ckc_id": "ckc-004",
            "ckc_phase_number": 4,
            "ckc_phase_name_en": "Exploitation",
            "ckc_description_en": "The weaponized payload triggers a vulnerability in the target system to execute malicious code.",
            "ckc_phase_name_jp": "攻撃（エクスプロイト）",
            "ckc_description_jp": "武器化されたペイロードが標的システムの脆弱性をトリガーし、悪意のあるコードを実行します。"
        },
        {
            "ckc_id": "ckc-005",
            "ckc_phase_number": 5,
            "ckc_phase_name_en": "Installation",
            "ckc_description_en": "Attacker installs malware or establishes persistent access on the compromised system. This allows the attacker to maintain control for future activities.",
            "ckc_phase_name_jp": "インストール",
            "ckc_description_jp": "攻撃者は、侵害されたシステムにマルウェアをインストールするか、永続的なアクセスを確立します。これにより、攻撃者は将来の活動のために制御を維持できます。"
        }
    ],
    "ckc_mapping_rational": "攻撃者が制御するコードを標的システム上で実行する活動。CKCの攻撃フェーズでのペイロード実行や、インストールフェーズでのマルウェア定着に関連する。",
    "techniques": [
        {
            "id": "T1047",
            "name_eng": "Windows Management Instrumentation",
            "name_jp": "Windows管理インストルメンテーション",
            "description_eng": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems.(Citation: WMI 1-3) WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) and [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).(Citation: WMI 1-3) Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.(Citation: WMI 1-3) (Citation: Mandiant WMI)\n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for [Discovery](https://attack.mitre.org/tactics/TA0007) as well as [Execution](https://attack.mitre.org/tactics/TA0002) of commands and payloads.(Citation: Mandiant WMI) For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490)).(Citation: WMI 6)\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being “disabled by default” on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by [PowerShell](https://attack.mitre.org/techniques/T1059/001) as the primary WMI interface.(Citation: WMI 7,8) In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.(Citation: WMI 7,8)",
            "description_jp": "攻撃者は、悪意のあるコマンドやペイロードを実行するために、Windows Management Instrumentation (WMI)を悪用する可能性がある。WMIはプログラマー向けに設計されており、Windowsシステム上の管理データと操作のためのインフラストラクチャである(引用：WMI 1-3) WMIは、Windowsシステムコンポーネントにアクセスするための統一された環境を提供する管理機能である。\n\nWMIサービスはローカルとリモートの両方のアクセスを可能にするが、後者は[Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003)や[Windows Remote Management](https://attack.mitre.org/techniques/T1021/006)などの[Remote Services](https://attack.mitre.org/techniques/T1021)によって促進される。(引用：WMI 1-3) DCOM経由のリモートWMIはポート135を使用して動作するが、WinRM経由のWMIはHTTPを使用する場合はポート5985、HTTPSの場合はポート5986を使用して動作する。(引用：WMI 1-3) (引用：Mandiant WMI)\n\n敵対者は、WMI を使用してローカルおよびリモートのシステムと対話し、コマンドやペイロードの [実行](https://attack.mitre.org/tactics/TA0002) だけでなく、[発見](https://attack.mitre.org/tactics/TA0007) のための情報収集など、さまざまな動作を実行する手段として使用できます(引用: Mandiant WMI)。たとえば、`wmic.exe` を悪用して、`wmic.exe Shadowcopy Delete` (すなわち、[システム回復の禁止](https://attack.mitre.org/techniques/T1490) というコマンドでシャドウコピーを削除することができます(引用: WMI 6)。\n\n**Note:** `wmic.exe` は2024年1月をもって非推奨となり、Windows 11+ではWMIC機能は「デフォルトで無効」となる。WMICは、それ以降のWindowsのリリースから削除され、主要なWMIインターフェースとして[PowerShell](https://attack.mitre.org/techniques/T1059/001)に置き換えられます(引用: WMI 7,8) PowerShellや`wbemtool.exe`のようなツールに加えて、COM APIもC++、.NET、VBScriptなどを介してプログラムでWMIと対話するために使用することができます(引用: WMI 7,8)",
            "subtechniques": []
        },
        {
            "id": "T1129",
            "name_eng": "Shared Modules",
            "name_jp": "共有モジュール",
            "description_eng": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., [Native API](https://attack.mitre.org/techniques/T1106)).\n\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\n\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in `dlfcn.h` in functions such as `dlopen` and `dlsym`. Although macOS can execute `.so` files, common practice uses `.dylib` files.(Citation: Apple Dev Dynamic Libraries)(Citation: Linux Shared Libraries)(Citation: RotaJakiro 2021 netlab360 analysis)(Citation: Unit42 OceanLotus 2017)\n\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in `NTDLL.dll` and is part of the Windows [Native API](https://attack.mitre.org/techniques/T1106) which is called from functions like `LoadLibrary` at run time.(Citation: Microsoft DLL)",
            "description_jp": "攻撃者は、共有モジュールをロードすることで、悪意のあるペイロードを実行する可能性があります。共有モジュールは、特定のカスタム関数や OS API 関数（[Native API](https://attack.mitre.org/techniques/T1106)など）の呼び出しなど、再利用可能なコードへのアクセスを提供するためにプロセスにロードされる実行可能ファイルです。\n\n攻撃者はこの機能を、被害者システム上で任意のペイロードを実行する手段として使用する可能性があります。例えば、敵対者はマルウェアの機能をモジュール化し、C2ネットワーク通信の管理や目的に対する特定のアクションの実行など、さまざまな機能を実行する共有オブジェクトにすることができます。\n\nLinuxとmacOSのモジュールローダーは、任意のローカルパスから共有オブジェクトをロードして実行することができます。この機能は `dlfcn.h` の `dlopen` や `dlsym` といった関数に存在する。macOSは`.so`ファイルを実行できるが、一般的には`.dylib`ファイルを使用する。(引用：Apple Dev Dynamic Libraries)(引用：Linux Shared Libraries)(引用：RotaJakiro 2021 netlab360解析)(引用：Unit42 OceanLotus 2017)\n\nWindowsのモジュールローダーは、任意のローカルパスや任意のUNC（Universal Naming Convention）ネットワークパスからDLLをロードするように指示することができる。この機能は`NTDLL.dll`に存在し、Windowsの[Native API](https://attack.mitre.org/techniques/T1106)の一部であり、実行時に`LoadLibrary`などの関数から呼び出される(引用: Microsoft DLL)",
            "subtechniques": []
        },
        {
            "id": "T1675",
            "name_eng": "ESXi Administration Command",
            "name_jp": "ESXi管理コマンド",
            "description_eng": "Adversaries may abuse ESXi administration services to execute commands on guest machines hosted within an ESXi virtual environment. Persistent background services on ESXi-hosted VMs, such as the VMware Tools Daemon Service, allow for remote management from the ESXi server. The tools daemon service runs as `vmtoolsd.exe` on Windows guest operating systems, `vmware-tools-daemon` on macOS, and `vmtoolsd ` on Linux.(Citation: Broadcom VMware Tools Services) \n\nAdversaries may leverage a variety of tools to execute commands on ESXi-hosted VMs – for example, by using the vSphere Web Services SDK to programmatically execute commands and scripts via APIs such as `StartProgramInGuest`, `ListProcessesInGuest`,  `ListFileInGuest`, and `InitiateFileTransferFromGuest`.(Citation: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(Citation: Broadcom Running Guest OS Operations) This may enable follow-on behaviors on the guest VMs, such as [File and Directory Discovery](https://attack.mitre.org/techniques/T1083), [Data from Local System](https://attack.mitre.org/techniques/T1005), or [OS Credential Dumping](https://attack.mitre.org/techniques/T1003).",
            "description_jp": "攻撃者は、ESXi管理サービスを悪用して、ESXi仮想環境内でホストされているゲストマシン上でコマンドを実行する可能性があります。VMware Tools Daemon Serviceのような、ESXiがホストするVM上の永続的なバックグラウンドサービスは、ESXiサーバからのリモート管理を可能にします。ツール・デーモン・サービスは、Windows ゲスト・オペレーティング・システムでは `vmtoolsd.exe`、macOS では `vmware-tools-daemon`、Linux では `vmtoolsd ` として実行される（引用：Broadcom VMware Tools Services）。\n\n例えば、vSphere Web Services SDK を使用して、`StartProgramInGuest`、`ListProcessesInGuest`、`ListFileInGuest`、`InitiateFileTransferFromGuest` などの API を介してコマンドやスクリプトをプログラムで実行します。(引用: Google Cloud Threat Intelligence VMWare ESXi Zero-Day 2023)(引用: Broadcom Running Guest OS Operations) これにより、[File and Directory Discovery](https://attack.mitre.org/techniques/T1083)、[Data from Local System](https://attack.mitre.org/techniques/T1005)、[OS Credential Dumping](https://attack.mitre.org/techniques/T1003)など、ゲスト VM 上での後続動作が有効になる可能性があります。",
            "subtechniques": []
        },
        {
            "id": "T1053",
            "name_eng": "Scheduled Task/Job",
            "name_jp": "スケジュールされたタスク/ジョブ",
            "description_eng": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security)\n\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.(Citation: ProofPoint Serpent)",
            "description_jp": "攻撃者は、タスク・スケジューリング機能を悪用し、悪意あるコードの初回実行や反復実行を容易にする可能性がある。すべての主要なオペレーティング・システムには、指定した日時に実行されるプログラムやスクリプトをスケジュールするユーティリティが存在する。タスクは、適切な認証（例：Windows環境におけるRPCとファイルとプリンタの共有）を満たせば、リモートシステム上でスケジュールすることもできる。リモートシステム上でタスクをスケジューリングするには、通常、リモートシステムの管理者またはその他の特権グループのメンバーである必要があります。\n\n攻撃者は、タスクスケジューリングを使って、システム起動時や、永続化のためにスケジュールされたベースでプログラムを実行することができる。これらのメカニズムは、指定されたアカウント(昇格した権限/特権を持つアカウントなど)のコンテキストでプロセスを実行するために悪用されることもあります。また、[System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218)と同様に、敵対者はタスクスケジューリングを悪用して、信頼されたシステムプロセスの下で1回限りの実行を隠蔽する可能性もある(引用：ProofPoint Serpent)。",
            "subtechniques": [
                {
                    "id": "T1053.003",
                    "name_eng": "Cron",
                    "name_jp": "クロン",
                    "description_eng": "Adversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code.(Citation: 20 macOS Common Tools and Techniques) The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems.  The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths.\n\nAn adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). In ESXi environments, cron jobs must be created directly via the crontab file (e.g., `/var/spool/cron/crontabs/root`).(Citation: CloudSEK ESXiArgs 2023)",
                    "description_jp": "攻撃者は<code>cron</code>ユーティリティを悪用して、悪意のあるコードを初回または繰り返し実行するためのタスクスケジューリングを行う可能性がある。(引用：20 macOS Common Tools and Techniques) <code>cron</code>ユーティリティは、Unix系OS向けの時間ベースのジョブスケジューラである。  <code> crontab</code> ファイルには、実行される cron エントリのスケジュールと、指定された実行時間が含まれています。<code>crontab</code> ファイルはオペレーティングシステム固有のファイルパスに格納される。\n\n敵対者は Linux または Unix 環境で <code>cron</code> を使用して、システム起動時または [Persistence](https://attack.mitre.org/tactics/TA0003) のスケジュールベースでプログラムを実行する可能性があります。ESXi環境では、cronジョブはcrontabファイル(例えば、`/var/spool/cron/crontabs/root`)を介して直接作成する必要があります(引用: CloudSEK ESXiArgs 2023)。"
                },
                {
                    "id": "T1053.005",
                    "name_eng": "Scheduled Task",
                    "name_jp": "予定タスク",
                    "description_eng": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111) utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel.(Citation: Stack Overflow) In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create a scheduled task via an XML path.(Citation: Red Canary - Atomic Red Team)\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.(Citation: ProofPoint Serpent)\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. [Hide Artifacts](https://attack.mitre.org/techniques/T1564)) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).(Citation: SigmaHQ)(Citation: Tarrask scheduled task) Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.(Citation: Defending Against Scheduled Task Attacks in Windows Environments)",
                    "description_jp": "攻撃者はWindowsタスクスケジューラを悪用し、悪意のあるコードを初回または繰り返し実行するためのタスクスケジューリングを実行する可能性がある。Windowsのタスクスケジューラーにアクセスする方法は複数ある。schtasks](https://attack.mitre.org/software/S0111)ユーティリティは、コマンドラインで直接実行することができ、タスクスケジューラは、コントロールパネルの管理者ツールセクション内のGUIを介して開くことができます(引用: Stack Overflow)いくつかのケースでは、敵対者は、Windowsタスクスケジューラのための.NETラッパーを使用しており、代わりに、敵対者は、スケジュールされたタスクを作成するためにWindows netapi32ライブラリと[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)(WMI)を使用しています。敵はまた、XMLパスを介してスケジュールされたタスクを作成するために、WMIクラス`PS_ScheduledTask`を活用するPowershell Cmdlet `Invoke-CimMethod`を利用するかもしれない(引用: Red Canary - Atomic Red Team)。\n\n敵対者は Windows タスク・スケジューラを使用して、システム起動時または永続化のためにスケジュールされたベース でプログラムを実行する可能性がある。Windows タスクスケジューラは、横移動の一部としてリモート実行を行ったり、指定されたアカウント(SYSTEM など)のコンテキスト下でプロセスを実行したりするために悪用される可能性もあります。System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218)と同様に、敵対者は Windows タスクスケジューラーを悪用して、署名された/信頼されたシステムプロセスの下で 1 回限りの実行をマスクする可能性もあります。\n\n敵対者はまた、防御ツールやタスクの列挙に使用される手動クエリには見えない「隠された」スケジュールタスク(すなわち[Hide Artifacts](https://attack.mitre.org/techniques/T1564))を作成する可能性があります。具体的には、敵は関連するセキュリティ記述子(SD)のレジストリ値を削除することで、`schtasks /query`とタスクスケジューラからタスクを隠すことができる(この値の削除はSYSTEM権限を使用して完了しなければならない)(引用：SigmaHQ)(引用：Tarraskスケジュールタスク) 敵はまた、関連するレジストリキー内のメタデータ(例えば、`Index`値)を変更するような、タスクを隠すための別の方法を採用することができる(引用：Defending Against Scheduled Task Attacks in Windows Environments)。"
                },
                {
                    "id": "T1053.006",
                    "name_eng": "Systemd Timers",
                    "name_jp": "Systemd タイマー",
                    "description_eng": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension <code>.timer</code> that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to [Cron](https://attack.mitre.org/techniques/T1053/003) in Linux environments.(Citation: archlinux Systemd Timers Aug 2020) Systemd timers may be activated remotely via the <code>systemctl</code> command line utility, which operates over [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: Systemd Remote Control)\n\nEach <code>.timer</code> file must have a corresponding <code>.service</code> file with the same name, e.g., <code>example.timer</code> and <code>example.service</code>. <code>.service</code> files are [Systemd Service](https://attack.mitre.org/techniques/T1543/002) unit files that are managed by the systemd system and service manager.(Citation: Linux man-pages: systemd January 2014) Privileged timers are written to <code>/etc/systemd/system/</code> and <code>/usr/lib/systemd/system</code> while user level are written to <code>~/.config/systemd/user/</code>.\n\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.(Citation: Falcon Sandbox smp: 28553b3a9d)",
                    "description_jp": "攻撃者は systemd タイマーを悪用して、悪意のあるコードを初期または繰り返し実行するためのタスクスケジューリングを行う可能性があります。Systemd タイマーは <code>.timer</code> という拡張子を持つユニットファイルで、サービスを制御します。タイマーはカレンダーのイベントや、開始点からの相対的な時間経過後に実行されるように設定できます。Linux 環境では、[Cron](https://attack.mitre.org/techniques/T1053/003) の代替として使うことができます。(引用: archlinux Systemd Timers Aug 2020) Systemd タイマーは、[SSH](https://attack.mitre.org/techniques/T1021/004) 経由で動作する <code>systemctl</code> コマンドラインユーティリティを使ってリモートで起動することができます。(引用: Systemd Remote Control)\n\n各 <code>.timer</code> ファイルには、対応する同じ名前の <code>.service</code> ファイルが必要です。例えば、<code>example.timer</code> と <code>example.service</code> のようになります。<code>.service</code>ファイルは[Systemd Service](https://attack.mitre.org/techniques/T1543/002)ユニットファイルで、systemdシステムとサービスマネージャーによって管理されます。(引用: Linux man-pages: systemd January 2014) 特権タイマーは<code>/etc/systemd/system/</code>と<code>/usr/lib/systemd/system</code>に、ユーザーレベルは<code>~/.config/systemd/user/</code>に書き込まれます。\n\n敵対者は systemd タイマーを使ってシステム起動時やスケジュールベースで悪意のあるコードを実行し、永続化する可能性があります。(引用: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) 特権パスを使ってインストールされたタイマーはルートレベルの永続化を維持するために使われるかもしれません。攻撃者はまた、ユーザーレベルの持続性を達成するためにユーザーレベルのタイマーをインストールする可能性があります。(引用: Falcon Sandbox smp: 28553b3a9d)"
                },
                {
                    "id": "T1053.007",
                    "name_eng": "Container Orchestration Job",
                    "name_jp": "コンテナ・オーケストレーションの仕事",
                    "description_eng": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.\n\nIn Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks.(Citation: Kubernetes Jobs)(Citation: Kubernetes CronJob) An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.(Citation: Threat Matrix for Kubernetes)",
                    "description_jp": "攻撃者は、Kubernetesなどのコンテナオーケストレーションツールが提供するタスクスケジューリング機能を悪用して、悪意のあるコードを実行するように設定されたコンテナのデプロイをスケジュールする可能性があります。コンテナオーケストレーションジョブは、Linuxシステムのcronジョブと同様に、特定の日時にこれらの自動タスクを実行します。この種のデプロイは、長期にわたってコンテナの量を維持するように構成することもでき、クラスタ内の永続性を維持するプロセスを自動化することができます。\n\nKubernetesでは、CronJobは、特定のタスクを実行するために1つまたは複数のコンテナを実行するJobをスケジュールするために使用されることがあります（引用：Kubernetes Jobs）（引用：Kubernetes CronJob）したがって、敵対者は、クラスタ内のさまざまなノードで悪意のあるコードを実行するJobのデプロイをスケジュールするためにCronJobを利用する可能性があります（引用：Threat Matrix for Kubernetes）。"
                },
                {
                    "id": "T1053.002",
                    "name_eng": "At",
                    "name_jp": "で",
                    "description_eng": "Adversaries may abuse the [at](https://attack.mitre.org/software/S0110) utility to perform task scheduling for initial or recurring execution of malicious code. The [at](https://attack.mitre.org/software/S0110) utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of [Scheduled Task](https://attack.mitre.org/techniques/T1053/005)'s [schtasks](https://attack.mitre.org/software/S0111) in Windows environments, using [at](https://attack.mitre.org/software/S0110) requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running the `at` command, adversaries may also schedule a task with [at](https://attack.mitre.org/software/S0110) by directly leveraging the [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) `Win32_ScheduledJob` WMI class.(Citation: Malicious Life by Cybereason)\n\nOn Linux and macOS, [at](https://attack.mitre.org/software/S0110) may be invoked by the superuser as well as any users added to the <code>at.allow</code> file. If the <code>at.allow</code> file does not exist, the <code>at.deny</code> file is checked. Every username not listed in <code>at.deny</code> is allowed to invoke [at](https://attack.mitre.org/software/S0110). If the <code>at.deny</code> exists and is empty, global use of [at](https://attack.mitre.org/software/S0110) is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use [at](https://attack.mitre.org/software/S0110).(Citation: Linux at)\n\nAdversaries may use [at](https://attack.mitre.org/software/S0110) to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). [at](https://attack.mitre.org/software/S0110) can also be abused to conduct remote [Execution](https://attack.mitre.org/tactics/TA0002) as part of [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or to run a process under the context of a specified account (such as SYSTEM).\n\nIn Linux environments, adversaries may also abuse [at](https://attack.mitre.org/software/S0110) to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, [at](https://attack.mitre.org/software/S0110) may also be used for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) if the binary is allowed to run as superuser via <code>sudo</code>.(Citation: GTFObins at)",
                    "description_jp": "攻撃者は[at](https://attack.mitre.org/software/S0110)ユーティリティを悪用して、悪意のあるコードを初回または繰り返し実行するためのタスクスケジューリングを実行する可能性があります。at](https://attack.mitre.org/software/S0110)ユーティリティは、Windows、Linux、および macOS 内に実行可能ファイルとして存在し、指定した日時にタスクをスケジューリングします。Windows環境では[Scheduled Task](https://attack.mitre.org/techniques/T1053/005)の[schtasks](https://attack.mitre.org/software/S0111)に取って代わられ、非推奨となっていますが、[at](https://attack.mitre.org/software/S0110)を使用するには、タスクスケジューラサービスが起動しており、ユーザがローカルのAdministratorsグループのメンバーとしてログオンしている必要があります。明示的に `at` コマンドを実行するだけでなく、[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) の `Win32_ScheduledJob` WMI クラスを直接利用して、[at](https://attack.mitre.org/software/S0110) でタスクをスケジュールすることもできる。(引用：Malicious Life by Cybereason)\n\nLinuxとmacOSでは、[at](https://attack.mitre.org/software/S0110)は<code>at.allow</code>ファイルに追加されたユーザーだけでなく、スーパーユーザーからも呼び出される可能性があります。<code>at.allow</code>ファイルが存在しない場合、<code>at.deny</code>ファイルがチェックされる。<code>at.deny</code>にリストされていないすべてのユーザー名は、[at](https://attack.mitre.org/software/S0110)の起動を許可される。<code>at.deny<//code>が存在し、空であれば、[at](https://attack.mitre.org/software/S0110)のグローバルな使用が許可される。どちらのファイルも存在しない場合(これがベースラインであることが多い)、スーパーユーザーだけが[at](https://attack.mitre.org/software/S0110)の使用を許可される。(引用: Linux at)\n\n攻撃者は[at](https://attack.mitre.org/software/S0110)を使用して、システム起動時または[Persistence](https://attack.mitre.org/tactics/TA0003)のスケジュールベースでプログラムを実行することができる。[at](https://attack.mitre.org/software/S0110)はまた、[Lateral Movement](https://attack.mitre.org/tactics/TA0008)の一部としてリモートで[Execution](https://attack.mitre.org/tactics/TA0002)を実行したり、指定されたアカウント(SYSTEMなど)のコンテキストでプロセスを実行するために悪用される可能性があります。\n\nLinux 環境では、タスクを使って対話的なシステムシェルを起動したり、システムコマンドを実行したりすることで、制限された環境から抜け出すために [at](https://attack.mitre.org/software/S0110) を悪用することもできる。同様に、[at](https://attack.mitre.org/software/S0110) は、<code>sudo</code> によってバイナリがスーパーユーザとして実行されることが許可されている場合、[特権の昇格](https://attack.mitre.org/tactics/TA0004) にも使用される可能性がある。(引用: GTFObins at)"
                }
            ]
        },
        {
            "id": "T1106",
            "name_eng": "Native API",
            "name_jp": "ネイティブAPI",
            "description_eng": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.(Citation: NT API Windows)(Citation: Linux Kernel API) These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.(Citation: OutFlank System Calls)(Citation: CyberBit System Calls)(Citation: MDSec System Calls) For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes.(Citation: Microsoft CreateProcess)(Citation: GNU Fork) This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.(Citation: Microsoft Win32)(Citation: LIBC)(Citation: GLIBC)\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.(Citation: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks.(Citation: Redops Syscalls) Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001).",
            "description_jp": "攻撃者は、OSのネイティブ・アプリケーション・プログラミング・インターフェース（API）と相互作用し、動作を実行する可能性がある。ネイティブAPIは、ハードウェア/デバイス、メモリ、プロセスなど、カーネル内の低レベルのOSサービスを呼び出すための制御された手段を提供する（引用：NT API Windows）（引用：Linux Kernel API）これらのネイティブAPIは、システムブート時（他のシステムコンポーネントがまだ初期化されていない時）や、ルーチン操作中のタスクやリクエストの実行時にOSによって活用される。\n\n攻撃者はこれらの OS API 機能を、動作を実行する手段として悪用する可能性があります。Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)と同様に、ネイティブAPIとそのインターフェースの階層は、被害を受けているシステムの様々なコンポーネントと相互作用し、利用するためのメカニズムを提供します。\n\nネイティブ API 関数（<code>NtCreateProcess</code> など）は、システムコール/システムコールを介して呼び出されることもありますが、これらの機能は多くの場合、インターフェースやライブラリを介してユーザーモードアプリケーションにも公開されます。(引用: OutFlank システムコール)(引用: CyberBit システムコール)(引用: MDSec システムコール) 例えば、Windows API <code>CreateProcess()</code> や GNU <code>fork()</code> のような関数は、プログラムやスクリプトが他のプロセスを開始できるようにします。(引用: Microsoft CreateProcess)(引用: GNU Fork) これは、API呼び出し元がバイナリを実行したり、CLIコマンドを実行したり、モジュールをロードしたりすることを可能にするかもしれません。(引用: Microsoft Win32)(引用: LIBC)(引用: GLIBC)\n\nMicrosoft .NETやmacOS Cocoaのような、より高度なソフトウェアフレームワークも、ネイティブAPIと相互作用するために利用可能です。これらのフレームワークは通常、API機能に対する言語ラッパー/抽象化を提供し、コードの使いやすさ/移植性を考慮して設計されています。(引用: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)\n\n(引用: Redops Syscalls) 敵対者はまた、[Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)を介して監視された関数のフックを解除するなど、API監視に関連するセンサーや防御ツールを改ざんしようとする可能性がある。",
            "subtechniques": []
        },
        {
            "id": "T1610",
            "name_eng": "Deploy Container",
            "name_jp": "コンテナのデプロイ",
            "description_eng": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to [Escape to Host](https://attack.mitre.org/techniques/T1611) and access other containers running on the node. (Citation: AppSecco Kubernetes Namespace Breakout 2020)\n\nContainers can be deployed by various means, such as via Docker's <code>create</code> and <code>start</code> APIs or via a web application such as the Kubernetes dashboard or Kubeflow. (Citation: Docker Containers API)(Citation: Kubernetes Dashboard)(Citation: Kubeflow Pipelines) In Kubernetes environments, containers may be deployed through workloads such as ReplicaSets or DaemonSets, which can allow containers to be deployed across multiple nodes.(Citation: Kubernetes Workload Management) Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.(Citation: Aqua Build Images on Hosts)",
            "description_jp": "敵対者は、実行を容易にしたり防御を回避したりするために、コンテナを環境に配備することがある。場合によっては、マルウェアを実行したりダウンロードしたりするプロセスなど、特定のイメージや配備に関連するプロセスを実行するために、敵が新しいコンテナを配備することがある。また、敵対者は、環境内の既存の防御を回避するために、ネットワークルールやユーザー制限などなしに構成された新しいコンテナをデプロイする場合もあります。Kubernetes環境では、敵対者が[Escape to Host](https://attack.mitre.org/techniques/T1611)を行い、そのノード上で実行されている他のコンテナにアクセスするために、特権コンテナや脆弱なコンテナを特定のノードにデプロイしようとする可能性があります。(引用：AppSecco Kubernetes Namespace Breakout 2020)\n\nコンテナは、Dockerの<code>create</code>や<code>start</code> API経由や、KubernetesダッシュボードやKubeflowなどのWebアプリケーション経由など、さまざまな手段でデプロイできる。(引用: Docker Containers API)(引用: Kubernetes Dashboard)(引用: Kubeflow Pipelines) Kubernetes環境では、ReplicaSetsやDaemonSetsなどのワークロードを介してコンテナがデプロイされることがあります。(引用: Kubernetes Workload Management) 敵は、取得またはビルドされた悪意のあるイメージに基づいて、または実行時に悪意のあるペイロードをダウンロードして実行する良性のイメージから、コンテナをデプロイする可能性があります。(引用: Aqua Build Images on Hosts)",
            "subtechniques": []
        },
        {
            "id": "T1674",
            "name_eng": "Input Injection",
            "name_jp": "インプット・インジェクション",
            "description_eng": "Adversaries may simulate keystrokes on a victim’s computer by various means to perform any type of action on behalf of the user, such as launching the command interpreter using keyboard shortcuts,  typing an inline script to be executed, or interacting directly with a GUI-based application.  These actions can be preprogrammed into adversary tooling or executed through physical devices such as Human Interface Devices (HIDs).\n\nFor example, adversaries have used tooling that monitors the Windows message loop to detect when a user visits bank-specific URLs. If detected, the tool then simulates keystrokes to open the developer console or select the address bar, pastes malicious JavaScript from the clipboard, and executes it - enabling manipulation of content within the browser, such as replacing bank account numbers during transactions.(Citation: BleepingComputer BackSwap)(Citation: welivesecurity BackSwap)\n\nAdversaries have also used malicious USB devices to emulate keystrokes that launch PowerShell, leading to the download and execution of malware from adversary-controlled servers.(Citation: BleepingComputer USB)",
            "description_jp": "攻撃者は、キーボードショートカットを使用してコマンドインタプリタを起動したり、インラインスクリプトを入力して実行したり、GUIベースのアプリケーションと直接対話したりするなど、ユーザーに代わってあらゆる種類のアクションを実行するために、さまざまな手段で被害者のコンピュータ上のキーストロークをシミュレートすることができます。  これらのアクションは、敵のツールにあらかじめプログラムされていたり、ヒューマン・インターフェース・デバイス（HID）などの物理的なデバイスを介して実行されたりします。\n\n例えば、敵対者は Windows のメッセージループを監視するツールを使って、ユーザが銀行固有の URL にアクセスしたことを検出しています。検出された場合、ツールは開発者コンソールを開くかアドレスバーを選択するキーストロークをシミュレートし、クリップボードから悪意のあるJavaScriptを貼り付けて実行する。\n\n攻撃者はまた、悪意のあるUSBデバイスを使用して、PowerShellを起動するキーストロークをエミュレートし、攻撃者が管理するサーバーからマルウェアをダウンロードして実行させることも行っている(引用：BleepingComputer USB)",
            "subtechniques": []
        },
        {
            "id": "T1059",
            "name_eng": "Command and Scripting Interpreter",
            "name_jp": "コマンドとスクリプトのインタープリター",
            "description_eng": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nThere are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)",
            "description_jp": "攻撃者は、コマンド、スクリプト、またはバイナリを実行するために、コマンドやスクリプトインタプリタを悪用する可能性があります。これらのインターフェイスや言語は、コンピュータシステムと対話する方法を提供し、多くの異なるプラットフォームで共通の機能です。例えば、macOSやLinuxディストリビューションには[Unix Shell](https://attack.mitre.org/techniques/T1059/004)があり、Windowsには[Windows Command Shell](https://attack.mitre.org/techniques/T1059/003)や[PowerShell](https://attack.mitre.org/techniques/T1059/001)があります。\n\nまた、[JavaScript](https://attack.mitre.org/techniques/T1059/007)や[Visual Basic](https://attack.mitre.org/techniques/T1059/005)のようなクライアントアプリケーションによく使われるものと同様に、[Python](https://attack.mitre.org/techniques/T1059/006)のようなクロスプラットフォームのインタプリタもあります。\n\n攻撃者は、任意のコマンドを実行する手段として、様々な方法でこれらの技術を悪用するかもしれません。コマンドやスクリプトは、ルアー文書として被害者に配信される[Initial Access](https://attack.mitre.org/tactics/TA0001)ペイロードや、既存のC2からダウンロードされるセカンダリペイロードに埋め込むことができます。また、攻撃者は、対話型端末/シェルを通じてコマンドを実行したり、リモート実行を実現するためにさまざまな[リモートサービス](https://attack.mitre.org/techniques/T1021)を利用したりすることもあります。(引用: Powershell リモートコマンド)(引用: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)",
            "subtechniques": [
                {
                    "id": "T1059.005",
                    "name_eng": "Visual Basic",
                    "name_jp": "ビジュアル・ベーシック",
                    "description_eng": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and the [Native API](https://attack.mitre.org/techniques/T1106) through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript](https://attack.mitre.org/techniques/T1059/007) on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) payloads (which may also involve [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) to enable execution).(Citation: Default VBS macros Blocking )",
                    "description_jp": "攻撃者は実行にVisual Basic (VB)を悪用するかもしれない。VBはマイクロソフトが開発したプログラミング言語で、Windows APIを通じて[Component Object Model](https://attack.mitre.org/techniques/T1559/001)や[Native API](https://attack.mitre.org/techniques/T1106)など多くのWindowsテクノロジーと相互運用性を持っている。将来的な進化は予定されておらずレガシーとされているが、VBは.NET Frameworkとクロスプラットフォームの.NET Coreに統合されサポートされている。(引用：VB .NET 2020年3月)(引用：VB Microsoft)\n\nまた、Visual Basic for Applications（VBA）やVBScriptなど、VBをベースにした派生言語も作られている。VBAは、Microsoft Officeやいくつかのサードパーティ製アプリケーションに組み込まれているイベント駆動型プログラミング言語である。(引用: Microsoft VBA)(引用: Wikipedia VBA) VBAは、ホスト上でタスクやその他の機能の実行を自動化するために使用されるマクロを文書に含めることを可能にする。VBScriptはWindowsホスト上のデフォルトのスクリプト言語であり、Internet Explorerに提供されるHTMLアプリケーション(HTA)ウェブページ上で[JavaScript](https://attack.mitre.org/techniques/T1059/007)の代わりに使用することもできる(ただし、最近のブラウザのほとんどはVBScriptをサポートしていない)。(引用: Microsoft VBScript)\n\n攻撃者は、悪意のあるコマンドを実行するために VB ペイロードを使用する可能性があります。一般的な悪意のある使用方法には、VBScript を使用した動作の自動実行や、[Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) ペイロードへの VBA コンテンツの埋め込み (実行を可能にするために [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) を使用する場合もあります) があります。(引用: デフォルト VBS マクロのブロック)"
                },
                {
                    "id": "T1059.002",
                    "name_eng": "AppleScript",
                    "name_jp": "アップルスクリプト",
                    "description_eng": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents.(Citation: Apple AppleScript) These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.\n\nScripts can be run from the command-line via <code>osascript /path/to/script</code> or <code>osascript -e \"script here\"</code>. Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding <code>#!/usr/bin/osascript</code> to the start of the script file.(Citation: SentinelOne AppleScript)\n\nAppleScripts do not need to call <code>osascript</code> to execute. However, they may be executed from within mach-O binaries by using the macOS [Native API](https://attack.mitre.org/techniques/T1106)s <code>NSAppleScript</code> or <code>OSAScript</code>, both of which execute code independent of the <code>/usr/bin/osascript</code> command line utility.\n\nAdversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute [Native API](https://attack.mitre.org/techniques/T1106)s, which otherwise would require compilation and execution in a mach-O binary file format.(Citation: SentinelOne macOS Red Team) Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via [Python](https://attack.mitre.org/techniques/T1059/006).(Citation: Macro Malware Targets Macs)",
                    "description_jp": "攻撃者はAppleScriptを悪用して実行する可能性がある。AppleScriptはmacOSのスクリプト言語で、AppleEventと呼ばれるアプリケーション間のメッセージを介してアプリケーションやOSの一部を制御するように設計されています（引用：Apple AppleScript） これらのAppleEventメッセージは単独で送信することも、AppleScriptで簡単にスクリプト化することもできます。これらのイベントは、開いているウィンドウの位置を特定したり、キー入力を送信したり、ローカルまたはリモートで開いているほとんどすべてのアプリケーションと対話したりすることができます。\n\nスクリプトはコマンドラインから <code>osascript /path/to/script</code> または <code>osascript -e \"script here\"</code> で実行できます。コマンドライン以外にも、メールルール、Calendar.appアラーム、Automatorワークフローなど、さまざまな方法でスクリプトを実行できます。AppleScriptsは、スクリプトファイルの先頭に<code>#!/usr/bin/osascript</code>を追加することで、プレーンテキストのシェルスクリプトとして実行することもできます(引用: SentinelOne AppleScript)\n\nアップルスクリプトは、実行するために<code>osascript</code>を呼び出す必要はありません。しかし、macOS [Native API](https://attack.mitre.org/techniques/T1106) の <code>NSAppleScript</code> または <code>OSAScript</code> を使用することで、mach-O バイナリ内から実行することができます。\n\n攻撃者はアップルスクリプトを悪用して、開いているSSH接続とやりとりしたり、リモートマシンに移動したり、さらにはユーザに偽のダイアログボックスを表示したりするなど、さまざまな動作を実行する可能性があります。これらのイベントはリモートでアプリケーションを起動することはできませんが（ローカルで起動することはできます）、すでにリモートで実行されているアプリケーションと対話することはできます。macOS 10.10 Yosemite以降では、AppleScriptは[Native API](https://attack.mitre.org/techniques/T1106)を実行する機能を備えている。そうでなければ、コンパイルしてmach-Oバイナリファイル形式で実行する必要がある。(引用：SentinelOne macOS Red Team) これはスクリプト言語であるため、[Python](https://attack.mitre.org/techniques/T1059/006)を介したリバースシェルなど、より一般的なテクニックを起動するためにも使用できる。(引用：Macを狙うマクロマルウェア)"
                },
                {
                    "id": "T1059.003",
                    "name_eng": "Windows Command Shell",
                    "name_jp": "Windowsコマンドシェル",
                    "description_eng": "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: SSH in Windows)\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd](https://attack.mitre.org/software/S0106) to execute various commands and payloads. Common uses include [cmd](https://attack.mitre.org/software/S0106) to execute a single command, or abusing [cmd](https://attack.mitre.org/software/S0106) interactively with input and output forwarded over a command and control channel.",
                    "description_jp": "攻撃者はWindowsコマンドシェルを悪用して実行する可能性がある。Windowsコマンドシェル([cmd](https://attack.mitre.org/software/S0106))はWindowsシステム上の主要なコマンドプロンプトである。Windowsコマンドプロンプトは、システムのほとんどすべての側面を制御するために使用することができ、コマンドの異なるサブセットに必要な様々な権限レベルを持つ。コマンドプロンプトは、[SSH](https://attack.mitre.org/techniques/T1021/004)のような[リモートサービス](https://attack.mitre.org/techniques/T1021)を介してリモートから呼び出すことができる。(引用: WindowsにおけるSSH)\n\nバッチファイル（例：.batまたは.cmd）は、条件分岐やループなどの通常のスクリプト操作と同様に、実行する連続コマンドのリストをシェルに提供します。バッチファイルの一般的な用途には、長いタスクや繰り返しタスク、複数のシステムで同じコマンドセットを実行する必要がある場合などがあります。\n\n攻撃者は、[cmd](https://attack.mitre.org/software/S0106) を利用して、さまざまなコマンドやペイロードを実行する可能性がある。一般的な使用方法としては、[cmd](https://attack.mitre.org/software/S0106) を使用して単一のコマンドを実行したり、[cmd](https://attack.mitre.org/software/S0106) をコマンドと制御チャネルを介して転送される入力と出力で対話的に悪用したりすることがある。"
                },
                {
                    "id": "T1059.004",
                    "name_eng": "Unix Shell",
                    "name_jp": "Unixシェル",
                    "description_eng": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux, macOS, and ESXi systems, though many variations of the Unix shell exist (e.g. sh, ash, bash, zsh, etc.) depending on the specific OS or distribution.(Citation: DieNet Bash)(Citation: Apple ZShell) Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with [SSH](https://attack.mitre.org/techniques/T1021/004). Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.\n\nSome systems, such as embedded devices, lightweight Linux distributions, and ESXi servers, may leverage stripped-down Unix shells via Busybox, a small executable that contains a variety of tools, including a simple shell.",
                    "description_jp": "攻撃者は、Unixシェルコマンドやスクリプトを悪用して実行する可能性があります。Unixシェルは、Linux、macOS、ESXiシステムの主要なコマンドプロンプトですが、特定のOSやディストリビューションに応じて、Unixシェルの多くのバリエーション（sh、ash、bash、zshなど）が存在します（引用：DieNet Bash）（引用：Apple ZShell）Unixシェルは、システムのあらゆる側面を制御することができ、特定のコマンドは昇格特権を必要とします。\n\nUnixシェルはまた、条件分岐やループなどの他の典型的なプログラミング操作と同様に、コマンドの連続実行を可能にするスクリプトをサポートしています。シェルスクリプトの一般的な用途としては、長いタスクや繰り返しタスク、複数のシステムで同じコマンドを実行する必要がある場合などがあります。\n\n攻撃者はUnixシェルを悪用して、さまざまなコマンドやペイロードを実行する可能性があります。対話型シェルは、コマンド＆コントロールチャネルを通じて、または[SSH](https://attack.mitre.org/techniques/T1021/004)を使用した横移動中にアクセスされることがあります。また、攻撃者はシェルスクリプトを利用して、被害者に複数のコマンドを配信・実行したり、永続化のために使用されるペイロードの一部として使用したりすることもあります。\n\n組み込みデバイス、軽量Linuxディストリビューション、ESXiサーバなど、一部のシステムでは、シンプルなシェルを含むさまざまなツールを含む小さな実行ファイルであるBusyboxを介して、ストリップダウンされたUnixシェルを活用することがあります。"
                },
                {
                    "id": "T1059.010",
                    "name_eng": "AutoHotKey & AutoIT",
                    "name_jp": "AutoHotKey & AutoIT",
                    "description_eng": "Adversaries may execute commands and perform malicious tasks using AutoIT and AutoHotKey automation scripts. AutoIT and AutoHotkey (AHK) are scripting languages that enable users to automate Windows tasks. These automation scripts can be used to perform a wide variety of actions, such as clicking on buttons, entering text, and opening and closing programs.(Citation: AutoIT)(Citation: AutoHotKey)\n\nAdversaries may use AHK (`.ahk`) and AutoIT (`.au3`) scripts to execute malicious code on a victim's system. For example, adversaries have used for AHK to execute payloads and other modular malware such as keyloggers. Adversaries have also used custom AHK files containing embedded malware as [Phishing](https://attack.mitre.org/techniques/T1566) payloads.(Citation: Splunk DarkGate)\n\nThese scripts may also be compiled into self-contained executable payloads (`.exe`).(Citation: AutoIT)(Citation: AutoHotKey)",
                    "description_jp": "攻撃者は、AutoITおよびAutoHotKey自動化スクリプトを使用してコマンドを実行し、悪意のあるタスクを実行する可能性があります。AutoITおよびAutoHotkey（AHK）は、ユーザーがWindowsタスクを自動化できるようにするスクリプト言語です。これらの自動化スクリプトは、ボタンのクリック、テキストの入力、プログラムの開閉など、さまざまなアクションを実行するために使用できます。 引用：AutoIT）（引用：AutoHotKey\n\n攻撃者は、AHK（`.ahk`）スクリプトやAutoIT（`.au3`）スクリプトを使用して、被害者のシステム上で悪意のあるコードを実行することがあります。たとえば、攻撃者はAHKを使用して、ペイロードやキーロガーなどのモジュール型マルウェアを実行しています。また、マルウェアを埋め込んだカスタムAHKファイルを[フィッシング](https://attack.mitre.org/techniques/T1566)ペイロードとして使用するケースもあります(引用: Splunk DarkGate)。\n\nこれらのスクリプトは、自己完結型の実行可能ペイロード(`.exe`)にコンパイルされることもあります(引用：AutoIT)(引用：AutoHotKey)"
                },
                {
                    "id": "T1059.008",
                    "name_eng": "Network Device CLI",
                    "name_jp": "ネットワークデバイスCLI",
                    "description_eng": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. \n\nScripting interpreters automate tasks and extend functionality beyond the command set included in the network OS. The CLI and scripting interpreter are accessible through a direct console connection, or through remote means, such as telnet or [SSH](https://attack.mitre.org/techniques/T1021/004).\n\nAdversaries can use the network CLI to change how network devices behave and operate. The CLI may be used to manipulate traffic flows to intercept or manipulate data, modify startup configuration parameters to load malicious system software, or to disable security features or logging to avoid detection.(Citation: Cisco Synful Knock Evolution)",
                    "description_jp": "攻撃者は、悪意のあるコマンドやペイロードを実行するために、ネットワークデバイス上のスクリプトやビルトインコマンドラインインタプリタ（CLI）を悪用する可能性があります。CLI は、ユーザや管理者がシステム情報を見たり、デバイスの操作を変更したり、診断や管理機能を実行したりするために、デバイスとやりとりする主要な手段です。CLI には通常、コマンドごとに必要な様々な権限レベルが含まれています。\n\nスクリプト・インタープリタは、タスクを自動化し、ネットワークOSに含まれるコマンド・セットを超えて機能を拡張します。CLIとスクリプト・インタープリタには、コンソールに直接接続するか、telnetや[SSH](https://attack.mitre.org/techniques/T1021/004)などのリモート手段でアクセスできます。\n\n攻撃者はネットワークCLIを使用して、ネットワークデバイスの動作や操作方法を変更することができます。CLI を使用して、トラフィックフローを操作してデータを傍受または操作したり、スタートアップ設定パラメータを変更して悪意のあるシステムソフトウェアをロードしたり、セキュリティ機能やロギングを無効にして検知を回避したりすることができる。 引用：Cisco Synful Knock Evolution"
                },
                {
                    "id": "T1059.012",
                    "name_eng": "Hypervisor CLI",
                    "name_jp": "ハイパーバイザーCLI",
                    "description_eng": "Adversaries may abuse hypervisor command line interpreters (CLIs) to execute malicious commands. Hypervisor CLIs typically enable a wide variety of functionality for managing both the hypervisor itself and the guest virtual machines it hosts. \n\nFor example, on ESXi systems, tools such as `esxcli` and `vim-cmd` allow administrators to configure firewall rules and log forwarding on the hypervisor, list virtual machines, start and stop virtual machines, and more.(Citation: Broadcom ESXCLI Reference)(Citation: Crowdstrike Hypervisor Jackpotting Pt 2 2021)(Citation: LOLESXi) Adversaries may be able to leverage these tools in order to support further actions, such as [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) or [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486).",
                    "description_jp": "攻撃者は、ハイパーバイザーのコマンドラインインタプリタ（CLI）を悪用して悪意のあるコマンドを実行する可能性があります。ハイパーバイザーのCLIは通常、ハイパーバイザー自身と、ハイパーバイザーがホストするゲスト仮想マシンの両方を管理するための多様な機能を可能にします。\n\n例えば、ESXi システムでは、`esxcli` や `vim-cmd` などのツールにより、管理者はハイパーバイザー上のファイアウォールルールやログ転送の設定、仮想マシンの一覧表示、仮想マシンの起動と停止などを行うことができます。(引用: Broadcom ESXCLI Reference)(引用: Crowdstrike Hypervisor Jackpotting Pt 2 2021)(引用: LOLESXi) 攻撃者は、[File and Directory Discovery](https://attack.mitre.org/techniques/T1083) や [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) などのさらなるアクションをサポートするために、これらのツールを活用することができます。"
                },
                {
                    "id": "T1059.006",
                    "name_eng": "Python",
                    "name_jp": "Python",
                    "description_eng": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.(Citation: Zscaler APT31 Covid-19 October 2020)\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
                    "description_jp": "攻撃者はPythonコマンドやスクリプトを悪用して実行する可能性があります。Pythonは非常に人気のあるスクリプト/プログラミング言語で、多くの機能を実行することができます。Pythonは、コマンドラインから（<code>python.exe</code>インタプリタを介して）対話的に実行することも、スクリプト（.py）を書いて異なるシステムに配布することもできます。Pythonコードはバイナリの実行ファイルにコンパイルすることもできる。(引用：Zscaler APT31 Covid-19 October 2020)\n\nPythonには、ファイル操作やデバイスI/Oなど、基盤となるシステムとやり取りするための多くの組み込みパッケージが付属しています。攻撃者は、これらのライブラリを使用して、コマンドやその他のスクリプトをダウンロードして実行したり、さまざまな悪意のある動作を実行したりすることができます。"
                },
                {
                    "id": "T1059.001",
                    "name_eng": "PowerShell",
                    "name_jp": "PowerShell",
                    "description_eng": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194), [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github PSAttack)\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)",
                    "description_jp": "攻撃者は、PowerShell コマンドやスクリプトを悪用して実行する可能性があります。PowerShellは、Windowsオペレーティングシステムに含まれる強力な対話型コマンドラインインターフェイスとスクリプト環境です（引用：TechNet PowerShell）。例えば、実行可能ファイルを実行するために使用できる <code>Start-Process</code> コマンドレットや、ローカルまたはリモートコンピュータ上でコマンドを実行する <code>Invoke-Command</code> コマンドレットなどがあります (ただし、PowerShell を使用してリモートシステムに接続するには管理者権限が必要です)。\n\nPowerShellは、インターネットから実行ファイルをダウンロードして実行するためにも使用することができ、ディスクに触れることなくディスクやメモリから実行することができる。\n\nPowerShellベースの攻撃テストツールには、[Empire](https://attack.mitre.org/software/S0363)、[PowerSploit](https://attack.mitre.org/software/S0194)、[PoshC2](https://attack.mitre.org/software/S0378)、PSAttackなどがある。(引用：Github PSAttack)\n\nPowerShellコマンド/スクリプトは、.NETフレームワークとWindows共通言語インタフェース(CLI)を通じて公開されるPowerShellの基礎となる<code>System.Management.Automation</code>アセンブリDLLへのインタフェースを通じて、<code>powershell.exe</code>バイナリを直接呼び出さずに実行することもできます(引用: Sixdub PowerPick 2016年1月)(引用: SilentBreak Offensive PS 2015年12月)(引用: Microsoft PSfromCsharp APR 2014年)"
                },
                {
                    "id": "T1059.009",
                    "name_eng": "Cloud API",
                    "name_jp": "Cloud API",
                    "description_eng": "Adversaries may abuse cloud APIs to execute malicious commands. APIs available in cloud environments provide various functionalities and are a feature-rich method for programmatic access to nearly all aspects of a tenant. These APIs may be utilized through various methods such as command line interpreters (CLIs), in-browser Cloud Shells, [PowerShell](https://attack.mitre.org/techniques/T1059/001) modules like Azure for PowerShell(Citation: Microsoft - Azure PowerShell), or software developer kits (SDKs) available for languages such as [Python](https://attack.mitre.org/techniques/T1059/006).  \n\nCloud API functionality may allow for administrative access across all major services in a tenant such as compute, storage, identity and access management (IAM), networking, and security policies.\n\nWith proper permissions (often via use of credentials such as [Application Access Token](https://attack.mitre.org/techniques/T1550/001) and [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)), adversaries may abuse cloud APIs to invoke various functions that execute malicious actions. For example, CLI and PowerShell functionality may be accessed through binaries installed on cloud-hosted or on-premises hosts or accessed through a browser-based cloud shell offered by many cloud platforms (such as AWS, Azure, and GCP). These cloud shells are often a packaged unified environment to use CLI and/or scripting modules hosted as a container in the cloud environment.",
                    "description_jp": "攻撃者はクラウドAPIを悪用して悪意のあるコマンドを実行する可能性がある。クラウド環境で利用可能なAPIは様々な機能を提供し、テナントのほぼすべての側面にプログラムでアクセスするための機能豊富な方法です。これらのAPIは、コマンドラインインタープリタ（CLI）、ブラウザ内のクラウドシェル、Azure for PowerShell（引用：Microsoft - Azure PowerShell）のような[PowerShell](https://attack.mitre.org/techniques/T1059/001)モジュール、または[Python](https://attack.mitre.org/techniques/T1059/006)のような言語で利用可能なソフトウェア開発者キット（SDK）のような様々な方法を通じて利用することができる。  \n\nクラウドAPIの機能により、コンピュート、ストレージ、アイデンティティとアクセス管理（IAM）、ネットワーク、セキュリティポリシーなど、テナント内の主要なサービスすべてにまたがる管理アクセスを可能にすることができる。\n\n適切なパーミッション（多くの場合、[Application Access Token](https://attack.mitre.org/techniques/T1550/001)や[Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)のようなクレデンシャルを使用することで、敵対者はクラウドAPIを悪用して、悪意のあるアクションを実行する様々な機能を呼び出すことができます。例えば、CLIやPowerShellの機能は、クラウドホストやオンプレミスのホストにインストールされたバイナリからアクセスしたり、多くのクラウドプラットフォーム（AWS、Azure、GCPなど）が提供するブラウザベースのクラウドシェルからアクセスしたりすることができる。これらのクラウドシェルは、多くの場合、クラウド環境でコンテナとしてホストされているCLIやスクリプトモジュールを使用するためのパッケージ化された統合環境である。"
                },
                {
                    "id": "T1059.011",
                    "name_eng": "Lua",
                    "name_jp": "Lua",
                    "description_eng": "Adversaries may abuse Lua commands and scripts for execution. Lua is a cross-platform scripting and programming language primarily designed for embedded use in applications. Lua can be executed on the command-line (through the stand-alone lua interpreter), via scripts (<code>.lua</code>), or from Lua-embedded programs (through the <code>struct lua_State</code>).(Citation: Lua main page)(Citation: Lua state)\n\nLua scripts may be executed by adversaries for malicious purposes. Adversaries may incorporate, abuse, or replace existing Lua interpreters to allow for malicious Lua command execution at runtime.(Citation: PoetRat Lua)(Citation: Lua Proofpoint Sunseed)(Citation: Cyphort EvilBunny)(Citation: Kaspersky Lua)",
                    "description_jp": "攻撃者は、Luaコマンドやスクリプトを悪用して実行する可能性があります。Luaは、主にアプリケーションに組み込んで使用するために設計された、クロスプラットフォームのスクリプトおよびプログラミング言語です。Lua は、コマンドライン (スタンドアロンの lua インタプリタを使用)、スクリプト (<code>.lua</code>) 、または Lua 組み込みプログラム (<code>struct lua_State</code> を使用) から実行できます。\n\nLuaスクリプトは、敵対者によって悪意のある目的で実行される可能性があります。敵対者は、既存の Lua インタプリタを組み込んだり、悪用したり、置き換えたりして、実行時に悪意のある Lua コマンドを実行できるようにする可能性がある(引用：PoetRat Lua)(引用：Lua Proofpoint Sunseed)(Citation：Cyphort EvilBunny)(Citation：Kaspersky Lua)"
                },
                {
                    "id": "T1059.007",
                    "name_eng": "JavaScript",
                    "name_jp": "JavaScript",
                    "description_eng": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.(Citation: NodeJS)\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation: Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple’s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple’s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple’s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and [AppleScript](https://attack.mitre.org/techniques/T1059/002). Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.(Citation: Apple About Mac Scripting 2016)(Citation: SpecterOps JXA 2020)(Citation: SentinelOne macOS Red Team)(Citation: Red Canary Silver Sparrow Feb2021)(Citation: MDSec macOS JXA and VSCode)\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).",
                    "description_jp": "攻撃者はJavaScriptの様々な実装を悪用して実行する可能性がある。JavaScript(JS)はプラットフォームに依存しないスクリプト言語(実行時にジャストインタイムでコンパイルされる)であり、一般的にウェブページのスクリプトと関連付けられているが、JSはブラウザ以外の実行環境でも実行可能である(引用：NodeJS)\n\nJScriptは、同じスクリプト規格のMicrosoft実装である。JScriptはWindowsスクリプトエンジンを介して解釈されるため、[Component Object Model](https://attack.mitre.org/techniques/T1559/001)やInternet Explorer HTML Application(HTA)ページなど、Windowsの多くのコンポーネントと統合されている。(引用：JScrip 2018年5月号)(引用：Microsoft JScript 2007)(引用：Microsoft Windows Scripts)\n\nJavaScript for Automation（JXA）は、OSX 10.10から導入されたAppleのOpen Scripting Architecture（OSA）の一部として含まれる、JavaScriptベースのmacOSスクリプト言語です。AppleのOSAは、アプリケーションの制御、オペレーティングシステムとのインターフェイス、Appleの内部APIへのブリッジアクセスのためのスクリプト機能を提供します。OSX 10.10現在、OSAはJXAと[AppleScript](https://attack.mitre.org/techniques/T1059/002)の2つの言語のみをサポートしています。スクリプトは、コマンドラインユーティリティ<code>osascript</code>を介して実行することができ、<code>osacompile</code>を介してアプリケーションまたはスクリプトファイルにコンパイルすることができ、OSAKit Frameworkを活用することで、他のプログラムのメモリ内でコンパイルして実行することができます。(引用：Apple About Mac Scripting 2016)(引用：SpecterOps JXA 2020)(引用：SentinelOne macOS Red Team)(引用：Red Canary Silver Sparrow Feb2021)(引用：MDSec macOS JXA and VSCode)\n\n攻撃者はJavaScriptのさまざまな実装を悪用して、さまざまな動作を実行する可能性があります。一般的な使用方法としては、[Drive-by-Compromise](https://attack.mitre.org/techniques/T1189)の一部としてWebサイト上で悪意のあるスクリプトをホストしたり、セカンダリペイロードとしてこれらのスクリプトファイルをダウンロードして実行したりすることが挙げられます。これらのペイロードはテキストベースであるため、[難読化されたファイルまたは情報](https://attack.mitre.org/techniques/T1027) の一部として、敵がそのコンテンツを難読化することも非常に一般的です。"
                }
            ]
        },
        {
            "id": "T1609",
            "name_eng": "Container Administration Command",
            "name_jp": "コンテナ管理コマンド",
            "description_eng": "Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.(Citation: Docker Daemon CLI)(Citation: Kubernetes API)(Citation: Kubernetes Kubelet)\n\nIn Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as <code>docker exec</code> to execute a command within a running container.(Citation: Docker Entrypoint)(Citation: Docker Exec) In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as <code>kubectl exec</code>.(Citation: Kubectl Exec Get Shell)",
            "description_jp": "攻撃者はコンテナ管理サービスを悪用して、コンテナ内でコマンドを実行する可能性がある。Dockerデーモン、Kubernetes APIサーバー、またはkubeletなどのコンテナ管理サービスは、環境内のコンテナのリモート管理を可能にする可能性がある。 引用：DockerデーモンCLI）（引用：Kubernetes API）（引用：Kubernetes Kubelet\n\nDockerでは、敵対者はコンテナのデプロイ時にスクリプトやコマンドを実行するエントリーポイントを指定したり、<code>docker exec</code>のようなコマンドを使用して実行中のコンテナ内でコマンドを実行したりする。(引用: Docker Entrypoint)(引用: Docker Exec) Kubernetesでは、敵対者が十分な権限を持っている場合、Kubernetes APIサーバー、kubeletとの対話、または<code>kubectl exec</code>のようなコマンドの実行によって、クラスタ内のコンテナでリモート実行を得ることができる。",
            "subtechniques": []
        },
        {
            "id": "T1204",
            "name_eng": "User Execution",
            "name_jp": "ユーザー実行",
            "description_eng": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as:\n\n* Enabling [Remote Access Tools](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary\n* Running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n* Downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204)\n* Coerceing users to copy, paste, and execute malicious code manually(Citation: Reliaquest-execution)(Citation: proofpoint-selfpwn)\n\nFor example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Tools](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)",
            "description_jp": "敵対者は、実行を獲得するために、ユーザーによる特定の行動に依存する可能性がある。ユーザは、例えば悪意のあるドキュメントファイルやリンクを開くことによって、悪意のあるコードを実行させるソーシャルエンジニアリングにさらされるかもしれません。このようなユーザの行動は、一般的に[フィッシング](https://attack.mitre.org/techniques/T1566)に続く行動として観察されます。\n\nユーザ実行](https://attack.mitre.org/techniques/T1204)は初回アクセスの直後に頻繁に発生しますが、ユーザがクリックすることを期待して敵対者が共有ディレクトリやユーザのデスクトップにファイルを置く場合など、侵入の他の段階で発生することもあります。この活動は[Internal Spearphishing](https://attack.mitre.org/techniques/T1534)の直後にも見られることがある。\n\n敵対者はまた、ユーザーを欺いて次のようなアクションを実行させることもある：\n\n* リモート・アクセス・ツール](https://attack.mitre.org/techniques/T1219)を有効にし、システムを敵に直接制御させる。\n* ブラウザで悪意のある JavaScript を実行し、[Web セッション Cookie を盗む](https://attack.mitre.org/techniques/T1539) (引用: Talos Roblox Scam 2023) (引用: Krebs Discord Bookmarks 2023)\n* ユーザー実行](https://attack.mitre.org/techniques/T1204)のためのマルウェアのダウンロードと実行。\n* 悪意のあるコードを手動でコピー、貼り付け、実行するようユーザーに強要(引用：Reliaquest-execution)(引用：proofpoint-selfpwn)\n\n例えば、技術サポート詐欺は、[フィッシング](https://attack.mitre.org/techniques/T1566)、ビッシング、または様々な形のユーザーとのやり取りを通じて行われます。攻撃者は、被害者を悪意のあるウェブサイトに誘導するために使用されるフリーダイヤルやコールセンターを偽装して宣伝するなど、これらの方法を組み合わせて使用し、マルウェアや[リモートアクセスツール](https://attack.mitre.org/techniques/T1219)を含むペイロードを配信および実行することができます(引用：Telephone Attack Delivery)。",
            "subtechniques": [
                {
                    "id": "T1204.002",
                    "name_eng": "Malicious File",
                    "name_jp": "悪意のあるファイル",
                    "description_eng": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and .reg.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).",
                    "description_jp": "敵対者は、実行を得るために、ユーザーが悪意のあるファイルを開くことを信頼するかもしれない。ユーザはコードの実行につながるファイルを開かせるためにソーシャル・エンジニアリングを受けるかもしれない。このユーザー行動は通常、[Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)に続く行動として観察されます。攻撃者は、.doc、.pdf、.xls、.rtf、.scr、.exe、.lnk、.pif、.cpl、.regなど、ユーザーに実行を要求するいくつかのタイプのファイルを使用する可能性があります。\n\n攻撃者は、ユーザが悪意のあるファイルを開いて実行する可能性を高めるために、さまざまな形式の[マスカレード](https://attack.mitre.org/techniques/T1036)や[難読化されたファイルまたは情報](https://attack.mitre.org/techniques/T1027)を使用することがあります。このような方法には、使い慣れた命名規則を使用したり、ファイルをパスワードで保護したり、そのファイルを開く方法をユーザーに指示したりすることが含まれます（引用：パスワードで保護された Word ドキュメント）。\n\n悪意のあるファイル](https://attack.mitre.org/techniques/T1204/002)は、初回アクセスの直後に頻繁に発生しますが、侵入の他の段階で発生することもあります。例えば、敵対者が共有ディレクトリやユーザーのデスクトップにファイルを置き、ユーザーがそれをクリックすることを期待する場合などです。この活動は[Internal Spearphishing](https://attack.mitre.org/techniques/T1534)の直後にも見られることがある。"
                },
                {
                    "id": "T1204.003",
                    "name_eng": "Malicious Image",
                    "name_jp": "悪意のある画像",
                    "description_eng": "Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via [Upload Malware](https://attack.mitre.org/techniques/T1608/001), and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.(Citation: Summit Route Malicious AMIs)\n\nAdversaries may also name images a certain way to increase the chance of users mistakenly deploying an instance or container from the image (ex: [Match Legitimate Resource Name or Location](https://attack.mitre.org/techniques/T1036/005)).(Citation: Aqua Security Cloud Native Threat Report June 2021)",
                    "description_jp": "攻撃者は、実行を容易にするために、悪意のあるイメージを実行しているユーザに依存する可能性があります。Amazon Web Services (AWS)のAmazon Machine Images (AMI)、Google Cloud Platform (GCP)のイメージ、Azureのイメージ、そしてDockerのような一般的なコンテナランタイムは、バックドアすることができます。バックドアされたイメージは、[Upload Malware](https://attack.mitre.org/techniques/T1608/001)を介してパブリックリポジトリにアップロードされ、ユーザはそのイメージが悪意のあるものであることに気づかずに、そのイメージからインスタンスやコンテナをダウンロードしてデプロイする可能性があります。これにより、暗号通貨のマイニングを実行するコードなど、悪意のあるコードがインスタンスやコンテナ内で実行される可能性があります。(引用：Summit Route Malicious AMI)\n\n攻撃者はまた、ユーザーが誤ってイメージからインスタンスやコンテナをデプロイする可能性を高めるために、イメージに特定の名前を付けることがあります（例：[Match Legitimate Resource Name or Location](https://attack.mitre.org/techniques/T1036/005)）。（引用：Aqua Security Cloud Native Threat Report June 2021）"
                },
                {
                    "id": "T1204.001",
                    "name_eng": "Malicious Link",
                    "name_jp": "悪質なリンク",
                    "description_eng": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203). Links may also lead users to download files that require execution via [Malicious File](https://attack.mitre.org/techniques/T1204/002).",
                    "description_jp": "敵対者は、実行を得るために、ユーザーが悪意のあるリンクをクリックすることを信頼するかもしれない。ユーザはコードの実行につながるリンクをクリックさせるためにソーシャル・エンジニアリングを受けるかもしれない。このユーザの行動は通常[Spearphishing Link](https://attack.mitre.org/techniques/T1566/002)に続く行動として観察されます。リンクのクリックは、[Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203)によるブラウザやアプリケーションの脆弱性の悪用など、他の実行テクニックにつながることもあります。リンクはまた、[悪意のあるファイル](https://attack.mitre.org/techniques/T1204/002)を介して、実行を必要とするファイルをダウンロードさせる可能性もあります。"
                },
                {
                    "id": "T1204.004",
                    "name_eng": "Malicious Copy and Paste",
                    "name_jp": "悪意のあるコピー＆ペースト",
                    "description_eng": "An adversary may rely upon a user copying and pasting code in order to gain execution. Users may be subjected to social engineering to get them to copy and paste code directly into a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).  \n\nMalicious websites, such as those used in [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), may present fake error messages or CAPTCHA prompts that instruct users to open a terminal or the Windows Run Dialog box and execute an arbitrary command. These commands may be obfuscated using encoding or other techniques to conceal malicious intent. Once executed, the adversary will typically be able to establish a foothold on the victim's machine.(Citation: CloudSEK Lumma Stealer 2024)(Citation: Sekoia ClickFake 2025)(Citation: Reliaquest CAPTCHA 2024)(Citation: AhnLab LummaC2 2025)\n\nAdversaries may also leverage phishing emails for this purpose. When a user attempts to open an attachment, they may be presented with a fake error and offered a malicious command to paste as a solution.(Citation: Proofpoint ClickFix 2024)(Citation: AhnLab Malicioys Copy Paste 2024)\n\nTricking a user into executing a command themselves may help to bypass email filtering, browser sandboxing, or other mitigations designed to protect users against malicious downloaded files.",
                    "description_jp": "敵対者は、実行を得るためにユーザがコードをコピー＆ペーストすることに頼るかもしれない。ユーザは、[Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)に直接コードをコピー・アンド・ペーストさせるために、ソーシャル・エンジニアリングにさらされるかもしれません。  \n\nDrive-by Compromise](https://attack.mitre.org/techniques/T1189)で使用されているような悪意のあるWebサイトでは、偽のエラーメッセージやCAPTCHAプロンプトが表示され、ユーザーにターミナルやWindowsの[ファイル名を指定して実行]ダイアログボックスを開き、任意のコマンドを実行するように指示することがあります。これらのコマンドは、悪意のある意図を隠すために、エンコーディングやその他の技術を使用して難読化されている可能性があります。一旦実行されると、通常、敵対者は被害者のマシン上に足場を築くことができる。 引用：CloudSEK Lumma Stealer 2024）（引用：Sekoia ClickFake 2025）（引用：Reliaquest CAPTCHA 2024）（引用：AhnLab LummaC2 2025\n\n攻撃者はまた、この目的のためにフィッシング・メールを活用することもある。ユーザーが添付ファイルを開こうとすると、偽のエラーが表示され、解決策として悪意のあるコマンドを貼り付けるよう指示されることがある（引用：Proofpoint ClickFix 2024）（引用：AhnLab Malicioys Copy Paste 2024）。\n\nユーザーを騙して自らコマンドを実行させることは、電子メールフィルタリング、ブラウザサンドボックス、または悪意のあるダウンロードファイルからユーザーを保護するために設計されたその他の緩和策を回避するのに役立つ可能性があります。"
                }
            ]
        },
        {
            "id": "T1072",
            "name_eng": "Software Deployment Tools",
            "name_jp": "ソフトウェア・デプロイメント・ツール",
            "description_eng": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad [Cloud Administration Command](https://attack.mitre.org/techniques/T1651) on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Entra ID.(Citation: SpecterOps Lateral Movement from Azure to On-Prem AD 2020) Such services may also utilize [Web Protocols](https://attack.mitre.org/techniques/T1071/001) to communicate back to adversary owned infrastructure.(Citation: Mitiga Security Advisory: SSM Agent as Remote Access Trojan)\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
            "description_jp": "攻撃者は、企業内にインストールされた集中型のソフトウェア・スイートへアクセスし、それを使用してコマンドを実行し、ネットワーク内を横方向に移動する可能性がある。構成管理およびソフトウェアデプロイメントアプリケーションは、企業ネットワークまたはクラウド環境において、日常的な管理目的で使用されることがある。これらのシステムは、CI/CDパイプラインに統合されることもある。このようなソリューションの例としては、以下が挙げられる：SCCM、HBSS、Altiris、AWS Systems Manager、Microsoft Intune、Azure Arc、GCP Deployment Managerなどである。  \n\nネットワーク全体または企業全体のエンドポイント管理ソフトウェアにアクセスすることで、敵対者は接続されているすべてのシステム上でリモートコード実行を実現できる可能性があります。このアクセスは、他のシステムへの横移動、情報収集、またはすべてのエンドポイントのハードドライブのワイプなど、特定の効果を引き起こすために使用される可能性があります。\n\nSaaSベースの構成管理サービスは、クラウドホスティングされたインスタンス上で広範な[Cloud Administration Command](https://attack.mitre.org/techniques/T1651)を許可するだけでなく、オンプレミスのエンドポイント上で任意のコマンドを実行することもできる。例えば、Microsoft Configuration Managerでは、グローバル管理者やIntune管理者が、Entra IDに参加したオンプレミスデバイス上でSYSTEMとしてスクリプトを実行することができます(引用: SpecterOps Lateral Movement from Azure to On-Prem AD 2020)。このようなサービスでは、[Webプロトコル](https://attack.mitre.org/techniques/T1071/001)を利用して、敵が所有するインフラストラクチャに通信を戻すこともできます(引用: Mitiga Security Advisory: SSM Agent as Remote Access Trojan)。\n\nネットワークインフラストラクチャデバイスもまた、同様に敵対者に悪用される可能性のある設定管理ツールを備えている場合があります：フォーティネットのゼロデイマルウェアとカスタムマルウェア、スパイ活動で容疑のかかった中国人が使用)\n\nこのアクションに必要な権限は、システム構成によって異なります。サードパーティシステムに直接アクセスできるローカル認証情報で十分な場合もあれば、特定のドメイン認証情報が必要な場合もあります。しかし、システムは、ログインするため、または特定の機能にアクセスするために、管理者アカウントを必要とする場合があります。",
            "subtechniques": []
        },
        {
            "id": "T1559",
            "name_eng": "Inter-Process Communication",
            "name_jp": "プロセス間通信",
            "description_eng": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. \n\nAdversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002) or [Component Object Model](https://attack.mitre.org/techniques/T1559/001). Linux environments support several different IPC mechanisms, two of which being sockets and pipes.(Citation: Linux IPC) Higher level execution mediums, such as those of [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)s, may also leverage underlying IPC mechanisms. Adversaries may also use [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) to facilitate remote IPC execution.(Citation: Fireeye Hunting COM June 2019)",
            "description_jp": "攻撃者はプロセス間通信（IPC）メカニズムを悪用し、ローカルコードやコマンドを実行する可能性がある。IPCは通常、プロセス間でデータを共有したり、互いに通信したり、実行を同期したりするために使用される。IPCはまた、プロセスが周期的な待機パターンで立ち往生するデッドロックのような状況を回避するためにも一般的に使用される。\n\n攻撃者はIPCを悪用して任意のコードやコマンドを実行する可能性がある。IPCメカニズムはOSによって異なりますが、一般的にはWindowsの[Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002)や[Component Object Model](https://attack.mitre.org/techniques/T1559/001)のようなプログラミング言語/ライブラリやネイティブ・インターフェースを通してアクセスできる形で存在します。Linux環境はいくつかの異なるIPCメカニズムをサポートしており、そのうちの2つがソケットとパイプである(引用: Linux IPC)。[Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)のような、より高いレベルの実行媒体も、基礎となるIPCメカニズムを活用することができる。攻撃者はまた、リモートIPCの実行を容易にするために、[Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003)のような[Remote Services](https://attack.mitre.org/techniques/T1021)を使用することもあります。(引用：Fireeye Hunting COM 2019年6月号)",
            "subtechniques": [
                {
                    "id": "T1559.003",
                    "name_eng": "XPC Services",
                    "name_jp": "XPCサービス",
                    "description_eng": "Adversaries can provide malicious content to an XPC service daemon for local code execution. macOS uses XPC services for basic inter-process communication between various processes, such as between the XPC Service daemon and third-party application privileged helper tools. Applications can send messages to the XPC Service daemon, which runs as root, using the low-level XPC Service <code>C API</code> or the high level <code>NSXPCConnection API</code> in order to handle tasks that require elevated privileges (such as network connections). Applications are responsible for providing the protocol definition which serves as a blueprint of the XPC services. Developers typically use XPC Services to provide applications stability and privilege separation between the application client and the daemon.(Citation: creatingXPCservices)(Citation: Designing Daemons Apple Dev)\n\nAdversaries can abuse XPC services to execute malicious content. Requests for malicious execution can be passed through the application's XPC Services handler.(Citation: CVMServer Vuln)(Citation: Learn XPC Exploitation) This may also include identifying and abusing improper XPC client validation and/or poor sanitization of input parameters to conduct [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).",
                    "description_jp": "macOSは、XPCサービスデーモンとサードパーティのアプリケーション特権ヘルパーツールの間など、さまざまなプロセス間の基本的なプロセス間通信にXPCサービスを使用します。アプリケーションは、昇格特権を必要とするタスク（ネットワーク接続など）を処理するために、低レベルの XPC サービス <code>C API</code> または高レベルの <code>NSXPCConnection API</code> を使用して、root として実行される XPC サービスデーモンにメッセージを送信できます。アプリケーションは、XPC サービスの青写真となるプロトコル定義を提供する責任があります。開発者は通常、アプリケーションの安定性と、アプリケーションクライアントとデーモン間の権限分離を提供するためにXPCサービスを使用します。(引用：CreatingXPCservices)(引用：Designing Daemons Apple Dev)\n\n攻撃者はXPCサービスを悪用して悪意のあるコンテンツを実行することができます。(引用: CVMServer 脆弱性)(引用: XPC Exploitation を学ぶ) これはまた、不適切な XPC クライアントの検証や、入力パラメータの不十分なサニタイズを特定し悪用することで、[特権昇格のための悪用](https://attack.mitre.org/techniques/T1068) を行うことも含まれます。"
                },
                {
                    "id": "T1559.002",
                    "name_eng": "Dynamic Data Exchange",
                    "name_jp": "ダイナミックなデータ交換",
                    "description_eng": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.\n\nObject Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by [Component Object Model](https://attack.mitre.org/techniques/T1559/001), DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.(Citation: BleepingComputer DDE Disabled in Word Dec 2017)(Citation: Microsoft ADV170021 Dec 2017)(Citation: Microsoft DDE Advisory Nov 2017)\n\nMicrosoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via [Phishing](https://attack.mitre.org/techniques/T1566) campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros.(Citation: SensePost PS DDE May 2016)(Citation: Kettle CSV DDE Aug 2014)(Citation: Enigma Reviving DDE Jan 2018)(Citation: SensePost MacroLess DDE Oct 2017) Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.(Citation: OWASP CSV Injection)(Citation: CSV Excel Macro Injection )\n\nDDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). DDE execution can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)",
                    "description_jp": "攻撃者は Windows Dynamic Data Exchange (DDE) を使用して任意のコマンドを実行する可能性がある。DDE は、アプリケーション間の 1 回限りまたは継続的なプロセス間通信 (IPC) のためのクライアントサーバープロトコルです。リンクが確立されると、アプリケーションは文字列、ウォーム データ リンク (データ項目が変更されたときの通知)、ホット データ リンク (データ項目に対する変更の複製)、およびコマンド実行要求からなるトランザクションを自律的に交換できます。\n\nObject Linking and Embedding (OLE)、つまりドキュメント間でデータをリンクする機能は、もともとDDEによって実装されていました。Component Object Model](https://attack.mitre.org/techniques/T1559/001)に取って代わられたにもかかわらず、Windows 10とMicrosoft Office 2016の大部分ではレジストリキーを介してDDEが有効になっている場合がある(引用：BleepingComputer DDE Disabled in Word Dec 2017)(Citation: Microsoft ADV170021 Dec 2017)(Citation: Microsoft DDE Advisory Nov 2017)\n\nMicrosoft Office ドキュメントは、直接または埋め込みファイルを介して DDE コマンドで汚染され、[フィッシング](https://attack.mitre.org/techniques/T1566) キャンペーンまたはホストされた Web コンテンツ経由で実行を配信するために使用され、Visual Basic for Applications (VBA) マクロの使用を回避することができます。(引用: SensePost PS DDE 2016年5月)(引用: Kettle CSV DDE 2014年8月)(引用: Enigma Reviving DDE 2018年1月)(引用: SensePost MacroLess DDE 2017年10月) 同様に、敵対者は、Windowsのスプレッドシートプログラムを通じて開くことを意図したCSVファイル内にDDE数式を埋め込む方法で、被害者のデバイス上でアプリケーションおよび/またはコマンドを実行するペイロードを感染させる可能性があります(引用: OWASP CSV Injection)(引用: CSV Excel Macro Injection )\n\nDDE は、[Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)に直接アクセスできない、侵害されたマシン上で動作する敵対者によっても活用される可能性があります。DDEの実行は、[Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM)などの[リモートサービス](https://attack.mitre.org/techniques/T1021)を介してリモートから呼び出すことができます(引用: Fireeye Hunting COM 2019年6月号)。"
                },
                {
                    "id": "T1559.001",
                    "name_eng": "Component Object Model",
                    "name_jp": "コンポーネント・オブジェクト・モデル",
                    "description_eng": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) Remote COM execution is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as  [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)\n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).(Citation: Microsoft COM) Specific COM objects also exist to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)",
                    "description_jp": "攻撃者は、Windows コンポーネント・オブジェクト・モデル（COM）を使用してローカル・コードを実行する可能性があります。COMは、ネイティブWindowsアプリケーションプログラミングインタフェース（API）のプロセス間通信（IPC）コンポーネントであり、ソフトウェアオブジェクト、または1つ以上のインタフェースを実装する実行可能コード間の相互作用を可能にします（引用：Fireeye Hunting COM June 2019） COMを通じて、クライアントオブジェクトは、一般的にバイナリのダイナミックリンクライブラリ（DLL）または実行可能ファイル（EXE）であるサーバーオブジェクトのメソッドを呼び出すことができます。(引用：Microsoft COM) リモートCOMの実行は、[Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM)などの[リモートサービス](https://attack.mitre.org/techniques/T1021)によって促進される。(引用：Fireeye Hunting COM 2019年6月号)\n\nC、C++、Java、[Visual Basic](https://attack.mitre.org/techniques/T1059/005)などのさまざまなプログラミング言語を介して任意の実行を呼び出すために悪用できるさまざまなCOMインタフェースが公開されています(引用: Microsoft COM) 特定のCOMオブジェクトは、[スケジュールされたタスク/ジョブ](https://attack.mitre.org/techniques/T1053)の作成、ファイルレスのダウンロード/実行、特権の昇格や永続性に関するその他の敵対的な動作など、コードの実行を超えた機能を直接実行するためにも存在します(引用: Fireeye Hunting COM 2019年6月号)(引用: ProjectZero File Write EoP Apr 2018)"
                }
            ]
        },
        {
            "id": "T1203",
            "name_eng": "Exploitation for Client Execution",
            "name_jp": "クライアント実行のための悪用",
            "description_eng": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
            "description_jp": "攻撃者は、クライアント・アプリケーションのソフトウェアの脆弱性を悪用してコードを実行する可能性があります。脆弱性は、安全でないコーディング方法によってソフトウェアに存在する可能性があり、予期しない動作につながる可能性があります。攻撃者は、任意のコード実行を目的とした標的型攻撃により、特定の脆弱性を利用することができます。多くの場合、攻撃ツールキットにとって最も価値のあるエクスプロイトは、リモートシステム上でコード実行を得るために使用できるものです。ユーザは、仕事をするために一般的に使用するアプリケーションに関連するファイルが表示されることを期待するため、その有用性の高さからエクスプロイトの研究開発にとって有用なターゲットとなります。\n\nいくつかのタイプが存在する：\n\n### ブラウザベースのエクスプロイト\n\nウェブブラウザは、[Drive-by Compromise](https://attack.mitre.org/techniques/T1189)や[Spearphishing Link](https://attack.mitre.org/techniques/T1566/002)を介した一般的な標的です。エンドポイント・システムは、通常のウェブ・ブラウジングを通じて、あるいはスピアフィッシング・メールに記載された、ウェブ・ブラウザを悪用するために敵が管理するサイトへのリンクによって、特定のユーザーが標的にされることで侵害される可能性があります。このようなサイトでは、エクスプロイトが実行されるためにユーザがアクションを起こす必要はないことが多い。\n\n### オフィスアプリケーション\n\nMicrosoft Officeなどの一般的なオフィスアプリケーションや生産性アプリケーションも、[フィッシング](https://attack.mitre.org/techniques/T1566)の標的になっています。悪意のあるファイルは、添付ファイルとして直接送信されるか、ダウンロード用のリンクを通じて送信されます。これらは、エクスプロイトを実行するために、ユーザがドキュメントやファイルを開くことを要求します。\n\n### 一般的なサードパーティ製アプリケーション\n\nターゲットとなるネットワークに配備されているソフトウェアの一部として、一般的に見受けられるその他のアプリケーションも悪用に使用される可能性があります。Adobe Reader や Flash のようなアプリケーションは、企業環境では一般的であり、システムへのアクセスを試みる敵対者に日常的に狙われています。ソフトウェアや脆弱性の性質にもよりますが、ブラウザー上で悪用されるものもあれば、ユーザーがファイルを開くことを要求するものもあります。例えば、一部のFlashエクスプロイトは、Microsoft Office文書内のオブジェクトとして配信されている。",
            "subtechniques": []
        },
        {
            "id": "T1569",
            "name_eng": "System Services",
            "name_jp": "システムサービス",
            "description_eng": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence ([Create or Modify System Process](https://attack.mitre.org/techniques/T1543)), but adversaries can also abuse services for one-time or temporary execution.",
            "description_jp": "攻撃者は、コマンドやプログラムを実行するために、システムサービスやデーモンを悪用する可能性があります。攻撃者は、ローカルまたはリモートでサービスと相互作用したり、サービスを作成したりすることで、悪意のあるコンテンツを実行することができます。多くのサービスはブート時に実行されるように設定されており、永続性([Create or Modify System Process](https://attack.mitre.org/techniques/T1543))を達成するのに役立ちますが、敵対者は1回限りの実行や一時的な実行のためにサービスを悪用することもできます。",
            "subtechniques": [
                {
                    "id": "T1569.003",
                    "name_eng": "Systemctl",
                    "name_jp": "システムctl",
                    "description_eng": "Adversaries may abuse systemctl to execute commands or programs. Systemctl is the primary interface for systemd, the Linux init system and service manager. Typically invoked from a shell, Systemctl can also be integrated into scripts or applications.   \n\nAdversaries may use systemctl to execute commands or programs as [Systemd Service](https://attack.mitre.org/techniques/T1543/002)s. Common subcommands include: `systemctl start`, `systemctl stop`, `systemctl enable`, `systemctl disable`, and `systemctl status`.(Citation: Red Hat Systemctl 2022)",
                    "description_jp": "攻撃者は systemctl を悪用してコマンドやプログラムを実行する可能性がある。Systemctl は、Linux の init システムでありサービスマネージャである systemd の主要なインターフェースです。通常はシェルから呼び出されますが、Systemctl はスクリプトやアプリケーションに統合することもできます。   \n\n攻撃者は systemctl を使って [Systemd Service](https://attack.mitre.org/techniques/T1543/002) としてコマンドやプログラムを実行するかもしれません。一般的なサブコマンドは以下の通りです：systemctl start`、`systemctl stop`、`systemctl enable`、`systemctl disable`、`systemctl status`などだ(引用: Red Hat Systemctl 2022)"
                },
                {
                    "id": "T1569.002",
                    "name_eng": "Service Execution",
                    "name_jp": "サービス実行",
                    "description_eng": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services.(Citation: Microsoft Service Control Manager) The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and [Net](https://attack.mitre.org/software/S0039).\n\n[PsExec](https://attack.mitre.org/software/S0029) can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.(Citation: Russinovich Sysinternals) Tools such as [PsExec](https://attack.mitre.org/software/S0029) and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with [Windows Service](https://attack.mitre.org/techniques/T1543/003) during service persistence or privilege escalation.",
                    "description_jp": "攻撃者はWindowsサービスコントロールマネージャーを悪用し、悪意のあるコマンドやペイロードを実行する可能性がある。Windowsサービスコントロールマネージャ(<code>services.exe</code>)は、サービスを管理・操作するためのインターフェースである(引用: Microsoft Service Control Manager)。サービスコントロールマネージャは、<code>sc.exe</code>や[Net](https://attack.mitre.org/software/S0039)などのシステムユーティリティだけでなく、GUIコンポーネントからもアクセスできる。\n\n(引用: Russinovich Sysinternals) [PsExec](https://attack.mitre.org/software/S0029) や <code>sc.exe</code> のようなツールは、引数としてリモートサーバーを受け入れることができ、リモート実行を行うために使用することができます。\n\n攻撃者はこれらのメカニズムを利用して悪意のあるコンテンツを実行する可能性があります。これは、新しいサービスを実行するか、変更されたサービスを実行することで可能です。このテクニックは、サービスの永続化や特権昇格の際に[Windows Service](https://attack.mitre.org/techniques/T1543/003)と組み合わせて使用される実行です。"
                },
                {
                    "id": "T1569.001",
                    "name_eng": "Launchctl",
                    "name_jp": "Launchctl",
                    "description_eng": "Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.(Citation: Launchctl Man)\n\nAdversaries use launchctl to execute commands and programs as [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s or [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s. Common subcommands include: <code>launchctl load</code>,<code>launchctl unload</code>, and <code>launchctl start</code>. Adversaries can use scripts or manually run the commands <code>launchctl load -w \"%s/Library/LaunchAgents/%s\"</code> or <code>/bin/launchctl load</code> to execute [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s or [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s.(Citation: Sofacy Komplex Trojan)(Citation: 20 macOS Common Tools and Techniques)",
                    "description_jp": "攻撃者はlaunchctlを悪用してコマンドやプログラムを実行する可能性がある。Launchctlは、macOSのサービス管理フレームワークであるlaunchdとインターフェースをとる。Launchctlは、コマンドライン、インタラクティブ、あるいは標準入力からのリダイレクトでサブコマンドを実行することができる。 引用：Launchctl Man\n\n攻撃者はlaunchctlを使って、[Launch Agent](https://attack.mitre.org/techniques/T1543/001)や[Launch Daemon](https://attack.mitre.org/techniques/T1543/004)としてコマンドやプログラムを実行する。一般的なサブコマンドは以下の通りです：<code>launchctl load</code>、<code>launchctl unload</code>、<code>launchctl start</code>。攻撃者は、スクリプトを使用するか、コマンド <code>launchctl load -w \"%s/Library/LaunchAgents/%s\"</code> または <code>/bin/launchctl load</code> を手動で実行して、[Launch Agent](https://attack.mitre.org/techniques/T1543/001) または [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) を実行することができます。(引用: Sofacy Komplex Trojan)(引用: 20 macOS Common Tools and Techniques)"
                }
            ]
        },
        {
            "id": "T1651",
            "name_eng": "Cloud Administration Command",
            "name_jp": "クラウド管理コマンド",
            "description_eng": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. (Citation: AWS Systems Manager Run Command)(Citation: Microsoft Run Command)\n\nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment’s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) to execute commands in connected virtual machines.(Citation: MSTIC Nobelium Oct 2021)",
            "description_jp": "攻撃者は、クラウド管理サービスを悪用して仮想マシン内でコマンドを実行する可能性があります。AWS Systems Manager、Azure RunCommand、Runbooksなどのリソースは、インストールされた仮想マシンエージェントを活用することで、ユーザーが仮想マシン内でスクリプトをリモート実行することを可能にする。(引用：AWS Systems Manager Run Command）（引用：Microsoft Run Command）\n\n敵対者がクラウド環境への管理者アクセスを獲得した場合、クラウド管理サービスを悪用して環境の仮想マシンでコマンドを実行できる可能性があります。さらに、サービスプロバイダまたは委任された管理者アカウントを侵害する敵対者も同様に、[Trusted Relationship](https://attack.mitre.org/techniques/T1199)を活用して、接続された仮想マシンでコマンドを実行できる可能性があります。(引用：MSTIC Nobelium Oct 2021)",
            "subtechniques": []
        },
        {
            "id": "T1648",
            "name_eng": "Serverless Execution",
            "name_jp": "サーバーレス実行",
            "description_eng": "Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers. \n\nAdversaries may abuse these resources in various ways as a means of executing arbitrary commands. For example, adversaries may use serverless functions to execute malicious code, such as crypto-mining malware (i.e. [Resource Hijacking](https://attack.mitre.org/techniques/T1496)).(Citation: Cado Security Denonia) Adversaries may also create functions that enable further compromise of the cloud environment. For example, an adversary may use the `IAM:PassRole` permission in AWS or the `iam.serviceAccounts.actAs` permission in Google Cloud to add [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) to a serverless cloud function, which may then be able to perform actions the original user cannot.(Citation: Rhino Security Labs AWS Privilege Escalation)(Citation: Rhingo Security Labs GCP Privilege Escalation)\n\nServerless functions can also be invoked in response to cloud events (i.e. [Event Triggered Execution](https://attack.mitre.org/techniques/T1546)), potentially enabling persistent execution over time. For example, in AWS environments, an adversary may create a Lambda function that automatically adds [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) to a user and a corresponding CloudWatch events rule that invokes that function whenever a new user is created.(Citation: Backdooring an AWS account) This is also possible in many cloud-based office application suites. For example, in Microsoft 365 environments, an adversary may create a Power Automate workflow that forwards all emails a user receives or creates anonymous sharing links whenever a user is granted access to a document in SharePoint.(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft DART Case Report 001) In Google Workspace environments, they may instead create an Apps Script that exfiltrates a user's data when they open a file.(Citation: Cloud Hack Tricks GWS Apps Script)(Citation: OWN-CERT Google App Script 2024)",
            "description_jp": "攻撃者はサーバーレス・コンピューティング、統合、自動化サービスを悪用して、クラウド環境で任意のコードを実行する可能性がある。多くのクラウドプロバイダーは、コンピュートエンジン、アプリケーション統合サービス、ウェブサーバーなど、様々なサーバーレスリソースを提供している。\n\n攻撃者は、任意のコマンドを実行する手段として、様々な方法でこれらのリソースを悪用する可能性がある。例えば、敵対者はサーバーレスの機能を利用して、暗号マイニングマルウェアなどの悪意のあるコードを実行する可能性があります（すなわち、[Resource Hijacking](https://attack.mitre.org/techniques/T1496)）。（引用：Cado Security Denonia）また、敵対者はクラウド環境のさらなる侵害を可能にする機能を作成する可能性もあります。例えば、敵はAWSの`IAM:PassRole`権限やGoogle Cloudの`iam.serviceAccounts.actAs`権限を使用して、サーバーレスのクラウド機能に[追加のクラウドロール](https://attack.mitre.org/techniques/T1098/003)を追加し、元のユーザーができないアクションを実行できるようにすることができる。(引用: Rhino Security Labs AWS Privilege Escalation)(Citation: Rhingo Security Labs GCP Privilege Escalation)\n\nサーバーレスの関数は、クラウドのイベントに応じて呼び出すこともでき（すなわち[Event Triggered Execution](https://attack.mitre.org/techniques/T1546)）、時間経過に伴う永続的な実行を可能にする可能性がある。例えば、AWS環境では、敵はユーザーに[Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001)を自動的に追加するLambda関数と、新しいユーザーが作成されるたびにその関数を呼び出す対応するCloudWatchイベントルールを作成することができる(引用：Backdooring an AWS account)。例えば、Microsoft 365 環境では、敵対者は、ユーザーが SharePoint のドキュメントへのアクセスを許可されるたびに、ユーザーが受信するすべての電子メールを転送したり、匿名共有リンクを作成したりする Power Automate ワークフローを作成する可能性がある(引用：Varonis Power Automate Data Exfiltration)(引用：Microsoft DART Case Report 001) Google Workspace 環境では、代わりに、ファイルを開いたときにユーザーのデータを流出させる Apps Script を作成する可能性がある(引用：Cloud Hack Tricks GWS Apps Script)(引用：OWN-CERT Google App Script 2024)",
            "subtechniques": []
        }
    ]
}